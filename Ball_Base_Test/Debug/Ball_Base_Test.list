
Ball_Base_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c894  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000011ac  0800c9d8  0800c9d8  0001c9d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000018  0800db84  0800db84  0001db84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800db9c  0800db9c  0001db9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000001d4  20000004  0800dba0  00020004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 BLE_DRIVER_CONTEXT 00000011  200001d8  0800dd74  000201d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 SYSTEM_DRIVER_CONTEXT 00000011  200001ec  0800dd85  000201ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .bss          00000c30  20000200  0800dd96  00020200  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  20000e30  0800dd96  00020e30  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  000201fd  2**0
                  CONTENTS, READONLY
 11 MAPPING_TABLE 00000028  20030000  20030000  00030000  2**2
                  ALLOC
 12 MB_MEM1       000001bb  20030028  20030028  00030000  2**2
                  ALLOC
 13 MB_MEM2       0000086e  200301e4  200301e4  00030000  2**2
                  ALLOC
 14 .comment      00000043  00000000  00000000  0002022d  2**0
                  CONTENTS, READONLY
 15 .debug_info   00047dcf  00000000  00000000  00020270  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 00007a09  00000000  00000000  0006803f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00001748  00000000  00000000  0006fa48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 000011fb  00000000  00000000  00071190  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  00024d42  00000000  00000000  0007238b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   00022974  00000000  00000000  000970cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    000b27bd  00000000  00000000  000b9a41  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_frame  000088e4  00000000  00000000  0016c200  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 0000004c  00000000  00000000  00174ae4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000200 	.word	0x20000200
 800015c:	00000000 	.word	0x00000000
 8000160:	0800c9bc 	.word	0x0800c9bc

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000204 	.word	0x20000204
 800017c:	0800c9bc 	.word	0x0800c9bc

08000180 <memchr>:
 8000180:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000184:	2a10      	cmp	r2, #16
 8000186:	db2b      	blt.n	80001e0 <memchr+0x60>
 8000188:	f010 0f07 	tst.w	r0, #7
 800018c:	d008      	beq.n	80001a0 <memchr+0x20>
 800018e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000192:	3a01      	subs	r2, #1
 8000194:	428b      	cmp	r3, r1
 8000196:	d02d      	beq.n	80001f4 <memchr+0x74>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	b342      	cbz	r2, 80001f0 <memchr+0x70>
 800019e:	d1f6      	bne.n	800018e <memchr+0xe>
 80001a0:	b4f0      	push	{r4, r5, r6, r7}
 80001a2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001a6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001aa:	f022 0407 	bic.w	r4, r2, #7
 80001ae:	f07f 0700 	mvns.w	r7, #0
 80001b2:	2300      	movs	r3, #0
 80001b4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001b8:	3c08      	subs	r4, #8
 80001ba:	ea85 0501 	eor.w	r5, r5, r1
 80001be:	ea86 0601 	eor.w	r6, r6, r1
 80001c2:	fa85 f547 	uadd8	r5, r5, r7
 80001c6:	faa3 f587 	sel	r5, r3, r7
 80001ca:	fa86 f647 	uadd8	r6, r6, r7
 80001ce:	faa5 f687 	sel	r6, r5, r7
 80001d2:	b98e      	cbnz	r6, 80001f8 <memchr+0x78>
 80001d4:	d1ee      	bne.n	80001b4 <memchr+0x34>
 80001d6:	bcf0      	pop	{r4, r5, r6, r7}
 80001d8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001dc:	f002 0207 	and.w	r2, r2, #7
 80001e0:	b132      	cbz	r2, 80001f0 <memchr+0x70>
 80001e2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e6:	3a01      	subs	r2, #1
 80001e8:	ea83 0301 	eor.w	r3, r3, r1
 80001ec:	b113      	cbz	r3, 80001f4 <memchr+0x74>
 80001ee:	d1f8      	bne.n	80001e2 <memchr+0x62>
 80001f0:	2000      	movs	r0, #0
 80001f2:	4770      	bx	lr
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr
 80001f8:	2d00      	cmp	r5, #0
 80001fa:	bf06      	itte	eq
 80001fc:	4635      	moveq	r5, r6
 80001fe:	3803      	subeq	r0, #3
 8000200:	3807      	subne	r0, #7
 8000202:	f015 0f01 	tst.w	r5, #1
 8000206:	d107      	bne.n	8000218 <memchr+0x98>
 8000208:	3001      	adds	r0, #1
 800020a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800020e:	bf02      	ittt	eq
 8000210:	3001      	addeq	r0, #1
 8000212:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000216:	3001      	addeq	r0, #1
 8000218:	bcf0      	pop	{r4, r5, r6, r7}
 800021a:	3801      	subs	r0, #1
 800021c:	4770      	bx	lr
 800021e:	bf00      	nop

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <__aeabi_drsub>:
 8000230:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000234:	e002      	b.n	800023c <__adddf3>
 8000236:	bf00      	nop

08000238 <__aeabi_dsub>:
 8000238:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800023c <__adddf3>:
 800023c:	b530      	push	{r4, r5, lr}
 800023e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000242:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000246:	ea94 0f05 	teq	r4, r5
 800024a:	bf08      	it	eq
 800024c:	ea90 0f02 	teqeq	r0, r2
 8000250:	bf1f      	itttt	ne
 8000252:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000256:	ea55 0c02 	orrsne.w	ip, r5, r2
 800025a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800025e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000262:	f000 80e2 	beq.w	800042a <__adddf3+0x1ee>
 8000266:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800026a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800026e:	bfb8      	it	lt
 8000270:	426d      	neglt	r5, r5
 8000272:	dd0c      	ble.n	800028e <__adddf3+0x52>
 8000274:	442c      	add	r4, r5
 8000276:	ea80 0202 	eor.w	r2, r0, r2
 800027a:	ea81 0303 	eor.w	r3, r1, r3
 800027e:	ea82 0000 	eor.w	r0, r2, r0
 8000282:	ea83 0101 	eor.w	r1, r3, r1
 8000286:	ea80 0202 	eor.w	r2, r0, r2
 800028a:	ea81 0303 	eor.w	r3, r1, r3
 800028e:	2d36      	cmp	r5, #54	; 0x36
 8000290:	bf88      	it	hi
 8000292:	bd30      	pophi	{r4, r5, pc}
 8000294:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000298:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800029c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002a0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002a4:	d002      	beq.n	80002ac <__adddf3+0x70>
 80002a6:	4240      	negs	r0, r0
 80002a8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ac:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002b4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b8:	d002      	beq.n	80002c0 <__adddf3+0x84>
 80002ba:	4252      	negs	r2, r2
 80002bc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c0:	ea94 0f05 	teq	r4, r5
 80002c4:	f000 80a7 	beq.w	8000416 <__adddf3+0x1da>
 80002c8:	f1a4 0401 	sub.w	r4, r4, #1
 80002cc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d0:	db0d      	blt.n	80002ee <__adddf3+0xb2>
 80002d2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002d6:	fa22 f205 	lsr.w	r2, r2, r5
 80002da:	1880      	adds	r0, r0, r2
 80002dc:	f141 0100 	adc.w	r1, r1, #0
 80002e0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002e4:	1880      	adds	r0, r0, r2
 80002e6:	fa43 f305 	asr.w	r3, r3, r5
 80002ea:	4159      	adcs	r1, r3
 80002ec:	e00e      	b.n	800030c <__adddf3+0xd0>
 80002ee:	f1a5 0520 	sub.w	r5, r5, #32
 80002f2:	f10e 0e20 	add.w	lr, lr, #32
 80002f6:	2a01      	cmp	r2, #1
 80002f8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002fc:	bf28      	it	cs
 80002fe:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000302:	fa43 f305 	asr.w	r3, r3, r5
 8000306:	18c0      	adds	r0, r0, r3
 8000308:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800030c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000310:	d507      	bpl.n	8000322 <__adddf3+0xe6>
 8000312:	f04f 0e00 	mov.w	lr, #0
 8000316:	f1dc 0c00 	rsbs	ip, ip, #0
 800031a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800031e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000322:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000326:	d31b      	bcc.n	8000360 <__adddf3+0x124>
 8000328:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800032c:	d30c      	bcc.n	8000348 <__adddf3+0x10c>
 800032e:	0849      	lsrs	r1, r1, #1
 8000330:	ea5f 0030 	movs.w	r0, r0, rrx
 8000334:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000338:	f104 0401 	add.w	r4, r4, #1
 800033c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000340:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000344:	f080 809a 	bcs.w	800047c <__adddf3+0x240>
 8000348:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800034c:	bf08      	it	eq
 800034e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000352:	f150 0000 	adcs.w	r0, r0, #0
 8000356:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800035a:	ea41 0105 	orr.w	r1, r1, r5
 800035e:	bd30      	pop	{r4, r5, pc}
 8000360:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000364:	4140      	adcs	r0, r0
 8000366:	eb41 0101 	adc.w	r1, r1, r1
 800036a:	3c01      	subs	r4, #1
 800036c:	bf28      	it	cs
 800036e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000372:	d2e9      	bcs.n	8000348 <__adddf3+0x10c>
 8000374:	f091 0f00 	teq	r1, #0
 8000378:	bf04      	itt	eq
 800037a:	4601      	moveq	r1, r0
 800037c:	2000      	moveq	r0, #0
 800037e:	fab1 f381 	clz	r3, r1
 8000382:	bf08      	it	eq
 8000384:	3320      	addeq	r3, #32
 8000386:	f1a3 030b 	sub.w	r3, r3, #11
 800038a:	f1b3 0220 	subs.w	r2, r3, #32
 800038e:	da0c      	bge.n	80003aa <__adddf3+0x16e>
 8000390:	320c      	adds	r2, #12
 8000392:	dd08      	ble.n	80003a6 <__adddf3+0x16a>
 8000394:	f102 0c14 	add.w	ip, r2, #20
 8000398:	f1c2 020c 	rsb	r2, r2, #12
 800039c:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a0:	fa21 f102 	lsr.w	r1, r1, r2
 80003a4:	e00c      	b.n	80003c0 <__adddf3+0x184>
 80003a6:	f102 0214 	add.w	r2, r2, #20
 80003aa:	bfd8      	it	le
 80003ac:	f1c2 0c20 	rsble	ip, r2, #32
 80003b0:	fa01 f102 	lsl.w	r1, r1, r2
 80003b4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b8:	bfdc      	itt	le
 80003ba:	ea41 010c 	orrle.w	r1, r1, ip
 80003be:	4090      	lslle	r0, r2
 80003c0:	1ae4      	subs	r4, r4, r3
 80003c2:	bfa2      	ittt	ge
 80003c4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c8:	4329      	orrge	r1, r5
 80003ca:	bd30      	popge	{r4, r5, pc}
 80003cc:	ea6f 0404 	mvn.w	r4, r4
 80003d0:	3c1f      	subs	r4, #31
 80003d2:	da1c      	bge.n	800040e <__adddf3+0x1d2>
 80003d4:	340c      	adds	r4, #12
 80003d6:	dc0e      	bgt.n	80003f6 <__adddf3+0x1ba>
 80003d8:	f104 0414 	add.w	r4, r4, #20
 80003dc:	f1c4 0220 	rsb	r2, r4, #32
 80003e0:	fa20 f004 	lsr.w	r0, r0, r4
 80003e4:	fa01 f302 	lsl.w	r3, r1, r2
 80003e8:	ea40 0003 	orr.w	r0, r0, r3
 80003ec:	fa21 f304 	lsr.w	r3, r1, r4
 80003f0:	ea45 0103 	orr.w	r1, r5, r3
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	f1c4 040c 	rsb	r4, r4, #12
 80003fa:	f1c4 0220 	rsb	r2, r4, #32
 80003fe:	fa20 f002 	lsr.w	r0, r0, r2
 8000402:	fa01 f304 	lsl.w	r3, r1, r4
 8000406:	ea40 0003 	orr.w	r0, r0, r3
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	fa21 f004 	lsr.w	r0, r1, r4
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	f094 0f00 	teq	r4, #0
 800041a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800041e:	bf06      	itte	eq
 8000420:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000424:	3401      	addeq	r4, #1
 8000426:	3d01      	subne	r5, #1
 8000428:	e74e      	b.n	80002c8 <__adddf3+0x8c>
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf18      	it	ne
 8000430:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000434:	d029      	beq.n	800048a <__adddf3+0x24e>
 8000436:	ea94 0f05 	teq	r4, r5
 800043a:	bf08      	it	eq
 800043c:	ea90 0f02 	teqeq	r0, r2
 8000440:	d005      	beq.n	800044e <__adddf3+0x212>
 8000442:	ea54 0c00 	orrs.w	ip, r4, r0
 8000446:	bf04      	itt	eq
 8000448:	4619      	moveq	r1, r3
 800044a:	4610      	moveq	r0, r2
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	ea91 0f03 	teq	r1, r3
 8000452:	bf1e      	ittt	ne
 8000454:	2100      	movne	r1, #0
 8000456:	2000      	movne	r0, #0
 8000458:	bd30      	popne	{r4, r5, pc}
 800045a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800045e:	d105      	bne.n	800046c <__adddf3+0x230>
 8000460:	0040      	lsls	r0, r0, #1
 8000462:	4149      	adcs	r1, r1
 8000464:	bf28      	it	cs
 8000466:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800046a:	bd30      	pop	{r4, r5, pc}
 800046c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000470:	bf3c      	itt	cc
 8000472:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000476:	bd30      	popcc	{r4, r5, pc}
 8000478:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800047c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000480:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000484:	f04f 0000 	mov.w	r0, #0
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf1a      	itte	ne
 8000490:	4619      	movne	r1, r3
 8000492:	4610      	movne	r0, r2
 8000494:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000498:	bf1c      	itt	ne
 800049a:	460b      	movne	r3, r1
 800049c:	4602      	movne	r2, r0
 800049e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004a2:	bf06      	itte	eq
 80004a4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a8:	ea91 0f03 	teqeq	r1, r3
 80004ac:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004b0:	bd30      	pop	{r4, r5, pc}
 80004b2:	bf00      	nop

080004b4 <__aeabi_ui2d>:
 80004b4:	f090 0f00 	teq	r0, #0
 80004b8:	bf04      	itt	eq
 80004ba:	2100      	moveq	r1, #0
 80004bc:	4770      	bxeq	lr
 80004be:	b530      	push	{r4, r5, lr}
 80004c0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004c4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c8:	f04f 0500 	mov.w	r5, #0
 80004cc:	f04f 0100 	mov.w	r1, #0
 80004d0:	e750      	b.n	8000374 <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_i2d>:
 80004d4:	f090 0f00 	teq	r0, #0
 80004d8:	bf04      	itt	eq
 80004da:	2100      	moveq	r1, #0
 80004dc:	4770      	bxeq	lr
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004e8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004ec:	bf48      	it	mi
 80004ee:	4240      	negmi	r0, r0
 80004f0:	f04f 0100 	mov.w	r1, #0
 80004f4:	e73e      	b.n	8000374 <__adddf3+0x138>
 80004f6:	bf00      	nop

080004f8 <__aeabi_f2d>:
 80004f8:	0042      	lsls	r2, r0, #1
 80004fa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004fe:	ea4f 0131 	mov.w	r1, r1, rrx
 8000502:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000506:	bf1f      	itttt	ne
 8000508:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800050c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000510:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000514:	4770      	bxne	lr
 8000516:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800051a:	bf08      	it	eq
 800051c:	4770      	bxeq	lr
 800051e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000522:	bf04      	itt	eq
 8000524:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000528:	4770      	bxeq	lr
 800052a:	b530      	push	{r4, r5, lr}
 800052c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000530:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000534:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000538:	e71c      	b.n	8000374 <__adddf3+0x138>
 800053a:	bf00      	nop

0800053c <__aeabi_ul2d>:
 800053c:	ea50 0201 	orrs.w	r2, r0, r1
 8000540:	bf08      	it	eq
 8000542:	4770      	bxeq	lr
 8000544:	b530      	push	{r4, r5, lr}
 8000546:	f04f 0500 	mov.w	r5, #0
 800054a:	e00a      	b.n	8000562 <__aeabi_l2d+0x16>

0800054c <__aeabi_l2d>:
 800054c:	ea50 0201 	orrs.w	r2, r0, r1
 8000550:	bf08      	it	eq
 8000552:	4770      	bxeq	lr
 8000554:	b530      	push	{r4, r5, lr}
 8000556:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800055a:	d502      	bpl.n	8000562 <__aeabi_l2d+0x16>
 800055c:	4240      	negs	r0, r0
 800055e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000562:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000566:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800056a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800056e:	f43f aed8 	beq.w	8000322 <__adddf3+0xe6>
 8000572:	f04f 0203 	mov.w	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800058a:	f1c2 0320 	rsb	r3, r2, #32
 800058e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000592:	fa20 f002 	lsr.w	r0, r0, r2
 8000596:	fa01 fe03 	lsl.w	lr, r1, r3
 800059a:	ea40 000e 	orr.w	r0, r0, lr
 800059e:	fa21 f102 	lsr.w	r1, r1, r2
 80005a2:	4414      	add	r4, r2
 80005a4:	e6bd      	b.n	8000322 <__adddf3+0xe6>
 80005a6:	bf00      	nop

080005a8 <__aeabi_dmul>:
 80005a8:	b570      	push	{r4, r5, r6, lr}
 80005aa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ae:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005b2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005b6:	bf1d      	ittte	ne
 80005b8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005bc:	ea94 0f0c 	teqne	r4, ip
 80005c0:	ea95 0f0c 	teqne	r5, ip
 80005c4:	f000 f8de 	bleq	8000784 <__aeabi_dmul+0x1dc>
 80005c8:	442c      	add	r4, r5
 80005ca:	ea81 0603 	eor.w	r6, r1, r3
 80005ce:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005d2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005d6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005da:	bf18      	it	ne
 80005dc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005e4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005e8:	d038      	beq.n	800065c <__aeabi_dmul+0xb4>
 80005ea:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ee:	f04f 0500 	mov.w	r5, #0
 80005f2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005f6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005fa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005fe:	f04f 0600 	mov.w	r6, #0
 8000602:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000606:	f09c 0f00 	teq	ip, #0
 800060a:	bf18      	it	ne
 800060c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000610:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000614:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000618:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800061c:	d204      	bcs.n	8000628 <__aeabi_dmul+0x80>
 800061e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000622:	416d      	adcs	r5, r5
 8000624:	eb46 0606 	adc.w	r6, r6, r6
 8000628:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800062c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000630:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000634:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000638:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800063c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000640:	bf88      	it	hi
 8000642:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000646:	d81e      	bhi.n	8000686 <__aeabi_dmul+0xde>
 8000648:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800064c:	bf08      	it	eq
 800064e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000652:	f150 0000 	adcs.w	r0, r0, #0
 8000656:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000660:	ea46 0101 	orr.w	r1, r6, r1
 8000664:	ea40 0002 	orr.w	r0, r0, r2
 8000668:	ea81 0103 	eor.w	r1, r1, r3
 800066c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000670:	bfc2      	ittt	gt
 8000672:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000676:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800067a:	bd70      	popgt	{r4, r5, r6, pc}
 800067c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000680:	f04f 0e00 	mov.w	lr, #0
 8000684:	3c01      	subs	r4, #1
 8000686:	f300 80ab 	bgt.w	80007e0 <__aeabi_dmul+0x238>
 800068a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800068e:	bfde      	ittt	le
 8000690:	2000      	movle	r0, #0
 8000692:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000696:	bd70      	pople	{r4, r5, r6, pc}
 8000698:	f1c4 0400 	rsb	r4, r4, #0
 800069c:	3c20      	subs	r4, #32
 800069e:	da35      	bge.n	800070c <__aeabi_dmul+0x164>
 80006a0:	340c      	adds	r4, #12
 80006a2:	dc1b      	bgt.n	80006dc <__aeabi_dmul+0x134>
 80006a4:	f104 0414 	add.w	r4, r4, #20
 80006a8:	f1c4 0520 	rsb	r5, r4, #32
 80006ac:	fa00 f305 	lsl.w	r3, r0, r5
 80006b0:	fa20 f004 	lsr.w	r0, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea40 0002 	orr.w	r0, r0, r2
 80006bc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006c0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c8:	fa21 f604 	lsr.w	r6, r1, r4
 80006cc:	eb42 0106 	adc.w	r1, r2, r6
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f1c4 040c 	rsb	r4, r4, #12
 80006e0:	f1c4 0520 	rsb	r5, r4, #32
 80006e4:	fa00 f304 	lsl.w	r3, r0, r4
 80006e8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ec:	fa01 f204 	lsl.w	r2, r1, r4
 80006f0:	ea40 0002 	orr.w	r0, r0, r2
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006fc:	f141 0100 	adc.w	r1, r1, #0
 8000700:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000704:	bf08      	it	eq
 8000706:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f1c4 0520 	rsb	r5, r4, #32
 8000710:	fa00 f205 	lsl.w	r2, r0, r5
 8000714:	ea4e 0e02 	orr.w	lr, lr, r2
 8000718:	fa20 f304 	lsr.w	r3, r0, r4
 800071c:	fa01 f205 	lsl.w	r2, r1, r5
 8000720:	ea43 0302 	orr.w	r3, r3, r2
 8000724:	fa21 f004 	lsr.w	r0, r1, r4
 8000728:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800072c:	fa21 f204 	lsr.w	r2, r1, r4
 8000730:	ea20 0002 	bic.w	r0, r0, r2
 8000734:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000738:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800073c:	bf08      	it	eq
 800073e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000742:	bd70      	pop	{r4, r5, r6, pc}
 8000744:	f094 0f00 	teq	r4, #0
 8000748:	d10f      	bne.n	800076a <__aeabi_dmul+0x1c2>
 800074a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800074e:	0040      	lsls	r0, r0, #1
 8000750:	eb41 0101 	adc.w	r1, r1, r1
 8000754:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000758:	bf08      	it	eq
 800075a:	3c01      	subeq	r4, #1
 800075c:	d0f7      	beq.n	800074e <__aeabi_dmul+0x1a6>
 800075e:	ea41 0106 	orr.w	r1, r1, r6
 8000762:	f095 0f00 	teq	r5, #0
 8000766:	bf18      	it	ne
 8000768:	4770      	bxne	lr
 800076a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800076e:	0052      	lsls	r2, r2, #1
 8000770:	eb43 0303 	adc.w	r3, r3, r3
 8000774:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000778:	bf08      	it	eq
 800077a:	3d01      	subeq	r5, #1
 800077c:	d0f7      	beq.n	800076e <__aeabi_dmul+0x1c6>
 800077e:	ea43 0306 	orr.w	r3, r3, r6
 8000782:	4770      	bx	lr
 8000784:	ea94 0f0c 	teq	r4, ip
 8000788:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800078c:	bf18      	it	ne
 800078e:	ea95 0f0c 	teqne	r5, ip
 8000792:	d00c      	beq.n	80007ae <__aeabi_dmul+0x206>
 8000794:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000798:	bf18      	it	ne
 800079a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800079e:	d1d1      	bne.n	8000744 <__aeabi_dmul+0x19c>
 80007a0:	ea81 0103 	eor.w	r1, r1, r3
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a8:	f04f 0000 	mov.w	r0, #0
 80007ac:	bd70      	pop	{r4, r5, r6, pc}
 80007ae:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b2:	bf06      	itte	eq
 80007b4:	4610      	moveq	r0, r2
 80007b6:	4619      	moveq	r1, r3
 80007b8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007bc:	d019      	beq.n	80007f2 <__aeabi_dmul+0x24a>
 80007be:	ea94 0f0c 	teq	r4, ip
 80007c2:	d102      	bne.n	80007ca <__aeabi_dmul+0x222>
 80007c4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c8:	d113      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007ca:	ea95 0f0c 	teq	r5, ip
 80007ce:	d105      	bne.n	80007dc <__aeabi_dmul+0x234>
 80007d0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007d4:	bf1c      	itt	ne
 80007d6:	4610      	movne	r0, r2
 80007d8:	4619      	movne	r1, r3
 80007da:	d10a      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007dc:	ea81 0103 	eor.w	r1, r1, r3
 80007e0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007e8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007ec:	f04f 0000 	mov.w	r0, #0
 80007f0:	bd70      	pop	{r4, r5, r6, pc}
 80007f2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007fa:	bd70      	pop	{r4, r5, r6, pc}

080007fc <__aeabi_ddiv>:
 80007fc:	b570      	push	{r4, r5, r6, lr}
 80007fe:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000802:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000806:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800080a:	bf1d      	ittte	ne
 800080c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000810:	ea94 0f0c 	teqne	r4, ip
 8000814:	ea95 0f0c 	teqne	r5, ip
 8000818:	f000 f8a7 	bleq	800096a <__aeabi_ddiv+0x16e>
 800081c:	eba4 0405 	sub.w	r4, r4, r5
 8000820:	ea81 0e03 	eor.w	lr, r1, r3
 8000824:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000828:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800082c:	f000 8088 	beq.w	8000940 <__aeabi_ddiv+0x144>
 8000830:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000834:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000838:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800083c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000840:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000844:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000848:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800084c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000850:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000854:	429d      	cmp	r5, r3
 8000856:	bf08      	it	eq
 8000858:	4296      	cmpeq	r6, r2
 800085a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800085e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000862:	d202      	bcs.n	800086a <__aeabi_ddiv+0x6e>
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	ea4f 0232 	mov.w	r2, r2, rrx
 800086a:	1ab6      	subs	r6, r6, r2
 800086c:	eb65 0503 	sbc.w	r5, r5, r3
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800087a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008dc:	d018      	beq.n	8000910 <__aeabi_ddiv+0x114>
 80008de:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008e2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008e6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ea:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ee:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008f2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008f6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008fa:	d1c0      	bne.n	800087e <__aeabi_ddiv+0x82>
 80008fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000900:	d10b      	bne.n	800091a <__aeabi_ddiv+0x11e>
 8000902:	ea41 0100 	orr.w	r1, r1, r0
 8000906:	f04f 0000 	mov.w	r0, #0
 800090a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800090e:	e7b6      	b.n	800087e <__aeabi_ddiv+0x82>
 8000910:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000914:	bf04      	itt	eq
 8000916:	4301      	orreq	r1, r0
 8000918:	2000      	moveq	r0, #0
 800091a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800091e:	bf88      	it	hi
 8000920:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000924:	f63f aeaf 	bhi.w	8000686 <__aeabi_dmul+0xde>
 8000928:	ebb5 0c03 	subs.w	ip, r5, r3
 800092c:	bf04      	itt	eq
 800092e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000932:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000936:	f150 0000 	adcs.w	r0, r0, #0
 800093a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800093e:	bd70      	pop	{r4, r5, r6, pc}
 8000940:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000944:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000948:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800094c:	bfc2      	ittt	gt
 800094e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000952:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000956:	bd70      	popgt	{r4, r5, r6, pc}
 8000958:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800095c:	f04f 0e00 	mov.w	lr, #0
 8000960:	3c01      	subs	r4, #1
 8000962:	e690      	b.n	8000686 <__aeabi_dmul+0xde>
 8000964:	ea45 0e06 	orr.w	lr, r5, r6
 8000968:	e68d      	b.n	8000686 <__aeabi_dmul+0xde>
 800096a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800096e:	ea94 0f0c 	teq	r4, ip
 8000972:	bf08      	it	eq
 8000974:	ea95 0f0c 	teqeq	r5, ip
 8000978:	f43f af3b 	beq.w	80007f2 <__aeabi_dmul+0x24a>
 800097c:	ea94 0f0c 	teq	r4, ip
 8000980:	d10a      	bne.n	8000998 <__aeabi_ddiv+0x19c>
 8000982:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000986:	f47f af34 	bne.w	80007f2 <__aeabi_dmul+0x24a>
 800098a:	ea95 0f0c 	teq	r5, ip
 800098e:	f47f af25 	bne.w	80007dc <__aeabi_dmul+0x234>
 8000992:	4610      	mov	r0, r2
 8000994:	4619      	mov	r1, r3
 8000996:	e72c      	b.n	80007f2 <__aeabi_dmul+0x24a>
 8000998:	ea95 0f0c 	teq	r5, ip
 800099c:	d106      	bne.n	80009ac <__aeabi_ddiv+0x1b0>
 800099e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009a2:	f43f aefd 	beq.w	80007a0 <__aeabi_dmul+0x1f8>
 80009a6:	4610      	mov	r0, r2
 80009a8:	4619      	mov	r1, r3
 80009aa:	e722      	b.n	80007f2 <__aeabi_dmul+0x24a>
 80009ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b0:	bf18      	it	ne
 80009b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009b6:	f47f aec5 	bne.w	8000744 <__aeabi_dmul+0x19c>
 80009ba:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009be:	f47f af0d 	bne.w	80007dc <__aeabi_dmul+0x234>
 80009c2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009c6:	f47f aeeb 	bne.w	80007a0 <__aeabi_dmul+0x1f8>
 80009ca:	e712      	b.n	80007f2 <__aeabi_dmul+0x24a>

080009cc <__gedf2>:
 80009cc:	f04f 3cff 	mov.w	ip, #4294967295
 80009d0:	e006      	b.n	80009e0 <__cmpdf2+0x4>
 80009d2:	bf00      	nop

080009d4 <__ledf2>:
 80009d4:	f04f 0c01 	mov.w	ip, #1
 80009d8:	e002      	b.n	80009e0 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__cmpdf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009e4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009f6:	d01b      	beq.n	8000a30 <__cmpdf2+0x54>
 80009f8:	b001      	add	sp, #4
 80009fa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009fe:	bf0c      	ite	eq
 8000a00:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a04:	ea91 0f03 	teqne	r1, r3
 8000a08:	bf02      	ittt	eq
 8000a0a:	ea90 0f02 	teqeq	r0, r2
 8000a0e:	2000      	moveq	r0, #0
 8000a10:	4770      	bxeq	lr
 8000a12:	f110 0f00 	cmn.w	r0, #0
 8000a16:	ea91 0f03 	teq	r1, r3
 8000a1a:	bf58      	it	pl
 8000a1c:	4299      	cmppl	r1, r3
 8000a1e:	bf08      	it	eq
 8000a20:	4290      	cmpeq	r0, r2
 8000a22:	bf2c      	ite	cs
 8000a24:	17d8      	asrcs	r0, r3, #31
 8000a26:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a2a:	f040 0001 	orr.w	r0, r0, #1
 8000a2e:	4770      	bx	lr
 8000a30:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__cmpdf2+0x64>
 8000a3a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a3e:	d107      	bne.n	8000a50 <__cmpdf2+0x74>
 8000a40:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a48:	d1d6      	bne.n	80009f8 <__cmpdf2+0x1c>
 8000a4a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a4e:	d0d3      	beq.n	80009f8 <__cmpdf2+0x1c>
 8000a50:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop

08000a58 <__aeabi_cdrcmple>:
 8000a58:	4684      	mov	ip, r0
 8000a5a:	4610      	mov	r0, r2
 8000a5c:	4662      	mov	r2, ip
 8000a5e:	468c      	mov	ip, r1
 8000a60:	4619      	mov	r1, r3
 8000a62:	4663      	mov	r3, ip
 8000a64:	e000      	b.n	8000a68 <__aeabi_cdcmpeq>
 8000a66:	bf00      	nop

08000a68 <__aeabi_cdcmpeq>:
 8000a68:	b501      	push	{r0, lr}
 8000a6a:	f7ff ffb7 	bl	80009dc <__cmpdf2>
 8000a6e:	2800      	cmp	r0, #0
 8000a70:	bf48      	it	mi
 8000a72:	f110 0f00 	cmnmi.w	r0, #0
 8000a76:	bd01      	pop	{r0, pc}

08000a78 <__aeabi_dcmpeq>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff fff4 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a80:	bf0c      	ite	eq
 8000a82:	2001      	moveq	r0, #1
 8000a84:	2000      	movne	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmplt>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffea 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a94:	bf34      	ite	cc
 8000a96:	2001      	movcc	r0, #1
 8000a98:	2000      	movcs	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmple>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffe0 	bl	8000a68 <__aeabi_cdcmpeq>
 8000aa8:	bf94      	ite	ls
 8000aaa:	2001      	movls	r0, #1
 8000aac:	2000      	movhi	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_dcmpge>:
 8000ab4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab8:	f7ff ffce 	bl	8000a58 <__aeabi_cdrcmple>
 8000abc:	bf94      	ite	ls
 8000abe:	2001      	movls	r0, #1
 8000ac0:	2000      	movhi	r0, #0
 8000ac2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_dcmpgt>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff ffc4 	bl	8000a58 <__aeabi_cdrcmple>
 8000ad0:	bf34      	ite	cc
 8000ad2:	2001      	movcc	r0, #1
 8000ad4:	2000      	movcs	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmpun>:
 8000adc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae4:	d102      	bne.n	8000aec <__aeabi_dcmpun+0x10>
 8000ae6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aea:	d10a      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000aec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af4:	d102      	bne.n	8000afc <__aeabi_dcmpun+0x20>
 8000af6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afa:	d102      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000afc:	f04f 0000 	mov.w	r0, #0
 8000b00:	4770      	bx	lr
 8000b02:	f04f 0001 	mov.w	r0, #1
 8000b06:	4770      	bx	lr

08000b08 <__aeabi_d2iz>:
 8000b08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b0c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b10:	d215      	bcs.n	8000b3e <__aeabi_d2iz+0x36>
 8000b12:	d511      	bpl.n	8000b38 <__aeabi_d2iz+0x30>
 8000b14:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b1c:	d912      	bls.n	8000b44 <__aeabi_d2iz+0x3c>
 8000b1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b22:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b2a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b2e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b32:	bf18      	it	ne
 8000b34:	4240      	negne	r0, r0
 8000b36:	4770      	bx	lr
 8000b38:	f04f 0000 	mov.w	r0, #0
 8000b3c:	4770      	bx	lr
 8000b3e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b42:	d105      	bne.n	8000b50 <__aeabi_d2iz+0x48>
 8000b44:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b48:	bf08      	it	eq
 8000b4a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b4e:	4770      	bx	lr
 8000b50:	f04f 0000 	mov.w	r0, #0
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop

08000b58 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b5c:	4b04      	ldr	r3, [pc, #16]	; (8000b70 <__NVIC_GetPriorityGrouping+0x18>)
 8000b5e:	68db      	ldr	r3, [r3, #12]
 8000b60:	0a1b      	lsrs	r3, r3, #8
 8000b62:	f003 0307 	and.w	r3, r3, #7
}
 8000b66:	4618      	mov	r0, r3
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6e:	4770      	bx	lr
 8000b70:	e000ed00 	.word	0xe000ed00

08000b74 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b74:	b480      	push	{r7}
 8000b76:	b083      	sub	sp, #12
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	db0b      	blt.n	8000b9e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b86:	79fb      	ldrb	r3, [r7, #7]
 8000b88:	f003 021f 	and.w	r2, r3, #31
 8000b8c:	4907      	ldr	r1, [pc, #28]	; (8000bac <__NVIC_EnableIRQ+0x38>)
 8000b8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b92:	095b      	lsrs	r3, r3, #5
 8000b94:	2001      	movs	r0, #1
 8000b96:	fa00 f202 	lsl.w	r2, r0, r2
 8000b9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000b9e:	bf00      	nop
 8000ba0:	370c      	adds	r7, #12
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba8:	4770      	bx	lr
 8000baa:	bf00      	nop
 8000bac:	e000e100 	.word	0xe000e100

08000bb0 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	b083      	sub	sp, #12
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	db12      	blt.n	8000be8 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000bc2:	79fb      	ldrb	r3, [r7, #7]
 8000bc4:	f003 021f 	and.w	r2, r3, #31
 8000bc8:	490a      	ldr	r1, [pc, #40]	; (8000bf4 <__NVIC_DisableIRQ+0x44>)
 8000bca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bce:	095b      	lsrs	r3, r3, #5
 8000bd0:	2001      	movs	r0, #1
 8000bd2:	fa00 f202 	lsl.w	r2, r0, r2
 8000bd6:	3320      	adds	r3, #32
 8000bd8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000bdc:	f3bf 8f4f 	dsb	sy
}
 8000be0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000be2:	f3bf 8f6f 	isb	sy
}
 8000be6:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8000be8:	bf00      	nop
 8000bea:	370c      	adds	r7, #12
 8000bec:	46bd      	mov	sp, r7
 8000bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf2:	4770      	bx	lr
 8000bf4:	e000e100 	.word	0xe000e100

08000bf8 <__NVIC_SetPendingIRQ>:
  \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	b083      	sub	sp, #12
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	4603      	mov	r3, r0
 8000c00:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	db0c      	blt.n	8000c24 <__NVIC_SetPendingIRQ+0x2c>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c0a:	79fb      	ldrb	r3, [r7, #7]
 8000c0c:	f003 021f 	and.w	r2, r3, #31
 8000c10:	4907      	ldr	r1, [pc, #28]	; (8000c30 <__NVIC_SetPendingIRQ+0x38>)
 8000c12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c16:	095b      	lsrs	r3, r3, #5
 8000c18:	2001      	movs	r0, #1
 8000c1a:	fa00 f202 	lsl.w	r2, r0, r2
 8000c1e:	3340      	adds	r3, #64	; 0x40
 8000c20:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000c24:	bf00      	nop
 8000c26:	370c      	adds	r7, #12
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2e:	4770      	bx	lr
 8000c30:	e000e100 	.word	0xe000e100

08000c34 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8000c34:	b480      	push	{r7}
 8000c36:	b083      	sub	sp, #12
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	db0c      	blt.n	8000c60 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c46:	79fb      	ldrb	r3, [r7, #7]
 8000c48:	f003 021f 	and.w	r2, r3, #31
 8000c4c:	4907      	ldr	r1, [pc, #28]	; (8000c6c <__NVIC_ClearPendingIRQ+0x38>)
 8000c4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c52:	095b      	lsrs	r3, r3, #5
 8000c54:	2001      	movs	r0, #1
 8000c56:	fa00 f202 	lsl.w	r2, r0, r2
 8000c5a:	3360      	adds	r3, #96	; 0x60
 8000c5c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000c60:	bf00      	nop
 8000c62:	370c      	adds	r7, #12
 8000c64:	46bd      	mov	sp, r7
 8000c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6a:	4770      	bx	lr
 8000c6c:	e000e100 	.word	0xe000e100

08000c70 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c70:	b480      	push	{r7}
 8000c72:	b083      	sub	sp, #12
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	4603      	mov	r3, r0
 8000c78:	6039      	str	r1, [r7, #0]
 8000c7a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	db0a      	blt.n	8000c9a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c84:	683b      	ldr	r3, [r7, #0]
 8000c86:	b2da      	uxtb	r2, r3
 8000c88:	490c      	ldr	r1, [pc, #48]	; (8000cbc <__NVIC_SetPriority+0x4c>)
 8000c8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c8e:	0112      	lsls	r2, r2, #4
 8000c90:	b2d2      	uxtb	r2, r2
 8000c92:	440b      	add	r3, r1
 8000c94:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c98:	e00a      	b.n	8000cb0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c9a:	683b      	ldr	r3, [r7, #0]
 8000c9c:	b2da      	uxtb	r2, r3
 8000c9e:	4908      	ldr	r1, [pc, #32]	; (8000cc0 <__NVIC_SetPriority+0x50>)
 8000ca0:	79fb      	ldrb	r3, [r7, #7]
 8000ca2:	f003 030f 	and.w	r3, r3, #15
 8000ca6:	3b04      	subs	r3, #4
 8000ca8:	0112      	lsls	r2, r2, #4
 8000caa:	b2d2      	uxtb	r2, r2
 8000cac:	440b      	add	r3, r1
 8000cae:	761a      	strb	r2, [r3, #24]
}
 8000cb0:	bf00      	nop
 8000cb2:	370c      	adds	r7, #12
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cba:	4770      	bx	lr
 8000cbc:	e000e100 	.word	0xe000e100
 8000cc0:	e000ed00 	.word	0xe000ed00

08000cc4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	b089      	sub	sp, #36	; 0x24
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	60f8      	str	r0, [r7, #12]
 8000ccc:	60b9      	str	r1, [r7, #8]
 8000cce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000cd0:	68fb      	ldr	r3, [r7, #12]
 8000cd2:	f003 0307 	and.w	r3, r3, #7
 8000cd6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000cd8:	69fb      	ldr	r3, [r7, #28]
 8000cda:	f1c3 0307 	rsb	r3, r3, #7
 8000cde:	2b04      	cmp	r3, #4
 8000ce0:	bf28      	it	cs
 8000ce2:	2304      	movcs	r3, #4
 8000ce4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ce6:	69fb      	ldr	r3, [r7, #28]
 8000ce8:	3304      	adds	r3, #4
 8000cea:	2b06      	cmp	r3, #6
 8000cec:	d902      	bls.n	8000cf4 <NVIC_EncodePriority+0x30>
 8000cee:	69fb      	ldr	r3, [r7, #28]
 8000cf0:	3b03      	subs	r3, #3
 8000cf2:	e000      	b.n	8000cf6 <NVIC_EncodePriority+0x32>
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cf8:	f04f 32ff 	mov.w	r2, #4294967295
 8000cfc:	69bb      	ldr	r3, [r7, #24]
 8000cfe:	fa02 f303 	lsl.w	r3, r2, r3
 8000d02:	43da      	mvns	r2, r3
 8000d04:	68bb      	ldr	r3, [r7, #8]
 8000d06:	401a      	ands	r2, r3
 8000d08:	697b      	ldr	r3, [r7, #20]
 8000d0a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d0c:	f04f 31ff 	mov.w	r1, #4294967295
 8000d10:	697b      	ldr	r3, [r7, #20]
 8000d12:	fa01 f303 	lsl.w	r3, r1, r3
 8000d16:	43d9      	mvns	r1, r3
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d1c:	4313      	orrs	r3, r2
         );
}
 8000d1e:	4618      	mov	r0, r3
 8000d20:	3724      	adds	r7, #36	; 0x24
 8000d22:	46bd      	mov	sp, r7
 8000d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d28:	4770      	bx	lr

08000d2a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d2a:	b580      	push	{r7, lr}
 8000d2c:	b086      	sub	sp, #24
 8000d2e:	af00      	add	r7, sp, #0
 8000d30:	4603      	mov	r3, r0
 8000d32:	60b9      	str	r1, [r7, #8]
 8000d34:	607a      	str	r2, [r7, #4]
 8000d36:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000d38:	f7ff ff0e 	bl	8000b58 <__NVIC_GetPriorityGrouping>
 8000d3c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d3e:	687a      	ldr	r2, [r7, #4]
 8000d40:	68b9      	ldr	r1, [r7, #8]
 8000d42:	6978      	ldr	r0, [r7, #20]
 8000d44:	f7ff ffbe 	bl	8000cc4 <NVIC_EncodePriority>
 8000d48:	4602      	mov	r2, r0
 8000d4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d4e:	4611      	mov	r1, r2
 8000d50:	4618      	mov	r0, r3
 8000d52:	f7ff ff8d 	bl	8000c70 <__NVIC_SetPriority>
}
 8000d56:	bf00      	nop
 8000d58:	3718      	adds	r7, #24
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bd80      	pop	{r7, pc}

08000d5e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d5e:	b580      	push	{r7, lr}
 8000d60:	b082      	sub	sp, #8
 8000d62:	af00      	add	r7, sp, #0
 8000d64:	4603      	mov	r3, r0
 8000d66:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	f7ff ff01 	bl	8000b74 <__NVIC_EnableIRQ>
}
 8000d72:	bf00      	nop
 8000d74:	3708      	adds	r7, #8
 8000d76:	46bd      	mov	sp, r7
 8000d78:	bd80      	pop	{r7, pc}

08000d7a <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8000d7a:	b580      	push	{r7, lr}
 8000d7c:	b082      	sub	sp, #8
 8000d7e:	af00      	add	r7, sp, #0
 8000d80:	4603      	mov	r3, r0
 8000d82:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8000d84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d88:	4618      	mov	r0, r3
 8000d8a:	f7ff ff11 	bl	8000bb0 <__NVIC_DisableIRQ>
}
 8000d8e:	bf00      	nop
 8000d90:	3708      	adds	r7, #8
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bd80      	pop	{r7, pc}

08000d96 <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8000d96:	b580      	push	{r7, lr}
 8000d98:	b082      	sub	sp, #8
 8000d9a:	af00      	add	r7, sp, #0
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 8000da0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000da4:	4618      	mov	r0, r3
 8000da6:	f7ff ff27 	bl	8000bf8 <__NVIC_SetPendingIRQ>
}
 8000daa:	bf00      	nop
 8000dac:	3708      	adds	r7, #8
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bd80      	pop	{r7, pc}

08000db2 <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8000db2:	b580      	push	{r7, lr}
 8000db4:	b082      	sub	sp, #8
 8000db6:	af00      	add	r7, sp, #0
 8000db8:	4603      	mov	r3, r0
 8000dba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 8000dbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	f7ff ff37 	bl	8000c34 <__NVIC_ClearPendingIRQ>
}
 8000dc6:	bf00      	nop
 8000dc8:	3708      	adds	r7, #8
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	bd80      	pop	{r7, pc}

08000dce <aci_gap_set_non_discoverable>:
 */

#include "ble_gap_aci.h"

tBleStatus aci_gap_set_non_discoverable( void )
{
 8000dce:	b580      	push	{r7, lr}
 8000dd0:	b088      	sub	sp, #32
 8000dd2:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8000dd8:	f107 0308 	add.w	r3, r7, #8
 8000ddc:	2218      	movs	r2, #24
 8000dde:	2100      	movs	r1, #0
 8000de0:	4618      	mov	r0, r3
 8000de2:	f001 faf9 	bl	80023d8 <Osal_MemSet>
  rq.ogf = 0x3f;
 8000de6:	233f      	movs	r3, #63	; 0x3f
 8000de8:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x081;
 8000dea:	2381      	movs	r3, #129	; 0x81
 8000dec:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8000dee:	1dfb      	adds	r3, r7, #7
 8000df0:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8000df2:	2301      	movs	r3, #1
 8000df4:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8000df6:	f107 0308 	add.w	r3, r7, #8
 8000dfa:	2100      	movs	r1, #0
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	f001 fc2b 	bl	8002658 <hci_send_req>
 8000e02:	4603      	mov	r3, r0
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	da01      	bge.n	8000e0c <aci_gap_set_non_discoverable+0x3e>
    return BLE_STATUS_TIMEOUT;
 8000e08:	23ff      	movs	r3, #255	; 0xff
 8000e0a:	e000      	b.n	8000e0e <aci_gap_set_non_discoverable+0x40>
  return status;
 8000e0c:	79fb      	ldrb	r3, [r7, #7]
}
 8000e0e:	4618      	mov	r0, r3
 8000e10:	3720      	adds	r7, #32
 8000e12:	46bd      	mov	sp, r7
 8000e14:	bd80      	pop	{r7, pc}

08000e16 <aci_gap_set_discoverable>:
                                     const uint8_t* Local_Name,
                                     uint8_t Service_Uuid_length,
                                     const uint8_t* Service_Uuid_List,
                                     uint16_t Conn_Interval_Min,
                                     uint16_t Conn_Interval_Max )
{
 8000e16:	b5b0      	push	{r4, r5, r7, lr}
 8000e18:	b0ce      	sub	sp, #312	; 0x138
 8000e1a:	af00      	add	r7, sp, #0
 8000e1c:	4605      	mov	r5, r0
 8000e1e:	460c      	mov	r4, r1
 8000e20:	4610      	mov	r0, r2
 8000e22:	4619      	mov	r1, r3
 8000e24:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8000e28:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 8000e2c:	462a      	mov	r2, r5
 8000e2e:	701a      	strb	r2, [r3, #0]
 8000e30:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8000e34:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8000e38:	4622      	mov	r2, r4
 8000e3a:	801a      	strh	r2, [r3, #0]
 8000e3c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8000e40:	f5a3 739b 	sub.w	r3, r3, #310	; 0x136
 8000e44:	4602      	mov	r2, r0
 8000e46:	801a      	strh	r2, [r3, #0]
 8000e48:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8000e4c:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 8000e50:	460a      	mov	r2, r1
 8000e52:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_discoverable_cp0 *cp0 = (aci_gap_set_discoverable_cp0*)(cmd_buffer);
 8000e54:	f107 0310 	add.w	r3, r7, #16
 8000e58:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gap_set_discoverable_cp1 *cp1 = (aci_gap_set_discoverable_cp1*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)));
 8000e5c:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 8000e60:	3308      	adds	r3, #8
 8000e62:	f107 0210 	add.w	r2, r7, #16
 8000e66:	4413      	add	r3, r2
 8000e68:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  aci_gap_set_discoverable_cp2 *cp2 = (aci_gap_set_discoverable_cp2*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)) + 1 + Service_Uuid_length * (sizeof(uint8_t)));
 8000e6c:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 8000e70:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 8000e74:	4413      	add	r3, r2
 8000e76:	3309      	adds	r3, #9
 8000e78:	f107 0210 	add.w	r2, r7, #16
 8000e7c:	4413      	add	r3, r2
 8000e7e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8000e82:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8000e86:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Type = Advertising_Type;
 8000e94:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8000e98:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8000e9c:	f2a2 1231 	subw	r2, r2, #305	; 0x131
 8000ea0:	7812      	ldrb	r2, [r2, #0]
 8000ea2:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8000ea4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8000ea8:	3301      	adds	r3, #1
 8000eaa:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Interval_Min = Advertising_Interval_Min;
 8000eae:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8000eb2:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8000eb6:	f5a2 729a 	sub.w	r2, r2, #308	; 0x134
 8000eba:	8812      	ldrh	r2, [r2, #0]
 8000ebc:	f8a3 2001 	strh.w	r2, [r3, #1]
  index_input += 2;
 8000ec0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8000ec4:	3302      	adds	r3, #2
 8000ec6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Interval_Max = Advertising_Interval_Max;
 8000eca:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8000ece:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8000ed2:	f5a2 729b 	sub.w	r2, r2, #310	; 0x136
 8000ed6:	8812      	ldrh	r2, [r2, #0]
 8000ed8:	f8a3 2003 	strh.w	r2, [r3, #3]
  index_input += 2;
 8000edc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8000ee0:	3302      	adds	r3, #2
 8000ee2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Own_Address_Type = Own_Address_Type;
 8000ee6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8000eea:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8000eee:	f5a2 7299 	sub.w	r2, r2, #306	; 0x132
 8000ef2:	7812      	ldrb	r2, [r2, #0]
 8000ef4:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8000ef6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8000efa:	3301      	adds	r3, #1
 8000efc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Filter_Policy = Advertising_Filter_Policy;
 8000f00:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8000f04:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 8000f08:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 8000f0a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8000f0e:	3301      	adds	r3, #1
 8000f10:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Local_Name_Length = Local_Name_Length;
 8000f14:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8000f18:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 8000f1c:	71da      	strb	r2, [r3, #7]
  index_input += 1;
 8000f1e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8000f22:	3301      	adds	r3, #1
 8000f24:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  /* var_len_data input */
  {
    Osal_MemCpy( (void*)&cp0->Local_Name, (const void*)Local_Name, Local_Name_Length );
 8000f28:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8000f2c:	3308      	adds	r3, #8
 8000f2e:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 8000f32:	f8d7 1150 	ldr.w	r1, [r7, #336]	; 0x150
 8000f36:	4618      	mov	r0, r3
 8000f38:	f001 fa3e 	bl	80023b8 <Osal_MemCpy>
    index_input += Local_Name_Length;
 8000f3c:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 8000f40:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8000f44:	4413      	add	r3, r2
 8000f46:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Service_Uuid_length = Service_Uuid_length;
 8000f4a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8000f4e:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 8000f52:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 8000f54:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8000f58:	3301      	adds	r3, #1
 8000f5a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    Osal_MemCpy( (void*)&cp1->Service_Uuid_List, (const void*)Service_Uuid_List, Service_Uuid_length );
 8000f5e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8000f62:	3301      	adds	r3, #1
 8000f64:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 8000f68:	f8d7 1158 	ldr.w	r1, [r7, #344]	; 0x158
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	f001 fa23 	bl	80023b8 <Osal_MemCpy>
    index_input += Service_Uuid_length;
 8000f72:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 8000f76:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8000f7a:	4413      	add	r3, r2
 8000f7c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp2->Conn_Interval_Min = Conn_Interval_Min;
 8000f80:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8000f84:	f8b7 215c 	ldrh.w	r2, [r7, #348]	; 0x15c
 8000f88:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 8000f8a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8000f8e:	3302      	adds	r3, #2
 8000f90:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp2->Conn_Interval_Max = Conn_Interval_Max;
 8000f94:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8000f98:	f8b7 2160 	ldrh.w	r2, [r7, #352]	; 0x160
 8000f9c:	805a      	strh	r2, [r3, #2]
    }
    index_input += 2;
 8000f9e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8000fa2:	3302      	adds	r3, #2
 8000fa4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8000fa8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000fac:	2218      	movs	r2, #24
 8000fae:	2100      	movs	r1, #0
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	f001 fa11 	bl	80023d8 <Osal_MemSet>
  rq.ogf = 0x3f;
 8000fb6:	233f      	movs	r3, #63	; 0x3f
 8000fb8:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x083;
 8000fbc:	2383      	movs	r3, #131	; 0x83
 8000fbe:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8000fc2:	f107 0310 	add.w	r3, r7, #16
 8000fc6:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8000fca:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8000fce:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8000fd2:	f107 030f 	add.w	r3, r7, #15
 8000fd6:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8000fda:	2301      	movs	r3, #1
 8000fdc:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8000fe0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000fe4:	2100      	movs	r1, #0
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	f001 fb36 	bl	8002658 <hci_send_req>
 8000fec:	4603      	mov	r3, r0
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	da01      	bge.n	8000ff6 <aci_gap_set_discoverable+0x1e0>
    return BLE_STATUS_TIMEOUT;
 8000ff2:	23ff      	movs	r3, #255	; 0xff
 8000ff4:	e004      	b.n	8001000 <aci_gap_set_discoverable+0x1ea>
  return status;
 8000ff6:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8000ffa:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8000ffe:	781b      	ldrb	r3, [r3, #0]
}
 8001000:	4618      	mov	r0, r3
 8001002:	f507 779c 	add.w	r7, r7, #312	; 0x138
 8001006:	46bd      	mov	sp, r7
 8001008:	bdb0      	pop	{r4, r5, r7, pc}

0800100a <aci_gap_set_io_capability>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_set_io_capability( uint8_t IO_Capability )
{
 800100a:	b580      	push	{r7, lr}
 800100c:	b0cc      	sub	sp, #304	; 0x130
 800100e:	af00      	add	r7, sp, #0
 8001010:	4602      	mov	r2, r0
 8001012:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001016:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800101a:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_io_capability_cp0 *cp0 = (aci_gap_set_io_capability_cp0*)(cmd_buffer);
 800101c:	f107 0310 	add.w	r3, r7, #16
 8001020:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8001024:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001028:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800102c:	2200      	movs	r2, #0
 800102e:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8001030:	2300      	movs	r3, #0
 8001032:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->IO_Capability = IO_Capability;
 8001036:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800103a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800103e:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8001042:	7812      	ldrb	r2, [r2, #0]
 8001044:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8001046:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800104a:	3301      	adds	r3, #1
 800104c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8001050:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001054:	2218      	movs	r2, #24
 8001056:	2100      	movs	r1, #0
 8001058:	4618      	mov	r0, r3
 800105a:	f001 f9bd 	bl	80023d8 <Osal_MemSet>
  rq.ogf = 0x3f;
 800105e:	233f      	movs	r3, #63	; 0x3f
 8001060:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x085;
 8001064:	2385      	movs	r3, #133	; 0x85
 8001066:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800106a:	f107 0310 	add.w	r3, r7, #16
 800106e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8001072:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001076:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800107a:	f107 030f 	add.w	r3, r7, #15
 800107e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8001082:	2301      	movs	r3, #1
 8001084:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8001088:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800108c:	2100      	movs	r1, #0
 800108e:	4618      	mov	r0, r3
 8001090:	f001 fae2 	bl	8002658 <hci_send_req>
 8001094:	4603      	mov	r3, r0
 8001096:	2b00      	cmp	r3, #0
 8001098:	da01      	bge.n	800109e <aci_gap_set_io_capability+0x94>
    return BLE_STATUS_TIMEOUT;
 800109a:	23ff      	movs	r3, #255	; 0xff
 800109c:	e004      	b.n	80010a8 <aci_gap_set_io_capability+0x9e>
  return status;
 800109e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80010a2:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80010a6:	781b      	ldrb	r3, [r3, #0]
}
 80010a8:	4618      	mov	r0, r3
 80010aa:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd80      	pop	{r7, pc}

080010b2 <aci_gap_set_authentication_requirement>:
                                                   uint8_t Min_Encryption_Key_Size,
                                                   uint8_t Max_Encryption_Key_Size,
                                                   uint8_t Use_Fixed_Pin,
                                                   uint32_t Fixed_Pin,
                                                   uint8_t Identity_Address_Type )
{
 80010b2:	b5b0      	push	{r4, r5, r7, lr}
 80010b4:	b0cc      	sub	sp, #304	; 0x130
 80010b6:	af00      	add	r7, sp, #0
 80010b8:	4605      	mov	r5, r0
 80010ba:	460c      	mov	r4, r1
 80010bc:	4610      	mov	r0, r2
 80010be:	4619      	mov	r1, r3
 80010c0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80010c4:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 80010c8:	462a      	mov	r2, r5
 80010ca:	701a      	strb	r2, [r3, #0]
 80010cc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80010d0:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 80010d4:	4622      	mov	r2, r4
 80010d6:	701a      	strb	r2, [r3, #0]
 80010d8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80010dc:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 80010e0:	4602      	mov	r2, r0
 80010e2:	701a      	strb	r2, [r3, #0]
 80010e4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80010e8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80010ec:	460a      	mov	r2, r1
 80010ee:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_authentication_requirement_cp0 *cp0 = (aci_gap_set_authentication_requirement_cp0*)(cmd_buffer);
 80010f0:	f107 0310 	add.w	r3, r7, #16
 80010f4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 80010f8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80010fc:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8001100:	2200      	movs	r2, #0
 8001102:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8001104:	2300      	movs	r3, #0
 8001106:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Bonding_Mode = Bonding_Mode;
 800110a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800110e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8001112:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8001116:	7812      	ldrb	r2, [r2, #0]
 8001118:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800111a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800111e:	3301      	adds	r3, #1
 8001120:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->MITM_Mode = MITM_Mode;
 8001124:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001128:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800112c:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8001130:	7812      	ldrb	r2, [r2, #0]
 8001132:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8001134:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001138:	3301      	adds	r3, #1
 800113a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->SC_Support = SC_Support;
 800113e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001142:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8001146:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 800114a:	7812      	ldrb	r2, [r2, #0]
 800114c:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800114e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001152:	3301      	adds	r3, #1
 8001154:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->KeyPress_Notification_Support = KeyPress_Notification_Support;
 8001158:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800115c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8001160:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8001164:	7812      	ldrb	r2, [r2, #0]
 8001166:	70da      	strb	r2, [r3, #3]
  index_input += 1;
 8001168:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800116c:	3301      	adds	r3, #1
 800116e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Min_Encryption_Key_Size = Min_Encryption_Key_Size;
 8001172:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001176:	f897 2140 	ldrb.w	r2, [r7, #320]	; 0x140
 800117a:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 800117c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001180:	3301      	adds	r3, #1
 8001182:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Max_Encryption_Key_Size = Max_Encryption_Key_Size;
 8001186:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800118a:	f897 2144 	ldrb.w	r2, [r7, #324]	; 0x144
 800118e:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8001190:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001194:	3301      	adds	r3, #1
 8001196:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Use_Fixed_Pin = Use_Fixed_Pin;
 800119a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800119e:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 80011a2:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 80011a4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80011a8:	3301      	adds	r3, #1
 80011aa:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Fixed_Pin = Fixed_Pin;
 80011ae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80011b2:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 80011b6:	f8c3 2007 	str.w	r2, [r3, #7]
  index_input += 4;
 80011ba:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80011be:	3304      	adds	r3, #4
 80011c0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Identity_Address_Type = Identity_Address_Type;
 80011c4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80011c8:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
 80011cc:	72da      	strb	r2, [r3, #11]
  index_input += 1;
 80011ce:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80011d2:	3301      	adds	r3, #1
 80011d4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80011d8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80011dc:	2218      	movs	r2, #24
 80011de:	2100      	movs	r1, #0
 80011e0:	4618      	mov	r0, r3
 80011e2:	f001 f8f9 	bl	80023d8 <Osal_MemSet>
  rq.ogf = 0x3f;
 80011e6:	233f      	movs	r3, #63	; 0x3f
 80011e8:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x086;
 80011ec:	2386      	movs	r3, #134	; 0x86
 80011ee:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80011f2:	f107 0310 	add.w	r3, r7, #16
 80011f6:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80011fa:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80011fe:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8001202:	f107 030f 	add.w	r3, r7, #15
 8001206:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800120a:	2301      	movs	r3, #1
 800120c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8001210:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001214:	2100      	movs	r1, #0
 8001216:	4618      	mov	r0, r3
 8001218:	f001 fa1e 	bl	8002658 <hci_send_req>
 800121c:	4603      	mov	r3, r0
 800121e:	2b00      	cmp	r3, #0
 8001220:	da01      	bge.n	8001226 <aci_gap_set_authentication_requirement+0x174>
    return BLE_STATUS_TIMEOUT;
 8001222:	23ff      	movs	r3, #255	; 0xff
 8001224:	e004      	b.n	8001230 <aci_gap_set_authentication_requirement+0x17e>
  return status;
 8001226:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800122a:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800122e:	781b      	ldrb	r3, [r3, #0]
}
 8001230:	4618      	mov	r0, r3
 8001232:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8001236:	46bd      	mov	sp, r7
 8001238:	bdb0      	pop	{r4, r5, r7, pc}

0800123a <aci_gap_pass_key_resp>:
  return status;
}

tBleStatus aci_gap_pass_key_resp( uint16_t Connection_Handle,
                                  uint32_t Pass_Key )
{
 800123a:	b580      	push	{r7, lr}
 800123c:	b0cc      	sub	sp, #304	; 0x130
 800123e:	af00      	add	r7, sp, #0
 8001240:	4602      	mov	r2, r0
 8001242:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001246:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800124a:	6019      	str	r1, [r3, #0]
 800124c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001250:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8001254:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_pass_key_resp_cp0 *cp0 = (aci_gap_pass_key_resp_cp0*)(cmd_buffer);
 8001256:	f107 0310 	add.w	r3, r7, #16
 800125a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800125e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001262:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8001266:	2200      	movs	r2, #0
 8001268:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800126a:	2300      	movs	r3, #0
 800126c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = Connection_Handle;
 8001270:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001274:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8001278:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800127c:	8812      	ldrh	r2, [r2, #0]
 800127e:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8001280:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001284:	3302      	adds	r3, #2
 8001286:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Pass_Key = Pass_Key;
 800128a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800128e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8001292:	f5a2 7298 	sub.w	r2, r2, #304	; 0x130
 8001296:	6812      	ldr	r2, [r2, #0]
 8001298:	f8c3 2002 	str.w	r2, [r3, #2]
  index_input += 4;
 800129c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80012a0:	3304      	adds	r3, #4
 80012a2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80012a6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80012aa:	2218      	movs	r2, #24
 80012ac:	2100      	movs	r1, #0
 80012ae:	4618      	mov	r0, r3
 80012b0:	f001 f892 	bl	80023d8 <Osal_MemSet>
  rq.ogf = 0x3f;
 80012b4:	233f      	movs	r3, #63	; 0x3f
 80012b6:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x088;
 80012ba:	2388      	movs	r3, #136	; 0x88
 80012bc:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80012c0:	f107 0310 	add.w	r3, r7, #16
 80012c4:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80012c8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80012cc:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80012d0:	f107 030f 	add.w	r3, r7, #15
 80012d4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80012d8:	2301      	movs	r3, #1
 80012da:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80012de:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80012e2:	2100      	movs	r1, #0
 80012e4:	4618      	mov	r0, r3
 80012e6:	f001 f9b7 	bl	8002658 <hci_send_req>
 80012ea:	4603      	mov	r3, r0
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	da01      	bge.n	80012f4 <aci_gap_pass_key_resp+0xba>
    return BLE_STATUS_TIMEOUT;
 80012f0:	23ff      	movs	r3, #255	; 0xff
 80012f2:	e004      	b.n	80012fe <aci_gap_pass_key_resp+0xc4>
  return status;
 80012f4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80012f8:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80012fc:	781b      	ldrb	r3, [r3, #0]
}
 80012fe:	4618      	mov	r0, r3
 8001300:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8001304:	46bd      	mov	sp, r7
 8001306:	bd80      	pop	{r7, pc}

08001308 <aci_gap_init>:
                         uint8_t privacy_enabled,
                         uint8_t device_name_char_len,
                         uint16_t* Service_Handle,
                         uint16_t* Dev_Name_Char_Handle,
                         uint16_t* Appearance_Char_Handle )
{
 8001308:	b590      	push	{r4, r7, lr}
 800130a:	b0cd      	sub	sp, #308	; 0x134
 800130c:	af00      	add	r7, sp, #0
 800130e:	4604      	mov	r4, r0
 8001310:	4608      	mov	r0, r1
 8001312:	4611      	mov	r1, r2
 8001314:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8001318:	f5a2 7298 	sub.w	r2, r2, #304	; 0x130
 800131c:	6013      	str	r3, [r2, #0]
 800131e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001322:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8001326:	4622      	mov	r2, r4
 8001328:	701a      	strb	r2, [r3, #0]
 800132a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800132e:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8001332:	4602      	mov	r2, r0
 8001334:	701a      	strb	r2, [r3, #0]
 8001336:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800133a:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 800133e:	460a      	mov	r2, r1
 8001340:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_init_cp0 *cp0 = (aci_gap_init_cp0*)(cmd_buffer);
 8001342:	f107 0310 	add.w	r3, r7, #16
 8001346:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  aci_gap_init_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 800134a:	f107 0308 	add.w	r3, r7, #8
 800134e:	2207      	movs	r2, #7
 8001350:	2100      	movs	r1, #0
 8001352:	4618      	mov	r0, r3
 8001354:	f001 f840 	bl	80023d8 <Osal_MemSet>
  int index_input = 0;
 8001358:	2300      	movs	r3, #0
 800135a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Role = Role;
 800135e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001362:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8001366:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 800136a:	7812      	ldrb	r2, [r2, #0]
 800136c:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800136e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001372:	3301      	adds	r3, #1
 8001374:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->privacy_enabled = privacy_enabled;
 8001378:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800137c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8001380:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8001384:	7812      	ldrb	r2, [r2, #0]
 8001386:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8001388:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800138c:	3301      	adds	r3, #1
 800138e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->device_name_char_len = device_name_char_len;
 8001392:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001396:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800139a:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 800139e:	7812      	ldrb	r2, [r2, #0]
 80013a0:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 80013a2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80013a6:	3301      	adds	r3, #1
 80013a8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80013ac:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80013b0:	2218      	movs	r2, #24
 80013b2:	2100      	movs	r1, #0
 80013b4:	4618      	mov	r0, r3
 80013b6:	f001 f80f 	bl	80023d8 <Osal_MemSet>
  rq.ogf = 0x3f;
 80013ba:	233f      	movs	r3, #63	; 0x3f
 80013bc:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x08a;
 80013c0:	238a      	movs	r3, #138	; 0x8a
 80013c2:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80013c6:	f107 0310 	add.w	r3, r7, #16
 80013ca:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80013ce:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80013d2:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &resp;
 80013d6:	f107 0308 	add.w	r3, r7, #8
 80013da:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = sizeof(resp);
 80013de:	2307      	movs	r3, #7
 80013e0:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80013e4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80013e8:	2100      	movs	r1, #0
 80013ea:	4618      	mov	r0, r3
 80013ec:	f001 f934 	bl	8002658 <hci_send_req>
 80013f0:	4603      	mov	r3, r0
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	da01      	bge.n	80013fa <aci_gap_init+0xf2>
    return BLE_STATUS_TIMEOUT;
 80013f6:	23ff      	movs	r3, #255	; 0xff
 80013f8:	e02e      	b.n	8001458 <aci_gap_init+0x150>
  if ( resp.Status )
 80013fa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80013fe:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001402:	781b      	ldrb	r3, [r3, #0]
 8001404:	2b00      	cmp	r3, #0
 8001406:	d005      	beq.n	8001414 <aci_gap_init+0x10c>
    return resp.Status;
 8001408:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800140c:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001410:	781b      	ldrb	r3, [r3, #0]
 8001412:	e021      	b.n	8001458 <aci_gap_init+0x150>
  *Service_Handle = resp.Service_Handle;
 8001414:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001418:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800141c:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8001420:	b29a      	uxth	r2, r3
 8001422:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001426:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	801a      	strh	r2, [r3, #0]
  *Dev_Name_Char_Handle = resp.Dev_Name_Char_Handle;
 800142e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001432:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001436:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 800143a:	b29a      	uxth	r2, r3
 800143c:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8001440:	801a      	strh	r2, [r3, #0]
  *Appearance_Char_Handle = resp.Appearance_Char_Handle;
 8001442:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001446:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800144a:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 800144e:	b29a      	uxth	r2, r3
 8001450:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8001454:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8001456:	2300      	movs	r3, #0
}
 8001458:	4618      	mov	r0, r3
 800145a:	f507 779a 	add.w	r7, r7, #308	; 0x134
 800145e:	46bd      	mov	sp, r7
 8001460:	bd90      	pop	{r4, r7, pc}

08001462 <aci_gap_update_adv_data>:
  return status;
}

tBleStatus aci_gap_update_adv_data( uint8_t AdvDataLen,
                                    const uint8_t* AdvData )
{
 8001462:	b580      	push	{r7, lr}
 8001464:	b0cc      	sub	sp, #304	; 0x130
 8001466:	af00      	add	r7, sp, #0
 8001468:	4602      	mov	r2, r0
 800146a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800146e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001472:	6019      	str	r1, [r3, #0]
 8001474:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001478:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800147c:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_update_adv_data_cp0 *cp0 = (aci_gap_update_adv_data_cp0*)(cmd_buffer);
 800147e:	f107 0310 	add.w	r3, r7, #16
 8001482:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8001486:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800148a:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800148e:	2200      	movs	r2, #0
 8001490:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8001492:	2300      	movs	r3, #0
 8001494:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->AdvDataLen = AdvDataLen;
 8001498:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800149c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80014a0:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 80014a4:	7812      	ldrb	r2, [r2, #0]
 80014a6:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80014a8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80014ac:	3301      	adds	r3, #1
 80014ae:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->AdvData, (const void*)AdvData, AdvDataLen );
 80014b2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80014b6:	1c58      	adds	r0, r3, #1
 80014b8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80014bc:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 80014c0:	781a      	ldrb	r2, [r3, #0]
 80014c2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80014c6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80014ca:	6819      	ldr	r1, [r3, #0]
 80014cc:	f000 ff74 	bl	80023b8 <Osal_MemCpy>
  index_input += AdvDataLen;
 80014d0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80014d4:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 80014d8:	781b      	ldrb	r3, [r3, #0]
 80014da:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 80014de:	4413      	add	r3, r2
 80014e0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80014e4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80014e8:	2218      	movs	r2, #24
 80014ea:	2100      	movs	r1, #0
 80014ec:	4618      	mov	r0, r3
 80014ee:	f000 ff73 	bl	80023d8 <Osal_MemSet>
  rq.ogf = 0x3f;
 80014f2:	233f      	movs	r3, #63	; 0x3f
 80014f4:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x08e;
 80014f8:	238e      	movs	r3, #142	; 0x8e
 80014fa:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80014fe:	f107 0310 	add.w	r3, r7, #16
 8001502:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8001506:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800150a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800150e:	f107 030f 	add.w	r3, r7, #15
 8001512:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8001516:	2301      	movs	r3, #1
 8001518:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800151c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001520:	2100      	movs	r1, #0
 8001522:	4618      	mov	r0, r3
 8001524:	f001 f898 	bl	8002658 <hci_send_req>
 8001528:	4603      	mov	r3, r0
 800152a:	2b00      	cmp	r3, #0
 800152c:	da01      	bge.n	8001532 <aci_gap_update_adv_data+0xd0>
    return BLE_STATUS_TIMEOUT;
 800152e:	23ff      	movs	r3, #255	; 0xff
 8001530:	e004      	b.n	800153c <aci_gap_update_adv_data+0xda>
  return status;
 8001532:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001536:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800153a:	781b      	ldrb	r3, [r3, #0]
}
 800153c:	4618      	mov	r0, r3
 800153e:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8001542:	46bd      	mov	sp, r7
 8001544:	bd80      	pop	{r7, pc}

08001546 <aci_gap_configure_filter_accept_list>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_configure_filter_accept_list( void )
{
 8001546:	b580      	push	{r7, lr}
 8001548:	b088      	sub	sp, #32
 800154a:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800154c:	2300      	movs	r3, #0
 800154e:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8001550:	f107 0308 	add.w	r3, r7, #8
 8001554:	2218      	movs	r2, #24
 8001556:	2100      	movs	r1, #0
 8001558:	4618      	mov	r0, r3
 800155a:	f000 ff3d 	bl	80023d8 <Osal_MemSet>
  rq.ogf = 0x3f;
 800155e:	233f      	movs	r3, #63	; 0x3f
 8001560:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x092;
 8001562:	2392      	movs	r3, #146	; 0x92
 8001564:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8001566:	1dfb      	adds	r3, r7, #7
 8001568:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800156a:	2301      	movs	r3, #1
 800156c:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 800156e:	f107 0308 	add.w	r3, r7, #8
 8001572:	2100      	movs	r1, #0
 8001574:	4618      	mov	r0, r3
 8001576:	f001 f86f 	bl	8002658 <hci_send_req>
 800157a:	4603      	mov	r3, r0
 800157c:	2b00      	cmp	r3, #0
 800157e:	da01      	bge.n	8001584 <aci_gap_configure_filter_accept_list+0x3e>
    return BLE_STATUS_TIMEOUT;
 8001580:	23ff      	movs	r3, #255	; 0xff
 8001582:	e000      	b.n	8001586 <aci_gap_configure_filter_accept_list+0x40>
  return status;
 8001584:	79fb      	ldrb	r3, [r7, #7]
}
 8001586:	4618      	mov	r0, r3
 8001588:	3720      	adds	r7, #32
 800158a:	46bd      	mov	sp, r7
 800158c:	bd80      	pop	{r7, pc}

0800158e <aci_gap_terminate>:

tBleStatus aci_gap_terminate( uint16_t Connection_Handle,
                              uint8_t Reason )
{
 800158e:	b580      	push	{r7, lr}
 8001590:	b0cc      	sub	sp, #304	; 0x130
 8001592:	af00      	add	r7, sp, #0
 8001594:	4602      	mov	r2, r0
 8001596:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800159a:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800159e:	801a      	strh	r2, [r3, #0]
 80015a0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80015a4:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 80015a8:	460a      	mov	r2, r1
 80015aa:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_terminate_cp0 *cp0 = (aci_gap_terminate_cp0*)(cmd_buffer);
 80015ac:	f107 0310 	add.w	r3, r7, #16
 80015b0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 80015b4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80015b8:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80015bc:	2200      	movs	r2, #0
 80015be:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80015c0:	2300      	movs	r3, #0
 80015c2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = Connection_Handle;
 80015c6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80015ca:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80015ce:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 80015d2:	8812      	ldrh	r2, [r2, #0]
 80015d4:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 80015d6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80015da:	3302      	adds	r3, #2
 80015dc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Reason = Reason;
 80015e0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80015e4:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80015e8:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 80015ec:	7812      	ldrb	r2, [r2, #0]
 80015ee:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 80015f0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80015f4:	3301      	adds	r3, #1
 80015f6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80015fa:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80015fe:	2218      	movs	r2, #24
 8001600:	2100      	movs	r1, #0
 8001602:	4618      	mov	r0, r3
 8001604:	f000 fee8 	bl	80023d8 <Osal_MemSet>
  rq.ogf = 0x3f;
 8001608:	233f      	movs	r3, #63	; 0x3f
 800160a:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x093;
 800160e:	2393      	movs	r3, #147	; 0x93
 8001610:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.event = 0x0F;
 8001614:	230f      	movs	r3, #15
 8001616:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  rq.cparam = cmd_buffer;
 800161a:	f107 0310 	add.w	r3, r7, #16
 800161e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8001622:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001626:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800162a:	f107 030f 	add.w	r3, r7, #15
 800162e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8001632:	2301      	movs	r3, #1
 8001634:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8001638:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800163c:	2100      	movs	r1, #0
 800163e:	4618      	mov	r0, r3
 8001640:	f001 f80a 	bl	8002658 <hci_send_req>
 8001644:	4603      	mov	r3, r0
 8001646:	2b00      	cmp	r3, #0
 8001648:	da01      	bge.n	800164e <aci_gap_terminate+0xc0>
    return BLE_STATUS_TIMEOUT;
 800164a:	23ff      	movs	r3, #255	; 0xff
 800164c:	e004      	b.n	8001658 <aci_gap_terminate+0xca>
  return status;
 800164e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001652:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8001656:	781b      	ldrb	r3, [r3, #0]
}
 8001658:	4618      	mov	r0, r3
 800165a:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800165e:	46bd      	mov	sp, r7
 8001660:	bd80      	pop	{r7, pc}

08001662 <aci_gap_numeric_comparison_value_confirm_yesno>:
  return status;
}

tBleStatus aci_gap_numeric_comparison_value_confirm_yesno( uint16_t Connection_Handle,
                                                           uint8_t Confirm_Yes_No )
{
 8001662:	b580      	push	{r7, lr}
 8001664:	b0cc      	sub	sp, #304	; 0x130
 8001666:	af00      	add	r7, sp, #0
 8001668:	4602      	mov	r2, r0
 800166a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800166e:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8001672:	801a      	strh	r2, [r3, #0]
 8001674:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001678:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 800167c:	460a      	mov	r2, r1
 800167e:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_numeric_comparison_value_confirm_yesno_cp0 *cp0 = (aci_gap_numeric_comparison_value_confirm_yesno_cp0*)(cmd_buffer);
 8001680:	f107 0310 	add.w	r3, r7, #16
 8001684:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8001688:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800168c:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8001690:	2200      	movs	r2, #0
 8001692:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8001694:	2300      	movs	r3, #0
 8001696:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = Connection_Handle;
 800169a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800169e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80016a2:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 80016a6:	8812      	ldrh	r2, [r2, #0]
 80016a8:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 80016aa:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80016ae:	3302      	adds	r3, #2
 80016b0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Confirm_Yes_No = Confirm_Yes_No;
 80016b4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80016b8:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80016bc:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 80016c0:	7812      	ldrb	r2, [r2, #0]
 80016c2:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 80016c4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80016c8:	3301      	adds	r3, #1
 80016ca:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80016ce:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80016d2:	2218      	movs	r2, #24
 80016d4:	2100      	movs	r1, #0
 80016d6:	4618      	mov	r0, r3
 80016d8:	f000 fe7e 	bl	80023d8 <Osal_MemSet>
  rq.ogf = 0x3f;
 80016dc:	233f      	movs	r3, #63	; 0x3f
 80016de:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x0a5;
 80016e2:	23a5      	movs	r3, #165	; 0xa5
 80016e4:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80016e8:	f107 0310 	add.w	r3, r7, #16
 80016ec:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80016f0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80016f4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80016f8:	f107 030f 	add.w	r3, r7, #15
 80016fc:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8001700:	2301      	movs	r3, #1
 8001702:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8001706:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800170a:	2100      	movs	r1, #0
 800170c:	4618      	mov	r0, r3
 800170e:	f000 ffa3 	bl	8002658 <hci_send_req>
 8001712:	4603      	mov	r3, r0
 8001714:	2b00      	cmp	r3, #0
 8001716:	da01      	bge.n	800171c <aci_gap_numeric_comparison_value_confirm_yesno+0xba>
    return BLE_STATUS_TIMEOUT;
 8001718:	23ff      	movs	r3, #255	; 0xff
 800171a:	e004      	b.n	8001726 <aci_gap_numeric_comparison_value_confirm_yesno+0xc4>
  return status;
 800171c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001720:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8001724:	781b      	ldrb	r3, [r3, #0]
}
 8001726:	4618      	mov	r0, r3
 8001728:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800172c:	46bd      	mov	sp, r7
 800172e:	bd80      	pop	{r7, pc}

08001730 <aci_gatt_init>:
 */

#include "ble_gatt_aci.h"

tBleStatus aci_gatt_init( void )
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b088      	sub	sp, #32
 8001734:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8001736:	2300      	movs	r3, #0
 8001738:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800173a:	f107 0308 	add.w	r3, r7, #8
 800173e:	2218      	movs	r2, #24
 8001740:	2100      	movs	r1, #0
 8001742:	4618      	mov	r0, r3
 8001744:	f000 fe48 	bl	80023d8 <Osal_MemSet>
  rq.ogf = 0x3f;
 8001748:	233f      	movs	r3, #63	; 0x3f
 800174a:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x101;
 800174c:	f240 1301 	movw	r3, #257	; 0x101
 8001750:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8001752:	1dfb      	adds	r3, r7, #7
 8001754:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8001756:	2301      	movs	r3, #1
 8001758:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 800175a:	f107 0308 	add.w	r3, r7, #8
 800175e:	2100      	movs	r1, #0
 8001760:	4618      	mov	r0, r3
 8001762:	f000 ff79 	bl	8002658 <hci_send_req>
 8001766:	4603      	mov	r3, r0
 8001768:	2b00      	cmp	r3, #0
 800176a:	da01      	bge.n	8001770 <aci_gatt_init+0x40>
    return BLE_STATUS_TIMEOUT;
 800176c:	23ff      	movs	r3, #255	; 0xff
 800176e:	e000      	b.n	8001772 <aci_gatt_init+0x42>
  return status;
 8001770:	79fb      	ldrb	r3, [r7, #7]
}
 8001772:	4618      	mov	r0, r3
 8001774:	3720      	adds	r7, #32
 8001776:	46bd      	mov	sp, r7
 8001778:	bd80      	pop	{r7, pc}

0800177a <aci_gatt_add_service>:
tBleStatus aci_gatt_add_service( uint8_t Service_UUID_Type,
                                 const Service_UUID_t* Service_UUID,
                                 uint8_t Service_Type,
                                 uint8_t Max_Attribute_Records,
                                 uint16_t* Service_Handle )
{
 800177a:	b590      	push	{r4, r7, lr}
 800177c:	b0cf      	sub	sp, #316	; 0x13c
 800177e:	af00      	add	r7, sp, #0
 8001780:	4604      	mov	r4, r0
 8001782:	f507 709c 	add.w	r0, r7, #312	; 0x138
 8001786:	f5a0 709c 	sub.w	r0, r0, #312	; 0x138
 800178a:	6001      	str	r1, [r0, #0]
 800178c:	4610      	mov	r0, r2
 800178e:	4619      	mov	r1, r3
 8001790:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8001794:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 8001798:	4622      	mov	r2, r4
 800179a:	701a      	strb	r2, [r3, #0]
 800179c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80017a0:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 80017a4:	4602      	mov	r2, r0
 80017a6:	701a      	strb	r2, [r3, #0]
 80017a8:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80017ac:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 80017b0:	460a      	mov	r2, r1
 80017b2:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_service_cp0 *cp0 = (aci_gatt_add_service_cp0*)(cmd_buffer);
 80017b4:	f107 0310 	add.w	r3, r7, #16
 80017b8:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  aci_gatt_add_service_cp1 *cp1 = (aci_gatt_add_service_cp1*)(cmd_buffer + 1 + (Service_UUID_Type == 1 ? 2 : (Service_UUID_Type == 2 ? 16 : 0)));
 80017bc:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80017c0:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 80017c4:	781b      	ldrb	r3, [r3, #0]
 80017c6:	2b01      	cmp	r3, #1
 80017c8:	d00a      	beq.n	80017e0 <aci_gatt_add_service+0x66>
 80017ca:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80017ce:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 80017d2:	781b      	ldrb	r3, [r3, #0]
 80017d4:	2b02      	cmp	r3, #2
 80017d6:	d101      	bne.n	80017dc <aci_gatt_add_service+0x62>
 80017d8:	2311      	movs	r3, #17
 80017da:	e002      	b.n	80017e2 <aci_gatt_add_service+0x68>
 80017dc:	2301      	movs	r3, #1
 80017de:	e000      	b.n	80017e2 <aci_gatt_add_service+0x68>
 80017e0:	2303      	movs	r3, #3
 80017e2:	f107 0210 	add.w	r2, r7, #16
 80017e6:	4413      	add	r3, r2
 80017e8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  aci_gatt_add_service_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 80017ec:	f107 030c 	add.w	r3, r7, #12
 80017f0:	2203      	movs	r2, #3
 80017f2:	2100      	movs	r1, #0
 80017f4:	4618      	mov	r0, r3
 80017f6:	f000 fdef 	bl	80023d8 <Osal_MemSet>
  int index_input = 0;
 80017fa:	2300      	movs	r3, #0
 80017fc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Service_UUID_Type = Service_UUID_Type;
 8001800:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8001804:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8001808:	f2a2 1231 	subw	r2, r2, #305	; 0x131
 800180c:	7812      	ldrb	r2, [r2, #0]
 800180e:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8001810:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001814:	3301      	adds	r3, #1
 8001816:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Service_UUID_Type )
 800181a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800181e:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 8001822:	781b      	ldrb	r3, [r3, #0]
 8001824:	2b01      	cmp	r3, #1
 8001826:	d002      	beq.n	800182e <aci_gatt_add_service+0xb4>
 8001828:	2b02      	cmp	r3, #2
 800182a:	d004      	beq.n	8001836 <aci_gatt_add_service+0xbc>
 800182c:	e007      	b.n	800183e <aci_gatt_add_service+0xc4>
    {
      case 1: size = 2; break;
 800182e:	2302      	movs	r3, #2
 8001830:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 8001834:	e005      	b.n	8001842 <aci_gatt_add_service+0xc8>
      case 2: size = 16; break;
 8001836:	2310      	movs	r3, #16
 8001838:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 800183c:	e001      	b.n	8001842 <aci_gatt_add_service+0xc8>
      default: return BLE_STATUS_ERROR;
 800183e:	2397      	movs	r3, #151	; 0x97
 8001840:	e06c      	b.n	800191c <aci_gatt_add_service+0x1a2>
    }
    Osal_MemCpy( (void*)&cp0->Service_UUID, (const void*)Service_UUID, size );
 8001842:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8001846:	1c58      	adds	r0, r3, #1
 8001848:	f897 2137 	ldrb.w	r2, [r7, #311]	; 0x137
 800184c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8001850:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8001854:	6819      	ldr	r1, [r3, #0]
 8001856:	f000 fdaf 	bl	80023b8 <Osal_MemCpy>
    index_input += size;
 800185a:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 800185e:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8001862:	4413      	add	r3, r2
 8001864:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Service_Type = Service_Type;
 8001868:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800186c:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8001870:	f5a2 7299 	sub.w	r2, r2, #306	; 0x132
 8001874:	7812      	ldrb	r2, [r2, #0]
 8001876:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 8001878:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800187c:	3301      	adds	r3, #1
 800187e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Max_Attribute_Records = Max_Attribute_Records;
 8001882:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001886:	f507 729c 	add.w	r2, r7, #312	; 0x138
 800188a:	f2a2 1233 	subw	r2, r2, #307	; 0x133
 800188e:	7812      	ldrb	r2, [r2, #0]
 8001890:	705a      	strb	r2, [r3, #1]
    }
    index_input += 1;
 8001892:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001896:	3301      	adds	r3, #1
 8001898:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800189c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80018a0:	2218      	movs	r2, #24
 80018a2:	2100      	movs	r1, #0
 80018a4:	4618      	mov	r0, r3
 80018a6:	f000 fd97 	bl	80023d8 <Osal_MemSet>
  rq.ogf = 0x3f;
 80018aa:	233f      	movs	r3, #63	; 0x3f
 80018ac:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x102;
 80018b0:	f44f 7381 	mov.w	r3, #258	; 0x102
 80018b4:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80018b8:	f107 0310 	add.w	r3, r7, #16
 80018bc:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80018c0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80018c4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &resp;
 80018c8:	f107 030c 	add.w	r3, r7, #12
 80018cc:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = sizeof(resp);
 80018d0:	2303      	movs	r3, #3
 80018d2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80018d6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80018da:	2100      	movs	r1, #0
 80018dc:	4618      	mov	r0, r3
 80018de:	f000 febb 	bl	8002658 <hci_send_req>
 80018e2:	4603      	mov	r3, r0
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	da01      	bge.n	80018ec <aci_gatt_add_service+0x172>
    return BLE_STATUS_TIMEOUT;
 80018e8:	23ff      	movs	r3, #255	; 0xff
 80018ea:	e017      	b.n	800191c <aci_gatt_add_service+0x1a2>
  if ( resp.Status )
 80018ec:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80018f0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80018f4:	781b      	ldrb	r3, [r3, #0]
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d005      	beq.n	8001906 <aci_gatt_add_service+0x18c>
    return resp.Status;
 80018fa:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80018fe:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001902:	781b      	ldrb	r3, [r3, #0]
 8001904:	e00a      	b.n	800191c <aci_gatt_add_service+0x1a2>
  *Service_Handle = resp.Service_Handle;
 8001906:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800190a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800190e:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8001912:	b29a      	uxth	r2, r3
 8001914:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8001918:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 800191a:	2300      	movs	r3, #0
}
 800191c:	4618      	mov	r0, r3
 800191e:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 8001922:	46bd      	mov	sp, r7
 8001924:	bd90      	pop	{r4, r7, pc}

08001926 <aci_gatt_add_char>:
                              uint8_t Security_Permissions,
                              uint8_t GATT_Evt_Mask,
                              uint8_t Enc_Key_Size,
                              uint8_t Is_Variable,
                              uint16_t* Char_Handle )
{
 8001926:	b590      	push	{r4, r7, lr}
 8001928:	b0d1      	sub	sp, #324	; 0x144
 800192a:	af00      	add	r7, sp, #0
 800192c:	4604      	mov	r4, r0
 800192e:	4608      	mov	r0, r1
 8001930:	f507 71a0 	add.w	r1, r7, #320	; 0x140
 8001934:	f5a1 719c 	sub.w	r1, r1, #312	; 0x138
 8001938:	600a      	str	r2, [r1, #0]
 800193a:	4619      	mov	r1, r3
 800193c:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8001940:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 8001944:	4622      	mov	r2, r4
 8001946:	801a      	strh	r2, [r3, #0]
 8001948:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800194c:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 8001950:	4602      	mov	r2, r0
 8001952:	701a      	strb	r2, [r3, #0]
 8001954:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8001958:	f5a3 739d 	sub.w	r3, r3, #314	; 0x13a
 800195c:	460a      	mov	r2, r1
 800195e:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_char_cp0 *cp0 = (aci_gatt_add_char_cp0*)(cmd_buffer);
 8001960:	f107 0318 	add.w	r3, r7, #24
 8001964:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  aci_gatt_add_char_cp1 *cp1 = (aci_gatt_add_char_cp1*)(cmd_buffer + 2 + 1 + (Char_UUID_Type == 1 ? 2 : (Char_UUID_Type == 2 ? 16 : 0)));
 8001968:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800196c:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 8001970:	781b      	ldrb	r3, [r3, #0]
 8001972:	2b01      	cmp	r3, #1
 8001974:	d00a      	beq.n	800198c <aci_gatt_add_char+0x66>
 8001976:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800197a:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 800197e:	781b      	ldrb	r3, [r3, #0]
 8001980:	2b02      	cmp	r3, #2
 8001982:	d101      	bne.n	8001988 <aci_gatt_add_char+0x62>
 8001984:	2313      	movs	r3, #19
 8001986:	e002      	b.n	800198e <aci_gatt_add_char+0x68>
 8001988:	2303      	movs	r3, #3
 800198a:	e000      	b.n	800198e <aci_gatt_add_char+0x68>
 800198c:	2305      	movs	r3, #5
 800198e:	f107 0218 	add.w	r2, r7, #24
 8001992:	4413      	add	r3, r2
 8001994:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gatt_add_char_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8001998:	f107 0314 	add.w	r3, r7, #20
 800199c:	2203      	movs	r2, #3
 800199e:	2100      	movs	r1, #0
 80019a0:	4618      	mov	r0, r3
 80019a2:	f000 fd19 	bl	80023d8 <Osal_MemSet>
  int index_input = 0;
 80019a6:	2300      	movs	r3, #0
 80019a8:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Service_Handle = Service_Handle;
 80019ac:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80019b0:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 80019b4:	f5a2 7299 	sub.w	r2, r2, #306	; 0x132
 80019b8:	8812      	ldrh	r2, [r2, #0]
 80019ba:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 80019bc:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80019c0:	3302      	adds	r3, #2
 80019c2:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Char_UUID_Type = Char_UUID_Type;
 80019c6:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80019ca:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 80019ce:	f2a2 1233 	subw	r2, r2, #307	; 0x133
 80019d2:	7812      	ldrb	r2, [r2, #0]
 80019d4:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 80019d6:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80019da:	3301      	adds	r3, #1
 80019dc:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Char_UUID_Type )
 80019e0:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80019e4:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 80019e8:	781b      	ldrb	r3, [r3, #0]
 80019ea:	2b01      	cmp	r3, #1
 80019ec:	d002      	beq.n	80019f4 <aci_gatt_add_char+0xce>
 80019ee:	2b02      	cmp	r3, #2
 80019f0:	d004      	beq.n	80019fc <aci_gatt_add_char+0xd6>
 80019f2:	e007      	b.n	8001a04 <aci_gatt_add_char+0xde>
    {
      case 1: size = 2; break;
 80019f4:	2302      	movs	r3, #2
 80019f6:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
 80019fa:	e005      	b.n	8001a08 <aci_gatt_add_char+0xe2>
      case 2: size = 16; break;
 80019fc:	2310      	movs	r3, #16
 80019fe:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
 8001a02:	e001      	b.n	8001a08 <aci_gatt_add_char+0xe2>
      default: return BLE_STATUS_ERROR;
 8001a04:	2397      	movs	r3, #151	; 0x97
 8001a06:	e091      	b.n	8001b2c <aci_gatt_add_char+0x206>
    }
    Osal_MemCpy( (void*)&cp0->Char_UUID, (const void*)Char_UUID, size );
 8001a08:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8001a0c:	1cd8      	adds	r0, r3, #3
 8001a0e:	f897 213f 	ldrb.w	r2, [r7, #319]	; 0x13f
 8001a12:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8001a16:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8001a1a:	6819      	ldr	r1, [r3, #0]
 8001a1c:	f000 fccc 	bl	80023b8 <Osal_MemCpy>
    index_input += size;
 8001a20:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 8001a24:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8001a28:	4413      	add	r3, r2
 8001a2a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Char_Value_Length = Char_Value_Length;
 8001a2e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8001a32:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 8001a36:	f5a2 729d 	sub.w	r2, r2, #314	; 0x13a
 8001a3a:	8812      	ldrh	r2, [r2, #0]
 8001a3c:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 8001a3e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8001a42:	3302      	adds	r3, #2
 8001a44:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Char_Properties = Char_Properties;
 8001a48:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8001a4c:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
 8001a50:	709a      	strb	r2, [r3, #2]
    }
    index_input += 1;
 8001a52:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8001a56:	3301      	adds	r3, #1
 8001a58:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Security_Permissions = Security_Permissions;
 8001a5c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8001a60:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 8001a64:	70da      	strb	r2, [r3, #3]
    }
    index_input += 1;
 8001a66:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8001a6a:	3301      	adds	r3, #1
 8001a6c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->GATT_Evt_Mask = GATT_Evt_Mask;
 8001a70:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8001a74:	f897 2158 	ldrb.w	r2, [r7, #344]	; 0x158
 8001a78:	711a      	strb	r2, [r3, #4]
    }
    index_input += 1;
 8001a7a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8001a7e:	3301      	adds	r3, #1
 8001a80:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Enc_Key_Size = Enc_Key_Size;
 8001a84:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8001a88:	f897 215c 	ldrb.w	r2, [r7, #348]	; 0x15c
 8001a8c:	715a      	strb	r2, [r3, #5]
    }
    index_input += 1;
 8001a8e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8001a92:	3301      	adds	r3, #1
 8001a94:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Is_Variable = Is_Variable;
 8001a98:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8001a9c:	f897 2160 	ldrb.w	r2, [r7, #352]	; 0x160
 8001aa0:	719a      	strb	r2, [r3, #6]
    }
    index_input += 1;
 8001aa2:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8001aa6:	3301      	adds	r3, #1
 8001aa8:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8001aac:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001ab0:	2218      	movs	r2, #24
 8001ab2:	2100      	movs	r1, #0
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	f000 fc8f 	bl	80023d8 <Osal_MemSet>
  rq.ogf = 0x3f;
 8001aba:	233f      	movs	r3, #63	; 0x3f
 8001abc:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
  rq.ocf = 0x104;
 8001ac0:	f44f 7382 	mov.w	r3, #260	; 0x104
 8001ac4:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
  rq.cparam = cmd_buffer;
 8001ac8:	f107 0318 	add.w	r3, r7, #24
 8001acc:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.clen = index_input;
 8001ad0:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8001ad4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  rq.rparam = &resp;
 8001ad8:	f107 0314 	add.w	r3, r7, #20
 8001adc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  rq.rlen = sizeof(resp);
 8001ae0:	2303      	movs	r3, #3
 8001ae2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if ( hci_send_req(&rq, FALSE) < 0 )
 8001ae6:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001aea:	2100      	movs	r1, #0
 8001aec:	4618      	mov	r0, r3
 8001aee:	f000 fdb3 	bl	8002658 <hci_send_req>
 8001af2:	4603      	mov	r3, r0
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	da01      	bge.n	8001afc <aci_gatt_add_char+0x1d6>
    return BLE_STATUS_TIMEOUT;
 8001af8:	23ff      	movs	r3, #255	; 0xff
 8001afa:	e017      	b.n	8001b2c <aci_gatt_add_char+0x206>
  if ( resp.Status )
 8001afc:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8001b00:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001b04:	781b      	ldrb	r3, [r3, #0]
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d005      	beq.n	8001b16 <aci_gatt_add_char+0x1f0>
    return resp.Status;
 8001b0a:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8001b0e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001b12:	781b      	ldrb	r3, [r3, #0]
 8001b14:	e00a      	b.n	8001b2c <aci_gatt_add_char+0x206>
  *Char_Handle = resp.Char_Handle;
 8001b16:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8001b1a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001b1e:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8001b22:	b29a      	uxth	r2, r3
 8001b24:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8001b28:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8001b2a:	2300      	movs	r3, #0
}
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	f507 77a2 	add.w	r7, r7, #324	; 0x144
 8001b32:	46bd      	mov	sp, r7
 8001b34:	bd90      	pop	{r4, r7, pc}

08001b36 <aci_gatt_add_char_desc>:
                                   uint8_t Access_Permissions,
                                   uint8_t GATT_Evt_Mask,
                                   uint8_t Enc_Key_Size,
                                   uint8_t Is_Variable,
                                   uint16_t* Char_Desc_Handle )
{
 8001b36:	b590      	push	{r4, r7, lr}
 8001b38:	b0d1      	sub	sp, #324	; 0x144
 8001b3a:	af00      	add	r7, sp, #0
 8001b3c:	4604      	mov	r4, r0
 8001b3e:	4608      	mov	r0, r1
 8001b40:	4611      	mov	r1, r2
 8001b42:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 8001b46:	f5a2 729e 	sub.w	r2, r2, #316	; 0x13c
 8001b4a:	6013      	str	r3, [r2, #0]
 8001b4c:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8001b50:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 8001b54:	4622      	mov	r2, r4
 8001b56:	801a      	strh	r2, [r3, #0]
 8001b58:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8001b5c:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001b60:	4602      	mov	r2, r0
 8001b62:	801a      	strh	r2, [r3, #0]
 8001b64:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8001b68:	f2a3 1335 	subw	r3, r3, #309	; 0x135
 8001b6c:	460a      	mov	r2, r1
 8001b6e:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_char_desc_cp0 *cp0 = (aci_gatt_add_char_desc_cp0*)(cmd_buffer);
 8001b70:	f107 0314 	add.w	r3, r7, #20
 8001b74:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  aci_gatt_add_char_desc_cp1 *cp1 = (aci_gatt_add_char_desc_cp1*)(cmd_buffer + 2 + 2 + 1 + (Char_Desc_Uuid_Type == 1 ? 2 : (Char_Desc_Uuid_Type == 2 ? 16 : 0)));
 8001b78:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8001b7c:	f2a3 1335 	subw	r3, r3, #309	; 0x135
 8001b80:	781b      	ldrb	r3, [r3, #0]
 8001b82:	2b01      	cmp	r3, #1
 8001b84:	d00a      	beq.n	8001b9c <aci_gatt_add_char_desc+0x66>
 8001b86:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8001b8a:	f2a3 1335 	subw	r3, r3, #309	; 0x135
 8001b8e:	781b      	ldrb	r3, [r3, #0]
 8001b90:	2b02      	cmp	r3, #2
 8001b92:	d101      	bne.n	8001b98 <aci_gatt_add_char_desc+0x62>
 8001b94:	2315      	movs	r3, #21
 8001b96:	e002      	b.n	8001b9e <aci_gatt_add_char_desc+0x68>
 8001b98:	2305      	movs	r3, #5
 8001b9a:	e000      	b.n	8001b9e <aci_gatt_add_char_desc+0x68>
 8001b9c:	2307      	movs	r3, #7
 8001b9e:	f107 0214 	add.w	r2, r7, #20
 8001ba2:	4413      	add	r3, r2
 8001ba4:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gatt_add_char_desc_cp2 *cp2 = (aci_gatt_add_char_desc_cp2*)(cmd_buffer + 2 + 2 + 1 + (Char_Desc_Uuid_Type == 1 ? 2 : (Char_Desc_Uuid_Type == 2 ? 16 : 0)) + 1 + 1 + Char_Desc_Value_Length * (sizeof(uint8_t)));
 8001ba8:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8001bac:	f2a3 1335 	subw	r3, r3, #309	; 0x135
 8001bb0:	781b      	ldrb	r3, [r3, #0]
 8001bb2:	2b01      	cmp	r3, #1
 8001bb4:	d00a      	beq.n	8001bcc <aci_gatt_add_char_desc+0x96>
 8001bb6:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8001bba:	f2a3 1335 	subw	r3, r3, #309	; 0x135
 8001bbe:	781b      	ldrb	r3, [r3, #0]
 8001bc0:	2b02      	cmp	r3, #2
 8001bc2:	d101      	bne.n	8001bc8 <aci_gatt_add_char_desc+0x92>
 8001bc4:	2317      	movs	r3, #23
 8001bc6:	e002      	b.n	8001bce <aci_gatt_add_char_desc+0x98>
 8001bc8:	2307      	movs	r3, #7
 8001bca:	e000      	b.n	8001bce <aci_gatt_add_char_desc+0x98>
 8001bcc:	2309      	movs	r3, #9
 8001bce:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 8001bd2:	4413      	add	r3, r2
 8001bd4:	f107 0214 	add.w	r2, r7, #20
 8001bd8:	4413      	add	r3, r2
 8001bda:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  aci_gatt_add_char_desc_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8001bde:	f107 0310 	add.w	r3, r7, #16
 8001be2:	2203      	movs	r2, #3
 8001be4:	2100      	movs	r1, #0
 8001be6:	4618      	mov	r0, r3
 8001be8:	f000 fbf6 	bl	80023d8 <Osal_MemSet>
  int index_input = 0;
 8001bec:	2300      	movs	r3, #0
 8001bee:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  cp0->Service_Handle = Service_Handle;
 8001bf2:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8001bf6:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 8001bfa:	f5a2 7299 	sub.w	r2, r2, #306	; 0x132
 8001bfe:	8812      	ldrh	r2, [r2, #0]
 8001c00:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8001c02:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001c06:	3302      	adds	r3, #2
 8001c08:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  cp0->Char_Handle = Char_Handle;
 8001c0c:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8001c10:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 8001c14:	f5a2 729a 	sub.w	r2, r2, #308	; 0x134
 8001c18:	8812      	ldrh	r2, [r2, #0]
 8001c1a:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 8001c1c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001c20:	3302      	adds	r3, #2
 8001c22:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  cp0->Char_Desc_Uuid_Type = Char_Desc_Uuid_Type;
 8001c26:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8001c2a:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 8001c2e:	f2a2 1235 	subw	r2, r2, #309	; 0x135
 8001c32:	7812      	ldrb	r2, [r2, #0]
 8001c34:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 8001c36:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001c3a:	3301      	adds	r3, #1
 8001c3c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Char_Desc_Uuid_Type )
 8001c40:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8001c44:	f2a3 1335 	subw	r3, r3, #309	; 0x135
 8001c48:	781b      	ldrb	r3, [r3, #0]
 8001c4a:	2b01      	cmp	r3, #1
 8001c4c:	d002      	beq.n	8001c54 <aci_gatt_add_char_desc+0x11e>
 8001c4e:	2b02      	cmp	r3, #2
 8001c50:	d004      	beq.n	8001c5c <aci_gatt_add_char_desc+0x126>
 8001c52:	e007      	b.n	8001c64 <aci_gatt_add_char_desc+0x12e>
    {
      case 1: size = 2; break;
 8001c54:	2302      	movs	r3, #2
 8001c56:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
 8001c5a:	e005      	b.n	8001c68 <aci_gatt_add_char_desc+0x132>
      case 2: size = 16; break;
 8001c5c:	2310      	movs	r3, #16
 8001c5e:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
 8001c62:	e001      	b.n	8001c68 <aci_gatt_add_char_desc+0x132>
      default: return BLE_STATUS_ERROR;
 8001c64:	2397      	movs	r3, #151	; 0x97
 8001c66:	e0a9      	b.n	8001dbc <aci_gatt_add_char_desc+0x286>
    }
    Osal_MemCpy( (void*)&cp0->Char_Desc_Uuid, (const void*)Char_Desc_Uuid, size );
 8001c68:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8001c6c:	1d58      	adds	r0, r3, #5
 8001c6e:	f897 213f 	ldrb.w	r2, [r7, #319]	; 0x13f
 8001c72:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8001c76:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001c7a:	6819      	ldr	r1, [r3, #0]
 8001c7c:	f000 fb9c 	bl	80023b8 <Osal_MemCpy>
    index_input += size;
 8001c80:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 8001c84:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8001c88:	4413      	add	r3, r2
 8001c8a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    {
      cp1->Char_Desc_Value_Max_Len = Char_Desc_Value_Max_Len;
 8001c8e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8001c92:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
 8001c96:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 8001c98:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001c9c:	3301      	adds	r3, #1
 8001c9e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    {
      cp1->Char_Desc_Value_Length = Char_Desc_Value_Length;
 8001ca2:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8001ca6:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 8001caa:	705a      	strb	r2, [r3, #1]
    }
    index_input += 1;
 8001cac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001cb0:	3301      	adds	r3, #1
 8001cb2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    Osal_MemCpy( (void*)&cp1->Char_Desc_Value, (const void*)Char_Desc_Value, Char_Desc_Value_Length );
 8001cb6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8001cba:	3302      	adds	r3, #2
 8001cbc:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 8001cc0:	f8d7 1158 	ldr.w	r1, [r7, #344]	; 0x158
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	f000 fb77 	bl	80023b8 <Osal_MemCpy>
    index_input += Char_Desc_Value_Length;
 8001cca:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 8001cce:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8001cd2:	4413      	add	r3, r2
 8001cd4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    {
      cp2->Security_Permissions = Security_Permissions;
 8001cd8:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8001cdc:	f897 215c 	ldrb.w	r2, [r7, #348]	; 0x15c
 8001ce0:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 8001ce2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001ce6:	3301      	adds	r3, #1
 8001ce8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    {
      cp2->Access_Permissions = Access_Permissions;
 8001cec:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8001cf0:	f897 2160 	ldrb.w	r2, [r7, #352]	; 0x160
 8001cf4:	705a      	strb	r2, [r3, #1]
    }
    index_input += 1;
 8001cf6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001cfa:	3301      	adds	r3, #1
 8001cfc:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    {
      cp2->GATT_Evt_Mask = GATT_Evt_Mask;
 8001d00:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8001d04:	f897 2164 	ldrb.w	r2, [r7, #356]	; 0x164
 8001d08:	709a      	strb	r2, [r3, #2]
    }
    index_input += 1;
 8001d0a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001d0e:	3301      	adds	r3, #1
 8001d10:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    {
      cp2->Enc_Key_Size = Enc_Key_Size;
 8001d14:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8001d18:	f897 2168 	ldrb.w	r2, [r7, #360]	; 0x168
 8001d1c:	70da      	strb	r2, [r3, #3]
    }
    index_input += 1;
 8001d1e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001d22:	3301      	adds	r3, #1
 8001d24:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    {
      cp2->Is_Variable = Is_Variable;
 8001d28:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8001d2c:	f897 216c 	ldrb.w	r2, [r7, #364]	; 0x16c
 8001d30:	711a      	strb	r2, [r3, #4]
    }
    index_input += 1;
 8001d32:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001d36:	3301      	adds	r3, #1
 8001d38:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8001d3c:	f507 738a 	add.w	r3, r7, #276	; 0x114
 8001d40:	2218      	movs	r2, #24
 8001d42:	2100      	movs	r1, #0
 8001d44:	4618      	mov	r0, r3
 8001d46:	f000 fb47 	bl	80023d8 <Osal_MemSet>
  rq.ogf = 0x3f;
 8001d4a:	233f      	movs	r3, #63	; 0x3f
 8001d4c:	f8a7 3114 	strh.w	r3, [r7, #276]	; 0x114
  rq.ocf = 0x105;
 8001d50:	f240 1305 	movw	r3, #261	; 0x105
 8001d54:	f8a7 3116 	strh.w	r3, [r7, #278]	; 0x116
  rq.cparam = cmd_buffer;
 8001d58:	f107 0314 	add.w	r3, r7, #20
 8001d5c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.clen = index_input;
 8001d60:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001d64:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rparam = &resp;
 8001d68:	f107 0310 	add.w	r3, r7, #16
 8001d6c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  rq.rlen = sizeof(resp);
 8001d70:	2303      	movs	r3, #3
 8001d72:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  if ( hci_send_req(&rq, FALSE) < 0 )
 8001d76:	f507 738a 	add.w	r3, r7, #276	; 0x114
 8001d7a:	2100      	movs	r1, #0
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	f000 fc6b 	bl	8002658 <hci_send_req>
 8001d82:	4603      	mov	r3, r0
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	da01      	bge.n	8001d8c <aci_gatt_add_char_desc+0x256>
    return BLE_STATUS_TIMEOUT;
 8001d88:	23ff      	movs	r3, #255	; 0xff
 8001d8a:	e017      	b.n	8001dbc <aci_gatt_add_char_desc+0x286>
  if ( resp.Status )
 8001d8c:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8001d90:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001d94:	781b      	ldrb	r3, [r3, #0]
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d005      	beq.n	8001da6 <aci_gatt_add_char_desc+0x270>
    return resp.Status;
 8001d9a:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8001d9e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001da2:	781b      	ldrb	r3, [r3, #0]
 8001da4:	e00a      	b.n	8001dbc <aci_gatt_add_char_desc+0x286>
  *Char_Desc_Handle = resp.Char_Desc_Handle;
 8001da6:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8001daa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001dae:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8001db2:	b29a      	uxth	r2, r3
 8001db4:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 8001db8:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8001dba:	2300      	movs	r3, #0
}
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	f507 77a2 	add.w	r7, r7, #324	; 0x144
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	bd90      	pop	{r4, r7, pc}

08001dc6 <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value( uint16_t Service_Handle,
                                       uint16_t Char_Handle,
                                       uint8_t Val_Offset,
                                       uint8_t Char_Value_Length,
                                       const uint8_t* Char_Value )
{
 8001dc6:	b5b0      	push	{r4, r5, r7, lr}
 8001dc8:	b0cc      	sub	sp, #304	; 0x130
 8001dca:	af00      	add	r7, sp, #0
 8001dcc:	4605      	mov	r5, r0
 8001dce:	460c      	mov	r4, r1
 8001dd0:	4610      	mov	r0, r2
 8001dd2:	4619      	mov	r1, r3
 8001dd4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001dd8:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8001ddc:	462a      	mov	r2, r5
 8001dde:	801a      	strh	r2, [r3, #0]
 8001de0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001de4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001de8:	4622      	mov	r2, r4
 8001dea:	801a      	strh	r2, [r3, #0]
 8001dec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001df0:	f2a3 132d 	subw	r3, r3, #301	; 0x12d
 8001df4:	4602      	mov	r2, r0
 8001df6:	701a      	strb	r2, [r3, #0]
 8001df8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001dfc:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 8001e00:	460a      	mov	r2, r1
 8001e02:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_update_char_value_cp0 *cp0 = (aci_gatt_update_char_value_cp0*)(cmd_buffer);
 8001e04:	f107 0310 	add.w	r3, r7, #16
 8001e08:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8001e0c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001e10:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8001e14:	2200      	movs	r2, #0
 8001e16:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8001e18:	2300      	movs	r3, #0
 8001e1a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Service_Handle = Service_Handle;
 8001e1e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001e22:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8001e26:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8001e2a:	8812      	ldrh	r2, [r2, #0]
 8001e2c:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8001e2e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001e32:	3302      	adds	r3, #2
 8001e34:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Handle = Char_Handle;
 8001e38:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001e3c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8001e40:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8001e44:	8812      	ldrh	r2, [r2, #0]
 8001e46:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 8001e48:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001e4c:	3302      	adds	r3, #2
 8001e4e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Val_Offset = Val_Offset;
 8001e52:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001e56:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8001e5a:	f2a2 122d 	subw	r2, r2, #301	; 0x12d
 8001e5e:	7812      	ldrb	r2, [r2, #0]
 8001e60:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 8001e62:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001e66:	3301      	adds	r3, #1
 8001e68:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Value_Length = Char_Value_Length;
 8001e6c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001e70:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8001e74:	f5a2 7297 	sub.w	r2, r2, #302	; 0x12e
 8001e78:	7812      	ldrb	r2, [r2, #0]
 8001e7a:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8001e7c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001e80:	3301      	adds	r3, #1
 8001e82:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->Char_Value, (const void*)Char_Value, Char_Value_Length );
 8001e86:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001e8a:	1d98      	adds	r0, r3, #6
 8001e8c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001e90:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 8001e94:	781b      	ldrb	r3, [r3, #0]
 8001e96:	461a      	mov	r2, r3
 8001e98:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001e9c:	f000 fa8c 	bl	80023b8 <Osal_MemCpy>
  index_input += Char_Value_Length;
 8001ea0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001ea4:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 8001ea8:	781b      	ldrb	r3, [r3, #0]
 8001eaa:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8001eae:	4413      	add	r3, r2
 8001eb0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8001eb4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001eb8:	2218      	movs	r2, #24
 8001eba:	2100      	movs	r1, #0
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	f000 fa8b 	bl	80023d8 <Osal_MemSet>
  rq.ogf = 0x3f;
 8001ec2:	233f      	movs	r3, #63	; 0x3f
 8001ec4:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x106;
 8001ec8:	f44f 7383 	mov.w	r3, #262	; 0x106
 8001ecc:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8001ed0:	f107 0310 	add.w	r3, r7, #16
 8001ed4:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8001ed8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001edc:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8001ee0:	f107 030f 	add.w	r3, r7, #15
 8001ee4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8001ee8:	2301      	movs	r3, #1
 8001eea:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8001eee:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001ef2:	2100      	movs	r1, #0
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	f000 fbaf 	bl	8002658 <hci_send_req>
 8001efa:	4603      	mov	r3, r0
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	da01      	bge.n	8001f04 <aci_gatt_update_char_value+0x13e>
    return BLE_STATUS_TIMEOUT;
 8001f00:	23ff      	movs	r3, #255	; 0xff
 8001f02:	e004      	b.n	8001f0e <aci_gatt_update_char_value+0x148>
  return status;
 8001f04:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001f08:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8001f0c:	781b      	ldrb	r3, [r3, #0]
}
 8001f0e:	4618      	mov	r0, r3
 8001f10:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8001f14:	46bd      	mov	sp, r7
 8001f16:	bdb0      	pop	{r4, r5, r7, pc}

08001f18 <aci_gatt_allow_read>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gatt_allow_read( uint16_t Connection_Handle )
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b0cc      	sub	sp, #304	; 0x130
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	4602      	mov	r2, r0
 8001f20:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001f24:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8001f28:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_allow_read_cp0 *cp0 = (aci_gatt_allow_read_cp0*)(cmd_buffer);
 8001f2a:	f107 0310 	add.w	r3, r7, #16
 8001f2e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8001f32:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001f36:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8001f3e:	2300      	movs	r3, #0
 8001f40:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = Connection_Handle;
 8001f44:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001f48:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8001f4c:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8001f50:	8812      	ldrh	r2, [r2, #0]
 8001f52:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8001f54:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001f58:	3302      	adds	r3, #2
 8001f5a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8001f5e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001f62:	2218      	movs	r2, #24
 8001f64:	2100      	movs	r1, #0
 8001f66:	4618      	mov	r0, r3
 8001f68:	f000 fa36 	bl	80023d8 <Osal_MemSet>
  rq.ogf = 0x3f;
 8001f6c:	233f      	movs	r3, #63	; 0x3f
 8001f6e:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x127;
 8001f72:	f240 1327 	movw	r3, #295	; 0x127
 8001f76:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8001f7a:	f107 0310 	add.w	r3, r7, #16
 8001f7e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8001f82:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001f86:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8001f8a:	f107 030f 	add.w	r3, r7, #15
 8001f8e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8001f92:	2301      	movs	r3, #1
 8001f94:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8001f98:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001f9c:	2100      	movs	r1, #0
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	f000 fb5a 	bl	8002658 <hci_send_req>
 8001fa4:	4603      	mov	r3, r0
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	da01      	bge.n	8001fae <aci_gatt_allow_read+0x96>
    return BLE_STATUS_TIMEOUT;
 8001faa:	23ff      	movs	r3, #255	; 0xff
 8001fac:	e004      	b.n	8001fb8 <aci_gatt_allow_read+0xa0>
  return status;
 8001fae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001fb2:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8001fb6:	781b      	ldrb	r3, [r3, #0]
}
 8001fb8:	4618      	mov	r0, r3
 8001fba:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	bd80      	pop	{r7, pc}

08001fc2 <aci_hal_write_config_data>:
}

tBleStatus aci_hal_write_config_data( uint8_t Offset,
                                      uint8_t Length,
                                      const uint8_t* Value )
{
 8001fc2:	b580      	push	{r7, lr}
 8001fc4:	b0cc      	sub	sp, #304	; 0x130
 8001fc6:	af00      	add	r7, sp, #0
 8001fc8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001fcc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001fd0:	601a      	str	r2, [r3, #0]
 8001fd2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001fd6:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8001fda:	4602      	mov	r2, r0
 8001fdc:	701a      	strb	r2, [r3, #0]
 8001fde:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001fe2:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8001fe6:	460a      	mov	r2, r1
 8001fe8:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_write_config_data_cp0 *cp0 = (aci_hal_write_config_data_cp0*)(cmd_buffer);
 8001fea:	f107 0310 	add.w	r3, r7, #16
 8001fee:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8001ff2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001ff6:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8001ffe:	2300      	movs	r3, #0
 8002000:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Offset = Offset;
 8002004:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8002008:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800200c:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8002010:	7812      	ldrb	r2, [r2, #0]
 8002012:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8002014:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8002018:	3301      	adds	r3, #1
 800201a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Length = Length;
 800201e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8002022:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8002026:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800202a:	7812      	ldrb	r2, [r2, #0]
 800202c:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800202e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8002032:	3301      	adds	r3, #1
 8002034:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->Value, (const void*)Value, Length );
 8002038:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800203c:	1c98      	adds	r0, r3, #2
 800203e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8002042:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8002046:	781a      	ldrb	r2, [r3, #0]
 8002048:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800204c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8002050:	6819      	ldr	r1, [r3, #0]
 8002052:	f000 f9b1 	bl	80023b8 <Osal_MemCpy>
  index_input += Length;
 8002056:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800205a:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800205e:	781b      	ldrb	r3, [r3, #0]
 8002060:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8002064:	4413      	add	r3, r2
 8002066:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800206a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800206e:	2218      	movs	r2, #24
 8002070:	2100      	movs	r1, #0
 8002072:	4618      	mov	r0, r3
 8002074:	f000 f9b0 	bl	80023d8 <Osal_MemSet>
  rq.ogf = 0x3f;
 8002078:	233f      	movs	r3, #63	; 0x3f
 800207a:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00c;
 800207e:	230c      	movs	r3, #12
 8002080:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8002084:	f107 0310 	add.w	r3, r7, #16
 8002088:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800208c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8002090:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8002094:	f107 030f 	add.w	r3, r7, #15
 8002098:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800209c:	2301      	movs	r3, #1
 800209e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80020a2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80020a6:	2100      	movs	r1, #0
 80020a8:	4618      	mov	r0, r3
 80020aa:	f000 fad5 	bl	8002658 <hci_send_req>
 80020ae:	4603      	mov	r3, r0
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	da01      	bge.n	80020b8 <aci_hal_write_config_data+0xf6>
    return BLE_STATUS_TIMEOUT;
 80020b4:	23ff      	movs	r3, #255	; 0xff
 80020b6:	e004      	b.n	80020c2 <aci_hal_write_config_data+0x100>
  return status;
 80020b8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80020bc:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80020c0:	781b      	ldrb	r3, [r3, #0]
}
 80020c2:	4618      	mov	r0, r3
 80020c4:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80020c8:	46bd      	mov	sp, r7
 80020ca:	bd80      	pop	{r7, pc}

080020cc <aci_hal_set_tx_power_level>:
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_tx_power_level( uint8_t En_High_Power,
                                       uint8_t PA_Level )
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b0cc      	sub	sp, #304	; 0x130
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	4602      	mov	r2, r0
 80020d4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80020d8:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 80020dc:	701a      	strb	r2, [r3, #0]
 80020de:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80020e2:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 80020e6:	460a      	mov	r2, r1
 80020e8:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_tx_power_level_cp0 *cp0 = (aci_hal_set_tx_power_level_cp0*)(cmd_buffer);
 80020ea:	f107 0310 	add.w	r3, r7, #16
 80020ee:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 80020f2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80020f6:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80020fa:	2200      	movs	r2, #0
 80020fc:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80020fe:	2300      	movs	r3, #0
 8002100:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->En_High_Power = En_High_Power;
 8002104:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8002108:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800210c:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8002110:	7812      	ldrb	r2, [r2, #0]
 8002112:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8002114:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8002118:	3301      	adds	r3, #1
 800211a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->PA_Level = PA_Level;
 800211e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8002122:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8002126:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800212a:	7812      	ldrb	r2, [r2, #0]
 800212c:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800212e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8002132:	3301      	adds	r3, #1
 8002134:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8002138:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800213c:	2218      	movs	r2, #24
 800213e:	2100      	movs	r1, #0
 8002140:	4618      	mov	r0, r3
 8002142:	f000 f949 	bl	80023d8 <Osal_MemSet>
  rq.ogf = 0x3f;
 8002146:	233f      	movs	r3, #63	; 0x3f
 8002148:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00f;
 800214c:	230f      	movs	r3, #15
 800214e:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8002152:	f107 0310 	add.w	r3, r7, #16
 8002156:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800215a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800215e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8002162:	f107 030f 	add.w	r3, r7, #15
 8002166:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800216a:	2301      	movs	r3, #1
 800216c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8002170:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002174:	2100      	movs	r1, #0
 8002176:	4618      	mov	r0, r3
 8002178:	f000 fa6e 	bl	8002658 <hci_send_req>
 800217c:	4603      	mov	r3, r0
 800217e:	2b00      	cmp	r3, #0
 8002180:	da01      	bge.n	8002186 <aci_hal_set_tx_power_level+0xba>
    return BLE_STATUS_TIMEOUT;
 8002182:	23ff      	movs	r3, #255	; 0xff
 8002184:	e004      	b.n	8002190 <aci_hal_set_tx_power_level+0xc4>
  return status;
 8002186:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800218a:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800218e:	781b      	ldrb	r3, [r3, #0]
}
 8002190:	4618      	mov	r0, r3
 8002192:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8002196:	46bd      	mov	sp, r7
 8002198:	bd80      	pop	{r7, pc}

0800219a <hci_reset>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus hci_reset( void )
{
 800219a:	b580      	push	{r7, lr}
 800219c:	b088      	sub	sp, #32
 800219e:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 80021a0:	2300      	movs	r3, #0
 80021a2:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80021a4:	f107 0308 	add.w	r3, r7, #8
 80021a8:	2218      	movs	r2, #24
 80021aa:	2100      	movs	r1, #0
 80021ac:	4618      	mov	r0, r3
 80021ae:	f000 f913 	bl	80023d8 <Osal_MemSet>
  rq.ogf = 0x03;
 80021b2:	2303      	movs	r3, #3
 80021b4:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x003;
 80021b6:	2303      	movs	r3, #3
 80021b8:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 80021ba:	1dfb      	adds	r3, r7, #7
 80021bc:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 80021be:	2301      	movs	r3, #1
 80021c0:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 80021c2:	f107 0308 	add.w	r3, r7, #8
 80021c6:	2100      	movs	r1, #0
 80021c8:	4618      	mov	r0, r3
 80021ca:	f000 fa45 	bl	8002658 <hci_send_req>
 80021ce:	4603      	mov	r3, r0
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	da01      	bge.n	80021d8 <hci_reset+0x3e>
    return BLE_STATUS_TIMEOUT;
 80021d4:	23ff      	movs	r3, #255	; 0xff
 80021d6:	e000      	b.n	80021da <hci_reset+0x40>
  return status;
 80021d8:	79fb      	ldrb	r3, [r7, #7]
}
 80021da:	4618      	mov	r0, r3
 80021dc:	3720      	adds	r7, #32
 80021de:	46bd      	mov	sp, r7
 80021e0:	bd80      	pop	{r7, pc}

080021e2 <hci_read_rssi>:
  return BLE_STATUS_SUCCESS;
}

tBleStatus hci_read_rssi( uint16_t Connection_Handle,
                          uint8_t* RSSI )
{
 80021e2:	b580      	push	{r7, lr}
 80021e4:	b0cc      	sub	sp, #304	; 0x130
 80021e6:	af00      	add	r7, sp, #0
 80021e8:	4602      	mov	r2, r0
 80021ea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80021ee:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80021f2:	6019      	str	r1, [r3, #0]
 80021f4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80021f8:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 80021fc:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  hci_read_rssi_cp0 *cp0 = (hci_read_rssi_cp0*)(cmd_buffer);
 80021fe:	f107 0310 	add.w	r3, r7, #16
 8002202:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  hci_read_rssi_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8002206:	f107 030c 	add.w	r3, r7, #12
 800220a:	2204      	movs	r2, #4
 800220c:	2100      	movs	r1, #0
 800220e:	4618      	mov	r0, r3
 8002210:	f000 f8e2 	bl	80023d8 <Osal_MemSet>
  int index_input = 0;
 8002214:	2300      	movs	r3, #0
 8002216:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = Connection_Handle;
 800221a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800221e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8002222:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8002226:	8812      	ldrh	r2, [r2, #0]
 8002228:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800222a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800222e:	3302      	adds	r3, #2
 8002230:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8002234:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002238:	2218      	movs	r2, #24
 800223a:	2100      	movs	r1, #0
 800223c:	4618      	mov	r0, r3
 800223e:	f000 f8cb 	bl	80023d8 <Osal_MemSet>
  rq.ogf = 0x05;
 8002242:	2305      	movs	r3, #5
 8002244:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x005;
 8002248:	2305      	movs	r3, #5
 800224a:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800224e:	f107 0310 	add.w	r3, r7, #16
 8002252:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8002256:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800225a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &resp;
 800225e:	f107 030c 	add.w	r3, r7, #12
 8002262:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = sizeof(resp);
 8002266:	2304      	movs	r3, #4
 8002268:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800226c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002270:	2100      	movs	r1, #0
 8002272:	4618      	mov	r0, r3
 8002274:	f000 f9f0 	bl	8002658 <hci_send_req>
 8002278:	4603      	mov	r3, r0
 800227a:	2b00      	cmp	r3, #0
 800227c:	da01      	bge.n	8002282 <hci_read_rssi+0xa0>
    return BLE_STATUS_TIMEOUT;
 800227e:	23ff      	movs	r3, #255	; 0xff
 8002280:	e018      	b.n	80022b4 <hci_read_rssi+0xd2>
  if ( resp.Status )
 8002282:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8002286:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800228a:	781b      	ldrb	r3, [r3, #0]
 800228c:	2b00      	cmp	r3, #0
 800228e:	d005      	beq.n	800229c <hci_read_rssi+0xba>
    return resp.Status;
 8002290:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8002294:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8002298:	781b      	ldrb	r3, [r3, #0]
 800229a:	e00b      	b.n	80022b4 <hci_read_rssi+0xd2>
  *RSSI = resp.RSSI;
 800229c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80022a0:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80022a4:	78da      	ldrb	r2, [r3, #3]
 80022a6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80022aa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	701a      	strb	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 80022b2:	2300      	movs	r3, #0
}
 80022b4:	4618      	mov	r0, r3
 80022b6:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80022ba:	46bd      	mov	sp, r7
 80022bc:	bd80      	pop	{r7, pc}

080022be <hci_le_set_default_phy>:
}

tBleStatus hci_le_set_default_phy( uint8_t ALL_PHYS,
                                   uint8_t TX_PHYS,
                                   uint8_t RX_PHYS )
{
 80022be:	b590      	push	{r4, r7, lr}
 80022c0:	b0cd      	sub	sp, #308	; 0x134
 80022c2:	af00      	add	r7, sp, #0
 80022c4:	4604      	mov	r4, r0
 80022c6:	4608      	mov	r0, r1
 80022c8:	4611      	mov	r1, r2
 80022ca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80022ce:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 80022d2:	4622      	mov	r2, r4
 80022d4:	701a      	strb	r2, [r3, #0]
 80022d6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80022da:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 80022de:	4602      	mov	r2, r0
 80022e0:	701a      	strb	r2, [r3, #0]
 80022e2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80022e6:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 80022ea:	460a      	mov	r2, r1
 80022ec:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  hci_le_set_default_phy_cp0 *cp0 = (hci_le_set_default_phy_cp0*)(cmd_buffer);
 80022ee:	f107 0310 	add.w	r3, r7, #16
 80022f2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 80022f6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80022fa:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80022fe:	2200      	movs	r2, #0
 8002300:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8002302:	2300      	movs	r3, #0
 8002304:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->ALL_PHYS = ALL_PHYS;
 8002308:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800230c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8002310:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8002314:	7812      	ldrb	r2, [r2, #0]
 8002316:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8002318:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800231c:	3301      	adds	r3, #1
 800231e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->TX_PHYS = TX_PHYS;
 8002322:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8002326:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800232a:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800232e:	7812      	ldrb	r2, [r2, #0]
 8002330:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8002332:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8002336:	3301      	adds	r3, #1
 8002338:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->RX_PHYS = RX_PHYS;
 800233c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8002340:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8002344:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 8002348:	7812      	ldrb	r2, [r2, #0]
 800234a:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800234c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8002350:	3301      	adds	r3, #1
 8002352:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8002356:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800235a:	2218      	movs	r2, #24
 800235c:	2100      	movs	r1, #0
 800235e:	4618      	mov	r0, r3
 8002360:	f000 f83a 	bl	80023d8 <Osal_MemSet>
  rq.ogf = 0x08;
 8002364:	2308      	movs	r3, #8
 8002366:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x031;
 800236a:	2331      	movs	r3, #49	; 0x31
 800236c:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8002370:	f107 0310 	add.w	r3, r7, #16
 8002374:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8002378:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800237c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8002380:	f107 030f 	add.w	r3, r7, #15
 8002384:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8002388:	2301      	movs	r3, #1
 800238a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800238e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002392:	2100      	movs	r1, #0
 8002394:	4618      	mov	r0, r3
 8002396:	f000 f95f 	bl	8002658 <hci_send_req>
 800239a:	4603      	mov	r3, r0
 800239c:	2b00      	cmp	r3, #0
 800239e:	da01      	bge.n	80023a4 <hci_le_set_default_phy+0xe6>
    return BLE_STATUS_TIMEOUT;
 80023a0:	23ff      	movs	r3, #255	; 0xff
 80023a2:	e004      	b.n	80023ae <hci_le_set_default_phy+0xf0>
  return status;
 80023a4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80023a8:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80023ac:	781b      	ldrb	r3, [r3, #0]
}
 80023ae:	4618      	mov	r0, r3
 80023b0:	f507 779a 	add.w	r7, r7, #308	; 0x134
 80023b4:	46bd      	mov	sp, r7
 80023b6:	bd90      	pop	{r4, r7, pc}

080023b8 <Osal_MemCpy>:
 * Osal_MemCpy
 * 
 */
 
void* Osal_MemCpy( void *dest, const void *src, unsigned int size )
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b084      	sub	sp, #16
 80023bc:	af00      	add	r7, sp, #0
 80023be:	60f8      	str	r0, [r7, #12]
 80023c0:	60b9      	str	r1, [r7, #8]
 80023c2:	607a      	str	r2, [r7, #4]
  return memcpy( dest, src, size ); 
 80023c4:	687a      	ldr	r2, [r7, #4]
 80023c6:	68b9      	ldr	r1, [r7, #8]
 80023c8:	68f8      	ldr	r0, [r7, #12]
 80023ca:	f008 fc39 	bl	800ac40 <memcpy>
 80023ce:	4603      	mov	r3, r0
}
 80023d0:	4618      	mov	r0, r3
 80023d2:	3710      	adds	r7, #16
 80023d4:	46bd      	mov	sp, r7
 80023d6:	bd80      	pop	{r7, pc}

080023d8 <Osal_MemSet>:
 * Osal_MemSet
 * 
 */
 
void* Osal_MemSet( void *ptr, int value, unsigned int size )
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	b084      	sub	sp, #16
 80023dc:	af00      	add	r7, sp, #0
 80023de:	60f8      	str	r0, [r7, #12]
 80023e0:	60b9      	str	r1, [r7, #8]
 80023e2:	607a      	str	r2, [r7, #4]
  return memset( ptr, value, size );
 80023e4:	687a      	ldr	r2, [r7, #4]
 80023e6:	68b9      	ldr	r1, [r7, #8]
 80023e8:	68f8      	ldr	r0, [r7, #12]
 80023ea:	f008 fb43 	bl	800aa74 <memset>
 80023ee:	4603      	mov	r3, r0
}
 80023f0:	4618      	mov	r0, r3
 80023f2:	3710      	adds	r7, #16
 80023f4:	46bd      	mov	sp, r7
 80023f6:	bd80      	pop	{r7, pc}

080023f8 <SHCI_C2_BLE_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_BLE_Init( SHCI_C2_Ble_Init_Cmd_Packet_t *pCmdPacket )
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b088      	sub	sp, #32
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 8002400:	f107 030c 	add.w	r3, r7, #12
 8002404:	61fb      	str	r3, [r7, #28]

 shci_send( SHCI_OPCODE_C2_BLE_INIT,
            sizeof( SHCI_C2_Ble_Init_Cmd_Param_t ),
            (uint8_t*)&pCmdPacket->Param,
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	f103 020c 	add.w	r2, r3, #12
 shci_send( SHCI_OPCODE_C2_BLE_INIT,
 800240c:	69fb      	ldr	r3, [r7, #28]
 800240e:	212e      	movs	r1, #46	; 0x2e
 8002410:	f64f 4066 	movw	r0, #64614	; 0xfc66
 8002414:	f000 fabc 	bl	8002990 <shci_send>
            p_rsp );
 
  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8002418:	69fb      	ldr	r3, [r7, #28]
 800241a:	330b      	adds	r3, #11
 800241c:	78db      	ldrb	r3, [r3, #3]
}
 800241e:	4618      	mov	r0, r3
 8002420:	3720      	adds	r7, #32
 8002422:	46bd      	mov	sp, r7
 8002424:	bd80      	pop	{r7, pc}
	...

08002428 <SHCI_GetWirelessFwInfo>:
 *  Local System COMMAND
 *  These commands are NOT sent to the CPU2
 */

SHCI_CmdStatus_t SHCI_GetWirelessFwInfo( WirelessFwInfo_t* pWirelessInfo )
{
 8002428:	b480      	push	{r7}
 800242a:	b08b      	sub	sp, #44	; 0x2c
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
  uint32_t ipccdba = 0;
 8002430:	2300      	movs	r3, #0
 8002432:	613b      	str	r3, [r7, #16]
  MB_RefTable_t * p_RefTable = NULL;
 8002434:	2300      	movs	r3, #0
 8002436:	60fb      	str	r3, [r7, #12]
  uint32_t wireless_firmware_version = 0;
 8002438:	2300      	movs	r3, #0
 800243a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t wireless_firmware_memorySize = 0;
 800243c:	2300      	movs	r3, #0
 800243e:	623b      	str	r3, [r7, #32]
  uint32_t wireless_firmware_infoStack = 0;
 8002440:	2300      	movs	r3, #0
 8002442:	61fb      	str	r3, [r7, #28]
  MB_FUS_DeviceInfoTable_t * p_fus_device_info_table = NULL;
 8002444:	2300      	movs	r3, #0
 8002446:	60bb      	str	r3, [r7, #8]
  uint32_t fus_version = 0;
 8002448:	2300      	movs	r3, #0
 800244a:	61bb      	str	r3, [r7, #24]
  uint32_t fus_memorySize = 0;
 800244c:	2300      	movs	r3, #0
 800244e:	617b      	str	r3, [r7, #20]

  ipccdba = READ_BIT( FLASH->IPCCBR, FLASH_IPCCBR_IPCCDBA );
 8002450:	4b4a      	ldr	r3, [pc, #296]	; (800257c <SHCI_GetWirelessFwInfo+0x154>)
 8002452:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002454:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8002458:	613b      	str	r3, [r7, #16]
  /**
   * The Device Info Table mapping depends on which firmware is running on CPU2.
   * If the FUS is running on CPU2, FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD shall be written in the table.
   * Otherwise, it means the Wireless Firmware is running on the CPU2
   */
  p_fus_device_info_table = (MB_FUS_DeviceInfoTable_t*)(*(uint32_t*)((ipccdba<<2) + SRAM2A_BASE));
 800245a:	693b      	ldr	r3, [r7, #16]
 800245c:	009b      	lsls	r3, r3, #2
 800245e:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8002462:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	60bb      	str	r3, [r7, #8]

  if(p_fus_device_info_table->DeviceInfoTableState == FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD)
 800246a:	68bb      	ldr	r3, [r7, #8]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	4a44      	ldr	r2, [pc, #272]	; (8002580 <SHCI_GetWirelessFwInfo+0x158>)
 8002470:	4293      	cmp	r3, r2
 8002472:	d10f      	bne.n	8002494 <SHCI_GetWirelessFwInfo+0x6c>
    /* The FUS is running on CPU2 */
    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_fus_device_info_table->WirelessStackVersion;
 8002474:	68bb      	ldr	r3, [r7, #8]
 8002476:	695b      	ldr	r3, [r3, #20]
 8002478:	627b      	str	r3, [r7, #36]	; 0x24
    wireless_firmware_memorySize =  p_fus_device_info_table->WirelessStackMemorySize;
 800247a:	68bb      	ldr	r3, [r7, #8]
 800247c:	699b      	ldr	r3, [r3, #24]
 800247e:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_fus_device_info_table->WirelessFirmwareBleInfo;
 8002480:	68bb      	ldr	r3, [r7, #8]
 8002482:	69db      	ldr	r3, [r3, #28]
 8002484:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_fus_device_info_table->FusVersion;
 8002486:	68bb      	ldr	r3, [r7, #8]
 8002488:	68db      	ldr	r3, [r3, #12]
 800248a:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_fus_device_info_table->FusMemorySize;
 800248c:	68bb      	ldr	r3, [r7, #8]
 800248e:	691b      	ldr	r3, [r3, #16]
 8002490:	617b      	str	r3, [r7, #20]
 8002492:	e01a      	b.n	80024ca <SHCI_GetWirelessFwInfo+0xa2>
  }
  else
  {
    /* The Wireless Firmware is running on CPU2 */
    p_RefTable = (MB_RefTable_t*)((ipccdba<<2) + SRAM2A_BASE);
 8002494:	693b      	ldr	r3, [r7, #16]
 8002496:	009b      	lsls	r3, r3, #2
 8002498:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800249c:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 80024a0:	60fb      	str	r3, [r7, #12]

    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_RefTable->p_device_info_table->WirelessFwInfoTable.Version;
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	691b      	ldr	r3, [r3, #16]
 80024a8:	627b      	str	r3, [r7, #36]	; 0x24
    wireless_firmware_memorySize =  p_RefTable->p_device_info_table->WirelessFwInfoTable.MemorySize;
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	695b      	ldr	r3, [r3, #20]
 80024b0:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_RefTable->p_device_info_table->WirelessFwInfoTable.InfoStack;
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	699b      	ldr	r3, [r3, #24]
 80024b8:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_RefTable->p_device_info_table->FusInfoTable.Version;
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	685b      	ldr	r3, [r3, #4]
 80024c0:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_RefTable->p_device_info_table->FusInfoTable.MemorySize;
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	689b      	ldr	r3, [r3, #8]
 80024c8:	617b      	str	r3, [r7, #20]

  /**
   *  Retrieve the WirelessFwInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->VersionMajor       = ((wireless_firmware_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 80024ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024cc:	0e1b      	lsrs	r3, r3, #24
 80024ce:	b2da      	uxtb	r2, r3
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	701a      	strb	r2, [r3, #0]
  pWirelessInfo->VersionMinor       = ((wireless_firmware_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 80024d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024d6:	0c1b      	lsrs	r3, r3, #16
 80024d8:	b2da      	uxtb	r2, r3
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	705a      	strb	r2, [r3, #1]
  pWirelessInfo->VersionSub         = ((wireless_firmware_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 80024de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024e0:	0a1b      	lsrs	r3, r3, #8
 80024e2:	b2da      	uxtb	r2, r3
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	709a      	strb	r2, [r3, #2]
  pWirelessInfo->VersionBranch      = ((wireless_firmware_version & INFO_VERSION_BRANCH_MASK) >> INFO_VERSION_BRANCH_OFFSET);
 80024e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ea:	091b      	lsrs	r3, r3, #4
 80024ec:	b2db      	uxtb	r3, r3
 80024ee:	f003 030f 	and.w	r3, r3, #15
 80024f2:	b2da      	uxtb	r2, r3
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	70da      	strb	r2, [r3, #3]
  pWirelessInfo->VersionReleaseType = ((wireless_firmware_version & INFO_VERSION_TYPE_MASK) >> INFO_VERSION_TYPE_OFFSET);
 80024f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024fa:	b2db      	uxtb	r3, r3
 80024fc:	f003 030f 	and.w	r3, r3, #15
 8002500:	b2da      	uxtb	r2, r3
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	711a      	strb	r2, [r3, #4]

  pWirelessInfo->MemorySizeSram2B   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 8002506:	6a3b      	ldr	r3, [r7, #32]
 8002508:	0e1b      	lsrs	r3, r3, #24
 800250a:	b2da      	uxtb	r2, r3
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	715a      	strb	r2, [r3, #5]
  pWirelessInfo->MemorySizeSram2A   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 8002510:	6a3b      	ldr	r3, [r7, #32]
 8002512:	0c1b      	lsrs	r3, r3, #16
 8002514:	b2da      	uxtb	r2, r3
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	719a      	strb	r2, [r3, #6]
  pWirelessInfo->MemorySizeSram1    = ((wireless_firmware_memorySize & INFO_SIZE_SRAM1_MASK) >> INFO_SIZE_SRAM1_OFFSET);
 800251a:	6a3b      	ldr	r3, [r7, #32]
 800251c:	0a1b      	lsrs	r3, r3, #8
 800251e:	b2da      	uxtb	r2, r3
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	71da      	strb	r2, [r3, #7]
  pWirelessInfo->MemorySizeFlash    = ((wireless_firmware_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 8002524:	6a3b      	ldr	r3, [r7, #32]
 8002526:	b2da      	uxtb	r2, r3
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	721a      	strb	r2, [r3, #8]

  pWirelessInfo->StackType          = ((wireless_firmware_infoStack & INFO_STACK_TYPE_MASK) >> INFO_STACK_TYPE_OFFSET);
 800252c:	69fb      	ldr	r3, [r7, #28]
 800252e:	b2da      	uxtb	r2, r3
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	725a      	strb	r2, [r3, #9]

  /**
   *  Retrieve the FusInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->FusVersionMajor       = ((fus_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 8002534:	69bb      	ldr	r3, [r7, #24]
 8002536:	0e1b      	lsrs	r3, r3, #24
 8002538:	b2da      	uxtb	r2, r3
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	729a      	strb	r2, [r3, #10]
  pWirelessInfo->FusVersionMinor       = ((fus_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 800253e:	69bb      	ldr	r3, [r7, #24]
 8002540:	0c1b      	lsrs	r3, r3, #16
 8002542:	b2da      	uxtb	r2, r3
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	72da      	strb	r2, [r3, #11]
  pWirelessInfo->FusVersionSub         = ((fus_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 8002548:	69bb      	ldr	r3, [r7, #24]
 800254a:	0a1b      	lsrs	r3, r3, #8
 800254c:	b2da      	uxtb	r2, r3
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	731a      	strb	r2, [r3, #12]

  pWirelessInfo->FusMemorySizeSram2B   = ((fus_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 8002552:	697b      	ldr	r3, [r7, #20]
 8002554:	0e1b      	lsrs	r3, r3, #24
 8002556:	b2da      	uxtb	r2, r3
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	735a      	strb	r2, [r3, #13]
  pWirelessInfo->FusMemorySizeSram2A   = ((fus_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 800255c:	697b      	ldr	r3, [r7, #20]
 800255e:	0c1b      	lsrs	r3, r3, #16
 8002560:	b2da      	uxtb	r2, r3
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	739a      	strb	r2, [r3, #14]
  pWirelessInfo->FusMemorySizeFlash    = ((fus_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 8002566:	697b      	ldr	r3, [r7, #20]
 8002568:	b2da      	uxtb	r2, r3
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	73da      	strb	r2, [r3, #15]

  return (SHCI_Success);
 800256e:	2300      	movs	r3, #0
}
 8002570:	4618      	mov	r0, r3
 8002572:	372c      	adds	r7, #44	; 0x2c
 8002574:	46bd      	mov	sp, r7
 8002576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257a:	4770      	bx	lr
 800257c:	58004000 	.word	0x58004000
 8002580:	a94656b9 	.word	0xa94656b9

08002584 <hci_init>:
static void TlEvtReceived(TL_EvtPacket_t *hcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	b082      	sub	sp, #8
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
 800258c:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((HCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	685b      	ldr	r3, [r3, #4]
 8002592:	4a08      	ldr	r2, [pc, #32]	; (80025b4 <hci_init+0x30>)
 8002594:	6013      	str	r3, [r2, #0]
  hciContext.UserEvtRx = UserEvtRx;
 8002596:	4a08      	ldr	r2, [pc, #32]	; (80025b8 <hci_init+0x34>)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	61d3      	str	r3, [r2, #28]

  hci_register_io_bus (&hciContext.io);
 800259c:	4806      	ldr	r0, [pc, #24]	; (80025b8 <hci_init+0x34>)
 800259e:	f000 f979 	bl	8002894 <hci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((HCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 80025a2:	683b      	ldr	r3, [r7, #0]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	4618      	mov	r0, r3
 80025a8:	f000 f8da 	bl	8002760 <TlInit>

  return;
 80025ac:	bf00      	nop
}
 80025ae:	3708      	adds	r7, #8
 80025b0:	46bd      	mov	sp, r7
 80025b2:	bd80      	pop	{r7, pc}
 80025b4:	20000244 	.word	0x20000244
 80025b8:	2000021c 	.word	0x2000021c

080025bc <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	b084      	sub	sp, #16
 80025c0:	af00      	add	r7, sp, #0
  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 80025c2:	4822      	ldr	r0, [pc, #136]	; (800264c <hci_user_evt_proc+0x90>)
 80025c4:	f000 fcf2 	bl	8002fac <LST_is_empty>
 80025c8:	4603      	mov	r3, r0
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d12b      	bne.n	8002626 <hci_user_evt_proc+0x6a>
 80025ce:	4b20      	ldr	r3, [pc, #128]	; (8002650 <hci_user_evt_proc+0x94>)
 80025d0:	781b      	ldrb	r3, [r3, #0]
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d027      	beq.n	8002626 <hci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &HciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 80025d6:	f107 030c 	add.w	r3, r7, #12
 80025da:	4619      	mov	r1, r3
 80025dc:	481b      	ldr	r0, [pc, #108]	; (800264c <hci_user_evt_proc+0x90>)
 80025de:	f000 fd74 	bl	80030ca <LST_remove_head>

    if (hciContext.UserEvtRx != NULL)
 80025e2:	4b1c      	ldr	r3, [pc, #112]	; (8002654 <hci_user_evt_proc+0x98>)
 80025e4:	69db      	ldr	r3, [r3, #28]
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d00c      	beq.n	8002604 <hci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = HCI_TL_UserEventFlow_Enable;
 80025ee:	2301      	movs	r3, #1
 80025f0:	713b      	strb	r3, [r7, #4]
      hciContext.UserEvtRx((void *)&UserEvtRxParam);
 80025f2:	4b18      	ldr	r3, [pc, #96]	; (8002654 <hci_user_evt_proc+0x98>)
 80025f4:	69db      	ldr	r3, [r3, #28]
 80025f6:	1d3a      	adds	r2, r7, #4
 80025f8:	4610      	mov	r0, r2
 80025fa:	4798      	blx	r3
      UserEventFlow = UserEvtRxParam.status;
 80025fc:	793a      	ldrb	r2, [r7, #4]
 80025fe:	4b14      	ldr	r3, [pc, #80]	; (8002650 <hci_user_evt_proc+0x94>)
 8002600:	701a      	strb	r2, [r3, #0]
 8002602:	e002      	b.n	800260a <hci_user_evt_proc+0x4e>
    }
    else
    {
      UserEventFlow = HCI_TL_UserEventFlow_Enable;
 8002604:	4b12      	ldr	r3, [pc, #72]	; (8002650 <hci_user_evt_proc+0x94>)
 8002606:	2201      	movs	r2, #1
 8002608:	701a      	strb	r2, [r3, #0]
    }

    if(UserEventFlow != HCI_TL_UserEventFlow_Disable)
 800260a:	4b11      	ldr	r3, [pc, #68]	; (8002650 <hci_user_evt_proc+0x94>)
 800260c:	781b      	ldrb	r3, [r3, #0]
 800260e:	2b00      	cmp	r3, #0
 8002610:	d004      	beq.n	800261c <hci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	4618      	mov	r0, r3
 8002616:	f000 fc07 	bl	8002e28 <TL_MM_EvtDone>
 800261a:	e004      	b.n	8002626 <hci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &HciAsynchEventQueue, (tListNode *)phcievtbuffer );
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	4619      	mov	r1, r3
 8002620:	480a      	ldr	r0, [pc, #40]	; (800264c <hci_user_evt_proc+0x90>)
 8002622:	f000 fce5 	bl	8002ff0 <LST_insert_head>
    }
  }

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 8002626:	4809      	ldr	r0, [pc, #36]	; (800264c <hci_user_evt_proc+0x90>)
 8002628:	f000 fcc0 	bl	8002fac <LST_is_empty>
 800262c:	4603      	mov	r3, r0
 800262e:	2b00      	cmp	r3, #0
 8002630:	d107      	bne.n	8002642 <hci_user_evt_proc+0x86>
 8002632:	4b07      	ldr	r3, [pc, #28]	; (8002650 <hci_user_evt_proc+0x94>)
 8002634:	781b      	ldrb	r3, [r3, #0]
 8002636:	2b00      	cmp	r3, #0
 8002638:	d003      	beq.n	8002642 <hci_user_evt_proc+0x86>
  {
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue);
 800263a:	4804      	ldr	r0, [pc, #16]	; (800264c <hci_user_evt_proc+0x90>)
 800263c:	f005 fe12 	bl	8008264 <hci_notify_asynch_evt>
  }


  return;
 8002640:	bf00      	nop
 8002642:	bf00      	nop
}
 8002644:	3710      	adds	r7, #16
 8002646:	46bd      	mov	sp, r7
 8002648:	bd80      	pop	{r7, pc}
 800264a:	bf00      	nop
 800264c:	200001dc 	.word	0x200001dc
 8002650:	200001e8 	.word	0x200001e8
 8002654:	2000021c 	.word	0x2000021c

08002658 <hci_send_req>:

  return;
}

int hci_send_req(struct hci_request *p_cmd, uint8_t async)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	b088      	sub	sp, #32
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
 8002660:	460b      	mov	r3, r1
 8002662:	70fb      	strb	r3, [r7, #3]
  TL_CsEvt_t    *pcommand_status_event;
  TL_EvtPacket_t *pevtpacket;
  uint8_t hci_cmd_complete_return_parameters_length;
  HCI_TL_CmdStatus_t local_cmd_status;

  NotifyCmdStatus(HCI_TL_CmdBusy);
 8002664:	2000      	movs	r0, #0
 8002666:	f000 f8d1 	bl	800280c <NotifyCmdStatus>
  local_cmd_status = HCI_TL_CmdBusy;
 800266a:	2300      	movs	r3, #0
 800266c:	77fb      	strb	r3, [r7, #31]
  opcode = ((p_cmd->ocf) & 0x03ff) | ((p_cmd->ogf) << 10);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	885b      	ldrh	r3, [r3, #2]
 8002672:	b21b      	sxth	r3, r3
 8002674:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002678:	b21a      	sxth	r2, r3
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	881b      	ldrh	r3, [r3, #0]
 800267e:	029b      	lsls	r3, r3, #10
 8002680:	b21b      	sxth	r3, r3
 8002682:	4313      	orrs	r3, r2
 8002684:	b21b      	sxth	r3, r3
 8002686:	83bb      	strh	r3, [r7, #28]
  
  CmdRspStatusFlag = HCI_TL_CMD_RESP_WAIT;
 8002688:	4b33      	ldr	r3, [pc, #204]	; (8002758 <hci_send_req+0x100>)
 800268a:	2201      	movs	r2, #1
 800268c:	701a      	strb	r2, [r3, #0]
  SendCmd(opcode, p_cmd->clen, p_cmd->cparam);
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	68db      	ldr	r3, [r3, #12]
 8002692:	b2d9      	uxtb	r1, r3
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	689a      	ldr	r2, [r3, #8]
 8002698:	8bbb      	ldrh	r3, [r7, #28]
 800269a:	4618      	mov	r0, r3
 800269c:	f000 f890 	bl	80027c0 <SendCmd>

  while(local_cmd_status == HCI_TL_CmdBusy)
 80026a0:	e04e      	b.n	8002740 <hci_send_req+0xe8>
  {
    hci_cmd_resp_wait(HCI_TL_DEFAULT_TIMEOUT);
 80026a2:	f248 00e8 	movw	r0, #33000	; 0x80e8
 80026a6:	f005 fdf4 	bl	8008292 <hci_cmd_resp_wait>

    /**
     * Process Cmd Event
     */
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 80026aa:	e043      	b.n	8002734 <hci_send_req+0xdc>
    {
      LST_remove_head (&HciCmdEventQueue, (tListNode **)&pevtpacket);
 80026ac:	f107 030c 	add.w	r3, r7, #12
 80026b0:	4619      	mov	r1, r3
 80026b2:	482a      	ldr	r0, [pc, #168]	; (800275c <hci_send_req+0x104>)
 80026b4:	f000 fd09 	bl	80030ca <LST_remove_head>

      if(pevtpacket->evtserial.evt.evtcode == TL_BLEEVT_CS_OPCODE)
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	7a5b      	ldrb	r3, [r3, #9]
 80026bc:	2b0f      	cmp	r3, #15
 80026be:	d114      	bne.n	80026ea <hci_send_req+0x92>
      {
        pcommand_status_event = (TL_CsEvt_t*)pevtpacket->evtserial.evt.payload;
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	330b      	adds	r3, #11
 80026c4:	613b      	str	r3, [r7, #16]
        if(pcommand_status_event->cmdcode == opcode)
 80026c6:	693b      	ldr	r3, [r7, #16]
 80026c8:	885b      	ldrh	r3, [r3, #2]
 80026ca:	b29b      	uxth	r3, r3
 80026cc:	8bba      	ldrh	r2, [r7, #28]
 80026ce:	429a      	cmp	r2, r3
 80026d0:	d104      	bne.n	80026dc <hci_send_req+0x84>
        {
          *(uint8_t *)(p_cmd->rparam) = pcommand_status_event->status;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	691b      	ldr	r3, [r3, #16]
 80026d6:	693a      	ldr	r2, [r7, #16]
 80026d8:	7812      	ldrb	r2, [r2, #0]
 80026da:	701a      	strb	r2, [r3, #0]
        }

        if(pcommand_status_event->numcmd != 0)
 80026dc:	693b      	ldr	r3, [r7, #16]
 80026de:	785b      	ldrb	r3, [r3, #1]
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d027      	beq.n	8002734 <hci_send_req+0xdc>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 80026e4:	2301      	movs	r3, #1
 80026e6:	77fb      	strb	r3, [r7, #31]
 80026e8:	e024      	b.n	8002734 <hci_send_req+0xdc>
        }
      }
      else
      {
        pcommand_complete_event = (TL_CcEvt_t*)pevtpacket->evtserial.evt.payload;
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	330b      	adds	r3, #11
 80026ee:	61bb      	str	r3, [r7, #24]

        if(pcommand_complete_event->cmdcode == opcode)
 80026f0:	69bb      	ldr	r3, [r7, #24]
 80026f2:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80026f6:	b29b      	uxth	r3, r3
 80026f8:	8bba      	ldrh	r2, [r7, #28]
 80026fa:	429a      	cmp	r2, r3
 80026fc:	d114      	bne.n	8002728 <hci_send_req+0xd0>
        {
          hci_cmd_complete_return_parameters_length = pevtpacket->evtserial.evt.plen - TL_EVT_HDR_SIZE;
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	7a9b      	ldrb	r3, [r3, #10]
 8002702:	3b03      	subs	r3, #3
 8002704:	75fb      	strb	r3, [r7, #23]
          p_cmd->rlen = MIN(hci_cmd_complete_return_parameters_length, p_cmd->rlen);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	695a      	ldr	r2, [r3, #20]
 800270a:	7dfb      	ldrb	r3, [r7, #23]
 800270c:	429a      	cmp	r2, r3
 800270e:	bfa8      	it	ge
 8002710:	461a      	movge	r2, r3
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	615a      	str	r2, [r3, #20]
          memcpy(p_cmd->rparam, pcommand_complete_event->payload, p_cmd->rlen);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	6918      	ldr	r0, [r3, #16]
 800271a:	69bb      	ldr	r3, [r7, #24]
 800271c:	1cd9      	adds	r1, r3, #3
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	695b      	ldr	r3, [r3, #20]
 8002722:	461a      	mov	r2, r3
 8002724:	f008 fa8c 	bl	800ac40 <memcpy>
        }

        if(pcommand_complete_event->numcmd != 0)
 8002728:	69bb      	ldr	r3, [r7, #24]
 800272a:	781b      	ldrb	r3, [r3, #0]
 800272c:	2b00      	cmp	r3, #0
 800272e:	d001      	beq.n	8002734 <hci_send_req+0xdc>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 8002730:	2301      	movs	r3, #1
 8002732:	77fb      	strb	r3, [r7, #31]
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 8002734:	4809      	ldr	r0, [pc, #36]	; (800275c <hci_send_req+0x104>)
 8002736:	f000 fc39 	bl	8002fac <LST_is_empty>
 800273a:	4603      	mov	r3, r0
 800273c:	2b00      	cmp	r3, #0
 800273e:	d0b5      	beq.n	80026ac <hci_send_req+0x54>
  while(local_cmd_status == HCI_TL_CmdBusy)
 8002740:	7ffb      	ldrb	r3, [r7, #31]
 8002742:	2b00      	cmp	r3, #0
 8002744:	d0ad      	beq.n	80026a2 <hci_send_req+0x4a>
        }
      }
    }
  }

  NotifyCmdStatus(HCI_TL_CmdAvailable);
 8002746:	2001      	movs	r0, #1
 8002748:	f000 f860 	bl	800280c <NotifyCmdStatus>

  return 0;
 800274c:	2300      	movs	r3, #0
}
 800274e:	4618      	mov	r0, r3
 8002750:	3720      	adds	r7, #32
 8002752:	46bd      	mov	sp, r7
 8002754:	bd80      	pop	{r7, pc}
 8002756:	bf00      	nop
 8002758:	20000248 	.word	0x20000248
 800275c:	2000023c 	.word	0x2000023c

08002760 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 8002760:	b580      	push	{r7, lr}
 8002762:	b086      	sub	sp, #24
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
  TL_BLE_InitConf_t Conf;

  /**
   * Always initialize the command event queue
   */
  LST_init_head (&HciCmdEventQueue);
 8002768:	480f      	ldr	r0, [pc, #60]	; (80027a8 <TlInit+0x48>)
 800276a:	f000 fc0f 	bl	8002f8c <LST_init_head>

  pCmdBuffer = p_cmdbuffer;
 800276e:	4a0f      	ldr	r2, [pc, #60]	; (80027ac <TlInit+0x4c>)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	6013      	str	r3, [r2, #0]

  LST_init_head (&HciAsynchEventQueue);
 8002774:	480e      	ldr	r0, [pc, #56]	; (80027b0 <TlInit+0x50>)
 8002776:	f000 fc09 	bl	8002f8c <LST_init_head>

  UserEventFlow = HCI_TL_UserEventFlow_Enable;
 800277a:	4b0e      	ldr	r3, [pc, #56]	; (80027b4 <TlInit+0x54>)
 800277c:	2201      	movs	r2, #1
 800277e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (hciContext.io.Init)
 8002780:	4b0d      	ldr	r3, [pc, #52]	; (80027b8 <TlInit+0x58>)
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	2b00      	cmp	r3, #0
 8002786:	d00a      	beq.n	800279e <TlInit+0x3e>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	613b      	str	r3, [r7, #16]
    Conf.IoBusEvtCallBack = TlEvtReceived;
 800278c:	4b0b      	ldr	r3, [pc, #44]	; (80027bc <TlInit+0x5c>)
 800278e:	60bb      	str	r3, [r7, #8]
    hciContext.io.Init(&Conf);
 8002790:	4b09      	ldr	r3, [pc, #36]	; (80027b8 <TlInit+0x58>)
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f107 0208 	add.w	r2, r7, #8
 8002798:	4610      	mov	r0, r2
 800279a:	4798      	blx	r3
  }

  return;
 800279c:	bf00      	nop
 800279e:	bf00      	nop
}
 80027a0:	3718      	adds	r7, #24
 80027a2:	46bd      	mov	sp, r7
 80027a4:	bd80      	pop	{r7, pc}
 80027a6:	bf00      	nop
 80027a8:	2000023c 	.word	0x2000023c
 80027ac:	200001e4 	.word	0x200001e4
 80027b0:	200001dc 	.word	0x200001dc
 80027b4:	200001e8 	.word	0x200001e8
 80027b8:	2000021c 	.word	0x2000021c
 80027bc:	0800284d 	.word	0x0800284d

080027c0 <SendCmd>:

static void SendCmd(uint16_t opcode, uint8_t plen, void *param)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b082      	sub	sp, #8
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	4603      	mov	r3, r0
 80027c8:	603a      	str	r2, [r7, #0]
 80027ca:	80fb      	strh	r3, [r7, #6]
 80027cc:	460b      	mov	r3, r1
 80027ce:	717b      	strb	r3, [r7, #5]
  pCmdBuffer->cmdserial.cmd.cmdcode = opcode;
 80027d0:	4b0c      	ldr	r3, [pc, #48]	; (8002804 <SendCmd+0x44>)
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	88fa      	ldrh	r2, [r7, #6]
 80027d6:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = plen;
 80027da:	4b0a      	ldr	r3, [pc, #40]	; (8002804 <SendCmd+0x44>)
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	797a      	ldrb	r2, [r7, #5]
 80027e0:	72da      	strb	r2, [r3, #11]
  memcpy( pCmdBuffer->cmdserial.cmd.payload, param, plen );
 80027e2:	4b08      	ldr	r3, [pc, #32]	; (8002804 <SendCmd+0x44>)
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	330c      	adds	r3, #12
 80027e8:	797a      	ldrb	r2, [r7, #5]
 80027ea:	6839      	ldr	r1, [r7, #0]
 80027ec:	4618      	mov	r0, r3
 80027ee:	f008 fa27 	bl	800ac40 <memcpy>

  hciContext.io.Send(0,0);
 80027f2:	4b05      	ldr	r3, [pc, #20]	; (8002808 <SendCmd+0x48>)
 80027f4:	691b      	ldr	r3, [r3, #16]
 80027f6:	2100      	movs	r1, #0
 80027f8:	2000      	movs	r0, #0
 80027fa:	4798      	blx	r3

  return;
 80027fc:	bf00      	nop
}
 80027fe:	3708      	adds	r7, #8
 8002800:	46bd      	mov	sp, r7
 8002802:	bd80      	pop	{r7, pc}
 8002804:	200001e4 	.word	0x200001e4
 8002808:	2000021c 	.word	0x2000021c

0800280c <NotifyCmdStatus>:

static void NotifyCmdStatus(HCI_TL_CmdStatus_t hcicmdstatus)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	b082      	sub	sp, #8
 8002810:	af00      	add	r7, sp, #0
 8002812:	4603      	mov	r3, r0
 8002814:	71fb      	strb	r3, [r7, #7]
  if(hcicmdstatus == HCI_TL_CmdBusy)
 8002816:	79fb      	ldrb	r3, [r7, #7]
 8002818:	2b00      	cmp	r3, #0
 800281a:	d108      	bne.n	800282e <NotifyCmdStatus+0x22>
  {
    if(StatusNotCallBackFunction != 0)
 800281c:	4b0a      	ldr	r3, [pc, #40]	; (8002848 <NotifyCmdStatus+0x3c>)
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	2b00      	cmp	r3, #0
 8002822:	d00d      	beq.n	8002840 <NotifyCmdStatus+0x34>
    {
      StatusNotCallBackFunction(HCI_TL_CmdBusy);
 8002824:	4b08      	ldr	r3, [pc, #32]	; (8002848 <NotifyCmdStatus+0x3c>)
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	2000      	movs	r0, #0
 800282a:	4798      	blx	r3
    {
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
    }
  }

  return;
 800282c:	e008      	b.n	8002840 <NotifyCmdStatus+0x34>
    if(StatusNotCallBackFunction != 0)
 800282e:	4b06      	ldr	r3, [pc, #24]	; (8002848 <NotifyCmdStatus+0x3c>)
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	2b00      	cmp	r3, #0
 8002834:	d004      	beq.n	8002840 <NotifyCmdStatus+0x34>
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
 8002836:	4b04      	ldr	r3, [pc, #16]	; (8002848 <NotifyCmdStatus+0x3c>)
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	2001      	movs	r0, #1
 800283c:	4798      	blx	r3
  return;
 800283e:	bf00      	nop
 8002840:	bf00      	nop
}
 8002842:	3708      	adds	r7, #8
 8002844:	46bd      	mov	sp, r7
 8002846:	bd80      	pop	{r7, pc}
 8002848:	20000244 	.word	0x20000244

0800284c <TlEvtReceived>:

static void TlEvtReceived(TL_EvtPacket_t *hcievt)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	b082      	sub	sp, #8
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
  if ( ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	7a5b      	ldrb	r3, [r3, #9]
 8002858:	2b0f      	cmp	r3, #15
 800285a:	d003      	beq.n	8002864 <TlEvtReceived+0x18>
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	7a5b      	ldrb	r3, [r3, #9]
 8002860:	2b0e      	cmp	r3, #14
 8002862:	d107      	bne.n	8002874 <TlEvtReceived+0x28>
  {
    LST_insert_tail(&HciCmdEventQueue, (tListNode *)hcievt);
 8002864:	6879      	ldr	r1, [r7, #4]
 8002866:	4809      	ldr	r0, [pc, #36]	; (800288c <TlEvtReceived+0x40>)
 8002868:	f000 fbe8 	bl	800303c <LST_insert_tail>
    hci_cmd_resp_release(0); /**< Notify the application a full Cmd Event has been received */
 800286c:	2000      	movs	r0, #0
 800286e:	f005 fd05 	bl	800827c <hci_cmd_resp_release>
 8002872:	e006      	b.n	8002882 <TlEvtReceived+0x36>
  }
  else
  {
    LST_insert_tail(&HciAsynchEventQueue, (tListNode *)hcievt);
 8002874:	6879      	ldr	r1, [r7, #4]
 8002876:	4806      	ldr	r0, [pc, #24]	; (8002890 <TlEvtReceived+0x44>)
 8002878:	f000 fbe0 	bl	800303c <LST_insert_tail>
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 800287c:	4804      	ldr	r0, [pc, #16]	; (8002890 <TlEvtReceived+0x44>)
 800287e:	f005 fcf1 	bl	8008264 <hci_notify_asynch_evt>
  }

  return;
 8002882:	bf00      	nop
}
 8002884:	3708      	adds	r7, #8
 8002886:	46bd      	mov	sp, r7
 8002888:	bd80      	pop	{r7, pc}
 800288a:	bf00      	nop
 800288c:	2000023c 	.word	0x2000023c
 8002890:	200001dc 	.word	0x200001dc

08002894 <hci_register_io_bus>:
#include "hci_tl.h"
#include "tl.h"


void hci_register_io_bus(tHciIO* fops)
{
 8002894:	b480      	push	{r7}
 8002896:	b083      	sub	sp, #12
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_BLE_Init;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	4a05      	ldr	r2, [pc, #20]	; (80028b4 <hci_register_io_bus+0x20>)
 80028a0:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_BLE_SendCmd;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	4a04      	ldr	r2, [pc, #16]	; (80028b8 <hci_register_io_bus+0x24>)
 80028a6:	611a      	str	r2, [r3, #16]

  return;
 80028a8:	bf00      	nop
}
 80028aa:	370c      	adds	r7, #12
 80028ac:	46bd      	mov	sp, r7
 80028ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b2:	4770      	bx	lr
 80028b4:	08002ba1 	.word	0x08002ba1
 80028b8:	08002c09 	.word	0x08002c09

080028bc <shci_init>:
static void TlUserEvtReceived(TL_EvtPacket_t *shcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void shci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	b082      	sub	sp, #8
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
 80028c4:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((SHCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 80028c6:	683b      	ldr	r3, [r7, #0]
 80028c8:	685b      	ldr	r3, [r3, #4]
 80028ca:	4a08      	ldr	r2, [pc, #32]	; (80028ec <shci_init+0x30>)
 80028cc:	6013      	str	r3, [r2, #0]
  shciContext.UserEvtRx = UserEvtRx;
 80028ce:	4a08      	ldr	r2, [pc, #32]	; (80028f0 <shci_init+0x34>)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	61d3      	str	r3, [r2, #28]

  shci_register_io_bus (&shciContext.io);
 80028d4:	4806      	ldr	r0, [pc, #24]	; (80028f0 <shci_init+0x34>)
 80028d6:	f000 f915 	bl	8002b04 <shci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((SHCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 80028da:	683b      	ldr	r3, [r7, #0]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	4618      	mov	r0, r3
 80028e0:	f000 f898 	bl	8002a14 <TlInit>

  return;
 80028e4:	bf00      	nop
}
 80028e6:	3708      	adds	r7, #8
 80028e8:	46bd      	mov	sp, r7
 80028ea:	bd80      	pop	{r7, pc}
 80028ec:	2000026c 	.word	0x2000026c
 80028f0:	2000024c 	.word	0x2000024c

080028f4 <shci_user_evt_proc>:

void shci_user_evt_proc(void)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b084      	sub	sp, #16
 80028f8:	af00      	add	r7, sp, #0

  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */
  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 80028fa:	4822      	ldr	r0, [pc, #136]	; (8002984 <shci_user_evt_proc+0x90>)
 80028fc:	f000 fb56 	bl	8002fac <LST_is_empty>
 8002900:	4603      	mov	r3, r0
 8002902:	2b00      	cmp	r3, #0
 8002904:	d12b      	bne.n	800295e <shci_user_evt_proc+0x6a>
 8002906:	4b20      	ldr	r3, [pc, #128]	; (8002988 <shci_user_evt_proc+0x94>)
 8002908:	781b      	ldrb	r3, [r3, #0]
 800290a:	2b00      	cmp	r3, #0
 800290c:	d027      	beq.n	800295e <shci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &SHciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 800290e:	f107 030c 	add.w	r3, r7, #12
 8002912:	4619      	mov	r1, r3
 8002914:	481b      	ldr	r0, [pc, #108]	; (8002984 <shci_user_evt_proc+0x90>)
 8002916:	f000 fbd8 	bl	80030ca <LST_remove_head>

    if (shciContext.UserEvtRx != NULL)
 800291a:	4b1c      	ldr	r3, [pc, #112]	; (800298c <shci_user_evt_proc+0x98>)
 800291c:	69db      	ldr	r3, [r3, #28]
 800291e:	2b00      	cmp	r3, #0
 8002920:	d00c      	beq.n	800293c <shci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = SHCI_TL_UserEventFlow_Enable;
 8002926:	2301      	movs	r3, #1
 8002928:	713b      	strb	r3, [r7, #4]
      shciContext.UserEvtRx((void *)&UserEvtRxParam);
 800292a:	4b18      	ldr	r3, [pc, #96]	; (800298c <shci_user_evt_proc+0x98>)
 800292c:	69db      	ldr	r3, [r3, #28]
 800292e:	1d3a      	adds	r2, r7, #4
 8002930:	4610      	mov	r0, r2
 8002932:	4798      	blx	r3
      SHCI_TL_UserEventFlow = UserEvtRxParam.status;
 8002934:	793a      	ldrb	r2, [r7, #4]
 8002936:	4b14      	ldr	r3, [pc, #80]	; (8002988 <shci_user_evt_proc+0x94>)
 8002938:	701a      	strb	r2, [r3, #0]
 800293a:	e002      	b.n	8002942 <shci_user_evt_proc+0x4e>
    }
    else
    {
      SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 800293c:	4b12      	ldr	r3, [pc, #72]	; (8002988 <shci_user_evt_proc+0x94>)
 800293e:	2201      	movs	r2, #1
 8002940:	701a      	strb	r2, [r3, #0]
    }

    if(SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable)
 8002942:	4b11      	ldr	r3, [pc, #68]	; (8002988 <shci_user_evt_proc+0x94>)
 8002944:	781b      	ldrb	r3, [r3, #0]
 8002946:	2b00      	cmp	r3, #0
 8002948:	d004      	beq.n	8002954 <shci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	4618      	mov	r0, r3
 800294e:	f000 fa6b 	bl	8002e28 <TL_MM_EvtDone>
 8002952:	e004      	b.n	800295e <shci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &SHciAsynchEventQueue, (tListNode *)phcievtbuffer );
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	4619      	mov	r1, r3
 8002958:	480a      	ldr	r0, [pc, #40]	; (8002984 <shci_user_evt_proc+0x90>)
 800295a:	f000 fb49 	bl	8002ff0 <LST_insert_head>
    }
  }

  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 800295e:	4809      	ldr	r0, [pc, #36]	; (8002984 <shci_user_evt_proc+0x90>)
 8002960:	f000 fb24 	bl	8002fac <LST_is_empty>
 8002964:	4603      	mov	r3, r0
 8002966:	2b00      	cmp	r3, #0
 8002968:	d107      	bne.n	800297a <shci_user_evt_proc+0x86>
 800296a:	4b07      	ldr	r3, [pc, #28]	; (8002988 <shci_user_evt_proc+0x94>)
 800296c:	781b      	ldrb	r3, [r3, #0]
 800296e:	2b00      	cmp	r3, #0
 8002970:	d003      	beq.n	800297a <shci_user_evt_proc+0x86>
  {
    shci_notify_asynch_evt((void*) &SHciAsynchEventQueue);
 8002972:	4804      	ldr	r0, [pc, #16]	; (8002984 <shci_user_evt_proc+0x90>)
 8002974:	f005 fd85 	bl	8008482 <shci_notify_asynch_evt>
  }


  return;
 8002978:	bf00      	nop
 800297a:	bf00      	nop
}
 800297c:	3710      	adds	r7, #16
 800297e:	46bd      	mov	sp, r7
 8002980:	bd80      	pop	{r7, pc}
 8002982:	bf00      	nop
 8002984:	200001ec 	.word	0x200001ec
 8002988:	200001fc 	.word	0x200001fc
 800298c:	2000024c 	.word	0x2000024c

08002990 <shci_send>:

  return;
}

void shci_send( uint16_t cmd_code, uint8_t len_cmd_payload, uint8_t * p_cmd_payload, TL_EvtPacket_t * p_rsp )
{
 8002990:	b580      	push	{r7, lr}
 8002992:	b084      	sub	sp, #16
 8002994:	af00      	add	r7, sp, #0
 8002996:	60ba      	str	r2, [r7, #8]
 8002998:	607b      	str	r3, [r7, #4]
 800299a:	4603      	mov	r3, r0
 800299c:	81fb      	strh	r3, [r7, #14]
 800299e:	460b      	mov	r3, r1
 80029a0:	737b      	strb	r3, [r7, #13]
  Cmd_SetStatus(SHCI_TL_CmdBusy);
 80029a2:	2000      	movs	r0, #0
 80029a4:	f000 f868 	bl	8002a78 <Cmd_SetStatus>

  pCmdBuffer->cmdserial.cmd.cmdcode = cmd_code;
 80029a8:	4b17      	ldr	r3, [pc, #92]	; (8002a08 <shci_send+0x78>)
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	89fa      	ldrh	r2, [r7, #14]
 80029ae:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = len_cmd_payload;
 80029b2:	4b15      	ldr	r3, [pc, #84]	; (8002a08 <shci_send+0x78>)
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	7b7a      	ldrb	r2, [r7, #13]
 80029b8:	72da      	strb	r2, [r3, #11]

  memcpy(pCmdBuffer->cmdserial.cmd.payload, p_cmd_payload, len_cmd_payload );
 80029ba:	4b13      	ldr	r3, [pc, #76]	; (8002a08 <shci_send+0x78>)
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	330c      	adds	r3, #12
 80029c0:	7b7a      	ldrb	r2, [r7, #13]
 80029c2:	68b9      	ldr	r1, [r7, #8]
 80029c4:	4618      	mov	r0, r3
 80029c6:	f008 f93b 	bl	800ac40 <memcpy>
  CmdRspStatusFlag = SHCI_TL_CMD_RESP_WAIT;
 80029ca:	4b10      	ldr	r3, [pc, #64]	; (8002a0c <shci_send+0x7c>)
 80029cc:	2201      	movs	r2, #1
 80029ce:	701a      	strb	r2, [r3, #0]
  shciContext.io.Send(0,0);
 80029d0:	4b0f      	ldr	r3, [pc, #60]	; (8002a10 <shci_send+0x80>)
 80029d2:	691b      	ldr	r3, [r3, #16]
 80029d4:	2100      	movs	r1, #0
 80029d6:	2000      	movs	r0, #0
 80029d8:	4798      	blx	r3

  shci_cmd_resp_wait(SHCI_TL_DEFAULT_TIMEOUT);
 80029da:	f248 00e8 	movw	r0, #33000	; 0x80e8
 80029de:	f005 fd68 	bl	80084b2 <shci_cmd_resp_wait>

  /**
   * The command complete of a system command does not have the header
   * It starts immediately with the evtserial field
   */
  memcpy( &(p_rsp->evtserial), pCmdBuffer, ((TL_EvtSerial_t*)pCmdBuffer)->evt.plen + TL_EVT_HDR_SIZE );
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	f103 0008 	add.w	r0, r3, #8
 80029e8:	4b07      	ldr	r3, [pc, #28]	; (8002a08 <shci_send+0x78>)
 80029ea:	6819      	ldr	r1, [r3, #0]
 80029ec:	4b06      	ldr	r3, [pc, #24]	; (8002a08 <shci_send+0x78>)
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	789b      	ldrb	r3, [r3, #2]
 80029f2:	3303      	adds	r3, #3
 80029f4:	461a      	mov	r2, r3
 80029f6:	f008 f923 	bl	800ac40 <memcpy>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 80029fa:	2001      	movs	r0, #1
 80029fc:	f000 f83c 	bl	8002a78 <Cmd_SetStatus>

  return;
 8002a00:	bf00      	nop
}
 8002a02:	3710      	adds	r7, #16
 8002a04:	46bd      	mov	sp, r7
 8002a06:	bd80      	pop	{r7, pc}
 8002a08:	200001f8 	.word	0x200001f8
 8002a0c:	20000270 	.word	0x20000270
 8002a10:	2000024c 	.word	0x2000024c

08002a14 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b086      	sub	sp, #24
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
  TL_SYS_InitConf_t Conf;

  pCmdBuffer = p_cmdbuffer;
 8002a1c:	4a10      	ldr	r2, [pc, #64]	; (8002a60 <TlInit+0x4c>)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6013      	str	r3, [r2, #0]

  LST_init_head (&SHciAsynchEventQueue);
 8002a22:	4810      	ldr	r0, [pc, #64]	; (8002a64 <TlInit+0x50>)
 8002a24:	f000 fab2 	bl	8002f8c <LST_init_head>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 8002a28:	2001      	movs	r0, #1
 8002a2a:	f000 f825 	bl	8002a78 <Cmd_SetStatus>

  SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 8002a2e:	4b0e      	ldr	r3, [pc, #56]	; (8002a68 <TlInit+0x54>)
 8002a30:	2201      	movs	r2, #1
 8002a32:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (shciContext.io.Init)
 8002a34:	4b0d      	ldr	r3, [pc, #52]	; (8002a6c <TlInit+0x58>)
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d00c      	beq.n	8002a56 <TlInit+0x42>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	617b      	str	r3, [r7, #20]
    Conf.IoBusCallBackCmdEvt = TlCmdEvtReceived;
 8002a40:	4b0b      	ldr	r3, [pc, #44]	; (8002a70 <TlInit+0x5c>)
 8002a42:	60fb      	str	r3, [r7, #12]
    Conf.IoBusCallBackUserEvt = TlUserEvtReceived;
 8002a44:	4b0b      	ldr	r3, [pc, #44]	; (8002a74 <TlInit+0x60>)
 8002a46:	613b      	str	r3, [r7, #16]
    shciContext.io.Init(&Conf);
 8002a48:	4b08      	ldr	r3, [pc, #32]	; (8002a6c <TlInit+0x58>)
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f107 020c 	add.w	r2, r7, #12
 8002a50:	4610      	mov	r0, r2
 8002a52:	4798      	blx	r3
  }

  return;
 8002a54:	bf00      	nop
 8002a56:	bf00      	nop
}
 8002a58:	3718      	adds	r7, #24
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	bd80      	pop	{r7, pc}
 8002a5e:	bf00      	nop
 8002a60:	200001f8 	.word	0x200001f8
 8002a64:	200001ec 	.word	0x200001ec
 8002a68:	200001fc 	.word	0x200001fc
 8002a6c:	2000024c 	.word	0x2000024c
 8002a70:	08002ac9 	.word	0x08002ac9
 8002a74:	08002ae1 	.word	0x08002ae1

08002a78 <Cmd_SetStatus>:

static void Cmd_SetStatus(SHCI_TL_CmdStatus_t shcicmdstatus)
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b082      	sub	sp, #8
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	4603      	mov	r3, r0
 8002a80:	71fb      	strb	r3, [r7, #7]
  if(shcicmdstatus == SHCI_TL_CmdBusy)
 8002a82:	79fb      	ldrb	r3, [r7, #7]
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d10b      	bne.n	8002aa0 <Cmd_SetStatus+0x28>
  {
    if(StatusNotCallBackFunction != 0)
 8002a88:	4b0d      	ldr	r3, [pc, #52]	; (8002ac0 <Cmd_SetStatus+0x48>)
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d003      	beq.n	8002a98 <Cmd_SetStatus+0x20>
    {
      StatusNotCallBackFunction( SHCI_TL_CmdBusy );
 8002a90:	4b0b      	ldr	r3, [pc, #44]	; (8002ac0 <Cmd_SetStatus+0x48>)
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	2000      	movs	r0, #0
 8002a96:	4798      	blx	r3
    }
    SHCICmdStatus = SHCI_TL_CmdBusy;
 8002a98:	4b0a      	ldr	r3, [pc, #40]	; (8002ac4 <Cmd_SetStatus+0x4c>)
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	701a      	strb	r2, [r3, #0]
    {
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
    }
  }

  return;
 8002a9e:	e00b      	b.n	8002ab8 <Cmd_SetStatus+0x40>
    SHCICmdStatus = SHCI_TL_CmdAvailable;
 8002aa0:	4b08      	ldr	r3, [pc, #32]	; (8002ac4 <Cmd_SetStatus+0x4c>)
 8002aa2:	2201      	movs	r2, #1
 8002aa4:	701a      	strb	r2, [r3, #0]
    if(StatusNotCallBackFunction != 0)
 8002aa6:	4b06      	ldr	r3, [pc, #24]	; (8002ac0 <Cmd_SetStatus+0x48>)
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d004      	beq.n	8002ab8 <Cmd_SetStatus+0x40>
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
 8002aae:	4b04      	ldr	r3, [pc, #16]	; (8002ac0 <Cmd_SetStatus+0x48>)
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	2001      	movs	r0, #1
 8002ab4:	4798      	blx	r3
  return;
 8002ab6:	bf00      	nop
 8002ab8:	bf00      	nop
}
 8002aba:	3708      	adds	r7, #8
 8002abc:	46bd      	mov	sp, r7
 8002abe:	bd80      	pop	{r7, pc}
 8002ac0:	2000026c 	.word	0x2000026c
 8002ac4:	200001f4 	.word	0x200001f4

08002ac8 <TlCmdEvtReceived>:

static void TlCmdEvtReceived(TL_EvtPacket_t *shcievt)
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	b082      	sub	sp, #8
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
  (void)(shcievt);
  shci_cmd_resp_release(0); /**< Notify the application the Cmd response has been received */
 8002ad0:	2000      	movs	r0, #0
 8002ad2:	f005 fce3 	bl	800849c <shci_cmd_resp_release>

  return;
 8002ad6:	bf00      	nop
}
 8002ad8:	3708      	adds	r7, #8
 8002ada:	46bd      	mov	sp, r7
 8002adc:	bd80      	pop	{r7, pc}
	...

08002ae0 <TlUserEvtReceived>:

static void TlUserEvtReceived(TL_EvtPacket_t *shcievt)
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	b082      	sub	sp, #8
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&SHciAsynchEventQueue, (tListNode *)shcievt);
 8002ae8:	6879      	ldr	r1, [r7, #4]
 8002aea:	4805      	ldr	r0, [pc, #20]	; (8002b00 <TlUserEvtReceived+0x20>)
 8002aec:	f000 faa6 	bl	800303c <LST_insert_tail>
  shci_notify_asynch_evt((void*) &SHciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 8002af0:	4803      	ldr	r0, [pc, #12]	; (8002b00 <TlUserEvtReceived+0x20>)
 8002af2:	f005 fcc6 	bl	8008482 <shci_notify_asynch_evt>

  return;
 8002af6:	bf00      	nop
}
 8002af8:	3708      	adds	r7, #8
 8002afa:	46bd      	mov	sp, r7
 8002afc:	bd80      	pop	{r7, pc}
 8002afe:	bf00      	nop
 8002b00:	200001ec 	.word	0x200001ec

08002b04 <shci_register_io_bus>:
#include "shci_tl.h"
#include "tl.h"


void shci_register_io_bus(tSHciIO* fops)
{
 8002b04:	b480      	push	{r7}
 8002b06:	b083      	sub	sp, #12
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_SYS_Init;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	4a05      	ldr	r2, [pc, #20]	; (8002b24 <shci_register_io_bus+0x20>)
 8002b10:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_SYS_SendCmd;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	4a04      	ldr	r2, [pc, #16]	; (8002b28 <shci_register_io_bus+0x24>)
 8002b16:	611a      	str	r2, [r3, #16]

  return;
 8002b18:	bf00      	nop
}
 8002b1a:	370c      	adds	r7, #12
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b22:	4770      	bx	lr
 8002b24:	08002cb5 	.word	0x08002cb5
 8002b28:	08002d09 	.word	0x08002d09

08002b2c <TL_Init>:
  return;
}


void TL_Init( void )
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	af00      	add	r7, sp, #0
  TL_RefTable.p_device_info_table = &TL_DeviceInfoTable;
 8002b30:	4b10      	ldr	r3, [pc, #64]	; (8002b74 <TL_Init+0x48>)
 8002b32:	4a11      	ldr	r2, [pc, #68]	; (8002b78 <TL_Init+0x4c>)
 8002b34:	601a      	str	r2, [r3, #0]
  TL_RefTable.p_ble_table = &TL_BleTable;
 8002b36:	4b0f      	ldr	r3, [pc, #60]	; (8002b74 <TL_Init+0x48>)
 8002b38:	4a10      	ldr	r2, [pc, #64]	; (8002b7c <TL_Init+0x50>)
 8002b3a:	605a      	str	r2, [r3, #4]
  TL_RefTable.p_thread_table = &TL_ThreadTable;
 8002b3c:	4b0d      	ldr	r3, [pc, #52]	; (8002b74 <TL_Init+0x48>)
 8002b3e:	4a10      	ldr	r2, [pc, #64]	; (8002b80 <TL_Init+0x54>)
 8002b40:	609a      	str	r2, [r3, #8]
  TL_RefTable.p_lld_tests_table = &TL_LldTestsTable;
 8002b42:	4b0c      	ldr	r3, [pc, #48]	; (8002b74 <TL_Init+0x48>)
 8002b44:	4a0f      	ldr	r2, [pc, #60]	; (8002b84 <TL_Init+0x58>)
 8002b46:	621a      	str	r2, [r3, #32]
  TL_RefTable.p_ble_lld_table = &TL_BleLldTable;
 8002b48:	4b0a      	ldr	r3, [pc, #40]	; (8002b74 <TL_Init+0x48>)
 8002b4a:	4a0f      	ldr	r2, [pc, #60]	; (8002b88 <TL_Init+0x5c>)
 8002b4c:	625a      	str	r2, [r3, #36]	; 0x24
  TL_RefTable.p_sys_table = &TL_SysTable;
 8002b4e:	4b09      	ldr	r3, [pc, #36]	; (8002b74 <TL_Init+0x48>)
 8002b50:	4a0e      	ldr	r2, [pc, #56]	; (8002b8c <TL_Init+0x60>)
 8002b52:	60da      	str	r2, [r3, #12]
  TL_RefTable.p_mem_manager_table = &TL_MemManagerTable;
 8002b54:	4b07      	ldr	r3, [pc, #28]	; (8002b74 <TL_Init+0x48>)
 8002b56:	4a0e      	ldr	r2, [pc, #56]	; (8002b90 <TL_Init+0x64>)
 8002b58:	611a      	str	r2, [r3, #16]
  TL_RefTable.p_traces_table = &TL_TracesTable;
 8002b5a:	4b06      	ldr	r3, [pc, #24]	; (8002b74 <TL_Init+0x48>)
 8002b5c:	4a0d      	ldr	r2, [pc, #52]	; (8002b94 <TL_Init+0x68>)
 8002b5e:	615a      	str	r2, [r3, #20]
  TL_RefTable.p_mac_802_15_4_table = &TL_Mac_802_15_4_Table;
 8002b60:	4b04      	ldr	r3, [pc, #16]	; (8002b74 <TL_Init+0x48>)
 8002b62:	4a0d      	ldr	r2, [pc, #52]	; (8002b98 <TL_Init+0x6c>)
 8002b64:	619a      	str	r2, [r3, #24]
  TL_RefTable.p_zigbee_table = &TL_Zigbee_Table;
 8002b66:	4b03      	ldr	r3, [pc, #12]	; (8002b74 <TL_Init+0x48>)
 8002b68:	4a0c      	ldr	r2, [pc, #48]	; (8002b9c <TL_Init+0x70>)
 8002b6a:	61da      	str	r2, [r3, #28]
  HW_IPCC_Init();
 8002b6c:	f000 fc66 	bl	800343c <HW_IPCC_Init>

  return;
 8002b70:	bf00      	nop
}
 8002b72:	bd80      	pop	{r7, pc}
 8002b74:	20030000 	.word	0x20030000
 8002b78:	20030028 	.word	0x20030028
 8002b7c:	20030048 	.word	0x20030048
 8002b80:	20030058 	.word	0x20030058
 8002b84:	20030068 	.word	0x20030068
 8002b88:	20030070 	.word	0x20030070
 8002b8c:	20030078 	.word	0x20030078
 8002b90:	20030080 	.word	0x20030080
 8002b94:	2003009c 	.word	0x2003009c
 8002b98:	200300a0 	.word	0x200300a0
 8002b9c:	200300ac 	.word	0x200300ac

08002ba0 <TL_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
int32_t TL_BLE_Init( void* pConf )
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b084      	sub	sp, #16
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
  MB_BleTable_t  * p_bletable;

  TL_BLE_InitConf_t *pInitHciConf = (TL_BLE_InitConf_t *) pConf;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	60fb      	str	r3, [r7, #12]

  LST_init_head (&EvtQueue);
 8002bac:	4811      	ldr	r0, [pc, #68]	; (8002bf4 <TL_BLE_Init+0x54>)
 8002bae:	f000 f9ed 	bl	8002f8c <LST_init_head>

  p_bletable = TL_RefTable.p_ble_table;
 8002bb2:	4b11      	ldr	r3, [pc, #68]	; (8002bf8 <TL_BLE_Init+0x58>)
 8002bb4:	685b      	ldr	r3, [r3, #4]
 8002bb6:	60bb      	str	r3, [r7, #8]

  p_bletable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	689a      	ldr	r2, [r3, #8]
 8002bbc:	68bb      	ldr	r3, [r7, #8]
 8002bbe:	601a      	str	r2, [r3, #0]
  p_bletable->phci_acl_data_buffer = pInitHciConf->p_AclDataBuffer;
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	68da      	ldr	r2, [r3, #12]
 8002bc4:	68bb      	ldr	r3, [r7, #8]
 8002bc6:	60da      	str	r2, [r3, #12]
  p_bletable->pcs_buffer  = (uint8_t*)CsBuffer;
 8002bc8:	68bb      	ldr	r3, [r7, #8]
 8002bca:	4a0c      	ldr	r2, [pc, #48]	; (8002bfc <TL_BLE_Init+0x5c>)
 8002bcc:	605a      	str	r2, [r3, #4]
  p_bletable->pevt_queue  = (uint8_t*)&EvtQueue;
 8002bce:	68bb      	ldr	r3, [r7, #8]
 8002bd0:	4a08      	ldr	r2, [pc, #32]	; (8002bf4 <TL_BLE_Init+0x54>)
 8002bd2:	609a      	str	r2, [r3, #8]

  HW_IPCC_BLE_Init();
 8002bd4:	f000 fc48 	bl	8003468 <HW_IPCC_BLE_Init>

  BLE_IoBusEvtCallBackFunction = pInitHciConf->IoBusEvtCallBack;
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	4a08      	ldr	r2, [pc, #32]	; (8002c00 <TL_BLE_Init+0x60>)
 8002bde:	6013      	str	r3, [r2, #0]
  BLE_IoBusAclDataTxAck = pInitHciConf->IoBusAclDataTxAck;
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	685b      	ldr	r3, [r3, #4]
 8002be4:	4a07      	ldr	r2, [pc, #28]	; (8002c04 <TL_BLE_Init+0x64>)
 8002be6:	6013      	str	r3, [r2, #0]

  return 0;
 8002be8:	2300      	movs	r3, #0
}
 8002bea:	4618      	mov	r0, r3
 8002bec:	3710      	adds	r7, #16
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	bd80      	pop	{r7, pc}
 8002bf2:	bf00      	nop
 8002bf4:	200300c8 	.word	0x200300c8
 8002bf8:	20030000 	.word	0x20030000
 8002bfc:	200301e4 	.word	0x200301e4
 8002c00:	2000027c 	.word	0x2000027c
 8002c04:	20000280 	.word	0x20000280

08002c08 <TL_BLE_SendCmd>:

int32_t TL_BLE_SendCmd( uint8_t* buffer, uint16_t size )
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	b082      	sub	sp, #8
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
 8002c10:	460b      	mov	r3, r1
 8002c12:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t*)(TL_RefTable.p_ble_table->pcmd_buffer))->cmdserial.type = TL_BLECMD_PKT_TYPE;
 8002c14:	4b09      	ldr	r3, [pc, #36]	; (8002c3c <TL_BLE_SendCmd+0x34>)
 8002c16:	685b      	ldr	r3, [r3, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	2201      	movs	r2, #1
 8002c1c:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_BLE_CMD, TL_RefTable.p_ble_table->pcmd_buffer);
 8002c1e:	4b07      	ldr	r3, [pc, #28]	; (8002c3c <TL_BLE_SendCmd+0x34>)
 8002c20:	685b      	ldr	r3, [r3, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	4619      	mov	r1, r3
 8002c26:	2001      	movs	r0, #1
 8002c28:	f000 f95a 	bl	8002ee0 <OutputDbgTrace>

  HW_IPCC_BLE_SendCmd();
 8002c2c:	f000 fc26 	bl	800347c <HW_IPCC_BLE_SendCmd>

  return 0;
 8002c30:	2300      	movs	r3, #0
}
 8002c32:	4618      	mov	r0, r3
 8002c34:	3708      	adds	r7, #8
 8002c36:	46bd      	mov	sp, r7
 8002c38:	bd80      	pop	{r7, pc}
 8002c3a:	bf00      	nop
 8002c3c:	20030000 	.word	0x20030000

08002c40 <HW_IPCC_BLE_RxEvtNot>:

void HW_IPCC_BLE_RxEvtNot(void)
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	b082      	sub	sp, #8
 8002c44:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&EvtQueue) == FALSE)
 8002c46:	e01c      	b.n	8002c82 <HW_IPCC_BLE_RxEvtNot+0x42>
  {
    LST_remove_head (&EvtQueue, (tListNode **)&phcievt);
 8002c48:	1d3b      	adds	r3, r7, #4
 8002c4a:	4619      	mov	r1, r3
 8002c4c:	4812      	ldr	r0, [pc, #72]	; (8002c98 <HW_IPCC_BLE_RxEvtNot+0x58>)
 8002c4e:	f000 fa3c 	bl	80030ca <LST_remove_head>

    if ( ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	7a5b      	ldrb	r3, [r3, #9]
 8002c56:	2b0f      	cmp	r3, #15
 8002c58:	d003      	beq.n	8002c62 <HW_IPCC_BLE_RxEvtNot+0x22>
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	7a5b      	ldrb	r3, [r3, #9]
 8002c5e:	2b0e      	cmp	r3, #14
 8002c60:	d105      	bne.n	8002c6e <HW_IPCC_BLE_RxEvtNot+0x2e>
    {
      OutputDbgTrace(TL_MB_BLE_CMD_RSP, (uint8_t*)phcievt);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	4619      	mov	r1, r3
 8002c66:	2002      	movs	r0, #2
 8002c68:	f000 f93a 	bl	8002ee0 <OutputDbgTrace>
 8002c6c:	e004      	b.n	8002c78 <HW_IPCC_BLE_RxEvtNot+0x38>
    }
    else
    {
      OutputDbgTrace(TL_MB_BLE_ASYNCH_EVT, (uint8_t*)phcievt);
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	4619      	mov	r1, r3
 8002c72:	2003      	movs	r0, #3
 8002c74:	f000 f934 	bl	8002ee0 <OutputDbgTrace>
    }

    BLE_IoBusEvtCallBackFunction(phcievt);
 8002c78:	4b08      	ldr	r3, [pc, #32]	; (8002c9c <HW_IPCC_BLE_RxEvtNot+0x5c>)
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	687a      	ldr	r2, [r7, #4]
 8002c7e:	4610      	mov	r0, r2
 8002c80:	4798      	blx	r3
  while(LST_is_empty(&EvtQueue) == FALSE)
 8002c82:	4805      	ldr	r0, [pc, #20]	; (8002c98 <HW_IPCC_BLE_RxEvtNot+0x58>)
 8002c84:	f000 f992 	bl	8002fac <LST_is_empty>
 8002c88:	4603      	mov	r3, r0
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d0dc      	beq.n	8002c48 <HW_IPCC_BLE_RxEvtNot+0x8>
  }

  return;
 8002c8e:	bf00      	nop
}
 8002c90:	3708      	adds	r7, #8
 8002c92:	46bd      	mov	sp, r7
 8002c94:	bd80      	pop	{r7, pc}
 8002c96:	bf00      	nop
 8002c98:	200300c8 	.word	0x200300c8
 8002c9c:	2000027c 	.word	0x2000027c

08002ca0 <HW_IPCC_BLE_AclDataAckNot>:

  return 0;
}

void HW_IPCC_BLE_AclDataAckNot(void)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	af00      	add	r7, sp, #0
  BLE_IoBusAclDataTxAck( );
 8002ca4:	4b02      	ldr	r3, [pc, #8]	; (8002cb0 <HW_IPCC_BLE_AclDataAckNot+0x10>)
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	4798      	blx	r3

  return;
 8002caa:	bf00      	nop
}
 8002cac:	bd80      	pop	{r7, pc}
 8002cae:	bf00      	nop
 8002cb0:	20000280 	.word	0x20000280

08002cb4 <TL_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
int32_t TL_SYS_Init( void* pConf  )
{
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	b084      	sub	sp, #16
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]
  MB_SysTable_t  * p_systable;

  TL_SYS_InitConf_t *pInitHciConf = (TL_SYS_InitConf_t *) pConf;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	60fb      	str	r3, [r7, #12]

  LST_init_head (&SystemEvtQueue);
 8002cc0:	480d      	ldr	r0, [pc, #52]	; (8002cf8 <TL_SYS_Init+0x44>)
 8002cc2:	f000 f963 	bl	8002f8c <LST_init_head>
  p_systable = TL_RefTable.p_sys_table;
 8002cc6:	4b0d      	ldr	r3, [pc, #52]	; (8002cfc <TL_SYS_Init+0x48>)
 8002cc8:	68db      	ldr	r3, [r3, #12]
 8002cca:	60bb      	str	r3, [r7, #8]
  p_systable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	689a      	ldr	r2, [r3, #8]
 8002cd0:	68bb      	ldr	r3, [r7, #8]
 8002cd2:	601a      	str	r2, [r3, #0]
  p_systable->sys_queue = (uint8_t*)&SystemEvtQueue;
 8002cd4:	68bb      	ldr	r3, [r7, #8]
 8002cd6:	4a08      	ldr	r2, [pc, #32]	; (8002cf8 <TL_SYS_Init+0x44>)
 8002cd8:	605a      	str	r2, [r3, #4]

  HW_IPCC_SYS_Init();
 8002cda:	f000 fbf1 	bl	80034c0 <HW_IPCC_SYS_Init>

  SYS_CMD_IoBusCallBackFunction = pInitHciConf->IoBusCallBackCmdEvt;
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	4a07      	ldr	r2, [pc, #28]	; (8002d00 <TL_SYS_Init+0x4c>)
 8002ce4:	6013      	str	r3, [r2, #0]
  SYS_EVT_IoBusCallBackFunction = pInitHciConf->IoBusCallBackUserEvt;
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	685b      	ldr	r3, [r3, #4]
 8002cea:	4a06      	ldr	r2, [pc, #24]	; (8002d04 <TL_SYS_Init+0x50>)
 8002cec:	6013      	str	r3, [r2, #0]

  return 0;
 8002cee:	2300      	movs	r3, #0
}
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	3710      	adds	r7, #16
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	bd80      	pop	{r7, pc}
 8002cf8:	200300d0 	.word	0x200300d0
 8002cfc:	20030000 	.word	0x20030000
 8002d00:	20000284 	.word	0x20000284
 8002d04:	20000288 	.word	0x20000288

08002d08 <TL_SYS_SendCmd>:

int32_t TL_SYS_SendCmd( uint8_t* buffer, uint16_t size )
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b082      	sub	sp, #8
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
 8002d10:	460b      	mov	r3, r1
 8002d12:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t *)(TL_RefTable.p_sys_table->pcmd_buffer))->cmdserial.type = TL_SYSCMD_PKT_TYPE;
 8002d14:	4b09      	ldr	r3, [pc, #36]	; (8002d3c <TL_SYS_SendCmd+0x34>)
 8002d16:	68db      	ldr	r3, [r3, #12]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	2210      	movs	r2, #16
 8002d1c:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_SYS_CMD, TL_RefTable.p_sys_table->pcmd_buffer);
 8002d1e:	4b07      	ldr	r3, [pc, #28]	; (8002d3c <TL_SYS_SendCmd+0x34>)
 8002d20:	68db      	ldr	r3, [r3, #12]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	4619      	mov	r1, r3
 8002d26:	2004      	movs	r0, #4
 8002d28:	f000 f8da 	bl	8002ee0 <OutputDbgTrace>

  HW_IPCC_SYS_SendCmd();
 8002d2c:	f000 fbd2 	bl	80034d4 <HW_IPCC_SYS_SendCmd>

  return 0;
 8002d30:	2300      	movs	r3, #0
}
 8002d32:	4618      	mov	r0, r3
 8002d34:	3708      	adds	r7, #8
 8002d36:	46bd      	mov	sp, r7
 8002d38:	bd80      	pop	{r7, pc}
 8002d3a:	bf00      	nop
 8002d3c:	20030000 	.word	0x20030000

08002d40 <HW_IPCC_SYS_CmdEvtNot>:

void HW_IPCC_SYS_CmdEvtNot(void)
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	af00      	add	r7, sp, #0
  OutputDbgTrace(TL_MB_SYS_CMD_RSP, (uint8_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 8002d44:	4b07      	ldr	r3, [pc, #28]	; (8002d64 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 8002d46:	68db      	ldr	r3, [r3, #12]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	4619      	mov	r1, r3
 8002d4c:	2005      	movs	r0, #5
 8002d4e:	f000 f8c7 	bl	8002ee0 <OutputDbgTrace>

  SYS_CMD_IoBusCallBackFunction( (TL_EvtPacket_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 8002d52:	4b05      	ldr	r3, [pc, #20]	; (8002d68 <HW_IPCC_SYS_CmdEvtNot+0x28>)
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	4a03      	ldr	r2, [pc, #12]	; (8002d64 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 8002d58:	68d2      	ldr	r2, [r2, #12]
 8002d5a:	6812      	ldr	r2, [r2, #0]
 8002d5c:	4610      	mov	r0, r2
 8002d5e:	4798      	blx	r3

  return;
 8002d60:	bf00      	nop
}
 8002d62:	bd80      	pop	{r7, pc}
 8002d64:	20030000 	.word	0x20030000
 8002d68:	20000284 	.word	0x20000284

08002d6c <HW_IPCC_SYS_EvtNot>:

void HW_IPCC_SYS_EvtNot( void )
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	b082      	sub	sp, #8
 8002d70:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *p_evt;

  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 8002d72:	e00e      	b.n	8002d92 <HW_IPCC_SYS_EvtNot+0x26>
  {
    LST_remove_head (&SystemEvtQueue, (tListNode **)&p_evt);
 8002d74:	1d3b      	adds	r3, r7, #4
 8002d76:	4619      	mov	r1, r3
 8002d78:	480b      	ldr	r0, [pc, #44]	; (8002da8 <HW_IPCC_SYS_EvtNot+0x3c>)
 8002d7a:	f000 f9a6 	bl	80030ca <LST_remove_head>

    OutputDbgTrace(TL_MB_SYS_ASYNCH_EVT, (uint8_t*)p_evt );
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	4619      	mov	r1, r3
 8002d82:	2006      	movs	r0, #6
 8002d84:	f000 f8ac 	bl	8002ee0 <OutputDbgTrace>

    SYS_EVT_IoBusCallBackFunction( p_evt );
 8002d88:	4b08      	ldr	r3, [pc, #32]	; (8002dac <HW_IPCC_SYS_EvtNot+0x40>)
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	687a      	ldr	r2, [r7, #4]
 8002d8e:	4610      	mov	r0, r2
 8002d90:	4798      	blx	r3
  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 8002d92:	4805      	ldr	r0, [pc, #20]	; (8002da8 <HW_IPCC_SYS_EvtNot+0x3c>)
 8002d94:	f000 f90a 	bl	8002fac <LST_is_empty>
 8002d98:	4603      	mov	r3, r0
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d0ea      	beq.n	8002d74 <HW_IPCC_SYS_EvtNot+0x8>
  }

  return;
 8002d9e:	bf00      	nop
}
 8002da0:	3708      	adds	r7, #8
 8002da2:	46bd      	mov	sp, r7
 8002da4:	bd80      	pop	{r7, pc}
 8002da6:	bf00      	nop
 8002da8:	200300d0 	.word	0x200300d0
 8002dac:	20000288 	.word	0x20000288

08002db0 <TL_MM_Init>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void TL_MM_Init( TL_MM_Config_t *p_Config )
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	b082      	sub	sp, #8
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
  static MB_MemManagerTable_t  * p_mem_manager_table;

  LST_init_head (&FreeBufQueue);
 8002db8:	4817      	ldr	r0, [pc, #92]	; (8002e18 <TL_MM_Init+0x68>)
 8002dba:	f000 f8e7 	bl	8002f8c <LST_init_head>
  LST_init_head (&LocalFreeBufQueue);
 8002dbe:	4817      	ldr	r0, [pc, #92]	; (8002e1c <TL_MM_Init+0x6c>)
 8002dc0:	f000 f8e4 	bl	8002f8c <LST_init_head>

  p_mem_manager_table = TL_RefTable.p_mem_manager_table;
 8002dc4:	4b16      	ldr	r3, [pc, #88]	; (8002e20 <TL_MM_Init+0x70>)
 8002dc6:	691b      	ldr	r3, [r3, #16]
 8002dc8:	4a16      	ldr	r2, [pc, #88]	; (8002e24 <TL_MM_Init+0x74>)
 8002dca:	6013      	str	r3, [r2, #0]

  p_mem_manager_table->blepool = p_Config->p_AsynchEvtPool;
 8002dcc:	4b15      	ldr	r3, [pc, #84]	; (8002e24 <TL_MM_Init+0x74>)
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	687a      	ldr	r2, [r7, #4]
 8002dd2:	6892      	ldr	r2, [r2, #8]
 8002dd4:	609a      	str	r2, [r3, #8]
  p_mem_manager_table->blepoolsize = p_Config->AsynchEvtPoolSize;
 8002dd6:	4b13      	ldr	r3, [pc, #76]	; (8002e24 <TL_MM_Init+0x74>)
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	687a      	ldr	r2, [r7, #4]
 8002ddc:	68d2      	ldr	r2, [r2, #12]
 8002dde:	60da      	str	r2, [r3, #12]
  p_mem_manager_table->pevt_free_buffer_queue = (uint8_t*)&FreeBufQueue;
 8002de0:	4b10      	ldr	r3, [pc, #64]	; (8002e24 <TL_MM_Init+0x74>)
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	4a0c      	ldr	r2, [pc, #48]	; (8002e18 <TL_MM_Init+0x68>)
 8002de6:	611a      	str	r2, [r3, #16]
  p_mem_manager_table->spare_ble_buffer = p_Config->p_BleSpareEvtBuffer;
 8002de8:	4b0e      	ldr	r3, [pc, #56]	; (8002e24 <TL_MM_Init+0x74>)
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	687a      	ldr	r2, [r7, #4]
 8002dee:	6812      	ldr	r2, [r2, #0]
 8002df0:	601a      	str	r2, [r3, #0]
  p_mem_manager_table->spare_sys_buffer = p_Config->p_SystemSpareEvtBuffer;
 8002df2:	4b0c      	ldr	r3, [pc, #48]	; (8002e24 <TL_MM_Init+0x74>)
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	687a      	ldr	r2, [r7, #4]
 8002df8:	6852      	ldr	r2, [r2, #4]
 8002dfa:	605a      	str	r2, [r3, #4]
  p_mem_manager_table->traces_evt_pool = p_Config->p_TracesEvtPool;
 8002dfc:	4b09      	ldr	r3, [pc, #36]	; (8002e24 <TL_MM_Init+0x74>)
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	687a      	ldr	r2, [r7, #4]
 8002e02:	6912      	ldr	r2, [r2, #16]
 8002e04:	615a      	str	r2, [r3, #20]
  p_mem_manager_table->tracespoolsize = p_Config->TracesEvtPoolSize;
 8002e06:	4b07      	ldr	r3, [pc, #28]	; (8002e24 <TL_MM_Init+0x74>)
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	687a      	ldr	r2, [r7, #4]
 8002e0c:	6952      	ldr	r2, [r2, #20]
 8002e0e:	619a      	str	r2, [r3, #24]

  return;
 8002e10:	bf00      	nop
}
 8002e12:	3708      	adds	r7, #8
 8002e14:	46bd      	mov	sp, r7
 8002e16:	bd80      	pop	{r7, pc}
 8002e18:	200300b8 	.word	0x200300b8
 8002e1c:	20000274 	.word	0x20000274
 8002e20:	20030000 	.word	0x20030000
 8002e24:	2000028c 	.word	0x2000028c

08002e28 <TL_MM_EvtDone>:

void TL_MM_EvtDone(TL_EvtPacket_t * phcievt)
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	b082      	sub	sp, #8
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&LocalFreeBufQueue, (tListNode *)phcievt);
 8002e30:	6879      	ldr	r1, [r7, #4]
 8002e32:	4807      	ldr	r0, [pc, #28]	; (8002e50 <TL_MM_EvtDone+0x28>)
 8002e34:	f000 f902 	bl	800303c <LST_insert_tail>

  OutputDbgTrace(TL_MB_MM_RELEASE_BUFFER, (uint8_t*)phcievt);
 8002e38:	6879      	ldr	r1, [r7, #4]
 8002e3a:	2000      	movs	r0, #0
 8002e3c:	f000 f850 	bl	8002ee0 <OutputDbgTrace>

  HW_IPCC_MM_SendFreeBuf( SendFreeBuf );
 8002e40:	4804      	ldr	r0, [pc, #16]	; (8002e54 <TL_MM_EvtDone+0x2c>)
 8002e42:	f000 fb6d 	bl	8003520 <HW_IPCC_MM_SendFreeBuf>

  return;
 8002e46:	bf00      	nop
}
 8002e48:	3708      	adds	r7, #8
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	bd80      	pop	{r7, pc}
 8002e4e:	bf00      	nop
 8002e50:	20000274 	.word	0x20000274
 8002e54:	08002e59 	.word	0x08002e59

08002e58 <SendFreeBuf>:

static void SendFreeBuf( void )
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	b082      	sub	sp, #8
 8002e5c:	af00      	add	r7, sp, #0
  tListNode *p_node;

  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 8002e5e:	e00c      	b.n	8002e7a <SendFreeBuf+0x22>
  {
    LST_remove_head( &LocalFreeBufQueue, (tListNode **)&p_node );
 8002e60:	1d3b      	adds	r3, r7, #4
 8002e62:	4619      	mov	r1, r3
 8002e64:	480a      	ldr	r0, [pc, #40]	; (8002e90 <SendFreeBuf+0x38>)
 8002e66:	f000 f930 	bl	80030ca <LST_remove_head>
    LST_insert_tail( (tListNode*)(TL_RefTable.p_mem_manager_table->pevt_free_buffer_queue), p_node );
 8002e6a:	4b0a      	ldr	r3, [pc, #40]	; (8002e94 <SendFreeBuf+0x3c>)
 8002e6c:	691b      	ldr	r3, [r3, #16]
 8002e6e:	691b      	ldr	r3, [r3, #16]
 8002e70:	687a      	ldr	r2, [r7, #4]
 8002e72:	4611      	mov	r1, r2
 8002e74:	4618      	mov	r0, r3
 8002e76:	f000 f8e1 	bl	800303c <LST_insert_tail>
  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 8002e7a:	4805      	ldr	r0, [pc, #20]	; (8002e90 <SendFreeBuf+0x38>)
 8002e7c:	f000 f896 	bl	8002fac <LST_is_empty>
 8002e80:	4603      	mov	r3, r0
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d0ec      	beq.n	8002e60 <SendFreeBuf+0x8>
  }

  return;
 8002e86:	bf00      	nop
}
 8002e88:	3708      	adds	r7, #8
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	bd80      	pop	{r7, pc}
 8002e8e:	bf00      	nop
 8002e90:	20000274 	.word	0x20000274
 8002e94:	20030000 	.word	0x20030000

08002e98 <HW_IPCC_TRACES_EvtNot>:

  return;
}

void HW_IPCC_TRACES_EvtNot(void)
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b082      	sub	sp, #8
 8002e9c:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 8002e9e:	e008      	b.n	8002eb2 <HW_IPCC_TRACES_EvtNot+0x1a>
  {
    LST_remove_head (&TracesEvtQueue, (tListNode **)&phcievt);
 8002ea0:	1d3b      	adds	r3, r7, #4
 8002ea2:	4619      	mov	r1, r3
 8002ea4:	4808      	ldr	r0, [pc, #32]	; (8002ec8 <HW_IPCC_TRACES_EvtNot+0x30>)
 8002ea6:	f000 f910 	bl	80030ca <LST_remove_head>
    TL_TRACES_EvtReceived( phcievt );
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	4618      	mov	r0, r3
 8002eae:	f000 f80d 	bl	8002ecc <TL_TRACES_EvtReceived>
  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 8002eb2:	4805      	ldr	r0, [pc, #20]	; (8002ec8 <HW_IPCC_TRACES_EvtNot+0x30>)
 8002eb4:	f000 f87a 	bl	8002fac <LST_is_empty>
 8002eb8:	4603      	mov	r3, r0
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d0f0      	beq.n	8002ea0 <HW_IPCC_TRACES_EvtNot+0x8>
  }

  return;
 8002ebe:	bf00      	nop
}
 8002ec0:	3708      	adds	r7, #8
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	bd80      	pop	{r7, pc}
 8002ec6:	bf00      	nop
 8002ec8:	200300c0 	.word	0x200300c0

08002ecc <TL_TRACES_EvtReceived>:

__WEAK void TL_TRACES_EvtReceived( TL_EvtPacket_t * hcievt )
{
 8002ecc:	b480      	push	{r7}
 8002ece:	b083      	sub	sp, #12
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
  (void)(hcievt);
}
 8002ed4:	bf00      	nop
 8002ed6:	370c      	adds	r7, #12
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ede:	4770      	bx	lr

08002ee0 <OutputDbgTrace>:

/******************************************************************************
 * DEBUG INFORMATION
 ******************************************************************************/
static void OutputDbgTrace(TL_MB_PacketType_t packet_type, uint8_t* buffer)
{
 8002ee0:	b480      	push	{r7}
 8002ee2:	b085      	sub	sp, #20
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	4603      	mov	r3, r0
 8002ee8:	6039      	str	r1, [r7, #0]
 8002eea:	71fb      	strb	r3, [r7, #7]
  TL_EvtPacket_t *p_evt_packet;
  TL_CmdPacket_t *p_cmd_packet;

  switch(packet_type)
 8002eec:	79fb      	ldrb	r3, [r7, #7]
 8002eee:	2b06      	cmp	r3, #6
 8002ef0:	d845      	bhi.n	8002f7e <OutputDbgTrace+0x9e>
 8002ef2:	a201      	add	r2, pc, #4	; (adr r2, 8002ef8 <OutputDbgTrace+0x18>)
 8002ef4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ef8:	08002f15 	.word	0x08002f15
 8002efc:	08002f39 	.word	0x08002f39
 8002f00:	08002f3f 	.word	0x08002f3f
 8002f04:	08002f53 	.word	0x08002f53
 8002f08:	08002f5f 	.word	0x08002f5f
 8002f0c:	08002f65 	.word	0x08002f65
 8002f10:	08002f73 	.word	0x08002f73
  {
    case TL_MB_MM_RELEASE_BUFFER:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8002f14:	683b      	ldr	r3, [r7, #0]
 8002f16:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	7a5b      	ldrb	r3, [r3, #9]
 8002f1c:	2bff      	cmp	r3, #255	; 0xff
 8002f1e:	d005      	beq.n	8002f2c <OutputDbgTrace+0x4c>
 8002f20:	2bff      	cmp	r3, #255	; 0xff
 8002f22:	dc05      	bgt.n	8002f30 <OutputDbgTrace+0x50>
 8002f24:	2b0e      	cmp	r3, #14
 8002f26:	d005      	beq.n	8002f34 <OutputDbgTrace+0x54>
 8002f28:	2b0f      	cmp	r3, #15
          break;

        default:
          TL_MM_DBG_MSG("mm evt released: 0x%02X", p_evt_packet->evtserial.evt.evtcode);
          TL_MM_DBG_MSG(" buffer addr: 0x%08X", p_evt_packet);
          break;
 8002f2a:	e001      	b.n	8002f30 <OutputDbgTrace+0x50>
          break;
 8002f2c:	bf00      	nop
 8002f2e:	e027      	b.n	8002f80 <OutputDbgTrace+0xa0>
          break;
 8002f30:	bf00      	nop
 8002f32:	e025      	b.n	8002f80 <OutputDbgTrace+0xa0>
          break;
 8002f34:	bf00      	nop
      }

      TL_MM_DBG_MSG("\r\n");
      break;
 8002f36:	e023      	b.n	8002f80 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 8002f38:	683b      	ldr	r3, [r7, #0]
 8002f3a:	60bb      	str	r3, [r7, #8]
        TL_HCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 8002f3c:	e020      	b.n	8002f80 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8002f3e:	683b      	ldr	r3, [r7, #0]
 8002f40:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	7a5b      	ldrb	r3, [r3, #9]
 8002f46:	2b0e      	cmp	r3, #14
 8002f48:	d001      	beq.n	8002f4e <OutputDbgTrace+0x6e>
 8002f4a:	2b0f      	cmp	r3, #15
          }
          break;

        default:
          TL_HCI_CMD_DBG_MSG("unknown ble rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 8002f4c:	e000      	b.n	8002f50 <OutputDbgTrace+0x70>
          break;
 8002f4e:	bf00      	nop
      }

      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8002f50:	e016      	b.n	8002f80 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8002f52:	683b      	ldr	r3, [r7, #0]
 8002f54:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	7a5b      	ldrb	r3, [r3, #9]
 8002f5a:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_HCI_EVT_DBG_MSG("\r\n");

      TL_HCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8002f5c:	e010      	b.n	8002f80 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 8002f5e:	683b      	ldr	r3, [r7, #0]
 8002f60:	60bb      	str	r3, [r7, #8]
        TL_SHCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 8002f62:	e00d      	b.n	8002f80 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8002f64:	683b      	ldr	r3, [r7, #0]
 8002f66:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	7a5b      	ldrb	r3, [r3, #9]
 8002f6c:	2b0e      	cmp	r3, #14
          }
          break;

        default:
          TL_SHCI_CMD_DBG_MSG("unknown sys rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 8002f6e:	bf00      	nop
      }

      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8002f70:	e006      	b.n	8002f80 <OutputDbgTrace+0xa0>

    case  TL_MB_SYS_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8002f72:	683b      	ldr	r3, [r7, #0]
 8002f74:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	7a5b      	ldrb	r3, [r3, #9]
 8002f7a:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_SHCI_EVT_DBG_MSG("\r\n");

      TL_SHCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8002f7c:	e000      	b.n	8002f80 <OutputDbgTrace+0xa0>

    default:
      break;
 8002f7e:	bf00      	nop
  }

  return;
 8002f80:	bf00      	nop
}
 8002f82:	3714      	adds	r7, #20
 8002f84:	46bd      	mov	sp, r7
 8002f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8a:	4770      	bx	lr

08002f8c <LST_init_head>:

/******************************************************************************
 * Function Definitions 
 ******************************************************************************/
void LST_init_head (tListNode * listHead)
{
 8002f8c:	b480      	push	{r7}
 8002f8e:	b083      	sub	sp, #12
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	687a      	ldr	r2, [r7, #4]
 8002f98:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	687a      	ldr	r2, [r7, #4]
 8002f9e:	605a      	str	r2, [r3, #4]
}
 8002fa0:	bf00      	nop
 8002fa2:	370c      	adds	r7, #12
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002faa:	4770      	bx	lr

08002fac <LST_is_empty>:

uint8_t LST_is_empty (tListNode * listHead)
{
 8002fac:	b480      	push	{r7}
 8002fae:	b087      	sub	sp, #28
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002fb4:	f3ef 8310 	mrs	r3, PRIMASK
 8002fb8:	60fb      	str	r3, [r7, #12]
  return(result);
 8002fba:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;
  uint8_t return_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8002fbc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8002fbe:	b672      	cpsid	i
}
 8002fc0:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	687a      	ldr	r2, [r7, #4]
 8002fc8:	429a      	cmp	r2, r3
 8002fca:	d102      	bne.n	8002fd2 <LST_is_empty+0x26>
  {
    return_value = TRUE;
 8002fcc:	2301      	movs	r3, #1
 8002fce:	75fb      	strb	r3, [r7, #23]
 8002fd0:	e001      	b.n	8002fd6 <LST_is_empty+0x2a>
  }
  else
  {
    return_value = FALSE;
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	75fb      	strb	r3, [r7, #23]
 8002fd6:	693b      	ldr	r3, [r7, #16]
 8002fd8:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002fda:	68bb      	ldr	r3, [r7, #8]
 8002fdc:	f383 8810 	msr	PRIMASK, r3
}
 8002fe0:	bf00      	nop
  }
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return return_value;
 8002fe2:	7dfb      	ldrb	r3, [r7, #23]
}
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	371c      	adds	r7, #28
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fee:	4770      	bx	lr

08002ff0 <LST_insert_head>:

void LST_insert_head (tListNode * listHead, tListNode * node)
{
 8002ff0:	b480      	push	{r7}
 8002ff2:	b087      	sub	sp, #28
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]
 8002ff8:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002ffa:	f3ef 8310 	mrs	r3, PRIMASK
 8002ffe:	60fb      	str	r3, [r7, #12]
  return(result);
 8003000:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8003002:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8003004:	b672      	cpsid	i
}
 8003006:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead->next;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681a      	ldr	r2, [r3, #0]
 800300c:	683b      	ldr	r3, [r7, #0]
 800300e:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 8003010:	683b      	ldr	r3, [r7, #0]
 8003012:	687a      	ldr	r2, [r7, #4]
 8003014:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	683a      	ldr	r2, [r7, #0]
 800301a:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 800301c:	683b      	ldr	r3, [r7, #0]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	683a      	ldr	r2, [r7, #0]
 8003022:	605a      	str	r2, [r3, #4]
 8003024:	697b      	ldr	r3, [r7, #20]
 8003026:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003028:	693b      	ldr	r3, [r7, #16]
 800302a:	f383 8810 	msr	PRIMASK, r3
}
 800302e:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8003030:	bf00      	nop
 8003032:	371c      	adds	r7, #28
 8003034:	46bd      	mov	sp, r7
 8003036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303a:	4770      	bx	lr

0800303c <LST_insert_tail>:


void LST_insert_tail (tListNode * listHead, tListNode * node)
{
 800303c:	b480      	push	{r7}
 800303e:	b087      	sub	sp, #28
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
 8003044:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003046:	f3ef 8310 	mrs	r3, PRIMASK
 800304a:	60fb      	str	r3, [r7, #12]
  return(result);
 800304c:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800304e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8003050:	b672      	cpsid	i
}
 8003052:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead;
 8003054:	683b      	ldr	r3, [r7, #0]
 8003056:	687a      	ldr	r2, [r7, #4]
 8003058:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	685a      	ldr	r2, [r3, #4]
 800305e:	683b      	ldr	r3, [r7, #0]
 8003060:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	683a      	ldr	r2, [r7, #0]
 8003066:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 8003068:	683b      	ldr	r3, [r7, #0]
 800306a:	685b      	ldr	r3, [r3, #4]
 800306c:	683a      	ldr	r2, [r7, #0]
 800306e:	601a      	str	r2, [r3, #0]
 8003070:	697b      	ldr	r3, [r7, #20]
 8003072:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003074:	693b      	ldr	r3, [r7, #16]
 8003076:	f383 8810 	msr	PRIMASK, r3
}
 800307a:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800307c:	bf00      	nop
 800307e:	371c      	adds	r7, #28
 8003080:	46bd      	mov	sp, r7
 8003082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003086:	4770      	bx	lr

08003088 <LST_remove_node>:


void LST_remove_node (tListNode * node)
{
 8003088:	b480      	push	{r7}
 800308a:	b087      	sub	sp, #28
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003090:	f3ef 8310 	mrs	r3, PRIMASK
 8003094:	60fb      	str	r3, [r7, #12]
  return(result);
 8003096:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8003098:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800309a:	b672      	cpsid	i
}
 800309c:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  (node->prev)->next = node->next;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	685b      	ldr	r3, [r3, #4]
 80030a2:	687a      	ldr	r2, [r7, #4]
 80030a4:	6812      	ldr	r2, [r2, #0]
 80030a6:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	687a      	ldr	r2, [r7, #4]
 80030ae:	6852      	ldr	r2, [r2, #4]
 80030b0:	605a      	str	r2, [r3, #4]
 80030b2:	697b      	ldr	r3, [r7, #20]
 80030b4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80030b6:	693b      	ldr	r3, [r7, #16]
 80030b8:	f383 8810 	msr	PRIMASK, r3
}
 80030bc:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 80030be:	bf00      	nop
 80030c0:	371c      	adds	r7, #28
 80030c2:	46bd      	mov	sp, r7
 80030c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c8:	4770      	bx	lr

080030ca <LST_remove_head>:


void LST_remove_head (tListNode * listHead, tListNode ** node )
{
 80030ca:	b580      	push	{r7, lr}
 80030cc:	b086      	sub	sp, #24
 80030ce:	af00      	add	r7, sp, #0
 80030d0:	6078      	str	r0, [r7, #4]
 80030d2:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80030d4:	f3ef 8310 	mrs	r3, PRIMASK
 80030d8:	60fb      	str	r3, [r7, #12]
  return(result);
 80030da:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80030dc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80030de:	b672      	cpsid	i
}
 80030e0:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  *node = listHead->next;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681a      	ldr	r2, [r3, #0]
 80030e6:	683b      	ldr	r3, [r7, #0]
 80030e8:	601a      	str	r2, [r3, #0]
  LST_remove_node (listHead->next);
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	4618      	mov	r0, r3
 80030f0:	f7ff ffca 	bl	8003088 <LST_remove_node>
 80030f4:	697b      	ldr	r3, [r7, #20]
 80030f6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80030f8:	693b      	ldr	r3, [r7, #16]
 80030fa:	f383 8810 	msr	PRIMASK, r3
}
 80030fe:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8003100:	bf00      	nop
 8003102:	3718      	adds	r7, #24
 8003104:	46bd      	mov	sp, r7
 8003106:	bd80      	pop	{r7, pc}

08003108 <LL_C2_EXTI_EnableEvent_32_63>:
  *         @arg @ref LL_EXTI_LINE_40
  *         @arg @ref LL_EXTI_LINE_41
  * @retval None
  */
__STATIC_INLINE void LL_C2_EXTI_EnableEvent_32_63(uint32_t ExtiLine)
{
 8003108:	b480      	push	{r7}
 800310a:	b083      	sub	sp, #12
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->C2EMR2, ExtiLine);
 8003110:	4b06      	ldr	r3, [pc, #24]	; (800312c <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 8003112:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 8003116:	4905      	ldr	r1, [pc, #20]	; (800312c <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	4313      	orrs	r3, r2
 800311c:	f8c1 30d4 	str.w	r3, [r1, #212]	; 0xd4
}
 8003120:	bf00      	nop
 8003122:	370c      	adds	r7, #12
 8003124:	46bd      	mov	sp, r7
 8003126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312a:	4770      	bx	lr
 800312c:	58000800 	.word	0x58000800

08003130 <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 8003130:	b480      	push	{r7}
 8003132:	b083      	sub	sp, #12
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 8003138:	4b05      	ldr	r3, [pc, #20]	; (8003150 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800313a:	6a1a      	ldr	r2, [r3, #32]
 800313c:	4904      	ldr	r1, [pc, #16]	; (8003150 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	4313      	orrs	r3, r2
 8003142:	620b      	str	r3, [r1, #32]
}
 8003144:	bf00      	nop
 8003146:	370c      	adds	r7, #12
 8003148:	46bd      	mov	sp, r7
 800314a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314e:	4770      	bx	lr
 8003150:	58000800 	.word	0x58000800

08003154 <LL_C1_IPCC_EnableIT_TXF>:
  * @rmtoll C1CR          TXFIE         LL_C1_IPCC_EnableIT_TXF
  * @param  IPCCx IPCC Instance.
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableIT_TXF(IPCC_TypeDef *IPCCx)
{
 8003154:	b480      	push	{r7}
 8003156:	b083      	sub	sp, #12
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_TXFIE);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	601a      	str	r2, [r3, #0]
}
 8003168:	bf00      	nop
 800316a:	370c      	adds	r7, #12
 800316c:	46bd      	mov	sp, r7
 800316e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003172:	4770      	bx	lr

08003174 <LL_C1_IPCC_EnableIT_RXO>:
  * @rmtoll C1CR          RXOIE         LL_C1_IPCC_EnableIT_RXO
  * @param  IPCCx IPCC Instance.
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableIT_RXO(IPCC_TypeDef *IPCCx)
{
 8003174:	b480      	push	{r7}
 8003176:	b083      	sub	sp, #12
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_RXOIE);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f043 0201 	orr.w	r2, r3, #1
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	601a      	str	r2, [r3, #0]
}
 8003188:	bf00      	nop
 800318a:	370c      	adds	r7, #12
 800318c:	46bd      	mov	sp, r7
 800318e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003192:	4770      	bx	lr

08003194 <LL_C1_IPCC_EnableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8003194:	b480      	push	{r7}
 8003196:	b083      	sub	sp, #12
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]
 800319c:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	685a      	ldr	r2, [r3, #4]
 80031a2:	683b      	ldr	r3, [r7, #0]
 80031a4:	041b      	lsls	r3, r3, #16
 80031a6:	43db      	mvns	r3, r3
 80031a8:	401a      	ands	r2, r3
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	605a      	str	r2, [r3, #4]
}
 80031ae:	bf00      	nop
 80031b0:	370c      	adds	r7, #12
 80031b2:	46bd      	mov	sp, r7
 80031b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b8:	4770      	bx	lr

080031ba <LL_C1_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80031ba:	b480      	push	{r7}
 80031bc:	b083      	sub	sp, #12
 80031be:	af00      	add	r7, sp, #0
 80031c0:	6078      	str	r0, [r7, #4]
 80031c2:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	685a      	ldr	r2, [r3, #4]
 80031c8:	683b      	ldr	r3, [r7, #0]
 80031ca:	041b      	lsls	r3, r3, #16
 80031cc:	431a      	orrs	r2, r3
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	605a      	str	r2, [r3, #4]
}
 80031d2:	bf00      	nop
 80031d4:	370c      	adds	r7, #12
 80031d6:	46bd      	mov	sp, r7
 80031d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031dc:	4770      	bx	lr

080031de <LL_C1_IPCC_EnableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80031de:	b480      	push	{r7}
 80031e0:	b083      	sub	sp, #12
 80031e2:	af00      	add	r7, sp, #0
 80031e4:	6078      	str	r0, [r7, #4]
 80031e6:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	685a      	ldr	r2, [r3, #4]
 80031ec:	683b      	ldr	r3, [r7, #0]
 80031ee:	43db      	mvns	r3, r3
 80031f0:	401a      	ands	r2, r3
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	605a      	str	r2, [r3, #4]
}
 80031f6:	bf00      	nop
 80031f8:	370c      	adds	r7, #12
 80031fa:	46bd      	mov	sp, r7
 80031fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003200:	4770      	bx	lr

08003202 <LL_C1_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8003202:	b480      	push	{r7}
 8003204:	b083      	sub	sp, #12
 8003206:	af00      	add	r7, sp, #0
 8003208:	6078      	str	r0, [r7, #4]
 800320a:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	683a      	ldr	r2, [r7, #0]
 8003210:	609a      	str	r2, [r3, #8]
}
 8003212:	bf00      	nop
 8003214:	370c      	adds	r7, #12
 8003216:	46bd      	mov	sp, r7
 8003218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321c:	4770      	bx	lr

0800321e <LL_C1_IPCC_SetFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_SetFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800321e:	b480      	push	{r7}
 8003220:	b083      	sub	sp, #12
 8003222:	af00      	add	r7, sp, #0
 8003224:	6078      	str	r0, [r7, #4]
 8003226:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 8003228:	683b      	ldr	r3, [r7, #0]
 800322a:	041a      	lsls	r2, r3, #16
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	609a      	str	r2, [r3, #8]
}
 8003230:	bf00      	nop
 8003232:	370c      	adds	r7, #12
 8003234:	46bd      	mov	sp, r7
 8003236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323a:	4770      	bx	lr

0800323c <LL_C1_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C1_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 800323c:	b480      	push	{r7}
 800323e:	b083      	sub	sp, #12
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
 8003244:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	68da      	ldr	r2, [r3, #12]
 800324a:	683b      	ldr	r3, [r7, #0]
 800324c:	4013      	ands	r3, r2
 800324e:	683a      	ldr	r2, [r7, #0]
 8003250:	429a      	cmp	r2, r3
 8003252:	d101      	bne.n	8003258 <LL_C1_IPCC_IsActiveFlag_CHx+0x1c>
 8003254:	2301      	movs	r3, #1
 8003256:	e000      	b.n	800325a <LL_C1_IPCC_IsActiveFlag_CHx+0x1e>
 8003258:	2300      	movs	r3, #0
}
 800325a:	4618      	mov	r0, r3
 800325c:	370c      	adds	r7, #12
 800325e:	46bd      	mov	sp, r7
 8003260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003264:	4770      	bx	lr

08003266 <LL_C2_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C2_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 8003266:	b480      	push	{r7}
 8003268:	b083      	sub	sp, #12
 800326a:	af00      	add	r7, sp, #0
 800326c:	6078      	str	r0, [r7, #4]
 800326e:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C2TOC1SR, Channel) == (Channel)) ? 1UL : 0UL);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	69da      	ldr	r2, [r3, #28]
 8003274:	683b      	ldr	r3, [r7, #0]
 8003276:	4013      	ands	r3, r2
 8003278:	683a      	ldr	r2, [r7, #0]
 800327a:	429a      	cmp	r2, r3
 800327c:	d101      	bne.n	8003282 <LL_C2_IPCC_IsActiveFlag_CHx+0x1c>
 800327e:	2301      	movs	r3, #1
 8003280:	e000      	b.n	8003284 <LL_C2_IPCC_IsActiveFlag_CHx+0x1e>
 8003282:	2300      	movs	r3, #0
}
 8003284:	4618      	mov	r0, r3
 8003286:	370c      	adds	r7, #12
 8003288:	46bd      	mov	sp, r7
 800328a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328e:	4770      	bx	lr

08003290 <LL_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_AHB3_GRP1_PERIPH_FLASH
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 8003290:	b480      	push	{r7}
 8003292:	b085      	sub	sp, #20
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB3ENR, Periphs);
 8003298:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800329c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800329e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	4313      	orrs	r3, r2
 80032a6:	650b      	str	r3, [r1, #80]	; 0x50
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 80032a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80032ac:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	4013      	ands	r3, r2
 80032b2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80032b4:	68fb      	ldr	r3, [r7, #12]
}
 80032b6:	bf00      	nop
 80032b8:	3714      	adds	r7, #20
 80032ba:	46bd      	mov	sp, r7
 80032bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c0:	4770      	bx	lr

080032c2 <LL_C2_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_IPCC
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_FLASH
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 80032c2:	b480      	push	{r7}
 80032c4:	b085      	sub	sp, #20
 80032c6:	af00      	add	r7, sp, #0
 80032c8:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB3ENR, Periphs);
 80032ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80032ce:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 80032d2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	4313      	orrs	r3, r2
 80032da:	f8c1 3150 	str.w	r3, [r1, #336]	; 0x150
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB3ENR, Periphs);
 80032de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80032e2:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	4013      	ands	r3, r2
 80032ea:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80032ec:	68fb      	ldr	r3, [r7, #12]
}
 80032ee:	bf00      	nop
 80032f0:	3714      	adds	r7, #20
 80032f2:	46bd      	mov	sp, r7
 80032f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f8:	4770      	bx	lr
	...

080032fc <LL_PWR_EnableBootC2>:
  * @brief  Boot CPU2 after reset or wakeup from stop or standby modes
  * @rmtoll CR4          C2BOOT        LL_PWR_EnableBootC2
  * @retval None
  */
__STATIC_INLINE void LL_PWR_EnableBootC2(void)
{
 80032fc:	b480      	push	{r7}
 80032fe:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 8003300:	4b05      	ldr	r3, [pc, #20]	; (8003318 <LL_PWR_EnableBootC2+0x1c>)
 8003302:	68db      	ldr	r3, [r3, #12]
 8003304:	4a04      	ldr	r2, [pc, #16]	; (8003318 <LL_PWR_EnableBootC2+0x1c>)
 8003306:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800330a:	60d3      	str	r3, [r2, #12]
}
 800330c:	bf00      	nop
 800330e:	46bd      	mov	sp, r7
 8003310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003314:	4770      	bx	lr
 8003316:	bf00      	nop
 8003318:	58000400 	.word	0x58000400

0800331c <HW_IPCC_Rx_Handler>:

/******************************************************************************
 * INTERRUPT HANDLER
 ******************************************************************************/
void HW_IPCC_Rx_Handler( void )
{
 800331c:	b580      	push	{r7, lr}
 800331e:	af00      	add	r7, sp, #0
  if (HW_IPCC_RX_PENDING( HW_IPCC_SYSTEM_EVENT_CHANNEL ))
 8003320:	2102      	movs	r1, #2
 8003322:	4818      	ldr	r0, [pc, #96]	; (8003384 <HW_IPCC_Rx_Handler+0x68>)
 8003324:	f7ff ff9f 	bl	8003266 <LL_C2_IPCC_IsActiveFlag_CHx>
 8003328:	4603      	mov	r3, r0
 800332a:	2b00      	cmp	r3, #0
 800332c:	d008      	beq.n	8003340 <HW_IPCC_Rx_Handler+0x24>
 800332e:	4b15      	ldr	r3, [pc, #84]	; (8003384 <HW_IPCC_Rx_Handler+0x68>)
 8003330:	685b      	ldr	r3, [r3, #4]
 8003332:	f003 0302 	and.w	r3, r3, #2
 8003336:	2b00      	cmp	r3, #0
 8003338:	d102      	bne.n	8003340 <HW_IPCC_Rx_Handler+0x24>
  {
      HW_IPCC_SYS_EvtHandler();
 800333a:	f000 f8e5 	bl	8003508 <HW_IPCC_SYS_EvtHandler>
 800333e:	e01e      	b.n	800337e <HW_IPCC_Rx_Handler+0x62>
  else if (HW_IPCC_RX_PENDING( HW_IPCC_ZIGBEE_M0_REQUEST_CHANNEL ))
  {
    HW_IPCC_ZIGBEE_StackM0RequestHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_RX_PENDING( HW_IPCC_BLE_EVENT_CHANNEL ))
 8003340:	2101      	movs	r1, #1
 8003342:	4810      	ldr	r0, [pc, #64]	; (8003384 <HW_IPCC_Rx_Handler+0x68>)
 8003344:	f7ff ff8f 	bl	8003266 <LL_C2_IPCC_IsActiveFlag_CHx>
 8003348:	4603      	mov	r3, r0
 800334a:	2b00      	cmp	r3, #0
 800334c:	d008      	beq.n	8003360 <HW_IPCC_Rx_Handler+0x44>
 800334e:	4b0d      	ldr	r3, [pc, #52]	; (8003384 <HW_IPCC_Rx_Handler+0x68>)
 8003350:	685b      	ldr	r3, [r3, #4]
 8003352:	f003 0301 	and.w	r3, r3, #1
 8003356:	2b00      	cmp	r3, #0
 8003358:	d102      	bne.n	8003360 <HW_IPCC_Rx_Handler+0x44>
  {
    HW_IPCC_BLE_EvtHandler();
 800335a:	f000 f899 	bl	8003490 <HW_IPCC_BLE_EvtHandler>
 800335e:	e00e      	b.n	800337e <HW_IPCC_Rx_Handler+0x62>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_TRACES_CHANNEL ))
 8003360:	2108      	movs	r1, #8
 8003362:	4808      	ldr	r0, [pc, #32]	; (8003384 <HW_IPCC_Rx_Handler+0x68>)
 8003364:	f7ff ff7f 	bl	8003266 <LL_C2_IPCC_IsActiveFlag_CHx>
 8003368:	4603      	mov	r3, r0
 800336a:	2b00      	cmp	r3, #0
 800336c:	d008      	beq.n	8003380 <HW_IPCC_Rx_Handler+0x64>
 800336e:	4b05      	ldr	r3, [pc, #20]	; (8003384 <HW_IPCC_Rx_Handler+0x68>)
 8003370:	685b      	ldr	r3, [r3, #4]
 8003372:	f003 0308 	and.w	r3, r3, #8
 8003376:	2b00      	cmp	r3, #0
 8003378:	d102      	bne.n	8003380 <HW_IPCC_Rx_Handler+0x64>
  {
    HW_IPCC_TRACES_EvtHandler();
 800337a:	f000 f907 	bl	800358c <HW_IPCC_TRACES_EvtHandler>
  }

  return;
 800337e:	bf00      	nop
 8003380:	bf00      	nop
}
 8003382:	bd80      	pop	{r7, pc}
 8003384:	58000c00 	.word	0x58000c00

08003388 <HW_IPCC_Tx_Handler>:

void HW_IPCC_Tx_Handler( void )
{
 8003388:	b580      	push	{r7, lr}
 800338a:	af00      	add	r7, sp, #0
  if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 800338c:	2102      	movs	r1, #2
 800338e:	4820      	ldr	r0, [pc, #128]	; (8003410 <HW_IPCC_Tx_Handler+0x88>)
 8003390:	f7ff ff54 	bl	800323c <LL_C1_IPCC_IsActiveFlag_CHx>
 8003394:	4603      	mov	r3, r0
 8003396:	2b00      	cmp	r3, #0
 8003398:	d108      	bne.n	80033ac <HW_IPCC_Tx_Handler+0x24>
 800339a:	4b1d      	ldr	r3, [pc, #116]	; (8003410 <HW_IPCC_Tx_Handler+0x88>)
 800339c:	685b      	ldr	r3, [r3, #4]
 800339e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d102      	bne.n	80033ac <HW_IPCC_Tx_Handler+0x24>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 80033a6:	f000 f8a3 	bl	80034f0 <HW_IPCC_SYS_CmdEvtHandler>
 80033aa:	e02e      	b.n	800340a <HW_IPCC_Tx_Handler+0x82>
  if (HW_IPCC_TX_PENDING( HW_IPCC_ZIGBEE_CMD_APPLI_CHANNEL ))
  {
      HW_IPCC_ZIGBEE_CmdEvtHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 80033ac:	2102      	movs	r1, #2
 80033ae:	4818      	ldr	r0, [pc, #96]	; (8003410 <HW_IPCC_Tx_Handler+0x88>)
 80033b0:	f7ff ff44 	bl	800323c <LL_C1_IPCC_IsActiveFlag_CHx>
 80033b4:	4603      	mov	r3, r0
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d108      	bne.n	80033cc <HW_IPCC_Tx_Handler+0x44>
 80033ba:	4b15      	ldr	r3, [pc, #84]	; (8003410 <HW_IPCC_Tx_Handler+0x88>)
 80033bc:	685b      	ldr	r3, [r3, #4]
 80033be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d102      	bne.n	80033cc <HW_IPCC_Tx_Handler+0x44>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 80033c6:	f000 f893 	bl	80034f0 <HW_IPCC_SYS_CmdEvtHandler>
 80033ca:	e01e      	b.n	800340a <HW_IPCC_Tx_Handler+0x82>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ))
 80033cc:	2108      	movs	r1, #8
 80033ce:	4810      	ldr	r0, [pc, #64]	; (8003410 <HW_IPCC_Tx_Handler+0x88>)
 80033d0:	f7ff ff34 	bl	800323c <LL_C1_IPCC_IsActiveFlag_CHx>
 80033d4:	4603      	mov	r3, r0
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d108      	bne.n	80033ec <HW_IPCC_Tx_Handler+0x64>
 80033da:	4b0d      	ldr	r3, [pc, #52]	; (8003410 <HW_IPCC_Tx_Handler+0x88>)
 80033dc:	685b      	ldr	r3, [r3, #4]
 80033de:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d102      	bne.n	80033ec <HW_IPCC_Tx_Handler+0x64>
  {
    HW_IPCC_MM_FreeBufHandler();
 80033e6:	f000 f8bd 	bl	8003564 <HW_IPCC_MM_FreeBufHandler>
 80033ea:	e00e      	b.n	800340a <HW_IPCC_Tx_Handler+0x82>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_HCI_ACL_DATA_CHANNEL ))
 80033ec:	2120      	movs	r1, #32
 80033ee:	4808      	ldr	r0, [pc, #32]	; (8003410 <HW_IPCC_Tx_Handler+0x88>)
 80033f0:	f7ff ff24 	bl	800323c <LL_C1_IPCC_IsActiveFlag_CHx>
 80033f4:	4603      	mov	r3, r0
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d108      	bne.n	800340c <HW_IPCC_Tx_Handler+0x84>
 80033fa:	4b05      	ldr	r3, [pc, #20]	; (8003410 <HW_IPCC_Tx_Handler+0x88>)
 80033fc:	685b      	ldr	r3, [r3, #4]
 80033fe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003402:	2b00      	cmp	r3, #0
 8003404:	d102      	bne.n	800340c <HW_IPCC_Tx_Handler+0x84>
  {
    HW_IPCC_BLE_AclDataEvtHandler();
 8003406:	f000 f84f 	bl	80034a8 <HW_IPCC_BLE_AclDataEvtHandler>
  }

  return;
 800340a:	bf00      	nop
 800340c:	bf00      	nop
}
 800340e:	bd80      	pop	{r7, pc}
 8003410:	58000c00 	.word	0x58000c00

08003414 <HW_IPCC_Enable>:
/******************************************************************************
 * GENERAL
 ******************************************************************************/
void HW_IPCC_Enable( void )
{
 8003414:	b580      	push	{r7, lr}
 8003416:	af00      	add	r7, sp, #0
  /**
  * Such as IPCC IP available to the CPU2, it is required to keep the IPCC clock running
    when FUS is running on CPU2 and CPU1 enters deep sleep mode
  */
  LL_C2_AHB3_GRP1_EnableClock(LL_C2_AHB3_GRP1_PERIPH_IPCC);
 8003418:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800341c:	f7ff ff51 	bl	80032c2 <LL_C2_AHB3_GRP1_EnableClock>

   /**
   * When the device is out of standby, it is required to use the EXTI mechanism to wakeup CPU2
   */
  LL_C2_EXTI_EnableEvent_32_63( LL_EXTI_LINE_41 );
 8003420:	f44f 7000 	mov.w	r0, #512	; 0x200
 8003424:	f7ff fe70 	bl	8003108 <LL_C2_EXTI_EnableEvent_32_63>
  LL_EXTI_EnableRisingTrig_32_63( LL_EXTI_LINE_41 );
 8003428:	f44f 7000 	mov.w	r0, #512	; 0x200
 800342c:	f7ff fe80 	bl	8003130 <LL_EXTI_EnableRisingTrig_32_63>
   * When the CPU2 receives that command, it waits for its event input to be set to restart the CPU2 firmware.
   * This is required because once C2BOOT has been set once, a clear/set on C2BOOT has no effect.
   * When SHCI_C2_Reinit( ) is not called, generating an event to the CPU2 does not have any effect
   * So, by default, the application shall both set the event flag and set the C2BOOT bit.
   */
  __SEV( );       /* Set the internal event flag and send an event to the CPU2 */
 8003430:	bf40      	sev
  __WFE( );       /* Clear the internal event flag */
 8003432:	bf20      	wfe
  LL_PWR_EnableBootC2( );
 8003434:	f7ff ff62 	bl	80032fc <LL_PWR_EnableBootC2>

  return;
 8003438:	bf00      	nop
}
 800343a:	bd80      	pop	{r7, pc}

0800343c <HW_IPCC_Init>:

void HW_IPCC_Init( void )
{
 800343c:	b580      	push	{r7, lr}
 800343e:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock( LL_AHB3_GRP1_PERIPH_IPCC );
 8003440:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8003444:	f7ff ff24 	bl	8003290 <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_EnableIT_RXO( IPCC );
 8003448:	4806      	ldr	r0, [pc, #24]	; (8003464 <HW_IPCC_Init+0x28>)
 800344a:	f7ff fe93 	bl	8003174 <LL_C1_IPCC_EnableIT_RXO>
  LL_C1_IPCC_EnableIT_TXF( IPCC );
 800344e:	4805      	ldr	r0, [pc, #20]	; (8003464 <HW_IPCC_Init+0x28>)
 8003450:	f7ff fe80 	bl	8003154 <LL_C1_IPCC_EnableIT_TXF>

  HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 8003454:	202c      	movs	r0, #44	; 0x2c
 8003456:	f7fd fc82 	bl	8000d5e <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 800345a:	202d      	movs	r0, #45	; 0x2d
 800345c:	f7fd fc7f 	bl	8000d5e <HAL_NVIC_EnableIRQ>

  return;
 8003460:	bf00      	nop
}
 8003462:	bd80      	pop	{r7, pc}
 8003464:	58000c00 	.word	0x58000c00

08003468 <HW_IPCC_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
void HW_IPCC_BLE_Init( void )
{
 8003468:	b580      	push	{r7, lr}
 800346a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 800346c:	2101      	movs	r1, #1
 800346e:	4802      	ldr	r0, [pc, #8]	; (8003478 <HW_IPCC_BLE_Init+0x10>)
 8003470:	f7ff feb5 	bl	80031de <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8003474:	bf00      	nop
}
 8003476:	bd80      	pop	{r7, pc}
 8003478:	58000c00 	.word	0x58000c00

0800347c <HW_IPCC_BLE_SendCmd>:

void HW_IPCC_BLE_SendCmd( void )
{
 800347c:	b580      	push	{r7, lr}
 800347e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_BLE_CMD_CHANNEL );
 8003480:	2101      	movs	r1, #1
 8003482:	4802      	ldr	r0, [pc, #8]	; (800348c <HW_IPCC_BLE_SendCmd+0x10>)
 8003484:	f7ff fecb 	bl	800321e <LL_C1_IPCC_SetFlag_CHx>

  return;
 8003488:	bf00      	nop
}
 800348a:	bd80      	pop	{r7, pc}
 800348c:	58000c00 	.word	0x58000c00

08003490 <HW_IPCC_BLE_EvtHandler>:

static void HW_IPCC_BLE_EvtHandler( void )
{
 8003490:	b580      	push	{r7, lr}
 8003492:	af00      	add	r7, sp, #0
  HW_IPCC_BLE_RxEvtNot();
 8003494:	f7ff fbd4 	bl	8002c40 <HW_IPCC_BLE_RxEvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 8003498:	2101      	movs	r1, #1
 800349a:	4802      	ldr	r0, [pc, #8]	; (80034a4 <HW_IPCC_BLE_EvtHandler+0x14>)
 800349c:	f7ff feb1 	bl	8003202 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 80034a0:	bf00      	nop
}
 80034a2:	bd80      	pop	{r7, pc}
 80034a4:	58000c00 	.word	0x58000c00

080034a8 <HW_IPCC_BLE_AclDataEvtHandler>:

  return;
}

static void HW_IPCC_BLE_AclDataEvtHandler( void )
{
 80034a8:	b580      	push	{r7, lr}
 80034aa:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_HCI_ACL_DATA_CHANNEL );
 80034ac:	2120      	movs	r1, #32
 80034ae:	4803      	ldr	r0, [pc, #12]	; (80034bc <HW_IPCC_BLE_AclDataEvtHandler+0x14>)
 80034b0:	f7ff fe83 	bl	80031ba <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_BLE_AclDataAckNot();
 80034b4:	f7ff fbf4 	bl	8002ca0 <HW_IPCC_BLE_AclDataAckNot>

  return;
 80034b8:	bf00      	nop
}
 80034ba:	bd80      	pop	{r7, pc}
 80034bc:	58000c00 	.word	0x58000c00

080034c0 <HW_IPCC_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
void HW_IPCC_SYS_Init( void )
{
 80034c0:	b580      	push	{r7, lr}
 80034c2:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 80034c4:	2102      	movs	r1, #2
 80034c6:	4802      	ldr	r0, [pc, #8]	; (80034d0 <HW_IPCC_SYS_Init+0x10>)
 80034c8:	f7ff fe89 	bl	80031de <LL_C1_IPCC_EnableReceiveChannel>

  return;
 80034cc:	bf00      	nop
}
 80034ce:	bd80      	pop	{r7, pc}
 80034d0:	58000c00 	.word	0x58000c00

080034d4 <HW_IPCC_SYS_SendCmd>:

void HW_IPCC_SYS_SendCmd( void )
{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 80034d8:	2102      	movs	r1, #2
 80034da:	4804      	ldr	r0, [pc, #16]	; (80034ec <HW_IPCC_SYS_SendCmd+0x18>)
 80034dc:	f7ff fe9f 	bl	800321e <LL_C1_IPCC_SetFlag_CHx>
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 80034e0:	2102      	movs	r1, #2
 80034e2:	4802      	ldr	r0, [pc, #8]	; (80034ec <HW_IPCC_SYS_SendCmd+0x18>)
 80034e4:	f7ff fe56 	bl	8003194 <LL_C1_IPCC_EnableTransmitChannel>

  return;
 80034e8:	bf00      	nop
}
 80034ea:	bd80      	pop	{r7, pc}
 80034ec:	58000c00 	.word	0x58000c00

080034f0 <HW_IPCC_SYS_CmdEvtHandler>:

static void HW_IPCC_SYS_CmdEvtHandler( void )
{
 80034f0:	b580      	push	{r7, lr}
 80034f2:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 80034f4:	2102      	movs	r1, #2
 80034f6:	4803      	ldr	r0, [pc, #12]	; (8003504 <HW_IPCC_SYS_CmdEvtHandler+0x14>)
 80034f8:	f7ff fe5f 	bl	80031ba <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_SYS_CmdEvtNot();
 80034fc:	f7ff fc20 	bl	8002d40 <HW_IPCC_SYS_CmdEvtNot>

  return;
 8003500:	bf00      	nop
}
 8003502:	bd80      	pop	{r7, pc}
 8003504:	58000c00 	.word	0x58000c00

08003508 <HW_IPCC_SYS_EvtHandler>:

static void HW_IPCC_SYS_EvtHandler( void )
{
 8003508:	b580      	push	{r7, lr}
 800350a:	af00      	add	r7, sp, #0
  HW_IPCC_SYS_EvtNot();
 800350c:	f7ff fc2e 	bl	8002d6c <HW_IPCC_SYS_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 8003510:	2102      	movs	r1, #2
 8003512:	4802      	ldr	r0, [pc, #8]	; (800351c <HW_IPCC_SYS_EvtHandler+0x14>)
 8003514:	f7ff fe75 	bl	8003202 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8003518:	bf00      	nop
}
 800351a:	bd80      	pop	{r7, pc}
 800351c:	58000c00 	.word	0x58000c00

08003520 <HW_IPCC_MM_SendFreeBuf>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void HW_IPCC_MM_SendFreeBuf( void (*cb)( void ) )
{
 8003520:	b580      	push	{r7, lr}
 8003522:	b082      	sub	sp, #8
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
  if ( LL_C1_IPCC_IsActiveFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ) )
 8003528:	2108      	movs	r1, #8
 800352a:	480c      	ldr	r0, [pc, #48]	; (800355c <HW_IPCC_MM_SendFreeBuf+0x3c>)
 800352c:	f7ff fe86 	bl	800323c <LL_C1_IPCC_IsActiveFlag_CHx>
 8003530:	4603      	mov	r3, r0
 8003532:	2b00      	cmp	r3, #0
 8003534:	d007      	beq.n	8003546 <HW_IPCC_MM_SendFreeBuf+0x26>
  {
    FreeBufCb = cb;
 8003536:	4a0a      	ldr	r2, [pc, #40]	; (8003560 <HW_IPCC_MM_SendFreeBuf+0x40>)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	6013      	str	r3, [r2, #0]
    LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800353c:	2108      	movs	r1, #8
 800353e:	4807      	ldr	r0, [pc, #28]	; (800355c <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8003540:	f7ff fe28 	bl	8003194 <LL_C1_IPCC_EnableTransmitChannel>
    cb();

    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
  }

  return;
 8003544:	e006      	b.n	8003554 <HW_IPCC_MM_SendFreeBuf+0x34>
    cb();
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	4798      	blx	r3
    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800354a:	2108      	movs	r1, #8
 800354c:	4803      	ldr	r0, [pc, #12]	; (800355c <HW_IPCC_MM_SendFreeBuf+0x3c>)
 800354e:	f7ff fe66 	bl	800321e <LL_C1_IPCC_SetFlag_CHx>
  return;
 8003552:	bf00      	nop
}
 8003554:	3708      	adds	r7, #8
 8003556:	46bd      	mov	sp, r7
 8003558:	bd80      	pop	{r7, pc}
 800355a:	bf00      	nop
 800355c:	58000c00 	.word	0x58000c00
 8003560:	20000290 	.word	0x20000290

08003564 <HW_IPCC_MM_FreeBufHandler>:

static void HW_IPCC_MM_FreeBufHandler( void )
{
 8003564:	b580      	push	{r7, lr}
 8003566:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8003568:	2108      	movs	r1, #8
 800356a:	4806      	ldr	r0, [pc, #24]	; (8003584 <HW_IPCC_MM_FreeBufHandler+0x20>)
 800356c:	f7ff fe25 	bl	80031ba <LL_C1_IPCC_DisableTransmitChannel>

  FreeBufCb();
 8003570:	4b05      	ldr	r3, [pc, #20]	; (8003588 <HW_IPCC_MM_FreeBufHandler+0x24>)
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	4798      	blx	r3

  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8003576:	2108      	movs	r1, #8
 8003578:	4802      	ldr	r0, [pc, #8]	; (8003584 <HW_IPCC_MM_FreeBufHandler+0x20>)
 800357a:	f7ff fe50 	bl	800321e <LL_C1_IPCC_SetFlag_CHx>

  return;
 800357e:	bf00      	nop
}
 8003580:	bd80      	pop	{r7, pc}
 8003582:	bf00      	nop
 8003584:	58000c00 	.word	0x58000c00
 8003588:	20000290 	.word	0x20000290

0800358c <HW_IPCC_TRACES_EvtHandler>:

  return;
}

static void HW_IPCC_TRACES_EvtHandler( void )
{
 800358c:	b580      	push	{r7, lr}
 800358e:	af00      	add	r7, sp, #0
  HW_IPCC_TRACES_EvtNot();
 8003590:	f7ff fc82 	bl	8002e98 <HW_IPCC_TRACES_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_TRACES_CHANNEL );
 8003594:	2108      	movs	r1, #8
 8003596:	4802      	ldr	r0, [pc, #8]	; (80035a0 <HW_IPCC_TRACES_EvtHandler+0x14>)
 8003598:	f7ff fe33 	bl	8003202 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 800359c:	bf00      	nop
}
 800359e:	bd80      	pop	{r7, pc}
 80035a0:	58000c00 	.word	0x58000c00

080035a4 <LL_EXTI_EnableIT_0_31>:
{
 80035a4:	b480      	push	{r7}
 80035a6:	b083      	sub	sp, #12
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 80035ac:	4b06      	ldr	r3, [pc, #24]	; (80035c8 <LL_EXTI_EnableIT_0_31+0x24>)
 80035ae:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 80035b2:	4905      	ldr	r1, [pc, #20]	; (80035c8 <LL_EXTI_EnableIT_0_31+0x24>)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	4313      	orrs	r3, r2
 80035b8:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 80035bc:	bf00      	nop
 80035be:	370c      	adds	r7, #12
 80035c0:	46bd      	mov	sp, r7
 80035c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c6:	4770      	bx	lr
 80035c8:	58000800 	.word	0x58000800

080035cc <LL_EXTI_EnableRisingTrig_0_31>:
{
 80035cc:	b480      	push	{r7}
 80035ce:	b083      	sub	sp, #12
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 80035d4:	4b05      	ldr	r3, [pc, #20]	; (80035ec <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80035d6:	681a      	ldr	r2, [r3, #0]
 80035d8:	4904      	ldr	r1, [pc, #16]	; (80035ec <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	4313      	orrs	r3, r2
 80035de:	600b      	str	r3, [r1, #0]
}
 80035e0:	bf00      	nop
 80035e2:	370c      	adds	r7, #12
 80035e4:	46bd      	mov	sp, r7
 80035e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ea:	4770      	bx	lr
 80035ec:	58000800 	.word	0x58000800

080035f0 <ReadRtcSsrValue>:
 *         reliability of the value
 * @param  None
 * @retval SSR value read
 */
static uint32_t ReadRtcSsrValue(void)
{
 80035f0:	b480      	push	{r7}
 80035f2:	b083      	sub	sp, #12
 80035f4:	af00      	add	r7, sp, #0
  uint32_t first_read;
  uint32_t second_read;

  first_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 80035f6:	4b0d      	ldr	r3, [pc, #52]	; (800362c <ReadRtcSsrValue+0x3c>)
 80035f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035fa:	b29b      	uxth	r3, r3
 80035fc:	607b      	str	r3, [r7, #4]

  second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 80035fe:	4b0b      	ldr	r3, [pc, #44]	; (800362c <ReadRtcSsrValue+0x3c>)
 8003600:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003602:	b29b      	uxth	r3, r3
 8003604:	603b      	str	r3, [r7, #0]

  while(first_read != second_read)
 8003606:	e005      	b.n	8003614 <ReadRtcSsrValue+0x24>
  {
    first_read = second_read;
 8003608:	683b      	ldr	r3, [r7, #0]
 800360a:	607b      	str	r3, [r7, #4]

    second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 800360c:	4b07      	ldr	r3, [pc, #28]	; (800362c <ReadRtcSsrValue+0x3c>)
 800360e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003610:	b29b      	uxth	r3, r3
 8003612:	603b      	str	r3, [r7, #0]
  while(first_read != second_read)
 8003614:	687a      	ldr	r2, [r7, #4]
 8003616:	683b      	ldr	r3, [r7, #0]
 8003618:	429a      	cmp	r2, r3
 800361a:	d1f5      	bne.n	8003608 <ReadRtcSsrValue+0x18>
  }

  return second_read;
 800361c:	683b      	ldr	r3, [r7, #0]
}
 800361e:	4618      	mov	r0, r3
 8003620:	370c      	adds	r7, #12
 8003622:	46bd      	mov	sp, r7
 8003624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003628:	4770      	bx	lr
 800362a:	bf00      	nop
 800362c:	40002800 	.word	0x40002800

08003630 <LinkTimerAfter>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked after
 * @retval None
 */
static void LinkTimerAfter(uint8_t TimerID, uint8_t RefTimerID)
{
 8003630:	b480      	push	{r7}
 8003632:	b085      	sub	sp, #20
 8003634:	af00      	add	r7, sp, #0
 8003636:	4603      	mov	r3, r0
 8003638:	460a      	mov	r2, r1
 800363a:	71fb      	strb	r3, [r7, #7]
 800363c:	4613      	mov	r3, r2
 800363e:	71bb      	strb	r3, [r7, #6]
  uint8_t next_id;

  next_id = aTimerContext[RefTimerID].NextID;
 8003640:	79ba      	ldrb	r2, [r7, #6]
 8003642:	491d      	ldr	r1, [pc, #116]	; (80036b8 <LinkTimerAfter+0x88>)
 8003644:	4613      	mov	r3, r2
 8003646:	005b      	lsls	r3, r3, #1
 8003648:	4413      	add	r3, r2
 800364a:	00db      	lsls	r3, r3, #3
 800364c:	440b      	add	r3, r1
 800364e:	3315      	adds	r3, #21
 8003650:	781b      	ldrb	r3, [r3, #0]
 8003652:	73fb      	strb	r3, [r7, #15]

  if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8003654:	7bfb      	ldrb	r3, [r7, #15]
 8003656:	2b06      	cmp	r3, #6
 8003658:	d009      	beq.n	800366e <LinkTimerAfter+0x3e>
  {
    aTimerContext[next_id].PreviousID = TimerID;
 800365a:	7bfa      	ldrb	r2, [r7, #15]
 800365c:	4916      	ldr	r1, [pc, #88]	; (80036b8 <LinkTimerAfter+0x88>)
 800365e:	4613      	mov	r3, r2
 8003660:	005b      	lsls	r3, r3, #1
 8003662:	4413      	add	r3, r2
 8003664:	00db      	lsls	r3, r3, #3
 8003666:	440b      	add	r3, r1
 8003668:	3314      	adds	r3, #20
 800366a:	79fa      	ldrb	r2, [r7, #7]
 800366c:	701a      	strb	r2, [r3, #0]
  }
  aTimerContext[TimerID].NextID = next_id;
 800366e:	79fa      	ldrb	r2, [r7, #7]
 8003670:	4911      	ldr	r1, [pc, #68]	; (80036b8 <LinkTimerAfter+0x88>)
 8003672:	4613      	mov	r3, r2
 8003674:	005b      	lsls	r3, r3, #1
 8003676:	4413      	add	r3, r2
 8003678:	00db      	lsls	r3, r3, #3
 800367a:	440b      	add	r3, r1
 800367c:	3315      	adds	r3, #21
 800367e:	7bfa      	ldrb	r2, [r7, #15]
 8003680:	701a      	strb	r2, [r3, #0]
  aTimerContext[TimerID].PreviousID = RefTimerID ;
 8003682:	79fa      	ldrb	r2, [r7, #7]
 8003684:	490c      	ldr	r1, [pc, #48]	; (80036b8 <LinkTimerAfter+0x88>)
 8003686:	4613      	mov	r3, r2
 8003688:	005b      	lsls	r3, r3, #1
 800368a:	4413      	add	r3, r2
 800368c:	00db      	lsls	r3, r3, #3
 800368e:	440b      	add	r3, r1
 8003690:	3314      	adds	r3, #20
 8003692:	79ba      	ldrb	r2, [r7, #6]
 8003694:	701a      	strb	r2, [r3, #0]
  aTimerContext[RefTimerID].NextID = TimerID;
 8003696:	79ba      	ldrb	r2, [r7, #6]
 8003698:	4907      	ldr	r1, [pc, #28]	; (80036b8 <LinkTimerAfter+0x88>)
 800369a:	4613      	mov	r3, r2
 800369c:	005b      	lsls	r3, r3, #1
 800369e:	4413      	add	r3, r2
 80036a0:	00db      	lsls	r3, r3, #3
 80036a2:	440b      	add	r3, r1
 80036a4:	3315      	adds	r3, #21
 80036a6:	79fa      	ldrb	r2, [r7, #7]
 80036a8:	701a      	strb	r2, [r3, #0]

  return;
 80036aa:	bf00      	nop
}
 80036ac:	3714      	adds	r7, #20
 80036ae:	46bd      	mov	sp, r7
 80036b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b4:	4770      	bx	lr
 80036b6:	bf00      	nop
 80036b8:	20000294 	.word	0x20000294

080036bc <LinkTimerBefore>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked before
 * @retval None
 */
static void LinkTimerBefore(uint8_t TimerID, uint8_t RefTimerID)
{
 80036bc:	b480      	push	{r7}
 80036be:	b085      	sub	sp, #20
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	4603      	mov	r3, r0
 80036c4:	460a      	mov	r2, r1
 80036c6:	71fb      	strb	r3, [r7, #7]
 80036c8:	4613      	mov	r3, r2
 80036ca:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;

  if(RefTimerID != CurrentRunningTimerID)
 80036cc:	4b29      	ldr	r3, [pc, #164]	; (8003774 <LinkTimerBefore+0xb8>)
 80036ce:	781b      	ldrb	r3, [r3, #0]
 80036d0:	b2db      	uxtb	r3, r3
 80036d2:	79ba      	ldrb	r2, [r7, #6]
 80036d4:	429a      	cmp	r2, r3
 80036d6:	d032      	beq.n	800373e <LinkTimerBefore+0x82>
  {
    previous_id = aTimerContext[RefTimerID].PreviousID;
 80036d8:	79ba      	ldrb	r2, [r7, #6]
 80036da:	4927      	ldr	r1, [pc, #156]	; (8003778 <LinkTimerBefore+0xbc>)
 80036dc:	4613      	mov	r3, r2
 80036de:	005b      	lsls	r3, r3, #1
 80036e0:	4413      	add	r3, r2
 80036e2:	00db      	lsls	r3, r3, #3
 80036e4:	440b      	add	r3, r1
 80036e6:	3314      	adds	r3, #20
 80036e8:	781b      	ldrb	r3, [r3, #0]
 80036ea:	73fb      	strb	r3, [r7, #15]

    aTimerContext[previous_id].NextID = TimerID;
 80036ec:	7bfa      	ldrb	r2, [r7, #15]
 80036ee:	4922      	ldr	r1, [pc, #136]	; (8003778 <LinkTimerBefore+0xbc>)
 80036f0:	4613      	mov	r3, r2
 80036f2:	005b      	lsls	r3, r3, #1
 80036f4:	4413      	add	r3, r2
 80036f6:	00db      	lsls	r3, r3, #3
 80036f8:	440b      	add	r3, r1
 80036fa:	3315      	adds	r3, #21
 80036fc:	79fa      	ldrb	r2, [r7, #7]
 80036fe:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].NextID = RefTimerID;
 8003700:	79fa      	ldrb	r2, [r7, #7]
 8003702:	491d      	ldr	r1, [pc, #116]	; (8003778 <LinkTimerBefore+0xbc>)
 8003704:	4613      	mov	r3, r2
 8003706:	005b      	lsls	r3, r3, #1
 8003708:	4413      	add	r3, r2
 800370a:	00db      	lsls	r3, r3, #3
 800370c:	440b      	add	r3, r1
 800370e:	3315      	adds	r3, #21
 8003710:	79ba      	ldrb	r2, [r7, #6]
 8003712:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].PreviousID = previous_id ;
 8003714:	79fa      	ldrb	r2, [r7, #7]
 8003716:	4918      	ldr	r1, [pc, #96]	; (8003778 <LinkTimerBefore+0xbc>)
 8003718:	4613      	mov	r3, r2
 800371a:	005b      	lsls	r3, r3, #1
 800371c:	4413      	add	r3, r2
 800371e:	00db      	lsls	r3, r3, #3
 8003720:	440b      	add	r3, r1
 8003722:	3314      	adds	r3, #20
 8003724:	7bfa      	ldrb	r2, [r7, #15]
 8003726:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8003728:	79ba      	ldrb	r2, [r7, #6]
 800372a:	4913      	ldr	r1, [pc, #76]	; (8003778 <LinkTimerBefore+0xbc>)
 800372c:	4613      	mov	r3, r2
 800372e:	005b      	lsls	r3, r3, #1
 8003730:	4413      	add	r3, r2
 8003732:	00db      	lsls	r3, r3, #3
 8003734:	440b      	add	r3, r1
 8003736:	3314      	adds	r3, #20
 8003738:	79fa      	ldrb	r2, [r7, #7]
 800373a:	701a      	strb	r2, [r3, #0]
  {
    aTimerContext[TimerID].NextID = RefTimerID;
    aTimerContext[RefTimerID].PreviousID = TimerID;
  }

  return;
 800373c:	e014      	b.n	8003768 <LinkTimerBefore+0xac>
    aTimerContext[TimerID].NextID = RefTimerID;
 800373e:	79fa      	ldrb	r2, [r7, #7]
 8003740:	490d      	ldr	r1, [pc, #52]	; (8003778 <LinkTimerBefore+0xbc>)
 8003742:	4613      	mov	r3, r2
 8003744:	005b      	lsls	r3, r3, #1
 8003746:	4413      	add	r3, r2
 8003748:	00db      	lsls	r3, r3, #3
 800374a:	440b      	add	r3, r1
 800374c:	3315      	adds	r3, #21
 800374e:	79ba      	ldrb	r2, [r7, #6]
 8003750:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8003752:	79ba      	ldrb	r2, [r7, #6]
 8003754:	4908      	ldr	r1, [pc, #32]	; (8003778 <LinkTimerBefore+0xbc>)
 8003756:	4613      	mov	r3, r2
 8003758:	005b      	lsls	r3, r3, #1
 800375a:	4413      	add	r3, r2
 800375c:	00db      	lsls	r3, r3, #3
 800375e:	440b      	add	r3, r1
 8003760:	3314      	adds	r3, #20
 8003762:	79fa      	ldrb	r2, [r7, #7]
 8003764:	701a      	strb	r2, [r3, #0]
  return;
 8003766:	bf00      	nop
}
 8003768:	3714      	adds	r7, #20
 800376a:	46bd      	mov	sp, r7
 800376c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003770:	4770      	bx	lr
 8003772:	bf00      	nop
 8003774:	20000324 	.word	0x20000324
 8003778:	20000294 	.word	0x20000294

0800377c <linkTimer>:
 * @brief  Insert a Timer in the list
 * @param  TimerID:   The ID of the Timer
 * @retval None
 */
static uint16_t linkTimer(uint8_t TimerID)
{
 800377c:	b580      	push	{r7, lr}
 800377e:	b084      	sub	sp, #16
 8003780:	af00      	add	r7, sp, #0
 8003782:	4603      	mov	r3, r0
 8003784:	71fb      	strb	r3, [r7, #7]
  uint32_t time_left;
  uint16_t time_elapsed;
  uint8_t timer_id_lookup;
  uint8_t next_id;

  if(CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8003786:	4b4e      	ldr	r3, [pc, #312]	; (80038c0 <linkTimer+0x144>)
 8003788:	781b      	ldrb	r3, [r3, #0]
 800378a:	b2db      	uxtb	r3, r3
 800378c:	2b06      	cmp	r3, #6
 800378e:	d118      	bne.n	80037c2 <linkTimer+0x46>
  {
    /**
     * No timer in the list
     */
    PreviousRunningTimerID = CurrentRunningTimerID;
 8003790:	4b4b      	ldr	r3, [pc, #300]	; (80038c0 <linkTimer+0x144>)
 8003792:	781b      	ldrb	r3, [r3, #0]
 8003794:	b2da      	uxtb	r2, r3
 8003796:	4b4b      	ldr	r3, [pc, #300]	; (80038c4 <linkTimer+0x148>)
 8003798:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = TimerID;
 800379a:	4a49      	ldr	r2, [pc, #292]	; (80038c0 <linkTimer+0x144>)
 800379c:	79fb      	ldrb	r3, [r7, #7]
 800379e:	7013      	strb	r3, [r2, #0]
    aTimerContext[TimerID].NextID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;
 80037a0:	79fa      	ldrb	r2, [r7, #7]
 80037a2:	4949      	ldr	r1, [pc, #292]	; (80038c8 <linkTimer+0x14c>)
 80037a4:	4613      	mov	r3, r2
 80037a6:	005b      	lsls	r3, r3, #1
 80037a8:	4413      	add	r3, r2
 80037aa:	00db      	lsls	r3, r3, #3
 80037ac:	440b      	add	r3, r1
 80037ae:	3315      	adds	r3, #21
 80037b0:	2206      	movs	r2, #6
 80037b2:	701a      	strb	r2, [r3, #0]

    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 80037b4:	4b45      	ldr	r3, [pc, #276]	; (80038cc <linkTimer+0x150>)
 80037b6:	f04f 32ff 	mov.w	r2, #4294967295
 80037ba:	601a      	str	r2, [r3, #0]
    time_elapsed = 0;
 80037bc:	2300      	movs	r3, #0
 80037be:	81fb      	strh	r3, [r7, #14]
 80037c0:	e078      	b.n	80038b4 <linkTimer+0x138>
  }
  else
  {
    time_elapsed = ReturnTimeElapsed();
 80037c2:	f000 f909 	bl	80039d8 <ReturnTimeElapsed>
 80037c6:	4603      	mov	r3, r0
 80037c8:	81fb      	strh	r3, [r7, #14]

    /**
     * update count of the timer to be linked
     */
    aTimerContext[TimerID].CountLeft += time_elapsed;
 80037ca:	79fa      	ldrb	r2, [r7, #7]
 80037cc:	493e      	ldr	r1, [pc, #248]	; (80038c8 <linkTimer+0x14c>)
 80037ce:	4613      	mov	r3, r2
 80037d0:	005b      	lsls	r3, r3, #1
 80037d2:	4413      	add	r3, r2
 80037d4:	00db      	lsls	r3, r3, #3
 80037d6:	440b      	add	r3, r1
 80037d8:	3308      	adds	r3, #8
 80037da:	6819      	ldr	r1, [r3, #0]
 80037dc:	89fb      	ldrh	r3, [r7, #14]
 80037de:	79fa      	ldrb	r2, [r7, #7]
 80037e0:	4419      	add	r1, r3
 80037e2:	4839      	ldr	r0, [pc, #228]	; (80038c8 <linkTimer+0x14c>)
 80037e4:	4613      	mov	r3, r2
 80037e6:	005b      	lsls	r3, r3, #1
 80037e8:	4413      	add	r3, r2
 80037ea:	00db      	lsls	r3, r3, #3
 80037ec:	4403      	add	r3, r0
 80037ee:	3308      	adds	r3, #8
 80037f0:	6019      	str	r1, [r3, #0]
    time_left = aTimerContext[TimerID].CountLeft;
 80037f2:	79fa      	ldrb	r2, [r7, #7]
 80037f4:	4934      	ldr	r1, [pc, #208]	; (80038c8 <linkTimer+0x14c>)
 80037f6:	4613      	mov	r3, r2
 80037f8:	005b      	lsls	r3, r3, #1
 80037fa:	4413      	add	r3, r2
 80037fc:	00db      	lsls	r3, r3, #3
 80037fe:	440b      	add	r3, r1
 8003800:	3308      	adds	r3, #8
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	60bb      	str	r3, [r7, #8]

    /**
     * Search for index where the new timer shall be linked
     */
    if(aTimerContext[CurrentRunningTimerID].CountLeft <= time_left)
 8003806:	4b2e      	ldr	r3, [pc, #184]	; (80038c0 <linkTimer+0x144>)
 8003808:	781b      	ldrb	r3, [r3, #0]
 800380a:	b2db      	uxtb	r3, r3
 800380c:	4619      	mov	r1, r3
 800380e:	4a2e      	ldr	r2, [pc, #184]	; (80038c8 <linkTimer+0x14c>)
 8003810:	460b      	mov	r3, r1
 8003812:	005b      	lsls	r3, r3, #1
 8003814:	440b      	add	r3, r1
 8003816:	00db      	lsls	r3, r3, #3
 8003818:	4413      	add	r3, r2
 800381a:	3308      	adds	r3, #8
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	68ba      	ldr	r2, [r7, #8]
 8003820:	429a      	cmp	r2, r3
 8003822:	d337      	bcc.n	8003894 <linkTimer+0x118>
    {
      /**
       * Search for the ID after the first one
       */
      timer_id_lookup = CurrentRunningTimerID;
 8003824:	4b26      	ldr	r3, [pc, #152]	; (80038c0 <linkTimer+0x144>)
 8003826:	781b      	ldrb	r3, [r3, #0]
 8003828:	737b      	strb	r3, [r7, #13]
      next_id = aTimerContext[timer_id_lookup].NextID;
 800382a:	7b7a      	ldrb	r2, [r7, #13]
 800382c:	4926      	ldr	r1, [pc, #152]	; (80038c8 <linkTimer+0x14c>)
 800382e:	4613      	mov	r3, r2
 8003830:	005b      	lsls	r3, r3, #1
 8003832:	4413      	add	r3, r2
 8003834:	00db      	lsls	r3, r3, #3
 8003836:	440b      	add	r3, r1
 8003838:	3315      	adds	r3, #21
 800383a:	781b      	ldrb	r3, [r3, #0]
 800383c:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 800383e:	e013      	b.n	8003868 <linkTimer+0xec>
      {
        timer_id_lookup = aTimerContext[timer_id_lookup].NextID;
 8003840:	7b7a      	ldrb	r2, [r7, #13]
 8003842:	4921      	ldr	r1, [pc, #132]	; (80038c8 <linkTimer+0x14c>)
 8003844:	4613      	mov	r3, r2
 8003846:	005b      	lsls	r3, r3, #1
 8003848:	4413      	add	r3, r2
 800384a:	00db      	lsls	r3, r3, #3
 800384c:	440b      	add	r3, r1
 800384e:	3315      	adds	r3, #21
 8003850:	781b      	ldrb	r3, [r3, #0]
 8003852:	737b      	strb	r3, [r7, #13]
        next_id = aTimerContext[timer_id_lookup].NextID;
 8003854:	7b7a      	ldrb	r2, [r7, #13]
 8003856:	491c      	ldr	r1, [pc, #112]	; (80038c8 <linkTimer+0x14c>)
 8003858:	4613      	mov	r3, r2
 800385a:	005b      	lsls	r3, r3, #1
 800385c:	4413      	add	r3, r2
 800385e:	00db      	lsls	r3, r3, #3
 8003860:	440b      	add	r3, r1
 8003862:	3315      	adds	r3, #21
 8003864:	781b      	ldrb	r3, [r3, #0]
 8003866:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8003868:	7b3b      	ldrb	r3, [r7, #12]
 800386a:	2b06      	cmp	r3, #6
 800386c:	d00b      	beq.n	8003886 <linkTimer+0x10a>
 800386e:	7b3a      	ldrb	r2, [r7, #12]
 8003870:	4915      	ldr	r1, [pc, #84]	; (80038c8 <linkTimer+0x14c>)
 8003872:	4613      	mov	r3, r2
 8003874:	005b      	lsls	r3, r3, #1
 8003876:	4413      	add	r3, r2
 8003878:	00db      	lsls	r3, r3, #3
 800387a:	440b      	add	r3, r1
 800387c:	3308      	adds	r3, #8
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	68ba      	ldr	r2, [r7, #8]
 8003882:	429a      	cmp	r2, r3
 8003884:	d2dc      	bcs.n	8003840 <linkTimer+0xc4>
      }

      /**
       * Link after the ID
       */
      LinkTimerAfter(TimerID, timer_id_lookup);
 8003886:	7b7a      	ldrb	r2, [r7, #13]
 8003888:	79fb      	ldrb	r3, [r7, #7]
 800388a:	4611      	mov	r1, r2
 800388c:	4618      	mov	r0, r3
 800388e:	f7ff fecf 	bl	8003630 <LinkTimerAfter>
 8003892:	e00f      	b.n	80038b4 <linkTimer+0x138>
    else
    {
      /**
       * Link before the first ID
       */
      LinkTimerBefore(TimerID, CurrentRunningTimerID);
 8003894:	4b0a      	ldr	r3, [pc, #40]	; (80038c0 <linkTimer+0x144>)
 8003896:	781b      	ldrb	r3, [r3, #0]
 8003898:	b2da      	uxtb	r2, r3
 800389a:	79fb      	ldrb	r3, [r7, #7]
 800389c:	4611      	mov	r1, r2
 800389e:	4618      	mov	r0, r3
 80038a0:	f7ff ff0c 	bl	80036bc <LinkTimerBefore>
      PreviousRunningTimerID = CurrentRunningTimerID;
 80038a4:	4b06      	ldr	r3, [pc, #24]	; (80038c0 <linkTimer+0x144>)
 80038a6:	781b      	ldrb	r3, [r3, #0]
 80038a8:	b2da      	uxtb	r2, r3
 80038aa:	4b06      	ldr	r3, [pc, #24]	; (80038c4 <linkTimer+0x148>)
 80038ac:	701a      	strb	r2, [r3, #0]
      CurrentRunningTimerID = TimerID;
 80038ae:	4a04      	ldr	r2, [pc, #16]	; (80038c0 <linkTimer+0x144>)
 80038b0:	79fb      	ldrb	r3, [r7, #7]
 80038b2:	7013      	strb	r3, [r2, #0]
    }
  }

  return time_elapsed;
 80038b4:	89fb      	ldrh	r3, [r7, #14]
}
 80038b6:	4618      	mov	r0, r3
 80038b8:	3710      	adds	r7, #16
 80038ba:	46bd      	mov	sp, r7
 80038bc:	bd80      	pop	{r7, pc}
 80038be:	bf00      	nop
 80038c0:	20000324 	.word	0x20000324
 80038c4:	20000325 	.word	0x20000325
 80038c8:	20000294 	.word	0x20000294
 80038cc:	20000328 	.word	0x20000328

080038d0 <UnlinkTimer>:
 * @param  TimerID:   The ID of the Timer
 * @param  RequestReadSSR: Request to read the SSR register or not
 * @retval None
 */
static void UnlinkTimer(uint8_t TimerID, RequestReadSSR_t RequestReadSSR)
{
 80038d0:	b480      	push	{r7}
 80038d2:	b085      	sub	sp, #20
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	4603      	mov	r3, r0
 80038d8:	460a      	mov	r2, r1
 80038da:	71fb      	strb	r3, [r7, #7]
 80038dc:	4613      	mov	r3, r2
 80038de:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;
  uint8_t next_id;

  if(TimerID == CurrentRunningTimerID)
 80038e0:	4b39      	ldr	r3, [pc, #228]	; (80039c8 <UnlinkTimer+0xf8>)
 80038e2:	781b      	ldrb	r3, [r3, #0]
 80038e4:	b2db      	uxtb	r3, r3
 80038e6:	79fa      	ldrb	r2, [r7, #7]
 80038e8:	429a      	cmp	r2, r3
 80038ea:	d111      	bne.n	8003910 <UnlinkTimer+0x40>
  {
    PreviousRunningTimerID = CurrentRunningTimerID;
 80038ec:	4b36      	ldr	r3, [pc, #216]	; (80039c8 <UnlinkTimer+0xf8>)
 80038ee:	781b      	ldrb	r3, [r3, #0]
 80038f0:	b2da      	uxtb	r2, r3
 80038f2:	4b36      	ldr	r3, [pc, #216]	; (80039cc <UnlinkTimer+0xfc>)
 80038f4:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = aTimerContext[TimerID].NextID;
 80038f6:	79fa      	ldrb	r2, [r7, #7]
 80038f8:	4935      	ldr	r1, [pc, #212]	; (80039d0 <UnlinkTimer+0x100>)
 80038fa:	4613      	mov	r3, r2
 80038fc:	005b      	lsls	r3, r3, #1
 80038fe:	4413      	add	r3, r2
 8003900:	00db      	lsls	r3, r3, #3
 8003902:	440b      	add	r3, r1
 8003904:	3315      	adds	r3, #21
 8003906:	781b      	ldrb	r3, [r3, #0]
 8003908:	b2da      	uxtb	r2, r3
 800390a:	4b2f      	ldr	r3, [pc, #188]	; (80039c8 <UnlinkTimer+0xf8>)
 800390c:	701a      	strb	r2, [r3, #0]
 800390e:	e03e      	b.n	800398e <UnlinkTimer+0xbe>
  }
  else
  {
    previous_id = aTimerContext[TimerID].PreviousID;
 8003910:	79fa      	ldrb	r2, [r7, #7]
 8003912:	492f      	ldr	r1, [pc, #188]	; (80039d0 <UnlinkTimer+0x100>)
 8003914:	4613      	mov	r3, r2
 8003916:	005b      	lsls	r3, r3, #1
 8003918:	4413      	add	r3, r2
 800391a:	00db      	lsls	r3, r3, #3
 800391c:	440b      	add	r3, r1
 800391e:	3314      	adds	r3, #20
 8003920:	781b      	ldrb	r3, [r3, #0]
 8003922:	73fb      	strb	r3, [r7, #15]
    next_id = aTimerContext[TimerID].NextID;
 8003924:	79fa      	ldrb	r2, [r7, #7]
 8003926:	492a      	ldr	r1, [pc, #168]	; (80039d0 <UnlinkTimer+0x100>)
 8003928:	4613      	mov	r3, r2
 800392a:	005b      	lsls	r3, r3, #1
 800392c:	4413      	add	r3, r2
 800392e:	00db      	lsls	r3, r3, #3
 8003930:	440b      	add	r3, r1
 8003932:	3315      	adds	r3, #21
 8003934:	781b      	ldrb	r3, [r3, #0]
 8003936:	73bb      	strb	r3, [r7, #14]

    aTimerContext[previous_id].NextID = aTimerContext[TimerID].NextID;
 8003938:	79f9      	ldrb	r1, [r7, #7]
 800393a:	7bfa      	ldrb	r2, [r7, #15]
 800393c:	4824      	ldr	r0, [pc, #144]	; (80039d0 <UnlinkTimer+0x100>)
 800393e:	460b      	mov	r3, r1
 8003940:	005b      	lsls	r3, r3, #1
 8003942:	440b      	add	r3, r1
 8003944:	00db      	lsls	r3, r3, #3
 8003946:	4403      	add	r3, r0
 8003948:	3315      	adds	r3, #21
 800394a:	781b      	ldrb	r3, [r3, #0]
 800394c:	b2d8      	uxtb	r0, r3
 800394e:	4920      	ldr	r1, [pc, #128]	; (80039d0 <UnlinkTimer+0x100>)
 8003950:	4613      	mov	r3, r2
 8003952:	005b      	lsls	r3, r3, #1
 8003954:	4413      	add	r3, r2
 8003956:	00db      	lsls	r3, r3, #3
 8003958:	440b      	add	r3, r1
 800395a:	3315      	adds	r3, #21
 800395c:	4602      	mov	r2, r0
 800395e:	701a      	strb	r2, [r3, #0]
    if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8003960:	7bbb      	ldrb	r3, [r7, #14]
 8003962:	2b06      	cmp	r3, #6
 8003964:	d013      	beq.n	800398e <UnlinkTimer+0xbe>
    {
      aTimerContext[next_id].PreviousID = aTimerContext[TimerID].PreviousID;
 8003966:	79f9      	ldrb	r1, [r7, #7]
 8003968:	7bba      	ldrb	r2, [r7, #14]
 800396a:	4819      	ldr	r0, [pc, #100]	; (80039d0 <UnlinkTimer+0x100>)
 800396c:	460b      	mov	r3, r1
 800396e:	005b      	lsls	r3, r3, #1
 8003970:	440b      	add	r3, r1
 8003972:	00db      	lsls	r3, r3, #3
 8003974:	4403      	add	r3, r0
 8003976:	3314      	adds	r3, #20
 8003978:	781b      	ldrb	r3, [r3, #0]
 800397a:	b2d8      	uxtb	r0, r3
 800397c:	4914      	ldr	r1, [pc, #80]	; (80039d0 <UnlinkTimer+0x100>)
 800397e:	4613      	mov	r3, r2
 8003980:	005b      	lsls	r3, r3, #1
 8003982:	4413      	add	r3, r2
 8003984:	00db      	lsls	r3, r3, #3
 8003986:	440b      	add	r3, r1
 8003988:	3314      	adds	r3, #20
 800398a:	4602      	mov	r2, r0
 800398c:	701a      	strb	r2, [r3, #0]
  }

  /**
   * Timer is out of the list
   */
  aTimerContext[TimerID].TimerIDStatus = TimerID_Created;
 800398e:	79fa      	ldrb	r2, [r7, #7]
 8003990:	490f      	ldr	r1, [pc, #60]	; (80039d0 <UnlinkTimer+0x100>)
 8003992:	4613      	mov	r3, r2
 8003994:	005b      	lsls	r3, r3, #1
 8003996:	4413      	add	r3, r2
 8003998:	00db      	lsls	r3, r3, #3
 800399a:	440b      	add	r3, r1
 800399c:	330c      	adds	r3, #12
 800399e:	2201      	movs	r2, #1
 80039a0:	701a      	strb	r2, [r3, #0]

  if((CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (RequestReadSSR == SSR_Read_Requested))
 80039a2:	4b09      	ldr	r3, [pc, #36]	; (80039c8 <UnlinkTimer+0xf8>)
 80039a4:	781b      	ldrb	r3, [r3, #0]
 80039a6:	b2db      	uxtb	r3, r3
 80039a8:	2b06      	cmp	r3, #6
 80039aa:	d107      	bne.n	80039bc <UnlinkTimer+0xec>
 80039ac:	79bb      	ldrb	r3, [r7, #6]
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d104      	bne.n	80039bc <UnlinkTimer+0xec>
  {
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 80039b2:	4b08      	ldr	r3, [pc, #32]	; (80039d4 <UnlinkTimer+0x104>)
 80039b4:	f04f 32ff 	mov.w	r2, #4294967295
 80039b8:	601a      	str	r2, [r3, #0]
  }

  return;
 80039ba:	bf00      	nop
 80039bc:	bf00      	nop
}
 80039be:	3714      	adds	r7, #20
 80039c0:	46bd      	mov	sp, r7
 80039c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c6:	4770      	bx	lr
 80039c8:	20000324 	.word	0x20000324
 80039cc:	20000325 	.word	0x20000325
 80039d0:	20000294 	.word	0x20000294
 80039d4:	20000328 	.word	0x20000328

080039d8 <ReturnTimeElapsed>:
 *        since the time the timer has been started
 * @param  None
 * @retval Time expired in Ticks
 */
static uint16_t ReturnTimeElapsed(void)
{
 80039d8:	b580      	push	{r7, lr}
 80039da:	b082      	sub	sp, #8
 80039dc:	af00      	add	r7, sp, #0
  uint32_t  return_value;
  uint32_t  wrap_counter;

  if(SSRValueOnLastSetup != SSR_FORBIDDEN_VALUE)
 80039de:	4b1a      	ldr	r3, [pc, #104]	; (8003a48 <ReturnTimeElapsed+0x70>)
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039e6:	d026      	beq.n	8003a36 <ReturnTimeElapsed+0x5e>
  {
    return_value = ReadRtcSsrValue(); /**< Read SSR register first */
 80039e8:	f7ff fe02 	bl	80035f0 <ReadRtcSsrValue>
 80039ec:	6078      	str	r0, [r7, #4]

    if (SSRValueOnLastSetup >= return_value)
 80039ee:	4b16      	ldr	r3, [pc, #88]	; (8003a48 <ReturnTimeElapsed+0x70>)
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	687a      	ldr	r2, [r7, #4]
 80039f4:	429a      	cmp	r2, r3
 80039f6:	d805      	bhi.n	8003a04 <ReturnTimeElapsed+0x2c>
    {
      return_value = SSRValueOnLastSetup - return_value;
 80039f8:	4b13      	ldr	r3, [pc, #76]	; (8003a48 <ReturnTimeElapsed+0x70>)
 80039fa:	681a      	ldr	r2, [r3, #0]
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	1ad3      	subs	r3, r2, r3
 8003a00:	607b      	str	r3, [r7, #4]
 8003a02:	e00a      	b.n	8003a1a <ReturnTimeElapsed+0x42>
    }
    else
    {
      wrap_counter = SynchPrescalerUserConfig - return_value;
 8003a04:	4b11      	ldr	r3, [pc, #68]	; (8003a4c <ReturnTimeElapsed+0x74>)
 8003a06:	881b      	ldrh	r3, [r3, #0]
 8003a08:	461a      	mov	r2, r3
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	1ad3      	subs	r3, r2, r3
 8003a0e:	603b      	str	r3, [r7, #0]
      return_value = SSRValueOnLastSetup + wrap_counter;
 8003a10:	4b0d      	ldr	r3, [pc, #52]	; (8003a48 <ReturnTimeElapsed+0x70>)
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	683a      	ldr	r2, [r7, #0]
 8003a16:	4413      	add	r3, r2
 8003a18:	607b      	str	r3, [r7, #4]

    /**
     * At this stage, ReturnValue holds the number of ticks counted by SSR
     * Need to translate in number of ticks counted by the Wakeuptimer
     */
    return_value = return_value*AsynchPrescalerUserConfig;
 8003a1a:	4b0d      	ldr	r3, [pc, #52]	; (8003a50 <ReturnTimeElapsed+0x78>)
 8003a1c:	781b      	ldrb	r3, [r3, #0]
 8003a1e:	461a      	mov	r2, r3
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	fb02 f303 	mul.w	r3, r2, r3
 8003a26:	607b      	str	r3, [r7, #4]
    return_value = return_value >> WakeupTimerDivider;
 8003a28:	4b0a      	ldr	r3, [pc, #40]	; (8003a54 <ReturnTimeElapsed+0x7c>)
 8003a2a:	781b      	ldrb	r3, [r3, #0]
 8003a2c:	461a      	mov	r2, r3
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	40d3      	lsrs	r3, r2
 8003a32:	607b      	str	r3, [r7, #4]
 8003a34:	e001      	b.n	8003a3a <ReturnTimeElapsed+0x62>
  }
  else
  {
    return_value = 0;
 8003a36:	2300      	movs	r3, #0
 8003a38:	607b      	str	r3, [r7, #4]
  }

  return (uint16_t)return_value;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	b29b      	uxth	r3, r3
}
 8003a3e:	4618      	mov	r0, r3
 8003a40:	3708      	adds	r7, #8
 8003a42:	46bd      	mov	sp, r7
 8003a44:	bd80      	pop	{r7, pc}
 8003a46:	bf00      	nop
 8003a48:	20000328 	.word	0x20000328
 8003a4c:	20000330 	.word	0x20000330
 8003a50:	2000032e 	.word	0x2000032e
 8003a54:	2000032d 	.word	0x2000032d

08003a58 <RestartWakeupCounter>:
 *    It assumes all condition are met to be allowed to write the wakeup counter
 * @param  Value: Value to be written in the counter
 * @retval None
 */
static void RestartWakeupCounter(uint16_t Value)
{
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	b082      	sub	sp, #8
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	4603      	mov	r3, r0
 8003a60:	80fb      	strh	r3, [r7, #6]
   * The wakeuptimer has been disabled in the calling function to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   *  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
   */

  if(Value == 0)
 8003a62:	88fb      	ldrh	r3, [r7, #6]
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d108      	bne.n	8003a7a <RestartWakeupCounter+0x22>
  {
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8003a68:	f7ff fdc2 	bl	80035f0 <ReadRtcSsrValue>
 8003a6c:	4603      	mov	r3, r0
 8003a6e:	4a21      	ldr	r2, [pc, #132]	; (8003af4 <RestartWakeupCounter+0x9c>)
 8003a70:	6013      	str	r3, [r2, #0]

    /**
     * Simulate that the Timer expired
     */
    HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8003a72:	2003      	movs	r0, #3
 8003a74:	f7fd f98f 	bl	8000d96 <HAL_NVIC_SetPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */

    HW_TS_RTC_CountUpdated_AppNot();
  }

  return ;
 8003a78:	e039      	b.n	8003aee <RestartWakeupCounter+0x96>
    if((Value > 1) ||(WakeupTimerDivider != 1))
 8003a7a:	88fb      	ldrh	r3, [r7, #6]
 8003a7c:	2b01      	cmp	r3, #1
 8003a7e:	d803      	bhi.n	8003a88 <RestartWakeupCounter+0x30>
 8003a80:	4b1d      	ldr	r3, [pc, #116]	; (8003af8 <RestartWakeupCounter+0xa0>)
 8003a82:	781b      	ldrb	r3, [r3, #0]
 8003a84:	2b01      	cmp	r3, #1
 8003a86:	d002      	beq.n	8003a8e <RestartWakeupCounter+0x36>
      Value -= 1;
 8003a88:	88fb      	ldrh	r3, [r7, #6]
 8003a8a:	3b01      	subs	r3, #1
 8003a8c:	80fb      	strh	r3, [r7, #6]
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 8003a8e:	bf00      	nop
 8003a90:	4b1a      	ldr	r3, [pc, #104]	; (8003afc <RestartWakeupCounter+0xa4>)
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	68db      	ldr	r3, [r3, #12]
 8003a96:	f003 0304 	and.w	r3, r3, #4
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d0f8      	beq.n	8003a90 <RestartWakeupCounter+0x38>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8003a9e:	4b17      	ldr	r3, [pc, #92]	; (8003afc <RestartWakeupCounter+0xa4>)
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	68db      	ldr	r3, [r3, #12]
 8003aa4:	b2da      	uxtb	r2, r3
 8003aa6:	4b15      	ldr	r3, [pc, #84]	; (8003afc <RestartWakeupCounter+0xa4>)
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8003aae:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8003ab0:	4b13      	ldr	r3, [pc, #76]	; (8003b00 <RestartWakeupCounter+0xa8>)
 8003ab2:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8003ab6:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8003ab8:	2003      	movs	r0, #3
 8003aba:	f7fd f97a 	bl	8000db2 <HAL_NVIC_ClearPendingIRQ>
    MODIFY_REG(RTC->WUTR, RTC_WUTR_WUT, Value);
 8003abe:	4b11      	ldr	r3, [pc, #68]	; (8003b04 <RestartWakeupCounter+0xac>)
 8003ac0:	695b      	ldr	r3, [r3, #20]
 8003ac2:	0c1b      	lsrs	r3, r3, #16
 8003ac4:	041b      	lsls	r3, r3, #16
 8003ac6:	88fa      	ldrh	r2, [r7, #6]
 8003ac8:	490e      	ldr	r1, [pc, #56]	; (8003b04 <RestartWakeupCounter+0xac>)
 8003aca:	4313      	orrs	r3, r2
 8003acc:	614b      	str	r3, [r1, #20]
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8003ace:	f7ff fd8f 	bl	80035f0 <ReadRtcSsrValue>
 8003ad2:	4603      	mov	r3, r0
 8003ad4:	4a07      	ldr	r2, [pc, #28]	; (8003af4 <RestartWakeupCounter+0x9c>)
 8003ad6:	6013      	str	r3, [r2, #0]
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */
 8003ad8:	4b08      	ldr	r3, [pc, #32]	; (8003afc <RestartWakeupCounter+0xa4>)
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	689a      	ldr	r2, [r3, #8]
 8003ade:	4b07      	ldr	r3, [pc, #28]	; (8003afc <RestartWakeupCounter+0xa4>)
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003ae6:	609a      	str	r2, [r3, #8]
    HW_TS_RTC_CountUpdated_AppNot();
 8003ae8:	f3af 8000 	nop.w
  return ;
 8003aec:	bf00      	nop
}
 8003aee:	3708      	adds	r7, #8
 8003af0:	46bd      	mov	sp, r7
 8003af2:	bd80      	pop	{r7, pc}
 8003af4:	20000328 	.word	0x20000328
 8003af8:	2000032d 	.word	0x2000032d
 8003afc:	20000c84 	.word	0x20000c84
 8003b00:	58000800 	.word	0x58000800
 8003b04:	40002800 	.word	0x40002800

08003b08 <RescheduleTimerList>:
 *    2) Setup the wakeuptimer
 * @param  None
 * @retval None
 */
static void RescheduleTimerList(void)
{
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	b084      	sub	sp, #16
 8003b0c:	af00      	add	r7, sp, #0

  /**
   * The wakeuptimer is disabled now to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   */
  if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8003b0e:	4b45      	ldr	r3, [pc, #276]	; (8003c24 <RescheduleTimerList+0x11c>)
 8003b10:	689b      	ldr	r3, [r3, #8]
 8003b12:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b16:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b1a:	d107      	bne.n	8003b2c <RescheduleTimerList+0x24>
  {
    /**
     * Wait for the flag to be back to 0 when the wakeup timer is enabled
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 8003b1c:	bf00      	nop
 8003b1e:	4b42      	ldr	r3, [pc, #264]	; (8003c28 <RescheduleTimerList+0x120>)
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	68db      	ldr	r3, [r3, #12]
 8003b24:	f003 0304 	and.w	r3, r3, #4
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d1f8      	bne.n	8003b1e <RescheduleTimerList+0x16>
  }
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 8003b2c:	4b3e      	ldr	r3, [pc, #248]	; (8003c28 <RescheduleTimerList+0x120>)
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	689a      	ldr	r2, [r3, #8]
 8003b32:	4b3d      	ldr	r3, [pc, #244]	; (8003c28 <RescheduleTimerList+0x120>)
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b3a:	609a      	str	r2, [r3, #8]

  localTimerID = CurrentRunningTimerID;
 8003b3c:	4b3b      	ldr	r3, [pc, #236]	; (8003c2c <RescheduleTimerList+0x124>)
 8003b3e:	781b      	ldrb	r3, [r3, #0]
 8003b40:	73fb      	strb	r3, [r7, #15]

  /**
   * Calculate what will be the value to write in the wakeuptimer
   */
  timecountleft = aTimerContext[localTimerID].CountLeft;
 8003b42:	7bfa      	ldrb	r2, [r7, #15]
 8003b44:	493a      	ldr	r1, [pc, #232]	; (8003c30 <RescheduleTimerList+0x128>)
 8003b46:	4613      	mov	r3, r2
 8003b48:	005b      	lsls	r3, r3, #1
 8003b4a:	4413      	add	r3, r2
 8003b4c:	00db      	lsls	r3, r3, #3
 8003b4e:	440b      	add	r3, r1
 8003b50:	3308      	adds	r3, #8
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	60bb      	str	r3, [r7, #8]

  /**
   * Read how much has been counted
   */
  time_elapsed = ReturnTimeElapsed();
 8003b56:	f7ff ff3f 	bl	80039d8 <ReturnTimeElapsed>
 8003b5a:	4603      	mov	r3, r0
 8003b5c:	80fb      	strh	r3, [r7, #6]

  if(timecountleft < time_elapsed )
 8003b5e:	88fb      	ldrh	r3, [r7, #6]
 8003b60:	68ba      	ldr	r2, [r7, #8]
 8003b62:	429a      	cmp	r2, r3
 8003b64:	d205      	bcs.n	8003b72 <RescheduleTimerList+0x6a>
  {
    /**
     * There is no tick left to count
     */
    wakeup_timer_value = 0;
 8003b66:	2300      	movs	r3, #0
 8003b68:	81bb      	strh	r3, [r7, #12]
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8003b6a:	4b32      	ldr	r3, [pc, #200]	; (8003c34 <RescheduleTimerList+0x12c>)
 8003b6c:	2201      	movs	r2, #1
 8003b6e:	701a      	strb	r2, [r3, #0]
 8003b70:	e04d      	b.n	8003c0e <RescheduleTimerList+0x106>
  }
  else
  {
    if(timecountleft > (time_elapsed + MaxWakeupTimerSetup))
 8003b72:	88fb      	ldrh	r3, [r7, #6]
 8003b74:	4a30      	ldr	r2, [pc, #192]	; (8003c38 <RescheduleTimerList+0x130>)
 8003b76:	8812      	ldrh	r2, [r2, #0]
 8003b78:	b292      	uxth	r2, r2
 8003b7a:	4413      	add	r3, r2
 8003b7c:	461a      	mov	r2, r3
 8003b7e:	68bb      	ldr	r3, [r7, #8]
 8003b80:	4293      	cmp	r3, r2
 8003b82:	d906      	bls.n	8003b92 <RescheduleTimerList+0x8a>
    {
      /**
       * The number of tick left is greater than the Wakeuptimer maximum value
       */
      wakeup_timer_value = MaxWakeupTimerSetup;
 8003b84:	4b2c      	ldr	r3, [pc, #176]	; (8003c38 <RescheduleTimerList+0x130>)
 8003b86:	881b      	ldrh	r3, [r3, #0]
 8003b88:	81bb      	strh	r3, [r7, #12]

      WakeupTimerLimitation = WakeupTimerValue_Overpassed;
 8003b8a:	4b2a      	ldr	r3, [pc, #168]	; (8003c34 <RescheduleTimerList+0x12c>)
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	701a      	strb	r2, [r3, #0]
 8003b90:	e03d      	b.n	8003c0e <RescheduleTimerList+0x106>
    }
    else
    {
      wakeup_timer_value = timecountleft - time_elapsed;
 8003b92:	68bb      	ldr	r3, [r7, #8]
 8003b94:	b29a      	uxth	r2, r3
 8003b96:	88fb      	ldrh	r3, [r7, #6]
 8003b98:	1ad3      	subs	r3, r2, r3
 8003b9a:	81bb      	strh	r3, [r7, #12]
      WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8003b9c:	4b25      	ldr	r3, [pc, #148]	; (8003c34 <RescheduleTimerList+0x12c>)
 8003b9e:	2201      	movs	r2, #1
 8003ba0:	701a      	strb	r2, [r3, #0]
  }

  /**
   * update ticks left to be counted for each timer
   */
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8003ba2:	e034      	b.n	8003c0e <RescheduleTimerList+0x106>
  {
    if (aTimerContext[localTimerID].CountLeft < time_elapsed)
 8003ba4:	7bfa      	ldrb	r2, [r7, #15]
 8003ba6:	4922      	ldr	r1, [pc, #136]	; (8003c30 <RescheduleTimerList+0x128>)
 8003ba8:	4613      	mov	r3, r2
 8003baa:	005b      	lsls	r3, r3, #1
 8003bac:	4413      	add	r3, r2
 8003bae:	00db      	lsls	r3, r3, #3
 8003bb0:	440b      	add	r3, r1
 8003bb2:	3308      	adds	r3, #8
 8003bb4:	681a      	ldr	r2, [r3, #0]
 8003bb6:	88fb      	ldrh	r3, [r7, #6]
 8003bb8:	429a      	cmp	r2, r3
 8003bba:	d20a      	bcs.n	8003bd2 <RescheduleTimerList+0xca>
    {
      aTimerContext[localTimerID].CountLeft = 0;
 8003bbc:	7bfa      	ldrb	r2, [r7, #15]
 8003bbe:	491c      	ldr	r1, [pc, #112]	; (8003c30 <RescheduleTimerList+0x128>)
 8003bc0:	4613      	mov	r3, r2
 8003bc2:	005b      	lsls	r3, r3, #1
 8003bc4:	4413      	add	r3, r2
 8003bc6:	00db      	lsls	r3, r3, #3
 8003bc8:	440b      	add	r3, r1
 8003bca:	3308      	adds	r3, #8
 8003bcc:	2200      	movs	r2, #0
 8003bce:	601a      	str	r2, [r3, #0]
 8003bd0:	e013      	b.n	8003bfa <RescheduleTimerList+0xf2>
    }
    else
    {
      aTimerContext[localTimerID].CountLeft -= time_elapsed;
 8003bd2:	7bfa      	ldrb	r2, [r7, #15]
 8003bd4:	4916      	ldr	r1, [pc, #88]	; (8003c30 <RescheduleTimerList+0x128>)
 8003bd6:	4613      	mov	r3, r2
 8003bd8:	005b      	lsls	r3, r3, #1
 8003bda:	4413      	add	r3, r2
 8003bdc:	00db      	lsls	r3, r3, #3
 8003bde:	440b      	add	r3, r1
 8003be0:	3308      	adds	r3, #8
 8003be2:	6819      	ldr	r1, [r3, #0]
 8003be4:	88fb      	ldrh	r3, [r7, #6]
 8003be6:	7bfa      	ldrb	r2, [r7, #15]
 8003be8:	1ac9      	subs	r1, r1, r3
 8003bea:	4811      	ldr	r0, [pc, #68]	; (8003c30 <RescheduleTimerList+0x128>)
 8003bec:	4613      	mov	r3, r2
 8003bee:	005b      	lsls	r3, r3, #1
 8003bf0:	4413      	add	r3, r2
 8003bf2:	00db      	lsls	r3, r3, #3
 8003bf4:	4403      	add	r3, r0
 8003bf6:	3308      	adds	r3, #8
 8003bf8:	6019      	str	r1, [r3, #0]
    }
    localTimerID = aTimerContext[localTimerID].NextID;
 8003bfa:	7bfa      	ldrb	r2, [r7, #15]
 8003bfc:	490c      	ldr	r1, [pc, #48]	; (8003c30 <RescheduleTimerList+0x128>)
 8003bfe:	4613      	mov	r3, r2
 8003c00:	005b      	lsls	r3, r3, #1
 8003c02:	4413      	add	r3, r2
 8003c04:	00db      	lsls	r3, r3, #3
 8003c06:	440b      	add	r3, r1
 8003c08:	3315      	adds	r3, #21
 8003c0a:	781b      	ldrb	r3, [r3, #0]
 8003c0c:	73fb      	strb	r3, [r7, #15]
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8003c0e:	7bfb      	ldrb	r3, [r7, #15]
 8003c10:	2b06      	cmp	r3, #6
 8003c12:	d1c7      	bne.n	8003ba4 <RescheduleTimerList+0x9c>
  }

  /**
   * Write next count
   */
  RestartWakeupCounter(wakeup_timer_value);
 8003c14:	89bb      	ldrh	r3, [r7, #12]
 8003c16:	4618      	mov	r0, r3
 8003c18:	f7ff ff1e 	bl	8003a58 <RestartWakeupCounter>

  return ;
 8003c1c:	bf00      	nop
}
 8003c1e:	3710      	adds	r7, #16
 8003c20:	46bd      	mov	sp, r7
 8003c22:	bd80      	pop	{r7, pc}
 8003c24:	40002800 	.word	0x40002800
 8003c28:	20000c84 	.word	0x20000c84
 8003c2c:	20000324 	.word	0x20000324
 8003c30:	20000294 	.word	0x20000294
 8003c34:	2000032c 	.word	0x2000032c
 8003c38:	20000332 	.word	0x20000332

08003c3c <HW_TS_RTC_Wakeup_Handler>:
 * In order to ease maintainability, the unlock is done at the top and the lock at then end
 * in case some new implementation is coming in the future
 */

void HW_TS_RTC_Wakeup_Handler(void)
{
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	b08a      	sub	sp, #40	; 0x28
 8003c40:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003c42:	f3ef 8310 	mrs	r3, PRIMASK
 8003c46:	617b      	str	r3, [r7, #20]
  return(result);
 8003c48:	697b      	ldr	r3, [r7, #20]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8003c4a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 8003c4c:	b672      	cpsid	i
}
 8003c4e:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

/* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8003c50:	4b59      	ldr	r3, [pc, #356]	; (8003db8 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	22ca      	movs	r2, #202	; 0xca
 8003c56:	625a      	str	r2, [r3, #36]	; 0x24
 8003c58:	4b57      	ldr	r3, [pc, #348]	; (8003db8 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	2253      	movs	r2, #83	; 0x53
 8003c5e:	625a      	str	r2, [r3, #36]	; 0x24
  /**
   * Disable the Wakeup Timer
   * This may speed up a bit the processing to wait the timer to be disabled
   * The timer is still counting 2 RTCCLK
   */
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
 8003c60:	4b55      	ldr	r3, [pc, #340]	; (8003db8 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	689a      	ldr	r2, [r3, #8]
 8003c66:	4b54      	ldr	r3, [pc, #336]	; (8003db8 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c6e:	609a      	str	r2, [r3, #8]

  local_current_running_timer_id = CurrentRunningTimerID;
 8003c70:	4b52      	ldr	r3, [pc, #328]	; (8003dbc <HW_TS_RTC_Wakeup_Handler+0x180>)
 8003c72:	781b      	ldrb	r3, [r3, #0]
 8003c74:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  if(aTimerContext[local_current_running_timer_id].TimerIDStatus == TimerID_Running)
 8003c78:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8003c7c:	4950      	ldr	r1, [pc, #320]	; (8003dc0 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8003c7e:	4613      	mov	r3, r2
 8003c80:	005b      	lsls	r3, r3, #1
 8003c82:	4413      	add	r3, r2
 8003c84:	00db      	lsls	r3, r3, #3
 8003c86:	440b      	add	r3, r1
 8003c88:	330c      	adds	r3, #12
 8003c8a:	781b      	ldrb	r3, [r3, #0]
 8003c8c:	b2db      	uxtb	r3, r3
 8003c8e:	2b02      	cmp	r3, #2
 8003c90:	d16e      	bne.n	8003d70 <HW_TS_RTC_Wakeup_Handler+0x134>
  {
    ptimer_callback = aTimerContext[local_current_running_timer_id].pTimerCallBack;
 8003c92:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8003c96:	494a      	ldr	r1, [pc, #296]	; (8003dc0 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8003c98:	4613      	mov	r3, r2
 8003c9a:	005b      	lsls	r3, r3, #1
 8003c9c:	4413      	add	r3, r2
 8003c9e:	00db      	lsls	r3, r3, #3
 8003ca0:	440b      	add	r3, r1
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	61fb      	str	r3, [r7, #28]
    timer_process_id = aTimerContext[local_current_running_timer_id].TimerProcessID;
 8003ca6:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8003caa:	4945      	ldr	r1, [pc, #276]	; (8003dc0 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8003cac:	4613      	mov	r3, r2
 8003cae:	005b      	lsls	r3, r3, #1
 8003cb0:	4413      	add	r3, r2
 8003cb2:	00db      	lsls	r3, r3, #3
 8003cb4:	440b      	add	r3, r1
 8003cb6:	3310      	adds	r3, #16
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	61bb      	str	r3, [r7, #24]
     * However, due to the inaccuracy of the reading of the time elapsed, it may return there is 1 tick
     * to be left whereas the count is over
     * A more secure implementation has been done with a flag to state whereas the full count has been written
     * in the wakeuptimer or not
     */
    if(WakeupTimerLimitation != WakeupTimerValue_Overpassed)
 8003cbc:	4b41      	ldr	r3, [pc, #260]	; (8003dc4 <HW_TS_RTC_Wakeup_Handler+0x188>)
 8003cbe:	781b      	ldrb	r3, [r3, #0]
 8003cc0:	b2db      	uxtb	r3, r3
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d04c      	beq.n	8003d60 <HW_TS_RTC_Wakeup_Handler+0x124>
    {
      if(aTimerContext[local_current_running_timer_id].TimerMode == hw_ts_Repeated)
 8003cc6:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8003cca:	493d      	ldr	r1, [pc, #244]	; (8003dc0 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8003ccc:	4613      	mov	r3, r2
 8003cce:	005b      	lsls	r3, r3, #1
 8003cd0:	4413      	add	r3, r2
 8003cd2:	00db      	lsls	r3, r3, #3
 8003cd4:	440b      	add	r3, r1
 8003cd6:	330d      	adds	r3, #13
 8003cd8:	781b      	ldrb	r3, [r3, #0]
 8003cda:	b2db      	uxtb	r3, r3
 8003cdc:	2b01      	cmp	r3, #1
 8003cde:	d124      	bne.n	8003d2a <HW_TS_RTC_Wakeup_Handler+0xee>
      {
        UnlinkTimer(local_current_running_timer_id, SSR_Read_Not_Requested);
 8003ce0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003ce4:	2101      	movs	r1, #1
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	f7ff fdf2 	bl	80038d0 <UnlinkTimer>
 8003cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cee:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003cf0:	693b      	ldr	r3, [r7, #16]
 8003cf2:	f383 8810 	msr	PRIMASK, r3
}
 8003cf6:	bf00      	nop
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Start(local_current_running_timer_id, aTimerContext[local_current_running_timer_id].CounterInit);
 8003cf8:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8003cfc:	4930      	ldr	r1, [pc, #192]	; (8003dc0 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8003cfe:	4613      	mov	r3, r2
 8003d00:	005b      	lsls	r3, r3, #1
 8003d02:	4413      	add	r3, r2
 8003d04:	00db      	lsls	r3, r3, #3
 8003d06:	440b      	add	r3, r1
 8003d08:	3304      	adds	r3, #4
 8003d0a:	681a      	ldr	r2, [r3, #0]
 8003d0c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003d10:	4611      	mov	r1, r2
 8003d12:	4618      	mov	r0, r3
 8003d14:	f000 fa32 	bl	800417c <HW_TS_Start>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8003d18:	4b27      	ldr	r3, [pc, #156]	; (8003db8 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	22ca      	movs	r2, #202	; 0xca
 8003d1e:	625a      	str	r2, [r3, #36]	; 0x24
 8003d20:	4b25      	ldr	r3, [pc, #148]	; (8003db8 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	2253      	movs	r2, #83	; 0x53
 8003d26:	625a      	str	r2, [r3, #36]	; 0x24
 8003d28:	e012      	b.n	8003d50 <HW_TS_RTC_Wakeup_Handler+0x114>
 8003d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d2c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	f383 8810 	msr	PRIMASK, r3
}
 8003d34:	bf00      	nop
      else
      {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Stop(local_current_running_timer_id);
 8003d36:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003d3a:	4618      	mov	r0, r3
 8003d3c:	f000 f99a 	bl	8004074 <HW_TS_Stop>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8003d40:	4b1d      	ldr	r3, [pc, #116]	; (8003db8 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	22ca      	movs	r2, #202	; 0xca
 8003d46:	625a      	str	r2, [r3, #36]	; 0x24
 8003d48:	4b1b      	ldr	r3, [pc, #108]	; (8003db8 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	2253      	movs	r2, #83	; 0x53
 8003d4e:	625a      	str	r2, [r3, #36]	; 0x24
        }

      HW_TS_RTC_Int_AppNot(timer_process_id, local_current_running_timer_id, ptimer_callback);
 8003d50:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003d54:	69fa      	ldr	r2, [r7, #28]
 8003d56:	4619      	mov	r1, r3
 8003d58:	69b8      	ldr	r0, [r7, #24]
 8003d5a:	f000 fa95 	bl	8004288 <HW_TS_RTC_Int_AppNot>
 8003d5e:	e022      	b.n	8003da6 <HW_TS_RTC_Wakeup_Handler+0x16a>
    }
    else
    {
      RescheduleTimerList();
 8003d60:	f7ff fed2 	bl	8003b08 <RescheduleTimerList>
 8003d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d66:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d68:	68bb      	ldr	r3, [r7, #8]
 8003d6a:	f383 8810 	msr	PRIMASK, r3
}
 8003d6e:	e01a      	b.n	8003da6 <HW_TS_RTC_Wakeup_Handler+0x16a>
    /**
     * We should never end up in this case
     * However, if due to any bug in the timer server this is the case, the mistake may not impact the user.
     * We could just clean the interrupt flag and get out from this unexpected interrupt
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 8003d70:	bf00      	nop
 8003d72:	4b11      	ldr	r3, [pc, #68]	; (8003db8 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	68db      	ldr	r3, [r3, #12]
 8003d78:	f003 0304 	and.w	r3, r3, #4
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d0f8      	beq.n	8003d72 <HW_TS_RTC_Wakeup_Handler+0x136>
     * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
     * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
     * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
     * due to the autoreload feature
     */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8003d80:	4b0d      	ldr	r3, [pc, #52]	; (8003db8 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	68db      	ldr	r3, [r3, #12]
 8003d86:	b2da      	uxtb	r2, r3
 8003d88:	4b0b      	ldr	r3, [pc, #44]	; (8003db8 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8003d90:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8003d92:	4b0d      	ldr	r3, [pc, #52]	; (8003dc8 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8003d94:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8003d98:	60da      	str	r2, [r3, #12]
 8003d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d9c:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	f383 8810 	msr	PRIMASK, r3
}
 8003da4:	bf00      	nop
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8003da6:	4b04      	ldr	r3, [pc, #16]	; (8003db8 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	22ff      	movs	r2, #255	; 0xff
 8003dac:	625a      	str	r2, [r3, #36]	; 0x24

  return;
 8003dae:	bf00      	nop
}
 8003db0:	3728      	adds	r7, #40	; 0x28
 8003db2:	46bd      	mov	sp, r7
 8003db4:	bd80      	pop	{r7, pc}
 8003db6:	bf00      	nop
 8003db8:	20000c84 	.word	0x20000c84
 8003dbc:	20000324 	.word	0x20000324
 8003dc0:	20000294 	.word	0x20000294
 8003dc4:	2000032c 	.word	0x2000032c
 8003dc8:	58000800 	.word	0x58000800

08003dcc <HW_TS_Init>:

void HW_TS_Init(HW_TS_InitMode_t TimerInitMode, RTC_HandleTypeDef *phrtc)
{
 8003dcc:	b580      	push	{r7, lr}
 8003dce:	b088      	sub	sp, #32
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	4603      	mov	r3, r0
 8003dd4:	6039      	str	r1, [r7, #0]
 8003dd6:	71fb      	strb	r3, [r7, #7]
  uint8_t loop;
  uint32_t localmaxwakeuptimersetup;

 /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8003dd8:	4b5e      	ldr	r3, [pc, #376]	; (8003f54 <HW_TS_Init+0x188>)
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	22ca      	movs	r2, #202	; 0xca
 8003dde:	625a      	str	r2, [r3, #36]	; 0x24
 8003de0:	4b5c      	ldr	r3, [pc, #368]	; (8003f54 <HW_TS_Init+0x188>)
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	2253      	movs	r2, #83	; 0x53
 8003de6:	625a      	str	r2, [r3, #36]	; 0x24

  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8003de8:	4b5b      	ldr	r3, [pc, #364]	; (8003f58 <HW_TS_Init+0x18c>)
 8003dea:	689b      	ldr	r3, [r3, #8]
 8003dec:	4a5a      	ldr	r2, [pc, #360]	; (8003f58 <HW_TS_Init+0x18c>)
 8003dee:	f043 0320 	orr.w	r3, r3, #32
 8003df2:	6093      	str	r3, [r2, #8]

  /**
   * Readout the user config
   */
  WakeupTimerDivider = (4 - ((uint32_t)(READ_BIT(RTC->CR, RTC_CR_WUCKSEL))));
 8003df4:	4b58      	ldr	r3, [pc, #352]	; (8003f58 <HW_TS_Init+0x18c>)
 8003df6:	689b      	ldr	r3, [r3, #8]
 8003df8:	b2db      	uxtb	r3, r3
 8003dfa:	f003 0307 	and.w	r3, r3, #7
 8003dfe:	b2db      	uxtb	r3, r3
 8003e00:	f1c3 0304 	rsb	r3, r3, #4
 8003e04:	b2da      	uxtb	r2, r3
 8003e06:	4b55      	ldr	r3, [pc, #340]	; (8003f5c <HW_TS_Init+0x190>)
 8003e08:	701a      	strb	r2, [r3, #0]

  AsynchPrescalerUserConfig = (uint8_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_A) >> (uint32_t)POSITION_VAL(RTC_PRER_PREDIV_A)) + 1;
 8003e0a:	4b53      	ldr	r3, [pc, #332]	; (8003f58 <HW_TS_Init+0x18c>)
 8003e0c:	691b      	ldr	r3, [r3, #16]
 8003e0e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003e12:	f44f 02fe 	mov.w	r2, #8323072	; 0x7f0000
 8003e16:	613a      	str	r2, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e18:	693a      	ldr	r2, [r7, #16]
 8003e1a:	fa92 f2a2 	rbit	r2, r2
 8003e1e:	60fa      	str	r2, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003e20:	68fa      	ldr	r2, [r7, #12]
 8003e22:	617a      	str	r2, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003e24:	697a      	ldr	r2, [r7, #20]
 8003e26:	2a00      	cmp	r2, #0
 8003e28:	d101      	bne.n	8003e2e <HW_TS_Init+0x62>
  {
    return 32U;
 8003e2a:	2220      	movs	r2, #32
 8003e2c:	e003      	b.n	8003e36 <HW_TS_Init+0x6a>
  }
  return __builtin_clz(value);
 8003e2e:	697a      	ldr	r2, [r7, #20]
 8003e30:	fab2 f282 	clz	r2, r2
 8003e34:	b2d2      	uxtb	r2, r2
 8003e36:	40d3      	lsrs	r3, r2
 8003e38:	b2db      	uxtb	r3, r3
 8003e3a:	3301      	adds	r3, #1
 8003e3c:	b2da      	uxtb	r2, r3
 8003e3e:	4b48      	ldr	r3, [pc, #288]	; (8003f60 <HW_TS_Init+0x194>)
 8003e40:	701a      	strb	r2, [r3, #0]

  SynchPrescalerUserConfig = (uint16_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_S)) + 1;
 8003e42:	4b45      	ldr	r3, [pc, #276]	; (8003f58 <HW_TS_Init+0x18c>)
 8003e44:	691b      	ldr	r3, [r3, #16]
 8003e46:	b29b      	uxth	r3, r3
 8003e48:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8003e4c:	b29b      	uxth	r3, r3
 8003e4e:	3301      	adds	r3, #1
 8003e50:	b29a      	uxth	r2, r3
 8003e52:	4b44      	ldr	r3, [pc, #272]	; (8003f64 <HW_TS_Init+0x198>)
 8003e54:	801a      	strh	r2, [r3, #0]

  /**
   *  Margin is taken to avoid wrong calculation when the wrap around is there and some
   *  application interrupts may have delayed the reading
   */
  localmaxwakeuptimersetup = ((((SynchPrescalerUserConfig - 1)*AsynchPrescalerUserConfig) - CFG_HW_TS_RTC_HANDLER_MAX_DELAY) >> WakeupTimerDivider);
 8003e56:	4b43      	ldr	r3, [pc, #268]	; (8003f64 <HW_TS_Init+0x198>)
 8003e58:	881b      	ldrh	r3, [r3, #0]
 8003e5a:	3b01      	subs	r3, #1
 8003e5c:	4a40      	ldr	r2, [pc, #256]	; (8003f60 <HW_TS_Init+0x194>)
 8003e5e:	7812      	ldrb	r2, [r2, #0]
 8003e60:	fb02 f303 	mul.w	r3, r2, r3
 8003e64:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8003e68:	4a3c      	ldr	r2, [pc, #240]	; (8003f5c <HW_TS_Init+0x190>)
 8003e6a:	7812      	ldrb	r2, [r2, #0]
 8003e6c:	40d3      	lsrs	r3, r2
 8003e6e:	61bb      	str	r3, [r7, #24]

  if(localmaxwakeuptimersetup >= 0xFFFF)
 8003e70:	69bb      	ldr	r3, [r7, #24]
 8003e72:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8003e76:	4293      	cmp	r3, r2
 8003e78:	d904      	bls.n	8003e84 <HW_TS_Init+0xb8>
  {
    MaxWakeupTimerSetup = 0xFFFF;
 8003e7a:	4b3b      	ldr	r3, [pc, #236]	; (8003f68 <HW_TS_Init+0x19c>)
 8003e7c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003e80:	801a      	strh	r2, [r3, #0]
 8003e82:	e003      	b.n	8003e8c <HW_TS_Init+0xc0>
  }
  else
  {
    MaxWakeupTimerSetup = (uint16_t)localmaxwakeuptimersetup;
 8003e84:	69bb      	ldr	r3, [r7, #24]
 8003e86:	b29a      	uxth	r2, r3
 8003e88:	4b37      	ldr	r3, [pc, #220]	; (8003f68 <HW_TS_Init+0x19c>)
 8003e8a:	801a      	strh	r2, [r3, #0]
  }

  /**
   * Configure EXTI module
   */
  LL_EXTI_EnableRisingTrig_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8003e8c:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8003e90:	f7ff fb9c 	bl	80035cc <LL_EXTI_EnableRisingTrig_0_31>
  LL_EXTI_EnableIT_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8003e94:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8003e98:	f7ff fb84 	bl	80035a4 <LL_EXTI_EnableIT_0_31>

  if(TimerInitMode == hw_ts_InitMode_Full)
 8003e9c:	79fb      	ldrb	r3, [r7, #7]
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d13d      	bne.n	8003f1e <HW_TS_Init+0x152>
  {
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8003ea2:	4b32      	ldr	r3, [pc, #200]	; (8003f6c <HW_TS_Init+0x1a0>)
 8003ea4:	2201      	movs	r2, #1
 8003ea6:	701a      	strb	r2, [r3, #0]
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8003ea8:	4b31      	ldr	r3, [pc, #196]	; (8003f70 <HW_TS_Init+0x1a4>)
 8003eaa:	f04f 32ff 	mov.w	r2, #4294967295
 8003eae:	601a      	str	r2, [r3, #0]

    /**
     * Initialize the timer server
     */
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8003eb0:	2300      	movs	r3, #0
 8003eb2:	77fb      	strb	r3, [r7, #31]
 8003eb4:	e00c      	b.n	8003ed0 <HW_TS_Init+0x104>
    {
      aTimerContext[loop].TimerIDStatus = TimerID_Free;
 8003eb6:	7ffa      	ldrb	r2, [r7, #31]
 8003eb8:	492e      	ldr	r1, [pc, #184]	; (8003f74 <HW_TS_Init+0x1a8>)
 8003eba:	4613      	mov	r3, r2
 8003ebc:	005b      	lsls	r3, r3, #1
 8003ebe:	4413      	add	r3, r2
 8003ec0:	00db      	lsls	r3, r3, #3
 8003ec2:	440b      	add	r3, r1
 8003ec4:	330c      	adds	r3, #12
 8003ec6:	2200      	movs	r2, #0
 8003ec8:	701a      	strb	r2, [r3, #0]
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8003eca:	7ffb      	ldrb	r3, [r7, #31]
 8003ecc:	3301      	adds	r3, #1
 8003ece:	77fb      	strb	r3, [r7, #31]
 8003ed0:	7ffb      	ldrb	r3, [r7, #31]
 8003ed2:	2b05      	cmp	r3, #5
 8003ed4:	d9ef      	bls.n	8003eb6 <HW_TS_Init+0xea>
    }

    CurrentRunningTimerID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;   /**<  Set ID to non valid value */
 8003ed6:	4b28      	ldr	r3, [pc, #160]	; (8003f78 <HW_TS_Init+0x1ac>)
 8003ed8:	2206      	movs	r2, #6
 8003eda:	701a      	strb	r2, [r3, #0]

    __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);                       /**<  Disable the Wakeup Timer */
 8003edc:	4b1d      	ldr	r3, [pc, #116]	; (8003f54 <HW_TS_Init+0x188>)
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	689a      	ldr	r2, [r3, #8]
 8003ee2:	4b1c      	ldr	r3, [pc, #112]	; (8003f54 <HW_TS_Init+0x188>)
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003eea:	609a      	str	r2, [r3, #8]
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);     /**<  Clear flag in RTC module */
 8003eec:	4b19      	ldr	r3, [pc, #100]	; (8003f54 <HW_TS_Init+0x188>)
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	68db      	ldr	r3, [r3, #12]
 8003ef2:	b2da      	uxtb	r2, r3
 8003ef4:	4b17      	ldr	r3, [pc, #92]	; (8003f54 <HW_TS_Init+0x188>)
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8003efc:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module  */
 8003efe:	4b1f      	ldr	r3, [pc, #124]	; (8003f7c <HW_TS_Init+0x1b0>)
 8003f00:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8003f04:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);       /**<  Clear pending bit in NVIC  */
 8003f06:	2003      	movs	r0, #3
 8003f08:	f7fc ff53 	bl	8000db2 <HAL_NVIC_ClearPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE_IT(&hrtc, RTC_IT_WUT);         /**<  Enable interrupt in RTC module  */
 8003f0c:	4b11      	ldr	r3, [pc, #68]	; (8003f54 <HW_TS_Init+0x188>)
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	689a      	ldr	r2, [r3, #8]
 8003f12:	4b10      	ldr	r3, [pc, #64]	; (8003f54 <HW_TS_Init+0x188>)
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003f1a:	609a      	str	r2, [r3, #8]
 8003f1c:	e009      	b.n	8003f32 <HW_TS_Init+0x166>
  }
  else
  {
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTF) != RESET)
 8003f1e:	4b0d      	ldr	r3, [pc, #52]	; (8003f54 <HW_TS_Init+0x188>)
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	68db      	ldr	r3, [r3, #12]
 8003f24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d002      	beq.n	8003f32 <HW_TS_Init+0x166>
    {
      /**
       * Simulate that the Timer expired
       */
      HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8003f2c:	2003      	movs	r0, #3
 8003f2e:	f7fc ff32 	bl	8000d96 <HAL_NVIC_SetPendingIRQ>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8003f32:	4b08      	ldr	r3, [pc, #32]	; (8003f54 <HW_TS_Init+0x188>)
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	22ff      	movs	r2, #255	; 0xff
 8003f38:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_SetPriority(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_PREEMPTPRIO, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_SUBPRIO);   /**<  Set NVIC priority */
 8003f3a:	2200      	movs	r2, #0
 8003f3c:	2103      	movs	r1, #3
 8003f3e:	2003      	movs	r0, #3
 8003f40:	f7fc fef3 	bl	8000d2a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8003f44:	2003      	movs	r0, #3
 8003f46:	f7fc ff0a 	bl	8000d5e <HAL_NVIC_EnableIRQ>

  return;
 8003f4a:	bf00      	nop
}
 8003f4c:	3720      	adds	r7, #32
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	bd80      	pop	{r7, pc}
 8003f52:	bf00      	nop
 8003f54:	20000c84 	.word	0x20000c84
 8003f58:	40002800 	.word	0x40002800
 8003f5c:	2000032d 	.word	0x2000032d
 8003f60:	2000032e 	.word	0x2000032e
 8003f64:	20000330 	.word	0x20000330
 8003f68:	20000332 	.word	0x20000332
 8003f6c:	2000032c 	.word	0x2000032c
 8003f70:	20000328 	.word	0x20000328
 8003f74:	20000294 	.word	0x20000294
 8003f78:	20000324 	.word	0x20000324
 8003f7c:	58000800 	.word	0x58000800

08003f80 <HW_TS_Create>:

HW_TS_ReturnStatus_t HW_TS_Create(uint32_t TimerProcessID, uint8_t *pTimerId, HW_TS_Mode_t TimerMode, HW_TS_pTimerCb_t pftimeout_handler)
{
 8003f80:	b480      	push	{r7}
 8003f82:	b08b      	sub	sp, #44	; 0x2c
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	60f8      	str	r0, [r7, #12]
 8003f88:	60b9      	str	r1, [r7, #8]
 8003f8a:	603b      	str	r3, [r7, #0]
 8003f8c:	4613      	mov	r3, r2
 8003f8e:	71fb      	strb	r3, [r7, #7]
  HW_TS_ReturnStatus_t localreturnstatus;
  uint8_t loop = 0;
 8003f90:	2300      	movs	r3, #0
 8003f92:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003f96:	f3ef 8310 	mrs	r3, PRIMASK
 8003f9a:	61fb      	str	r3, [r7, #28]
  return(result);
 8003f9c:	69fb      	ldr	r3, [r7, #28]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8003f9e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 8003fa0:	b672      	cpsid	i
}
 8003fa2:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  while((loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[loop].TimerIDStatus != TimerID_Free))
 8003fa4:	e004      	b.n	8003fb0 <HW_TS_Create+0x30>
  {
    loop++;
 8003fa6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8003faa:	3301      	adds	r3, #1
 8003fac:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  while((loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[loop].TimerIDStatus != TimerID_Free))
 8003fb0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8003fb4:	2b05      	cmp	r3, #5
 8003fb6:	d80c      	bhi.n	8003fd2 <HW_TS_Create+0x52>
 8003fb8:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8003fbc:	492c      	ldr	r1, [pc, #176]	; (8004070 <HW_TS_Create+0xf0>)
 8003fbe:	4613      	mov	r3, r2
 8003fc0:	005b      	lsls	r3, r3, #1
 8003fc2:	4413      	add	r3, r2
 8003fc4:	00db      	lsls	r3, r3, #3
 8003fc6:	440b      	add	r3, r1
 8003fc8:	330c      	adds	r3, #12
 8003fca:	781b      	ldrb	r3, [r3, #0]
 8003fcc:	b2db      	uxtb	r3, r3
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d1e9      	bne.n	8003fa6 <HW_TS_Create+0x26>
  }

  if(loop != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8003fd2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8003fd6:	2b06      	cmp	r3, #6
 8003fd8:	d038      	beq.n	800404c <HW_TS_Create+0xcc>
  {
    aTimerContext[loop].TimerIDStatus = TimerID_Created;
 8003fda:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8003fde:	4924      	ldr	r1, [pc, #144]	; (8004070 <HW_TS_Create+0xf0>)
 8003fe0:	4613      	mov	r3, r2
 8003fe2:	005b      	lsls	r3, r3, #1
 8003fe4:	4413      	add	r3, r2
 8003fe6:	00db      	lsls	r3, r3, #3
 8003fe8:	440b      	add	r3, r1
 8003fea:	330c      	adds	r3, #12
 8003fec:	2201      	movs	r2, #1
 8003fee:	701a      	strb	r2, [r3, #0]
 8003ff0:	6a3b      	ldr	r3, [r7, #32]
 8003ff2:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ff4:	69bb      	ldr	r3, [r7, #24]
 8003ff6:	f383 8810 	msr	PRIMASK, r3
}
 8003ffa:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

    aTimerContext[loop].TimerProcessID = TimerProcessID;
 8003ffc:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8004000:	491b      	ldr	r1, [pc, #108]	; (8004070 <HW_TS_Create+0xf0>)
 8004002:	4613      	mov	r3, r2
 8004004:	005b      	lsls	r3, r3, #1
 8004006:	4413      	add	r3, r2
 8004008:	00db      	lsls	r3, r3, #3
 800400a:	440b      	add	r3, r1
 800400c:	3310      	adds	r3, #16
 800400e:	68fa      	ldr	r2, [r7, #12]
 8004010:	601a      	str	r2, [r3, #0]
    aTimerContext[loop].TimerMode = TimerMode;
 8004012:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8004016:	4916      	ldr	r1, [pc, #88]	; (8004070 <HW_TS_Create+0xf0>)
 8004018:	4613      	mov	r3, r2
 800401a:	005b      	lsls	r3, r3, #1
 800401c:	4413      	add	r3, r2
 800401e:	00db      	lsls	r3, r3, #3
 8004020:	440b      	add	r3, r1
 8004022:	330d      	adds	r3, #13
 8004024:	79fa      	ldrb	r2, [r7, #7]
 8004026:	701a      	strb	r2, [r3, #0]
    aTimerContext[loop].pTimerCallBack = pftimeout_handler;
 8004028:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800402c:	4910      	ldr	r1, [pc, #64]	; (8004070 <HW_TS_Create+0xf0>)
 800402e:	4613      	mov	r3, r2
 8004030:	005b      	lsls	r3, r3, #1
 8004032:	4413      	add	r3, r2
 8004034:	00db      	lsls	r3, r3, #3
 8004036:	440b      	add	r3, r1
 8004038:	683a      	ldr	r2, [r7, #0]
 800403a:	601a      	str	r2, [r3, #0]
    *pTimerId = loop;
 800403c:	68bb      	ldr	r3, [r7, #8]
 800403e:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8004042:	701a      	strb	r2, [r3, #0]

    localreturnstatus = hw_ts_Successful;
 8004044:	2300      	movs	r3, #0
 8004046:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800404a:	e008      	b.n	800405e <HW_TS_Create+0xde>
 800404c:	6a3b      	ldr	r3, [r7, #32]
 800404e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004050:	697b      	ldr	r3, [r7, #20]
 8004052:	f383 8810 	msr	PRIMASK, r3
}
 8004056:	bf00      	nop
  {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

    localreturnstatus = hw_ts_Failed;
 8004058:	2301      	movs	r3, #1
 800405a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  return(localreturnstatus);
 800405e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8004062:	4618      	mov	r0, r3
 8004064:	372c      	adds	r7, #44	; 0x2c
 8004066:	46bd      	mov	sp, r7
 8004068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800406c:	4770      	bx	lr
 800406e:	bf00      	nop
 8004070:	20000294 	.word	0x20000294

08004074 <HW_TS_Stop>:

  return;
}

void HW_TS_Stop(uint8_t timer_id)
{
 8004074:	b580      	push	{r7, lr}
 8004076:	b086      	sub	sp, #24
 8004078:	af00      	add	r7, sp, #0
 800407a:	4603      	mov	r3, r0
 800407c:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800407e:	f3ef 8310 	mrs	r3, PRIMASK
 8004082:	60fb      	str	r3, [r7, #12]
  return(result);
 8004084:	68fb      	ldr	r3, [r7, #12]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8004086:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8004088:	b672      	cpsid	i
}
 800408a:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 800408c:	2003      	movs	r0, #3
 800408e:	f7fc fe74 	bl	8000d7a <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8004092:	4b34      	ldr	r3, [pc, #208]	; (8004164 <HW_TS_Stop+0xf0>)
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	22ca      	movs	r2, #202	; 0xca
 8004098:	625a      	str	r2, [r3, #36]	; 0x24
 800409a:	4b32      	ldr	r3, [pc, #200]	; (8004164 <HW_TS_Stop+0xf0>)
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	2253      	movs	r2, #83	; 0x53
 80040a0:	625a      	str	r2, [r3, #36]	; 0x24

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 80040a2:	79fa      	ldrb	r2, [r7, #7]
 80040a4:	4930      	ldr	r1, [pc, #192]	; (8004168 <HW_TS_Stop+0xf4>)
 80040a6:	4613      	mov	r3, r2
 80040a8:	005b      	lsls	r3, r3, #1
 80040aa:	4413      	add	r3, r2
 80040ac:	00db      	lsls	r3, r3, #3
 80040ae:	440b      	add	r3, r1
 80040b0:	330c      	adds	r3, #12
 80040b2:	781b      	ldrb	r3, [r3, #0]
 80040b4:	b2db      	uxtb	r3, r3
 80040b6:	2b02      	cmp	r3, #2
 80040b8:	d142      	bne.n	8004140 <HW_TS_Stop+0xcc>
  {
    UnlinkTimer(timer_id, SSR_Read_Requested);
 80040ba:	79fb      	ldrb	r3, [r7, #7]
 80040bc:	2100      	movs	r1, #0
 80040be:	4618      	mov	r0, r3
 80040c0:	f7ff fc06 	bl	80038d0 <UnlinkTimer>
    localcurrentrunningtimerid = CurrentRunningTimerID;
 80040c4:	4b29      	ldr	r3, [pc, #164]	; (800416c <HW_TS_Stop+0xf8>)
 80040c6:	781b      	ldrb	r3, [r3, #0]
 80040c8:	74fb      	strb	r3, [r7, #19]

    if(localcurrentrunningtimerid == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80040ca:	7cfb      	ldrb	r3, [r7, #19]
 80040cc:	2b06      	cmp	r3, #6
 80040ce:	d12f      	bne.n	8004130 <HW_TS_Stop+0xbc>
       */

      /**
       * Disable the timer
       */
      if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 80040d0:	4b27      	ldr	r3, [pc, #156]	; (8004170 <HW_TS_Stop+0xfc>)
 80040d2:	689b      	ldr	r3, [r3, #8]
 80040d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80040dc:	d107      	bne.n	80040ee <HW_TS_Stop+0x7a>
      {
        /**
         * Wait for the flag to be back to 0 when the wakeup timer is enabled
         */
        while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 80040de:	bf00      	nop
 80040e0:	4b20      	ldr	r3, [pc, #128]	; (8004164 <HW_TS_Stop+0xf0>)
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	68db      	ldr	r3, [r3, #12]
 80040e6:	f003 0304 	and.w	r3, r3, #4
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d1f8      	bne.n	80040e0 <HW_TS_Stop+0x6c>
      }
      __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 80040ee:	4b1d      	ldr	r3, [pc, #116]	; (8004164 <HW_TS_Stop+0xf0>)
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	689a      	ldr	r2, [r3, #8]
 80040f4:	4b1b      	ldr	r3, [pc, #108]	; (8004164 <HW_TS_Stop+0xf0>)
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80040fc:	609a      	str	r2, [r3, #8]

      while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 80040fe:	bf00      	nop
 8004100:	4b18      	ldr	r3, [pc, #96]	; (8004164 <HW_TS_Stop+0xf0>)
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	68db      	ldr	r3, [r3, #12]
 8004106:	f003 0304 	and.w	r3, r3, #4
 800410a:	2b00      	cmp	r3, #0
 800410c:	d0f8      	beq.n	8004100 <HW_TS_Stop+0x8c>
       * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
       * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
       * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
       * due to the autoreload feature
       */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 800410e:	4b15      	ldr	r3, [pc, #84]	; (8004164 <HW_TS_Stop+0xf0>)
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	68db      	ldr	r3, [r3, #12]
 8004114:	b2da      	uxtb	r2, r3
 8004116:	4b13      	ldr	r3, [pc, #76]	; (8004164 <HW_TS_Stop+0xf0>)
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f462 6290 	orn	r2, r2, #1152	; 0x480
 800411e:	60da      	str	r2, [r3, #12]
      __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8004120:	4b14      	ldr	r3, [pc, #80]	; (8004174 <HW_TS_Stop+0x100>)
 8004122:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8004126:	60da      	str	r2, [r3, #12]
      HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8004128:	2003      	movs	r0, #3
 800412a:	f7fc fe42 	bl	8000db2 <HAL_NVIC_ClearPendingIRQ>
 800412e:	e007      	b.n	8004140 <HW_TS_Stop+0xcc>
    }
    else if(PreviousRunningTimerID != localcurrentrunningtimerid)
 8004130:	4b11      	ldr	r3, [pc, #68]	; (8004178 <HW_TS_Stop+0x104>)
 8004132:	781b      	ldrb	r3, [r3, #0]
 8004134:	b2db      	uxtb	r3, r3
 8004136:	7cfa      	ldrb	r2, [r7, #19]
 8004138:	429a      	cmp	r2, r3
 800413a:	d001      	beq.n	8004140 <HW_TS_Stop+0xcc>
    {
      RescheduleTimerList();
 800413c:	f7ff fce4 	bl	8003b08 <RescheduleTimerList>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8004140:	4b08      	ldr	r3, [pc, #32]	; (8004164 <HW_TS_Stop+0xf0>)
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	22ff      	movs	r2, #255	; 0xff
 8004146:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8004148:	2003      	movs	r0, #3
 800414a:	f7fc fe08 	bl	8000d5e <HAL_NVIC_EnableIRQ>
 800414e:	697b      	ldr	r3, [r7, #20]
 8004150:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004152:	68bb      	ldr	r3, [r7, #8]
 8004154:	f383 8810 	msr	PRIMASK, r3
}
 8004158:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 800415a:	bf00      	nop
}
 800415c:	3718      	adds	r7, #24
 800415e:	46bd      	mov	sp, r7
 8004160:	bd80      	pop	{r7, pc}
 8004162:	bf00      	nop
 8004164:	20000c84 	.word	0x20000c84
 8004168:	20000294 	.word	0x20000294
 800416c:	20000324 	.word	0x20000324
 8004170:	40002800 	.word	0x40002800
 8004174:	58000800 	.word	0x58000800
 8004178:	20000325 	.word	0x20000325

0800417c <HW_TS_Start>:

void HW_TS_Start(uint8_t timer_id, uint32_t timeout_ticks)
{
 800417c:	b580      	push	{r7, lr}
 800417e:	b086      	sub	sp, #24
 8004180:	af00      	add	r7, sp, #0
 8004182:	4603      	mov	r3, r0
 8004184:	6039      	str	r1, [r7, #0]
 8004186:	71fb      	strb	r3, [r7, #7]

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8004188:	79fa      	ldrb	r2, [r7, #7]
 800418a:	493b      	ldr	r1, [pc, #236]	; (8004278 <HW_TS_Start+0xfc>)
 800418c:	4613      	mov	r3, r2
 800418e:	005b      	lsls	r3, r3, #1
 8004190:	4413      	add	r3, r2
 8004192:	00db      	lsls	r3, r3, #3
 8004194:	440b      	add	r3, r1
 8004196:	330c      	adds	r3, #12
 8004198:	781b      	ldrb	r3, [r3, #0]
 800419a:	b2db      	uxtb	r3, r3
 800419c:	2b02      	cmp	r3, #2
 800419e:	d103      	bne.n	80041a8 <HW_TS_Start+0x2c>
  {
    HW_TS_Stop( timer_id );
 80041a0:	79fb      	ldrb	r3, [r7, #7]
 80041a2:	4618      	mov	r0, r3
 80041a4:	f7ff ff66 	bl	8004074 <HW_TS_Stop>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80041a8:	f3ef 8310 	mrs	r3, PRIMASK
 80041ac:	60fb      	str	r3, [r7, #12]
  return(result);
 80041ae:	68fb      	ldr	r3, [r7, #12]
  }

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80041b0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80041b2:	b672      	cpsid	i
}
 80041b4:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 80041b6:	2003      	movs	r0, #3
 80041b8:	f7fc fddf 	bl	8000d7a <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 80041bc:	4b2f      	ldr	r3, [pc, #188]	; (800427c <HW_TS_Start+0x100>)
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	22ca      	movs	r2, #202	; 0xca
 80041c2:	625a      	str	r2, [r3, #36]	; 0x24
 80041c4:	4b2d      	ldr	r3, [pc, #180]	; (800427c <HW_TS_Start+0x100>)
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	2253      	movs	r2, #83	; 0x53
 80041ca:	625a      	str	r2, [r3, #36]	; 0x24

  aTimerContext[timer_id].TimerIDStatus = TimerID_Running;
 80041cc:	79fa      	ldrb	r2, [r7, #7]
 80041ce:	492a      	ldr	r1, [pc, #168]	; (8004278 <HW_TS_Start+0xfc>)
 80041d0:	4613      	mov	r3, r2
 80041d2:	005b      	lsls	r3, r3, #1
 80041d4:	4413      	add	r3, r2
 80041d6:	00db      	lsls	r3, r3, #3
 80041d8:	440b      	add	r3, r1
 80041da:	330c      	adds	r3, #12
 80041dc:	2202      	movs	r2, #2
 80041de:	701a      	strb	r2, [r3, #0]

  aTimerContext[timer_id].CountLeft = timeout_ticks;
 80041e0:	79fa      	ldrb	r2, [r7, #7]
 80041e2:	4925      	ldr	r1, [pc, #148]	; (8004278 <HW_TS_Start+0xfc>)
 80041e4:	4613      	mov	r3, r2
 80041e6:	005b      	lsls	r3, r3, #1
 80041e8:	4413      	add	r3, r2
 80041ea:	00db      	lsls	r3, r3, #3
 80041ec:	440b      	add	r3, r1
 80041ee:	3308      	adds	r3, #8
 80041f0:	683a      	ldr	r2, [r7, #0]
 80041f2:	601a      	str	r2, [r3, #0]
  aTimerContext[timer_id].CounterInit = timeout_ticks;
 80041f4:	79fa      	ldrb	r2, [r7, #7]
 80041f6:	4920      	ldr	r1, [pc, #128]	; (8004278 <HW_TS_Start+0xfc>)
 80041f8:	4613      	mov	r3, r2
 80041fa:	005b      	lsls	r3, r3, #1
 80041fc:	4413      	add	r3, r2
 80041fe:	00db      	lsls	r3, r3, #3
 8004200:	440b      	add	r3, r1
 8004202:	3304      	adds	r3, #4
 8004204:	683a      	ldr	r2, [r7, #0]
 8004206:	601a      	str	r2, [r3, #0]

  time_elapsed =  linkTimer(timer_id);
 8004208:	79fb      	ldrb	r3, [r7, #7]
 800420a:	4618      	mov	r0, r3
 800420c:	f7ff fab6 	bl	800377c <linkTimer>
 8004210:	4603      	mov	r3, r0
 8004212:	827b      	strh	r3, [r7, #18]

  localcurrentrunningtimerid = CurrentRunningTimerID;
 8004214:	4b1a      	ldr	r3, [pc, #104]	; (8004280 <HW_TS_Start+0x104>)
 8004216:	781b      	ldrb	r3, [r3, #0]
 8004218:	747b      	strb	r3, [r7, #17]

  if(PreviousRunningTimerID != localcurrentrunningtimerid)
 800421a:	4b1a      	ldr	r3, [pc, #104]	; (8004284 <HW_TS_Start+0x108>)
 800421c:	781b      	ldrb	r3, [r3, #0]
 800421e:	b2db      	uxtb	r3, r3
 8004220:	7c7a      	ldrb	r2, [r7, #17]
 8004222:	429a      	cmp	r2, r3
 8004224:	d002      	beq.n	800422c <HW_TS_Start+0xb0>
  {
    RescheduleTimerList();
 8004226:	f7ff fc6f 	bl	8003b08 <RescheduleTimerList>
 800422a:	e013      	b.n	8004254 <HW_TS_Start+0xd8>
  }
  else
  {
    aTimerContext[timer_id].CountLeft -= time_elapsed;
 800422c:	79fa      	ldrb	r2, [r7, #7]
 800422e:	4912      	ldr	r1, [pc, #72]	; (8004278 <HW_TS_Start+0xfc>)
 8004230:	4613      	mov	r3, r2
 8004232:	005b      	lsls	r3, r3, #1
 8004234:	4413      	add	r3, r2
 8004236:	00db      	lsls	r3, r3, #3
 8004238:	440b      	add	r3, r1
 800423a:	3308      	adds	r3, #8
 800423c:	6819      	ldr	r1, [r3, #0]
 800423e:	8a7b      	ldrh	r3, [r7, #18]
 8004240:	79fa      	ldrb	r2, [r7, #7]
 8004242:	1ac9      	subs	r1, r1, r3
 8004244:	480c      	ldr	r0, [pc, #48]	; (8004278 <HW_TS_Start+0xfc>)
 8004246:	4613      	mov	r3, r2
 8004248:	005b      	lsls	r3, r3, #1
 800424a:	4413      	add	r3, r2
 800424c:	00db      	lsls	r3, r3, #3
 800424e:	4403      	add	r3, r0
 8004250:	3308      	adds	r3, #8
 8004252:	6019      	str	r1, [r3, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8004254:	4b09      	ldr	r3, [pc, #36]	; (800427c <HW_TS_Start+0x100>)
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	22ff      	movs	r2, #255	; 0xff
 800425a:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 800425c:	2003      	movs	r0, #3
 800425e:	f7fc fd7e 	bl	8000d5e <HAL_NVIC_EnableIRQ>
 8004262:	697b      	ldr	r3, [r7, #20]
 8004264:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004266:	68bb      	ldr	r3, [r7, #8]
 8004268:	f383 8810 	msr	PRIMASK, r3
}
 800426c:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 800426e:	bf00      	nop
}
 8004270:	3718      	adds	r7, #24
 8004272:	46bd      	mov	sp, r7
 8004274:	bd80      	pop	{r7, pc}
 8004276:	bf00      	nop
 8004278:	20000294 	.word	0x20000294
 800427c:	20000c84 	.word	0x20000c84
 8004280:	20000324 	.word	0x20000324
 8004284:	20000325 	.word	0x20000325

08004288 <HW_TS_RTC_Int_AppNot>:

  return (return_value);
}

__weak void HW_TS_RTC_Int_AppNot(uint32_t TimerProcessID, uint8_t TimerID, HW_TS_pTimerCb_t pTimerCallBack)
{
 8004288:	b580      	push	{r7, lr}
 800428a:	b084      	sub	sp, #16
 800428c:	af00      	add	r7, sp, #0
 800428e:	60f8      	str	r0, [r7, #12]
 8004290:	460b      	mov	r3, r1
 8004292:	607a      	str	r2, [r7, #4]
 8004294:	72fb      	strb	r3, [r7, #11]
  pTimerCallBack();
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	4798      	blx	r3

  return;
 800429a:	bf00      	nop
}
 800429c:	3710      	adds	r7, #16
 800429e:	46bd      	mov	sp, r7
 80042a0:	bd80      	pop	{r7, pc}

080042a2 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 80042a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80042a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80042a6:	3304      	adds	r3, #4

080042a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80042a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80042aa:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 80042ac:	d3f9      	bcc.n	80042a2 <CopyDataInit>
  bx lr
 80042ae:	4770      	bx	lr

080042b0 <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 80042b0:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 80042b2:	3004      	adds	r0, #4

080042b4 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 80042b4:	4288      	cmp	r0, r1
  bcc FillZerobss
 80042b6:	d3fb      	bcc.n	80042b0 <FillZerobss>
  bx lr
 80042b8:	4770      	bx	lr
	...

080042bc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80042bc:	480c      	ldr	r0, [pc, #48]	; (80042f0 <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 80042be:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80042c0:	f000 f8d0 	bl	8004464 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 80042c4:	480b      	ldr	r0, [pc, #44]	; (80042f4 <LoopForever+0x8>)
 80042c6:	490c      	ldr	r1, [pc, #48]	; (80042f8 <LoopForever+0xc>)
 80042c8:	4a0c      	ldr	r2, [pc, #48]	; (80042fc <LoopForever+0x10>)
 80042ca:	2300      	movs	r3, #0
 80042cc:	f7ff ffec 	bl	80042a8 <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 80042d0:	480b      	ldr	r0, [pc, #44]	; (8004300 <LoopForever+0x14>)
 80042d2:	490c      	ldr	r1, [pc, #48]	; (8004304 <LoopForever+0x18>)
 80042d4:	2300      	movs	r3, #0
 80042d6:	f7ff ffed 	bl	80042b4 <LoopFillZerobss>
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 80042da:	480b      	ldr	r0, [pc, #44]	; (8004308 <LoopForever+0x1c>)
 80042dc:	490b      	ldr	r1, [pc, #44]	; (800430c <LoopForever+0x20>)
 80042de:	2300      	movs	r3, #0
 80042e0:	f7ff ffe8 	bl	80042b4 <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80042e4:	f006 fc86 	bl	800abf4 <__libc_init_array>
/* Call the application s entry point.*/
	bl	main
 80042e8:	f005 f944 	bl	8009574 <main>

080042ec <LoopForever>:

LoopForever:
  b LoopForever
 80042ec:	e7fe      	b.n	80042ec <LoopForever>
 80042ee:	0000      	.short	0x0000
  ldr   r0, =_estack
 80042f0:	20008000 	.word	0x20008000
  INIT_DATA _sdata, _edata, _sidata
 80042f4:	20000004 	.word	0x20000004
 80042f8:	200001d8 	.word	0x200001d8
 80042fc:	0800dba0 	.word	0x0800dba0
  INIT_BSS _sbss, _ebss
 8004300:	20000200 	.word	0x20000200
 8004304:	20000e30 	.word	0x20000e30
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8004308:	200301e4 	.word	0x200301e4
 800430c:	20030a52 	.word	0x20030a52

08004310 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8004310:	e7fe      	b.n	8004310 <ADC1_IRQHandler>

08004312 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004312:	b480      	push	{r7}
 8004314:	af00      	add	r7, sp, #0
	return 1;
 8004316:	2301      	movs	r3, #1
}
 8004318:	4618      	mov	r0, r3
 800431a:	46bd      	mov	sp, r7
 800431c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004320:	4770      	bx	lr

08004322 <_kill>:

int _kill(int pid, int sig)
{
 8004322:	b580      	push	{r7, lr}
 8004324:	b082      	sub	sp, #8
 8004326:	af00      	add	r7, sp, #0
 8004328:	6078      	str	r0, [r7, #4]
 800432a:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800432c:	f006 fc5c 	bl	800abe8 <__errno>
 8004330:	4603      	mov	r3, r0
 8004332:	2216      	movs	r2, #22
 8004334:	601a      	str	r2, [r3, #0]
	return -1;
 8004336:	f04f 33ff 	mov.w	r3, #4294967295
}
 800433a:	4618      	mov	r0, r3
 800433c:	3708      	adds	r7, #8
 800433e:	46bd      	mov	sp, r7
 8004340:	bd80      	pop	{r7, pc}

08004342 <_exit>:

void _exit (int status)
{
 8004342:	b580      	push	{r7, lr}
 8004344:	b082      	sub	sp, #8
 8004346:	af00      	add	r7, sp, #0
 8004348:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800434a:	f04f 31ff 	mov.w	r1, #4294967295
 800434e:	6878      	ldr	r0, [r7, #4]
 8004350:	f7ff ffe7 	bl	8004322 <_kill>
	while (1) {}		/* Make sure we hang here */
 8004354:	e7fe      	b.n	8004354 <_exit+0x12>

08004356 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004356:	b580      	push	{r7, lr}
 8004358:	b086      	sub	sp, #24
 800435a:	af00      	add	r7, sp, #0
 800435c:	60f8      	str	r0, [r7, #12]
 800435e:	60b9      	str	r1, [r7, #8]
 8004360:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004362:	2300      	movs	r3, #0
 8004364:	617b      	str	r3, [r7, #20]
 8004366:	e00a      	b.n	800437e <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8004368:	f3af 8000 	nop.w
 800436c:	4601      	mov	r1, r0
 800436e:	68bb      	ldr	r3, [r7, #8]
 8004370:	1c5a      	adds	r2, r3, #1
 8004372:	60ba      	str	r2, [r7, #8]
 8004374:	b2ca      	uxtb	r2, r1
 8004376:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004378:	697b      	ldr	r3, [r7, #20]
 800437a:	3301      	adds	r3, #1
 800437c:	617b      	str	r3, [r7, #20]
 800437e:	697a      	ldr	r2, [r7, #20]
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	429a      	cmp	r2, r3
 8004384:	dbf0      	blt.n	8004368 <_read+0x12>
	}

return len;
 8004386:	687b      	ldr	r3, [r7, #4]
}
 8004388:	4618      	mov	r0, r3
 800438a:	3718      	adds	r7, #24
 800438c:	46bd      	mov	sp, r7
 800438e:	bd80      	pop	{r7, pc}

08004390 <_close>:
	}
	return len;
}

int _close(int file)
{
 8004390:	b480      	push	{r7}
 8004392:	b083      	sub	sp, #12
 8004394:	af00      	add	r7, sp, #0
 8004396:	6078      	str	r0, [r7, #4]
	return -1;
 8004398:	f04f 33ff 	mov.w	r3, #4294967295
}
 800439c:	4618      	mov	r0, r3
 800439e:	370c      	adds	r7, #12
 80043a0:	46bd      	mov	sp, r7
 80043a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a6:	4770      	bx	lr

080043a8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80043a8:	b480      	push	{r7}
 80043aa:	b083      	sub	sp, #12
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	6078      	str	r0, [r7, #4]
 80043b0:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80043b2:	683b      	ldr	r3, [r7, #0]
 80043b4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80043b8:	605a      	str	r2, [r3, #4]
	return 0;
 80043ba:	2300      	movs	r3, #0
}
 80043bc:	4618      	mov	r0, r3
 80043be:	370c      	adds	r7, #12
 80043c0:	46bd      	mov	sp, r7
 80043c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c6:	4770      	bx	lr

080043c8 <_isatty>:

int _isatty(int file)
{
 80043c8:	b480      	push	{r7}
 80043ca:	b083      	sub	sp, #12
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	6078      	str	r0, [r7, #4]
	return 1;
 80043d0:	2301      	movs	r3, #1
}
 80043d2:	4618      	mov	r0, r3
 80043d4:	370c      	adds	r7, #12
 80043d6:	46bd      	mov	sp, r7
 80043d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043dc:	4770      	bx	lr

080043de <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80043de:	b480      	push	{r7}
 80043e0:	b085      	sub	sp, #20
 80043e2:	af00      	add	r7, sp, #0
 80043e4:	60f8      	str	r0, [r7, #12]
 80043e6:	60b9      	str	r1, [r7, #8]
 80043e8:	607a      	str	r2, [r7, #4]
	return 0;
 80043ea:	2300      	movs	r3, #0
}
 80043ec:	4618      	mov	r0, r3
 80043ee:	3714      	adds	r7, #20
 80043f0:	46bd      	mov	sp, r7
 80043f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f6:	4770      	bx	lr

080043f8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80043f8:	b580      	push	{r7, lr}
 80043fa:	b086      	sub	sp, #24
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004400:	4a14      	ldr	r2, [pc, #80]	; (8004454 <_sbrk+0x5c>)
 8004402:	4b15      	ldr	r3, [pc, #84]	; (8004458 <_sbrk+0x60>)
 8004404:	1ad3      	subs	r3, r2, r3
 8004406:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004408:	697b      	ldr	r3, [r7, #20]
 800440a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800440c:	4b13      	ldr	r3, [pc, #76]	; (800445c <_sbrk+0x64>)
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	2b00      	cmp	r3, #0
 8004412:	d102      	bne.n	800441a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004414:	4b11      	ldr	r3, [pc, #68]	; (800445c <_sbrk+0x64>)
 8004416:	4a12      	ldr	r2, [pc, #72]	; (8004460 <_sbrk+0x68>)
 8004418:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800441a:	4b10      	ldr	r3, [pc, #64]	; (800445c <_sbrk+0x64>)
 800441c:	681a      	ldr	r2, [r3, #0]
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	4413      	add	r3, r2
 8004422:	693a      	ldr	r2, [r7, #16]
 8004424:	429a      	cmp	r2, r3
 8004426:	d207      	bcs.n	8004438 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004428:	f006 fbde 	bl	800abe8 <__errno>
 800442c:	4603      	mov	r3, r0
 800442e:	220c      	movs	r2, #12
 8004430:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004432:	f04f 33ff 	mov.w	r3, #4294967295
 8004436:	e009      	b.n	800444c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004438:	4b08      	ldr	r3, [pc, #32]	; (800445c <_sbrk+0x64>)
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800443e:	4b07      	ldr	r3, [pc, #28]	; (800445c <_sbrk+0x64>)
 8004440:	681a      	ldr	r2, [r3, #0]
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	4413      	add	r3, r2
 8004446:	4a05      	ldr	r2, [pc, #20]	; (800445c <_sbrk+0x64>)
 8004448:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800444a:	68fb      	ldr	r3, [r7, #12]
}
 800444c:	4618      	mov	r0, r3
 800444e:	3718      	adds	r7, #24
 8004450:	46bd      	mov	sp, r7
 8004452:	bd80      	pop	{r7, pc}
 8004454:	20008000 	.word	0x20008000
 8004458:	00000400 	.word	0x00000400
 800445c:	20000334 	.word	0x20000334
 8004460:	20000e30 	.word	0x20000e30

08004464 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004464:	b480      	push	{r7}
 8004466:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
 8004468:	4b22      	ldr	r3, [pc, #136]	; (80044f4 <SystemInit+0x90>)
 800446a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800446e:	4a21      	ldr	r2, [pc, #132]	; (80044f4 <SystemInit+0x90>)
 8004470:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004474:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8004478:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004482:	f043 0301 	orr.w	r3, r3, #1
 8004486:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8004488:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800448c:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8004490:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8004492:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004496:	681a      	ldr	r2, [r3, #0]
 8004498:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800449c:	4b16      	ldr	r3, [pc, #88]	; (80044f8 <SystemInit+0x94>)
 800449e:	4013      	ands	r3, r2
 80044a0:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 80044a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80044a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80044aa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80044ae:	f023 0305 	bic.w	r3, r3, #5
 80044b2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  
  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 80044b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80044ba:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80044be:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80044c2:	f023 0301 	bic.w	r3, r3, #1
 80044c6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
    
  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 80044ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80044ce:	4a0b      	ldr	r2, [pc, #44]	; (80044fc <SystemInit+0x98>)
 80044d0:	60da      	str	r2, [r3, #12]
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
#endif
  
  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80044d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80044dc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80044e0:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80044e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80044e6:	2200      	movs	r2, #0
 80044e8:	619a      	str	r2, [r3, #24]
}
 80044ea:	bf00      	nop
 80044ec:	46bd      	mov	sp, r7
 80044ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f2:	4770      	bx	lr
 80044f4:	e000ed00 	.word	0xe000ed00
 80044f8:	faf6fefb 	.word	0xfaf6fefb
 80044fc:	22041000 	.word	0x22041000

08004500 <SystemCoreClockUpdate>:
  *
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8004500:	b480      	push	{r7}
 8004502:	b087      	sub	sp, #28
 8004504:	af00      	add	r7, sp, #0
  uint32_t tmp, msirange, pllvco, pllr, pllsource , pllm;

  /* Get MSI Range frequency--------------------------------------------------*/

  /*MSI frequency range in Hz*/
  msirange = MSIRangeTable[(RCC->CR & RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos];
 8004506:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	091b      	lsrs	r3, r3, #4
 800450e:	f003 030f 	and.w	r3, r3, #15
 8004512:	4a47      	ldr	r2, [pc, #284]	; (8004630 <SystemCoreClockUpdate+0x130>)
 8004514:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004518:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800451a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800451e:	689b      	ldr	r3, [r3, #8]
 8004520:	f003 030c 	and.w	r3, r3, #12
 8004524:	2b0c      	cmp	r3, #12
 8004526:	d867      	bhi.n	80045f8 <SystemCoreClockUpdate+0xf8>
 8004528:	a201      	add	r2, pc, #4	; (adr r2, 8004530 <SystemCoreClockUpdate+0x30>)
 800452a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800452e:	bf00      	nop
 8004530:	08004565 	.word	0x08004565
 8004534:	080045f9 	.word	0x080045f9
 8004538:	080045f9 	.word	0x080045f9
 800453c:	080045f9 	.word	0x080045f9
 8004540:	0800456d 	.word	0x0800456d
 8004544:	080045f9 	.word	0x080045f9
 8004548:	080045f9 	.word	0x080045f9
 800454c:	080045f9 	.word	0x080045f9
 8004550:	08004575 	.word	0x08004575
 8004554:	080045f9 	.word	0x080045f9
 8004558:	080045f9 	.word	0x080045f9
 800455c:	080045f9 	.word	0x080045f9
 8004560:	0800457d 	.word	0x0800457d
  {
    case 0x00:   /* MSI used as system clock source */
      SystemCoreClock = msirange;
 8004564:	4a33      	ldr	r2, [pc, #204]	; (8004634 <SystemCoreClockUpdate+0x134>)
 8004566:	693b      	ldr	r3, [r7, #16]
 8004568:	6013      	str	r3, [r2, #0]
      break;
 800456a:	e049      	b.n	8004600 <SystemCoreClockUpdate+0x100>

    case 0x04:  /* HSI used as system clock source */
      /* HSI used as system clock source */
        SystemCoreClock = HSI_VALUE;
 800456c:	4b31      	ldr	r3, [pc, #196]	; (8004634 <SystemCoreClockUpdate+0x134>)
 800456e:	4a32      	ldr	r2, [pc, #200]	; (8004638 <SystemCoreClockUpdate+0x138>)
 8004570:	601a      	str	r2, [r3, #0]
      break;
 8004572:	e045      	b.n	8004600 <SystemCoreClockUpdate+0x100>

    case 0x08:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 8004574:	4b2f      	ldr	r3, [pc, #188]	; (8004634 <SystemCoreClockUpdate+0x134>)
 8004576:	4a31      	ldr	r2, [pc, #196]	; (800463c <SystemCoreClockUpdate+0x13c>)
 8004578:	601a      	str	r2, [r3, #0]
      break;
 800457a:	e041      	b.n	8004600 <SystemCoreClockUpdate+0x100>

    case 0x0C: /* PLL used as system clock  source */
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLR
         */
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800457c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004580:	68db      	ldr	r3, [r3, #12]
 8004582:	f003 0303 	and.w	r3, r3, #3
 8004586:	60fb      	str	r3, [r7, #12]
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1UL ;
 8004588:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800458c:	68db      	ldr	r3, [r3, #12]
 800458e:	091b      	lsrs	r3, r3, #4
 8004590:	f003 0307 	and.w	r3, r3, #7
 8004594:	3301      	adds	r3, #1
 8004596:	60bb      	str	r3, [r7, #8]

      if(pllsource == 0x02UL) /* HSI used as PLL clock source */
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	2b02      	cmp	r3, #2
 800459c:	d105      	bne.n	80045aa <SystemCoreClockUpdate+0xaa>
      {
        pllvco = (HSI_VALUE / pllm);
 800459e:	4a26      	ldr	r2, [pc, #152]	; (8004638 <SystemCoreClockUpdate+0x138>)
 80045a0:	68bb      	ldr	r3, [r7, #8]
 80045a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80045a6:	617b      	str	r3, [r7, #20]
 80045a8:	e00d      	b.n	80045c6 <SystemCoreClockUpdate+0xc6>
      }
      else if(pllsource == 0x03UL) /* HSE used as PLL clock source */
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	2b03      	cmp	r3, #3
 80045ae:	d105      	bne.n	80045bc <SystemCoreClockUpdate+0xbc>
      {
        pllvco = (HSE_VALUE / pllm);
 80045b0:	4a22      	ldr	r2, [pc, #136]	; (800463c <SystemCoreClockUpdate+0x13c>)
 80045b2:	68bb      	ldr	r3, [r7, #8]
 80045b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80045b8:	617b      	str	r3, [r7, #20]
 80045ba:	e004      	b.n	80045c6 <SystemCoreClockUpdate+0xc6>
      }
      else /* MSI used as PLL clock source */
      {
        pllvco = (msirange / pllm);
 80045bc:	693a      	ldr	r2, [r7, #16]
 80045be:	68bb      	ldr	r3, [r7, #8]
 80045c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80045c4:	617b      	str	r3, [r7, #20]
      }
      
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80045c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80045ca:	68db      	ldr	r3, [r3, #12]
 80045cc:	0a1b      	lsrs	r3, r3, #8
 80045ce:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80045d2:	697b      	ldr	r3, [r7, #20]
 80045d4:	fb02 f303 	mul.w	r3, r2, r3
 80045d8:	617b      	str	r3, [r7, #20]
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1UL);
 80045da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80045de:	68db      	ldr	r3, [r3, #12]
 80045e0:	0f5b      	lsrs	r3, r3, #29
 80045e2:	f003 0307 	and.w	r3, r3, #7
 80045e6:	3301      	adds	r3, #1
 80045e8:	607b      	str	r3, [r7, #4]
      
      SystemCoreClock = pllvco/pllr;
 80045ea:	697a      	ldr	r2, [r7, #20]
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80045f2:	4a10      	ldr	r2, [pc, #64]	; (8004634 <SystemCoreClockUpdate+0x134>)
 80045f4:	6013      	str	r3, [r2, #0]
      break;
 80045f6:	e003      	b.n	8004600 <SystemCoreClockUpdate+0x100>

    default:
      SystemCoreClock = msirange;
 80045f8:	4a0e      	ldr	r2, [pc, #56]	; (8004634 <SystemCoreClockUpdate+0x134>)
 80045fa:	693b      	ldr	r3, [r7, #16]
 80045fc:	6013      	str	r3, [r2, #0]
      break;
 80045fe:	bf00      	nop
  }
  
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK1 prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8004600:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004604:	689b      	ldr	r3, [r3, #8]
 8004606:	091b      	lsrs	r3, r3, #4
 8004608:	f003 030f 	and.w	r3, r3, #15
 800460c:	4a0c      	ldr	r2, [pc, #48]	; (8004640 <SystemCoreClockUpdate+0x140>)
 800460e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004612:	603b      	str	r3, [r7, #0]
  /* HCLK clock frequency */
  SystemCoreClock = SystemCoreClock / tmp;
 8004614:	4b07      	ldr	r3, [pc, #28]	; (8004634 <SystemCoreClockUpdate+0x134>)
 8004616:	681a      	ldr	r2, [r3, #0]
 8004618:	683b      	ldr	r3, [r7, #0]
 800461a:	fbb2 f3f3 	udiv	r3, r2, r3
 800461e:	4a05      	ldr	r2, [pc, #20]	; (8004634 <SystemCoreClockUpdate+0x134>)
 8004620:	6013      	str	r3, [r2, #0]

}
 8004622:	bf00      	nop
 8004624:	371c      	adds	r7, #28
 8004626:	46bd      	mov	sp, r7
 8004628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800462c:	4770      	bx	lr
 800462e:	bf00      	nop
 8004630:	0800d574 	.word	0x0800d574
 8004634:	20000004 	.word	0x20000004
 8004638:	00f42400 	.word	0x00f42400
 800463c:	01e84800 	.word	0x01e84800
 8004640:	0800d534 	.word	0x0800d534

08004644 <UTIL_SEQ_Run>:
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 *
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 8004644:	b580      	push	{r7, lr}
 8004646:	b090      	sub	sp, #64	; 0x40
 8004648:	af00      	add	r7, sp, #0
 800464a:	6078      	str	r0, [r7, #4]
  /*
   * When this function is nested, the mask to be applied cannot be larger than the first call
   * The mask is always getting smaller and smaller
   * A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 800464c:	4b73      	ldr	r3, [pc, #460]	; (800481c <UTIL_SEQ_Run+0x1d8>)
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	62bb      	str	r3, [r7, #40]	; 0x28
  SuperMask &= Mask_bm;
 8004652:	4b72      	ldr	r3, [pc, #456]	; (800481c <UTIL_SEQ_Run+0x1d8>)
 8004654:	681a      	ldr	r2, [r3, #0]
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	4013      	ands	r3, r2
 800465a:	4a70      	ldr	r2, [pc, #448]	; (800481c <UTIL_SEQ_Run+0x1d8>)
 800465c:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  local_taskset = TaskSet;
 800465e:	4b70      	ldr	r3, [pc, #448]	; (8004820 <UTIL_SEQ_Run+0x1dc>)
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	63bb      	str	r3, [r7, #56]	; 0x38
  local_evtset = EvtSet;
 8004664:	4b6f      	ldr	r3, [pc, #444]	; (8004824 <UTIL_SEQ_Run+0x1e0>)
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	637b      	str	r3, [r7, #52]	; 0x34
  local_taskmask = TaskMask;
 800466a:	4b6f      	ldr	r3, [pc, #444]	; (8004828 <UTIL_SEQ_Run+0x1e4>)
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	633b      	str	r3, [r7, #48]	; 0x30
  local_evtwaited =  EvtWaited;
 8004670:	4b6e      	ldr	r3, [pc, #440]	; (800482c <UTIL_SEQ_Run+0x1e8>)
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	62fb      	str	r3, [r7, #44]	; 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 8004676:	e08d      	b.n	8004794 <UTIL_SEQ_Run+0x150>
  {
    counter = 0U;
 8004678:	2300      	movs	r3, #0
 800467a:	63fb      	str	r3, [r7, #60]	; 0x3c
    /*
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 800467c:	e002      	b.n	8004684 <UTIL_SEQ_Run+0x40>
    {
      counter++;
 800467e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004680:	3301      	adds	r3, #1
 8004682:	63fb      	str	r3, [r7, #60]	; 0x3c
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 8004684:	4a6a      	ldr	r2, [pc, #424]	; (8004830 <UTIL_SEQ_Run+0x1ec>)
 8004686:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004688:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800468c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800468e:	401a      	ands	r2, r3
 8004690:	4b62      	ldr	r3, [pc, #392]	; (800481c <UTIL_SEQ_Run+0x1d8>)
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	4013      	ands	r3, r2
 8004696:	2b00      	cmp	r3, #0
 8004698:	d0f1      	beq.n	800467e <UTIL_SEQ_Run+0x3a>
    }

    current_task_set = TaskPrio[counter].priority & local_taskmask & SuperMask;
 800469a:	4a65      	ldr	r2, [pc, #404]	; (8004830 <UTIL_SEQ_Run+0x1ec>)
 800469c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800469e:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 80046a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046a4:	401a      	ands	r2, r3
 80046a6:	4b5d      	ldr	r3, [pc, #372]	; (800481c <UTIL_SEQ_Run+0x1d8>)
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	4013      	ands	r3, r2
 80046ac:	627b      	str	r3, [r7, #36]	; 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reinitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 80046ae:	4a60      	ldr	r2, [pc, #384]	; (8004830 <UTIL_SEQ_Run+0x1ec>)
 80046b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80046b2:	00db      	lsls	r3, r3, #3
 80046b4:	4413      	add	r3, r2
 80046b6:	685a      	ldr	r2, [r3, #4]
 80046b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046ba:	4013      	ands	r3, r2
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d106      	bne.n	80046ce <UTIL_SEQ_Run+0x8a>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 80046c0:	4a5b      	ldr	r2, [pc, #364]	; (8004830 <UTIL_SEQ_Run+0x1ec>)
 80046c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80046c4:	00db      	lsls	r3, r3, #3
 80046c6:	4413      	add	r3, r2
 80046c8:	f04f 32ff 	mov.w	r2, #4294967295
 80046cc:	605a      	str	r2, [r3, #4]
  /*
   * Read the flag index of the task to be executed
	 * Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 * before task execution.
	 */
    CurrentTaskIdx = SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin);
 80046ce:	4a58      	ldr	r2, [pc, #352]	; (8004830 <UTIL_SEQ_Run+0x1ec>)
 80046d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80046d2:	00db      	lsls	r3, r3, #3
 80046d4:	4413      	add	r3, r2
 80046d6:	685a      	ldr	r2, [r3, #4]
 80046d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046da:	4013      	ands	r3, r2
 80046dc:	4618      	mov	r0, r3
 80046de:	f000 f9b3 	bl	8004a48 <SEQ_BitPosition>
 80046e2:	4603      	mov	r3, r0
 80046e4:	461a      	mov	r2, r3
 80046e6:	4b53      	ldr	r3, [pc, #332]	; (8004834 <UTIL_SEQ_Run+0x1f0>)
 80046e8:	601a      	str	r2, [r3, #0]
    /*
     * remove from the roun_robin mask the task that has been selected to be executed
     */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 80046ea:	4a51      	ldr	r2, [pc, #324]	; (8004830 <UTIL_SEQ_Run+0x1ec>)
 80046ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80046ee:	00db      	lsls	r3, r3, #3
 80046f0:	4413      	add	r3, r2
 80046f2:	685a      	ldr	r2, [r3, #4]
 80046f4:	4b4f      	ldr	r3, [pc, #316]	; (8004834 <UTIL_SEQ_Run+0x1f0>)
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	2101      	movs	r1, #1
 80046fa:	fa01 f303 	lsl.w	r3, r1, r3
 80046fe:	43db      	mvns	r3, r3
 8004700:	401a      	ands	r2, r3
 8004702:	494b      	ldr	r1, [pc, #300]	; (8004830 <UTIL_SEQ_Run+0x1ec>)
 8004704:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004706:	00db      	lsls	r3, r3, #3
 8004708:	440b      	add	r3, r1
 800470a:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800470c:	f3ef 8310 	mrs	r3, PRIMASK
 8004710:	61bb      	str	r3, [r7, #24]
  return(result);
 8004712:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8004714:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 8004716:	b672      	cpsid	i
}
 8004718:	bf00      	nop
    /* remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 800471a:	4b46      	ldr	r3, [pc, #280]	; (8004834 <UTIL_SEQ_Run+0x1f0>)
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	2201      	movs	r2, #1
 8004720:	fa02 f303 	lsl.w	r3, r2, r3
 8004724:	43da      	mvns	r2, r3
 8004726:	4b3e      	ldr	r3, [pc, #248]	; (8004820 <UTIL_SEQ_Run+0x1dc>)
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	4013      	ands	r3, r2
 800472c:	4a3c      	ldr	r2, [pc, #240]	; (8004820 <UTIL_SEQ_Run+0x1dc>)
 800472e:	6013      	str	r3, [r2, #0]
    /* remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 8004730:	2302      	movs	r3, #2
 8004732:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004734:	e013      	b.n	800475e <UTIL_SEQ_Run+0x11a>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 8004736:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004738:	3b01      	subs	r3, #1
 800473a:	4a3d      	ldr	r2, [pc, #244]	; (8004830 <UTIL_SEQ_Run+0x1ec>)
 800473c:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 8004740:	4b3c      	ldr	r3, [pc, #240]	; (8004834 <UTIL_SEQ_Run+0x1f0>)
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	2201      	movs	r2, #1
 8004746:	fa02 f303 	lsl.w	r3, r2, r3
 800474a:	43da      	mvns	r2, r3
 800474c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800474e:	3b01      	subs	r3, #1
 8004750:	400a      	ands	r2, r1
 8004752:	4937      	ldr	r1, [pc, #220]	; (8004830 <UTIL_SEQ_Run+0x1ec>)
 8004754:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 8004758:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800475a:	3b01      	subs	r3, #1
 800475c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800475e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004760:	2b00      	cmp	r3, #0
 8004762:	d1e8      	bne.n	8004736 <UTIL_SEQ_Run+0xf2>
 8004764:	6a3b      	ldr	r3, [r7, #32]
 8004766:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004768:	697b      	ldr	r3, [r7, #20]
 800476a:	f383 8810 	msr	PRIMASK, r3
}
 800476e:	bf00      	nop
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );

    /* Execute the task */
    TaskCb[CurrentTaskIdx]( );
 8004770:	4b30      	ldr	r3, [pc, #192]	; (8004834 <UTIL_SEQ_Run+0x1f0>)
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	4a30      	ldr	r2, [pc, #192]	; (8004838 <UTIL_SEQ_Run+0x1f4>)
 8004776:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800477a:	4798      	blx	r3

    local_taskset = TaskSet;
 800477c:	4b28      	ldr	r3, [pc, #160]	; (8004820 <UTIL_SEQ_Run+0x1dc>)
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	63bb      	str	r3, [r7, #56]	; 0x38
    local_evtset = EvtSet;
 8004782:	4b28      	ldr	r3, [pc, #160]	; (8004824 <UTIL_SEQ_Run+0x1e0>)
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	637b      	str	r3, [r7, #52]	; 0x34
    local_taskmask = TaskMask;
 8004788:	4b27      	ldr	r3, [pc, #156]	; (8004828 <UTIL_SEQ_Run+0x1e4>)
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	633b      	str	r3, [r7, #48]	; 0x30
    local_evtwaited = EvtWaited;
 800478e:	4b27      	ldr	r3, [pc, #156]	; (800482c <UTIL_SEQ_Run+0x1e8>)
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	62fb      	str	r3, [r7, #44]	; 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 8004794:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004796:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004798:	401a      	ands	r2, r3
 800479a:	4b20      	ldr	r3, [pc, #128]	; (800481c <UTIL_SEQ_Run+0x1d8>)
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	4013      	ands	r3, r2
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d005      	beq.n	80047b0 <UTIL_SEQ_Run+0x16c>
 80047a4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80047a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047a8:	4013      	ands	r3, r2
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	f43f af64 	beq.w	8004678 <UTIL_SEQ_Run+0x34>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 80047b0:	4b20      	ldr	r3, [pc, #128]	; (8004834 <UTIL_SEQ_Run+0x1f0>)
 80047b2:	f04f 32ff 	mov.w	r2, #4294967295
 80047b6:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 80047b8:	f000 f938 	bl	8004a2c <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80047bc:	f3ef 8310 	mrs	r3, PRIMASK
 80047c0:	613b      	str	r3, [r7, #16]
  return(result);
 80047c2:	693b      	ldr	r3, [r7, #16]

  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 80047c4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 80047c6:	b672      	cpsid	i
}
 80047c8:	bf00      	nop
  local_taskset = TaskSet;
 80047ca:	4b15      	ldr	r3, [pc, #84]	; (8004820 <UTIL_SEQ_Run+0x1dc>)
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	63bb      	str	r3, [r7, #56]	; 0x38
  local_evtset = EvtSet;
 80047d0:	4b14      	ldr	r3, [pc, #80]	; (8004824 <UTIL_SEQ_Run+0x1e0>)
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	637b      	str	r3, [r7, #52]	; 0x34
  local_taskmask = TaskMask;
 80047d6:	4b14      	ldr	r3, [pc, #80]	; (8004828 <UTIL_SEQ_Run+0x1e4>)
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	633b      	str	r3, [r7, #48]	; 0x30
  if ((local_taskset & local_taskmask & SuperMask) == 0U)
 80047dc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80047de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047e0:	401a      	ands	r2, r3
 80047e2:	4b0e      	ldr	r3, [pc, #56]	; (800481c <UTIL_SEQ_Run+0x1d8>)
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	4013      	ands	r3, r2
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d107      	bne.n	80047fc <UTIL_SEQ_Run+0x1b8>
  {
    if ((local_evtset & EvtWaited)== 0U)
 80047ec:	4b0f      	ldr	r3, [pc, #60]	; (800482c <UTIL_SEQ_Run+0x1e8>)
 80047ee:	681a      	ldr	r2, [r3, #0]
 80047f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047f2:	4013      	ands	r3, r2
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d101      	bne.n	80047fc <UTIL_SEQ_Run+0x1b8>
    {
      UTIL_SEQ_Idle( );
 80047f8:	f003 fe24 	bl	8008444 <UTIL_SEQ_Idle>
 80047fc:	69fb      	ldr	r3, [r7, #28]
 80047fe:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	f383 8810 	msr	PRIMASK, r3
}
 8004806:	bf00      	nop
    }
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );

  UTIL_SEQ_PostIdle( );
 8004808:	f000 f917 	bl	8004a3a <UTIL_SEQ_PostIdle>

  /* restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 800480c:	4a03      	ldr	r2, [pc, #12]	; (800481c <UTIL_SEQ_Run+0x1d8>)
 800480e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004810:	6013      	str	r3, [r2, #0]

  return;
 8004812:	bf00      	nop
}
 8004814:	3740      	adds	r7, #64	; 0x40
 8004816:	46bd      	mov	sp, r7
 8004818:	bd80      	pop	{r7, pc}
 800481a:	bf00      	nop
 800481c:	2000000c 	.word	0x2000000c
 8004820:	20000338 	.word	0x20000338
 8004824:	2000033c 	.word	0x2000033c
 8004828:	20000008 	.word	0x20000008
 800482c:	20000340 	.word	0x20000340
 8004830:	200003c8 	.word	0x200003c8
 8004834:	20000344 	.word	0x20000344
 8004838:	20000348 	.word	0x20000348

0800483c <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 800483c:	b580      	push	{r7, lr}
 800483e:	b088      	sub	sp, #32
 8004840:	af00      	add	r7, sp, #0
 8004842:	60f8      	str	r0, [r7, #12]
 8004844:	60b9      	str	r1, [r7, #8]
 8004846:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004848:	f3ef 8310 	mrs	r3, PRIMASK
 800484c:	617b      	str	r3, [r7, #20]
  return(result);
 800484e:	697b      	ldr	r3, [r7, #20]
  (void)Flags;
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 8004850:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 8004852:	b672      	cpsid	i
}
 8004854:	bf00      	nop

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 8004856:	68f8      	ldr	r0, [r7, #12]
 8004858:	f000 f8f6 	bl	8004a48 <SEQ_BitPosition>
 800485c:	4603      	mov	r3, r0
 800485e:	4619      	mov	r1, r3
 8004860:	4a06      	ldr	r2, [pc, #24]	; (800487c <UTIL_SEQ_RegTask+0x40>)
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8004868:	69fb      	ldr	r3, [r7, #28]
 800486a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800486c:	69bb      	ldr	r3, [r7, #24]
 800486e:	f383 8810 	msr	PRIMASK, r3
}
 8004872:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 8004874:	bf00      	nop
}
 8004876:	3720      	adds	r7, #32
 8004878:	46bd      	mov	sp, r7
 800487a:	bd80      	pop	{r7, pc}
 800487c:	20000348 	.word	0x20000348

08004880 <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 8004880:	b480      	push	{r7}
 8004882:	b087      	sub	sp, #28
 8004884:	af00      	add	r7, sp, #0
 8004886:	6078      	str	r0, [r7, #4]
 8004888:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800488a:	f3ef 8310 	mrs	r3, PRIMASK
 800488e:	60fb      	str	r3, [r7, #12]
  return(result);
 8004890:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8004892:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8004894:	b672      	cpsid	i
}
 8004896:	bf00      	nop

  TaskSet |= TaskId_bm;
 8004898:	4b0d      	ldr	r3, [pc, #52]	; (80048d0 <UTIL_SEQ_SetTask+0x50>)
 800489a:	681a      	ldr	r2, [r3, #0]
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	4313      	orrs	r3, r2
 80048a0:	4a0b      	ldr	r2, [pc, #44]	; (80048d0 <UTIL_SEQ_SetTask+0x50>)
 80048a2:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 80048a4:	4a0b      	ldr	r2, [pc, #44]	; (80048d4 <UTIL_SEQ_SetTask+0x54>)
 80048a6:	683b      	ldr	r3, [r7, #0]
 80048a8:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	431a      	orrs	r2, r3
 80048b0:	4908      	ldr	r1, [pc, #32]	; (80048d4 <UTIL_SEQ_SetTask+0x54>)
 80048b2:	683b      	ldr	r3, [r7, #0]
 80048b4:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 80048b8:	697b      	ldr	r3, [r7, #20]
 80048ba:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80048bc:	693b      	ldr	r3, [r7, #16]
 80048be:	f383 8810 	msr	PRIMASK, r3
}
 80048c2:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 80048c4:	bf00      	nop
}
 80048c6:	371c      	adds	r7, #28
 80048c8:	46bd      	mov	sp, r7
 80048ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ce:	4770      	bx	lr
 80048d0:	20000338 	.word	0x20000338
 80048d4:	200003c8 	.word	0x200003c8

080048d8 <UTIL_SEQ_PauseTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION();
  return _status;
}

void UTIL_SEQ_PauseTask( UTIL_SEQ_bm_t TaskId_bm )
{
 80048d8:	b480      	push	{r7}
 80048da:	b087      	sub	sp, #28
 80048dc:	af00      	add	r7, sp, #0
 80048de:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80048e0:	f3ef 8310 	mrs	r3, PRIMASK
 80048e4:	60fb      	str	r3, [r7, #12]
  return(result);
 80048e6:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 80048e8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80048ea:	b672      	cpsid	i
}
 80048ec:	bf00      	nop

  TaskMask &= (~TaskId_bm);
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	43da      	mvns	r2, r3
 80048f2:	4b08      	ldr	r3, [pc, #32]	; (8004914 <UTIL_SEQ_PauseTask+0x3c>)
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	4013      	ands	r3, r2
 80048f8:	4a06      	ldr	r2, [pc, #24]	; (8004914 <UTIL_SEQ_PauseTask+0x3c>)
 80048fa:	6013      	str	r3, [r2, #0]
 80048fc:	697b      	ldr	r3, [r7, #20]
 80048fe:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004900:	693b      	ldr	r3, [r7, #16]
 8004902:	f383 8810 	msr	PRIMASK, r3
}
 8004906:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 8004908:	bf00      	nop
}
 800490a:	371c      	adds	r7, #28
 800490c:	46bd      	mov	sp, r7
 800490e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004912:	4770      	bx	lr
 8004914:	20000008 	.word	0x20000008

08004918 <UTIL_SEQ_ResumeTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION( );
  return _status;
}

void UTIL_SEQ_ResumeTask( UTIL_SEQ_bm_t TaskId_bm )
{
 8004918:	b480      	push	{r7}
 800491a:	b087      	sub	sp, #28
 800491c:	af00      	add	r7, sp, #0
 800491e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004920:	f3ef 8310 	mrs	r3, PRIMASK
 8004924:	60fb      	str	r3, [r7, #12]
  return(result);
 8004926:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8004928:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800492a:	b672      	cpsid	i
}
 800492c:	bf00      	nop

  TaskMask |= TaskId_bm;
 800492e:	4b09      	ldr	r3, [pc, #36]	; (8004954 <UTIL_SEQ_ResumeTask+0x3c>)
 8004930:	681a      	ldr	r2, [r3, #0]
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	4313      	orrs	r3, r2
 8004936:	4a07      	ldr	r2, [pc, #28]	; (8004954 <UTIL_SEQ_ResumeTask+0x3c>)
 8004938:	6013      	str	r3, [r2, #0]
 800493a:	697b      	ldr	r3, [r7, #20]
 800493c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800493e:	693b      	ldr	r3, [r7, #16]
 8004940:	f383 8810 	msr	PRIMASK, r3
}
 8004944:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 8004946:	bf00      	nop
}
 8004948:	371c      	adds	r7, #28
 800494a:	46bd      	mov	sp, r7
 800494c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004950:	4770      	bx	lr
 8004952:	bf00      	nop
 8004954:	20000008 	.word	0x20000008

08004958 <UTIL_SEQ_SetEvt>:

void UTIL_SEQ_SetEvt( UTIL_SEQ_bm_t EvtId_bm )
{
 8004958:	b480      	push	{r7}
 800495a:	b087      	sub	sp, #28
 800495c:	af00      	add	r7, sp, #0
 800495e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004960:	f3ef 8310 	mrs	r3, PRIMASK
 8004964:	60fb      	str	r3, [r7, #12]
  return(result);
 8004966:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8004968:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800496a:	b672      	cpsid	i
}
 800496c:	bf00      	nop

  EvtSet |= EvtId_bm;
 800496e:	4b09      	ldr	r3, [pc, #36]	; (8004994 <UTIL_SEQ_SetEvt+0x3c>)
 8004970:	681a      	ldr	r2, [r3, #0]
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	4313      	orrs	r3, r2
 8004976:	4a07      	ldr	r2, [pc, #28]	; (8004994 <UTIL_SEQ_SetEvt+0x3c>)
 8004978:	6013      	str	r3, [r2, #0]
 800497a:	697b      	ldr	r3, [r7, #20]
 800497c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800497e:	693b      	ldr	r3, [r7, #16]
 8004980:	f383 8810 	msr	PRIMASK, r3
}
 8004984:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 8004986:	bf00      	nop
}
 8004988:	371c      	adds	r7, #28
 800498a:	46bd      	mov	sp, r7
 800498c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004990:	4770      	bx	lr
 8004992:	bf00      	nop
 8004994:	2000033c 	.word	0x2000033c

08004998 <UTIL_SEQ_WaitEvt>:

  return;
}

void UTIL_SEQ_WaitEvt(UTIL_SEQ_bm_t EvtId_bm)
{
 8004998:	b580      	push	{r7, lr}
 800499a:	b088      	sub	sp, #32
 800499c:	af00      	add	r7, sp, #0
 800499e:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_bm_t wait_task_idx;
  /*
   * store in local the current_task_id_bm as the global variable CurrentTaskIdx
   * may be overwritten in case there are nested call of UTIL_SEQ_Run()
   */
  current_task_idx = CurrentTaskIdx;
 80049a0:	4b1f      	ldr	r3, [pc, #124]	; (8004a20 <UTIL_SEQ_WaitEvt+0x88>)
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	61bb      	str	r3, [r7, #24]
  if(UTIL_SEQ_NOTASKRUNNING == CurrentTaskIdx)
 80049a6:	4b1e      	ldr	r3, [pc, #120]	; (8004a20 <UTIL_SEQ_WaitEvt+0x88>)
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049ae:	d102      	bne.n	80049b6 <UTIL_SEQ_WaitEvt+0x1e>
  {
    wait_task_idx = 0u;
 80049b0:	2300      	movs	r3, #0
 80049b2:	61fb      	str	r3, [r7, #28]
 80049b4:	e005      	b.n	80049c2 <UTIL_SEQ_WaitEvt+0x2a>
  }
  else
  {
    wait_task_idx = (uint32_t)1u << CurrentTaskIdx;
 80049b6:	4b1a      	ldr	r3, [pc, #104]	; (8004a20 <UTIL_SEQ_WaitEvt+0x88>)
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	2201      	movs	r2, #1
 80049bc:	fa02 f303 	lsl.w	r3, r2, r3
 80049c0:	61fb      	str	r3, [r7, #28]
  }

  /* backup the event id that was currently waited */
  event_waited_id_backup = EvtWaited;
 80049c2:	4b18      	ldr	r3, [pc, #96]	; (8004a24 <UTIL_SEQ_WaitEvt+0x8c>)
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	617b      	str	r3, [r7, #20]
  EvtWaited = EvtId_bm;
 80049c8:	4a16      	ldr	r2, [pc, #88]	; (8004a24 <UTIL_SEQ_WaitEvt+0x8c>)
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	6013      	str	r3, [r2, #0]
   * The system is waiting only for the last waited event.
   * When it will go out, it will wait again from the previous one.
   * It case it occurs while waiting for the second one, the while loop will exit immediately
   */

  while ((EvtSet & EvtId_bm) == 0U)
 80049ce:	e003      	b.n	80049d8 <UTIL_SEQ_WaitEvt+0x40>
  {
    UTIL_SEQ_EvtIdle(wait_task_idx, EvtId_bm);
 80049d0:	6879      	ldr	r1, [r7, #4]
 80049d2:	69f8      	ldr	r0, [r7, #28]
 80049d4:	f003 fd48 	bl	8008468 <UTIL_SEQ_EvtIdle>
  while ((EvtSet & EvtId_bm) == 0U)
 80049d8:	4b13      	ldr	r3, [pc, #76]	; (8004a28 <UTIL_SEQ_WaitEvt+0x90>)
 80049da:	681a      	ldr	r2, [r3, #0]
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	4013      	ands	r3, r2
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d0f5      	beq.n	80049d0 <UTIL_SEQ_WaitEvt+0x38>
  /*
   * Restore the CurrentTaskIdx that may have been modified by call of UTIL_SEQ_Run() from UTIL_SEQ_EvtIdle()
   * This is required so that a second call of UTIL_SEQ_WaitEvt() in the same process pass the correct current_task_id_bm
   * in the call of UTIL_SEQ_EvtIdle()
   */
  CurrentTaskIdx = current_task_idx;
 80049e4:	4a0e      	ldr	r2, [pc, #56]	; (8004a20 <UTIL_SEQ_WaitEvt+0x88>)
 80049e6:	69bb      	ldr	r3, [r7, #24]
 80049e8:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80049ea:	f3ef 8310 	mrs	r3, PRIMASK
 80049ee:	60bb      	str	r3, [r7, #8]
  return(result);
 80049f0:	68bb      	ldr	r3, [r7, #8]

  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 80049f2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 80049f4:	b672      	cpsid	i
}
 80049f6:	bf00      	nop

  EvtSet &= (~EvtId_bm);
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	43da      	mvns	r2, r3
 80049fc:	4b0a      	ldr	r3, [pc, #40]	; (8004a28 <UTIL_SEQ_WaitEvt+0x90>)
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	4013      	ands	r3, r2
 8004a02:	4a09      	ldr	r2, [pc, #36]	; (8004a28 <UTIL_SEQ_WaitEvt+0x90>)
 8004a04:	6013      	str	r3, [r2, #0]
 8004a06:	693b      	ldr	r3, [r7, #16]
 8004a08:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	f383 8810 	msr	PRIMASK, r3
}
 8004a10:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  EvtWaited = event_waited_id_backup;
 8004a12:	4a04      	ldr	r2, [pc, #16]	; (8004a24 <UTIL_SEQ_WaitEvt+0x8c>)
 8004a14:	697b      	ldr	r3, [r7, #20]
 8004a16:	6013      	str	r3, [r2, #0]
  return;
 8004a18:	bf00      	nop
}
 8004a1a:	3720      	adds	r7, #32
 8004a1c:	46bd      	mov	sp, r7
 8004a1e:	bd80      	pop	{r7, pc}
 8004a20:	20000344 	.word	0x20000344
 8004a24:	20000340 	.word	0x20000340
 8004a28:	2000033c 	.word	0x2000033c

08004a2c <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 8004a2c:	b480      	push	{r7}
 8004a2e:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 8004a30:	bf00      	nop
}
 8004a32:	46bd      	mov	sp, r7
 8004a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a38:	4770      	bx	lr

08004a3a <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 8004a3a:	b480      	push	{r7}
 8004a3c:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 8004a3e:	bf00      	nop
}
 8004a40:	46bd      	mov	sp, r7
 8004a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a46:	4770      	bx	lr

08004a48 <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 8004a48:	b480      	push	{r7}
 8004a4a:	b085      	sub	sp, #20
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	6078      	str	r0, [r7, #4]
uint8_t n = 0U;
 8004a50:	2300      	movs	r3, #0
 8004a52:	73fb      	strb	r3, [r7, #15]
uint32_t lvalue = Value;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	60bb      	str	r3, [r7, #8]

  if ((lvalue & 0xFFFF0000U) == 0U)  { n  = 16U; lvalue <<= 16U;  }
 8004a58:	68bb      	ldr	r3, [r7, #8]
 8004a5a:	0c1b      	lsrs	r3, r3, #16
 8004a5c:	041b      	lsls	r3, r3, #16
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d104      	bne.n	8004a6c <SEQ_BitPosition+0x24>
 8004a62:	2310      	movs	r3, #16
 8004a64:	73fb      	strb	r3, [r7, #15]
 8004a66:	68bb      	ldr	r3, [r7, #8]
 8004a68:	041b      	lsls	r3, r3, #16
 8004a6a:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xFF000000U) == 0U)  { n +=  8U; lvalue <<=  8U;  }
 8004a6c:	68bb      	ldr	r3, [r7, #8]
 8004a6e:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d105      	bne.n	8004a82 <SEQ_BitPosition+0x3a>
 8004a76:	7bfb      	ldrb	r3, [r7, #15]
 8004a78:	3308      	adds	r3, #8
 8004a7a:	73fb      	strb	r3, [r7, #15]
 8004a7c:	68bb      	ldr	r3, [r7, #8]
 8004a7e:	021b      	lsls	r3, r3, #8
 8004a80:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xF0000000U) == 0U)  { n +=  4U; lvalue <<=  4U;  }
 8004a82:	68bb      	ldr	r3, [r7, #8]
 8004a84:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d105      	bne.n	8004a98 <SEQ_BitPosition+0x50>
 8004a8c:	7bfb      	ldrb	r3, [r7, #15]
 8004a8e:	3304      	adds	r3, #4
 8004a90:	73fb      	strb	r3, [r7, #15]
 8004a92:	68bb      	ldr	r3, [r7, #8]
 8004a94:	011b      	lsls	r3, r3, #4
 8004a96:	60bb      	str	r3, [r7, #8]

  n += SEQ_clz_table_4bit[lvalue >> (32-4)];
 8004a98:	68bb      	ldr	r3, [r7, #8]
 8004a9a:	0f1b      	lsrs	r3, r3, #28
 8004a9c:	4a07      	ldr	r2, [pc, #28]	; (8004abc <SEQ_BitPosition+0x74>)
 8004a9e:	5cd2      	ldrb	r2, [r2, r3]
 8004aa0:	7bfb      	ldrb	r3, [r7, #15]
 8004aa2:	4413      	add	r3, r2
 8004aa4:	73fb      	strb	r3, [r7, #15]

  return (uint8_t)(31U-n);
 8004aa6:	7bfb      	ldrb	r3, [r7, #15]
 8004aa8:	f1c3 031f 	rsb	r3, r3, #31
 8004aac:	b2db      	uxtb	r3, r3
}
 8004aae:	4618      	mov	r0, r3
 8004ab0:	3714      	adds	r7, #20
 8004ab2:	46bd      	mov	sp, r7
 8004ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab8:	4770      	bx	lr
 8004aba:	bf00      	nop
 8004abc:	0800d5b4 	.word	0x0800d5b4

08004ac0 <_ZNSt11char_traitsIcE2ltERKcS2_>:
      static _GLIBCXX_CONSTEXPR bool
      eq(const char_type& __c1, const char_type& __c2) _GLIBCXX_NOEXCEPT
      { return __c1 == __c2; }

      static _GLIBCXX_CONSTEXPR bool
      lt(const char_type& __c1, const char_type& __c2) _GLIBCXX_NOEXCEPT
 8004ac0:	b480      	push	{r7}
 8004ac2:	b083      	sub	sp, #12
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	6078      	str	r0, [r7, #4]
 8004ac8:	6039      	str	r1, [r7, #0]
      {
	// LWG 467.
	return (static_cast<unsigned char>(__c1)
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	781a      	ldrb	r2, [r3, #0]
		< static_cast<unsigned char>(__c2));
 8004ace:	683b      	ldr	r3, [r7, #0]
 8004ad0:	781b      	ldrb	r3, [r3, #0]
 8004ad2:	429a      	cmp	r2, r3
 8004ad4:	bf34      	ite	cc
 8004ad6:	2301      	movcc	r3, #1
 8004ad8:	2300      	movcs	r3, #0
 8004ada:	b2db      	uxtb	r3, r3
      }
 8004adc:	4618      	mov	r0, r3
 8004ade:	370c      	adds	r7, #12
 8004ae0:	46bd      	mov	sp, r7
 8004ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae6:	4770      	bx	lr

08004ae8 <_ZNSt11char_traitsIcE7compareEPKcS2_j>:

      static _GLIBCXX17_CONSTEXPR int
      compare(const char_type* __s1, const char_type* __s2, size_t __n)
 8004ae8:	b580      	push	{r7, lr}
 8004aea:	b086      	sub	sp, #24
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	60f8      	str	r0, [r7, #12]
 8004af0:	60b9      	str	r1, [r7, #8]
 8004af2:	607a      	str	r2, [r7, #4]
      {
	if (__n == 0)
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d101      	bne.n	8004afe <_ZNSt11char_traitsIcE7compareEPKcS2_j+0x16>
	  return 0;
 8004afa:	2300      	movs	r3, #0
 8004afc:	e032      	b.n	8004b64 <_ZNSt11char_traitsIcE7compareEPKcS2_j+0x7c>
#if __cplusplus >= 201703L
	if (__builtin_constant_p(__n)
	    && __constant_char_array_p(__s1, __n)
	    && __constant_char_array_p(__s2, __n))
 8004afe:	2300      	movs	r3, #0
	if (__builtin_constant_p(__n)
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d028      	beq.n	8004b56 <_ZNSt11char_traitsIcE7compareEPKcS2_j+0x6e>
	  {
	    for (size_t __i = 0; __i < __n; ++__i)
 8004b04:	2300      	movs	r3, #0
 8004b06:	617b      	str	r3, [r7, #20]
 8004b08:	e01f      	b.n	8004b4a <_ZNSt11char_traitsIcE7compareEPKcS2_j+0x62>
	      if (lt(__s1[__i], __s2[__i]))
 8004b0a:	68fa      	ldr	r2, [r7, #12]
 8004b0c:	697b      	ldr	r3, [r7, #20]
 8004b0e:	18d0      	adds	r0, r2, r3
 8004b10:	68ba      	ldr	r2, [r7, #8]
 8004b12:	697b      	ldr	r3, [r7, #20]
 8004b14:	4413      	add	r3, r2
 8004b16:	4619      	mov	r1, r3
 8004b18:	f7ff ffd2 	bl	8004ac0 <_ZNSt11char_traitsIcE2ltERKcS2_>
 8004b1c:	4603      	mov	r3, r0
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d002      	beq.n	8004b28 <_ZNSt11char_traitsIcE7compareEPKcS2_j+0x40>
		return -1;
 8004b22:	f04f 33ff 	mov.w	r3, #4294967295
 8004b26:	e01d      	b.n	8004b64 <_ZNSt11char_traitsIcE7compareEPKcS2_j+0x7c>
	      else if (lt(__s2[__i], __s1[__i]))
 8004b28:	68ba      	ldr	r2, [r7, #8]
 8004b2a:	697b      	ldr	r3, [r7, #20]
 8004b2c:	18d0      	adds	r0, r2, r3
 8004b2e:	68fa      	ldr	r2, [r7, #12]
 8004b30:	697b      	ldr	r3, [r7, #20]
 8004b32:	4413      	add	r3, r2
 8004b34:	4619      	mov	r1, r3
 8004b36:	f7ff ffc3 	bl	8004ac0 <_ZNSt11char_traitsIcE2ltERKcS2_>
 8004b3a:	4603      	mov	r3, r0
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d001      	beq.n	8004b44 <_ZNSt11char_traitsIcE7compareEPKcS2_j+0x5c>
		return 1;
 8004b40:	2301      	movs	r3, #1
 8004b42:	e00f      	b.n	8004b64 <_ZNSt11char_traitsIcE7compareEPKcS2_j+0x7c>
	    for (size_t __i = 0; __i < __n; ++__i)
 8004b44:	697b      	ldr	r3, [r7, #20]
 8004b46:	3301      	adds	r3, #1
 8004b48:	617b      	str	r3, [r7, #20]
 8004b4a:	697a      	ldr	r2, [r7, #20]
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	429a      	cmp	r2, r3
 8004b50:	d3db      	bcc.n	8004b0a <_ZNSt11char_traitsIcE7compareEPKcS2_j+0x22>
	    return 0;
 8004b52:	2300      	movs	r3, #0
 8004b54:	e006      	b.n	8004b64 <_ZNSt11char_traitsIcE7compareEPKcS2_j+0x7c>
	  }
#endif
	return __builtin_memcmp(__s1, __s2, __n);
 8004b56:	687a      	ldr	r2, [r7, #4]
 8004b58:	68b9      	ldr	r1, [r7, #8]
 8004b5a:	68f8      	ldr	r0, [r7, #12]
 8004b5c:	f005 ff60 	bl	800aa20 <memcmp>
 8004b60:	4603      	mov	r3, r0
 8004b62:	bf00      	nop
      }
 8004b64:	4618      	mov	r0, r3
 8004b66:	3718      	adds	r7, #24
 8004b68:	46bd      	mov	sp, r7
 8004b6a:	bd80      	pop	{r7, pc}

08004b6c <_ZNSt11char_traitsIcE6lengthEPKc>:

      static _GLIBCXX17_CONSTEXPR size_t
      length(const char_type* __s)
 8004b6c:	b580      	push	{r7, lr}
 8004b6e:	b084      	sub	sp, #16
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	6078      	str	r0, [r7, #4]
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	60fb      	str	r3, [r7, #12]
      return __builtin_is_constant_evaluated();
 8004b78:	2300      	movs	r3, #0
      {
#if __cplusplus >= 201703L
	if (__constant_string_p(__s))
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d004      	beq.n	8004b88 <_ZNSt11char_traitsIcE6lengthEPKc+0x1c>
	  return __gnu_cxx::char_traits<char_type>::length(__s);
 8004b7e:	6878      	ldr	r0, [r7, #4]
 8004b80:	f000 f881 	bl	8004c86 <_ZN9__gnu_cxx11char_traitsIcE6lengthEPKc>
 8004b84:	4603      	mov	r3, r0
 8004b86:	e004      	b.n	8004b92 <_ZNSt11char_traitsIcE6lengthEPKc+0x26>
#endif
	return __builtin_strlen(__s);
 8004b88:	6878      	ldr	r0, [r7, #4]
 8004b8a:	f7fb fb49 	bl	8000220 <strlen>
 8004b8e:	4603      	mov	r3, r0
 8004b90:	bf00      	nop
      }
 8004b92:	4618      	mov	r0, r3
 8004b94:	3710      	adds	r7, #16
 8004b96:	46bd      	mov	sp, r7
 8004b98:	bd80      	pop	{r7, pc}

08004b9a <_ZNSt11char_traitsIcE4findEPKcjRS1_>:

      static _GLIBCXX17_CONSTEXPR const char_type*
      find(const char_type* __s, size_t __n, const char_type& __a)
 8004b9a:	b580      	push	{r7, lr}
 8004b9c:	b084      	sub	sp, #16
 8004b9e:	af00      	add	r7, sp, #0
 8004ba0:	60f8      	str	r0, [r7, #12]
 8004ba2:	60b9      	str	r1, [r7, #8]
 8004ba4:	607a      	str	r2, [r7, #4]
      {
	if (__n == 0)
 8004ba6:	68bb      	ldr	r3, [r7, #8]
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d101      	bne.n	8004bb0 <_ZNSt11char_traitsIcE4findEPKcjRS1_+0x16>
	  return 0;
 8004bac:	2300      	movs	r3, #0
 8004bae:	e012      	b.n	8004bd6 <_ZNSt11char_traitsIcE4findEPKcjRS1_+0x3c>
#if __cplusplus >= 201703L
	if (__builtin_constant_p(__n)
	    && __builtin_constant_p(__a)
	    && __constant_char_array_p(__s, __n))
 8004bb0:	2300      	movs	r3, #0
	if (__builtin_constant_p(__n)
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d006      	beq.n	8004bc4 <_ZNSt11char_traitsIcE4findEPKcjRS1_+0x2a>
	  return __gnu_cxx::char_traits<char_type>::find(__s, __n, __a);
 8004bb6:	687a      	ldr	r2, [r7, #4]
 8004bb8:	68b9      	ldr	r1, [r7, #8]
 8004bba:	68f8      	ldr	r0, [r7, #12]
 8004bbc:	f000 fe5e 	bl	800587c <_ZN9__gnu_cxx11char_traitsIcE4findEPKcjRS2_>
 8004bc0:	4603      	mov	r3, r0
 8004bc2:	e008      	b.n	8004bd6 <_ZNSt11char_traitsIcE4findEPKcjRS1_+0x3c>
#endif
	return static_cast<const char_type*>(__builtin_memchr(__s, __a, __n));
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	781b      	ldrb	r3, [r3, #0]
 8004bc8:	68ba      	ldr	r2, [r7, #8]
 8004bca:	4619      	mov	r1, r3
 8004bcc:	68f8      	ldr	r0, [r7, #12]
 8004bce:	f7fb fad7 	bl	8000180 <memchr>
 8004bd2:	4603      	mov	r3, r0
 8004bd4:	bf00      	nop
      }
 8004bd6:	4618      	mov	r0, r3
 8004bd8:	3710      	adds	r7, #16
 8004bda:	46bd      	mov	sp, r7
 8004bdc:	bd80      	pop	{r7, pc}
	...

08004be0 <_ZSt10__sv_checkjjPKc>:
#endif

  // Helper for basic_string and basic_string_view members.
  constexpr size_t
  __sv_check(size_t __size, size_t __pos, const char* __s)
  {
 8004be0:	b580      	push	{r7, lr}
 8004be2:	b084      	sub	sp, #16
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	60f8      	str	r0, [r7, #12]
 8004be8:	60b9      	str	r1, [r7, #8]
 8004bea:	607a      	str	r2, [r7, #4]
    if (__pos > __size)
 8004bec:	68ba      	ldr	r2, [r7, #8]
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	429a      	cmp	r2, r3
 8004bf2:	d905      	bls.n	8004c00 <_ZSt10__sv_checkjjPKc+0x20>
      __throw_out_of_range_fmt(__N("%s: __pos (which is %zu) > __size "
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	68ba      	ldr	r2, [r7, #8]
 8004bf8:	6879      	ldr	r1, [r7, #4]
 8004bfa:	4804      	ldr	r0, [pc, #16]	; (8004c0c <_ZSt10__sv_checkjjPKc+0x2c>)
 8004bfc:	f004 fce1 	bl	80095c2 <_ZSt24__throw_out_of_range_fmtPKcz>
				   "(which is %zu)"), __s, __pos, __size);
    return __pos;
 8004c00:	68bb      	ldr	r3, [r7, #8]
  }
 8004c02:	4618      	mov	r0, r3
 8004c04:	3710      	adds	r7, #16
 8004c06:	46bd      	mov	sp, r7
 8004c08:	bd80      	pop	{r7, pc}
 8004c0a:	bf00      	nop
 8004c0c:	0800c9d8 	.word	0x0800c9d8

08004c10 <_ZSt3minIjERKT_S2_S2_>:
   *  preprocessor macro.
  */
  template<typename _Tp>
    _GLIBCXX14_CONSTEXPR
    inline const _Tp&
    min(const _Tp& __a, const _Tp& __b)
 8004c10:	b480      	push	{r7}
 8004c12:	b083      	sub	sp, #12
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	6078      	str	r0, [r7, #4]
 8004c18:	6039      	str	r1, [r7, #0]
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return __b < __a ? __b : __a;
      if (__b < __a)
 8004c1a:	683b      	ldr	r3, [r7, #0]
 8004c1c:	681a      	ldr	r2, [r3, #0]
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	429a      	cmp	r2, r3
 8004c24:	d201      	bcs.n	8004c2a <_ZSt3minIjERKT_S2_S2_+0x1a>
	return __b;
 8004c26:	683b      	ldr	r3, [r7, #0]
 8004c28:	e000      	b.n	8004c2c <_ZSt3minIjERKT_S2_S2_+0x1c>
      return __a;
 8004c2a:	687b      	ldr	r3, [r7, #4]
    }
 8004c2c:	4618      	mov	r0, r3
 8004c2e:	370c      	adds	r7, #12
 8004c30:	46bd      	mov	sp, r7
 8004c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c36:	4770      	bx	lr

08004c38 <_ZNSt17basic_string_viewIcSt11char_traitsIcEEC1EPKc>:
      { }

      constexpr basic_string_view(const basic_string_view&) noexcept = default;

      __attribute__((__nonnull__)) constexpr
      basic_string_view(const _CharT* __str) noexcept
 8004c38:	b580      	push	{r7, lr}
 8004c3a:	b082      	sub	sp, #8
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	6078      	str	r0, [r7, #4]
 8004c40:	6039      	str	r1, [r7, #0]
      : _M_len{traits_type::length(__str)},
 8004c42:	6838      	ldr	r0, [r7, #0]
 8004c44:	f7ff ff92 	bl	8004b6c <_ZNSt11char_traitsIcE6lengthEPKc>
 8004c48:	4602      	mov	r2, r0
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	601a      	str	r2, [r3, #0]
	_M_str{__str}
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	683a      	ldr	r2, [r7, #0]
 8004c52:	605a      	str	r2, [r3, #4]
      { }
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	4618      	mov	r0, r3
 8004c58:	3708      	adds	r7, #8
 8004c5a:	46bd      	mov	sp, r7
 8004c5c:	bd80      	pop	{r7, pc}

08004c5e <_ZN9__gnu_cxx11char_traitsIcE2eqERKcS3_>:
      eq(const char_type& __c1, const char_type& __c2)
 8004c5e:	b480      	push	{r7}
 8004c60:	b083      	sub	sp, #12
 8004c62:	af00      	add	r7, sp, #0
 8004c64:	6078      	str	r0, [r7, #4]
 8004c66:	6039      	str	r1, [r7, #0]
      { return __c1 == __c2; }
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	781a      	ldrb	r2, [r3, #0]
 8004c6c:	683b      	ldr	r3, [r7, #0]
 8004c6e:	781b      	ldrb	r3, [r3, #0]
 8004c70:	429a      	cmp	r2, r3
 8004c72:	bf0c      	ite	eq
 8004c74:	2301      	moveq	r3, #1
 8004c76:	2300      	movne	r3, #0
 8004c78:	b2db      	uxtb	r3, r3
 8004c7a:	4618      	mov	r0, r3
 8004c7c:	370c      	adds	r7, #12
 8004c7e:	46bd      	mov	sp, r7
 8004c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c84:	4770      	bx	lr

08004c86 <_ZN9__gnu_cxx11char_traitsIcE6lengthEPKc>:
    char_traits<_CharT>::
 8004c86:	b580      	push	{r7, lr}
 8004c88:	b084      	sub	sp, #16
 8004c8a:	af00      	add	r7, sp, #0
 8004c8c:	6078      	str	r0, [r7, #4]
      std::size_t __i = 0;
 8004c8e:	2300      	movs	r3, #0
 8004c90:	60fb      	str	r3, [r7, #12]
      while (!eq(__p[__i], char_type()))
 8004c92:	e002      	b.n	8004c9a <_ZN9__gnu_cxx11char_traitsIcE6lengthEPKc+0x14>
        ++__i;
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	3301      	adds	r3, #1
 8004c98:	60fb      	str	r3, [r7, #12]
      while (!eq(__p[__i], char_type()))
 8004c9a:	687a      	ldr	r2, [r7, #4]
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	4413      	add	r3, r2
 8004ca0:	2200      	movs	r2, #0
 8004ca2:	72fa      	strb	r2, [r7, #11]
 8004ca4:	f107 020b 	add.w	r2, r7, #11
 8004ca8:	4611      	mov	r1, r2
 8004caa:	4618      	mov	r0, r3
 8004cac:	f7ff ffd7 	bl	8004c5e <_ZN9__gnu_cxx11char_traitsIcE2eqERKcS3_>
 8004cb0:	4603      	mov	r3, r0
 8004cb2:	f083 0301 	eor.w	r3, r3, #1
 8004cb6:	b2db      	uxtb	r3, r3
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d1eb      	bne.n	8004c94 <_ZN9__gnu_cxx11char_traitsIcE6lengthEPKc+0xe>
      return __i;
 8004cbc:	68fb      	ldr	r3, [r7, #12]
    }
 8004cbe:	4618      	mov	r0, r3
 8004cc0:	3710      	adds	r7, #16
 8004cc2:	46bd      	mov	sp, r7
 8004cc4:	bd80      	pop	{r7, pc}
	...

08004cc8 <_ZNSt8__detail25__from_chars_alpha_to_numEc>:
      return true;
    }

  constexpr char
  __from_chars_alpha_to_num(char __c)
  {
 8004cc8:	b480      	push	{r7}
 8004cca:	b083      	sub	sp, #12
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	4603      	mov	r3, r0
 8004cd0:	71fb      	strb	r3, [r7, #7]
    switch (__c)
 8004cd2:	79fb      	ldrb	r3, [r7, #7]
 8004cd4:	3b41      	subs	r3, #65	; 0x41
 8004cd6:	2b39      	cmp	r3, #57	; 0x39
 8004cd8:	f200 80ac 	bhi.w	8004e34 <_ZNSt8__detail25__from_chars_alpha_to_numEc+0x16c>
 8004cdc:	a201      	add	r2, pc, #4	; (adr r2, 8004ce4 <_ZNSt8__detail25__from_chars_alpha_to_numEc+0x1c>)
 8004cde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ce2:	bf00      	nop
 8004ce4:	08004dcd 	.word	0x08004dcd
 8004ce8:	08004dd1 	.word	0x08004dd1
 8004cec:	08004dd5 	.word	0x08004dd5
 8004cf0:	08004dd9 	.word	0x08004dd9
 8004cf4:	08004ddd 	.word	0x08004ddd
 8004cf8:	08004de1 	.word	0x08004de1
 8004cfc:	08004de5 	.word	0x08004de5
 8004d00:	08004de9 	.word	0x08004de9
 8004d04:	08004ded 	.word	0x08004ded
 8004d08:	08004df1 	.word	0x08004df1
 8004d0c:	08004df5 	.word	0x08004df5
 8004d10:	08004df9 	.word	0x08004df9
 8004d14:	08004dfd 	.word	0x08004dfd
 8004d18:	08004e01 	.word	0x08004e01
 8004d1c:	08004e05 	.word	0x08004e05
 8004d20:	08004e09 	.word	0x08004e09
 8004d24:	08004e0d 	.word	0x08004e0d
 8004d28:	08004e11 	.word	0x08004e11
 8004d2c:	08004e15 	.word	0x08004e15
 8004d30:	08004e19 	.word	0x08004e19
 8004d34:	08004e1d 	.word	0x08004e1d
 8004d38:	08004e21 	.word	0x08004e21
 8004d3c:	08004e25 	.word	0x08004e25
 8004d40:	08004e29 	.word	0x08004e29
 8004d44:	08004e2d 	.word	0x08004e2d
 8004d48:	08004e31 	.word	0x08004e31
 8004d4c:	08004e35 	.word	0x08004e35
 8004d50:	08004e35 	.word	0x08004e35
 8004d54:	08004e35 	.word	0x08004e35
 8004d58:	08004e35 	.word	0x08004e35
 8004d5c:	08004e35 	.word	0x08004e35
 8004d60:	08004e35 	.word	0x08004e35
 8004d64:	08004dcd 	.word	0x08004dcd
 8004d68:	08004dd1 	.word	0x08004dd1
 8004d6c:	08004dd5 	.word	0x08004dd5
 8004d70:	08004dd9 	.word	0x08004dd9
 8004d74:	08004ddd 	.word	0x08004ddd
 8004d78:	08004de1 	.word	0x08004de1
 8004d7c:	08004de5 	.word	0x08004de5
 8004d80:	08004de9 	.word	0x08004de9
 8004d84:	08004ded 	.word	0x08004ded
 8004d88:	08004df1 	.word	0x08004df1
 8004d8c:	08004df5 	.word	0x08004df5
 8004d90:	08004df9 	.word	0x08004df9
 8004d94:	08004dfd 	.word	0x08004dfd
 8004d98:	08004e01 	.word	0x08004e01
 8004d9c:	08004e05 	.word	0x08004e05
 8004da0:	08004e09 	.word	0x08004e09
 8004da4:	08004e0d 	.word	0x08004e0d
 8004da8:	08004e11 	.word	0x08004e11
 8004dac:	08004e15 	.word	0x08004e15
 8004db0:	08004e19 	.word	0x08004e19
 8004db4:	08004e1d 	.word	0x08004e1d
 8004db8:	08004e21 	.word	0x08004e21
 8004dbc:	08004e25 	.word	0x08004e25
 8004dc0:	08004e29 	.word	0x08004e29
 8004dc4:	08004e2d 	.word	0x08004e2d
 8004dc8:	08004e31 	.word	0x08004e31
    {
    case 'a':
    case 'A':
      return 10;
 8004dcc:	230a      	movs	r3, #10
 8004dce:	e032      	b.n	8004e36 <_ZNSt8__detail25__from_chars_alpha_to_numEc+0x16e>
    case 'b':
    case 'B':
      return 11;
 8004dd0:	230b      	movs	r3, #11
 8004dd2:	e030      	b.n	8004e36 <_ZNSt8__detail25__from_chars_alpha_to_numEc+0x16e>
    case 'c':
    case 'C':
      return 12;
 8004dd4:	230c      	movs	r3, #12
 8004dd6:	e02e      	b.n	8004e36 <_ZNSt8__detail25__from_chars_alpha_to_numEc+0x16e>
    case 'd':
    case 'D':
      return 13;
 8004dd8:	230d      	movs	r3, #13
 8004dda:	e02c      	b.n	8004e36 <_ZNSt8__detail25__from_chars_alpha_to_numEc+0x16e>
    case 'e':
    case 'E':
      return 14;
 8004ddc:	230e      	movs	r3, #14
 8004dde:	e02a      	b.n	8004e36 <_ZNSt8__detail25__from_chars_alpha_to_numEc+0x16e>
    case 'f':
    case 'F':
      return 15;
 8004de0:	230f      	movs	r3, #15
 8004de2:	e028      	b.n	8004e36 <_ZNSt8__detail25__from_chars_alpha_to_numEc+0x16e>
    case 'g':
    case 'G':
      return 16;
 8004de4:	2310      	movs	r3, #16
 8004de6:	e026      	b.n	8004e36 <_ZNSt8__detail25__from_chars_alpha_to_numEc+0x16e>
    case 'h':
    case 'H':
      return 17;
 8004de8:	2311      	movs	r3, #17
 8004dea:	e024      	b.n	8004e36 <_ZNSt8__detail25__from_chars_alpha_to_numEc+0x16e>
    case 'i':
    case 'I':
      return 18;
 8004dec:	2312      	movs	r3, #18
 8004dee:	e022      	b.n	8004e36 <_ZNSt8__detail25__from_chars_alpha_to_numEc+0x16e>
    case 'j':
    case 'J':
      return 19;
 8004df0:	2313      	movs	r3, #19
 8004df2:	e020      	b.n	8004e36 <_ZNSt8__detail25__from_chars_alpha_to_numEc+0x16e>
    case 'k':
    case 'K':
      return 20;
 8004df4:	2314      	movs	r3, #20
 8004df6:	e01e      	b.n	8004e36 <_ZNSt8__detail25__from_chars_alpha_to_numEc+0x16e>
    case 'l':
    case 'L':
      return 21;
 8004df8:	2315      	movs	r3, #21
 8004dfa:	e01c      	b.n	8004e36 <_ZNSt8__detail25__from_chars_alpha_to_numEc+0x16e>
    case 'm':
    case 'M':
      return 22;
 8004dfc:	2316      	movs	r3, #22
 8004dfe:	e01a      	b.n	8004e36 <_ZNSt8__detail25__from_chars_alpha_to_numEc+0x16e>
    case 'n':
    case 'N':
      return 23;
 8004e00:	2317      	movs	r3, #23
 8004e02:	e018      	b.n	8004e36 <_ZNSt8__detail25__from_chars_alpha_to_numEc+0x16e>
    case 'o':
    case 'O':
      return 24;
 8004e04:	2318      	movs	r3, #24
 8004e06:	e016      	b.n	8004e36 <_ZNSt8__detail25__from_chars_alpha_to_numEc+0x16e>
    case 'p':
    case 'P':
      return 25;
 8004e08:	2319      	movs	r3, #25
 8004e0a:	e014      	b.n	8004e36 <_ZNSt8__detail25__from_chars_alpha_to_numEc+0x16e>
    case 'q':
    case 'Q':
      return 26;
 8004e0c:	231a      	movs	r3, #26
 8004e0e:	e012      	b.n	8004e36 <_ZNSt8__detail25__from_chars_alpha_to_numEc+0x16e>
    case 'r':
    case 'R':
      return 27;
 8004e10:	231b      	movs	r3, #27
 8004e12:	e010      	b.n	8004e36 <_ZNSt8__detail25__from_chars_alpha_to_numEc+0x16e>
    case 's':
    case 'S':
      return 28;
 8004e14:	231c      	movs	r3, #28
 8004e16:	e00e      	b.n	8004e36 <_ZNSt8__detail25__from_chars_alpha_to_numEc+0x16e>
    case 't':
    case 'T':
      return 29;
 8004e18:	231d      	movs	r3, #29
 8004e1a:	e00c      	b.n	8004e36 <_ZNSt8__detail25__from_chars_alpha_to_numEc+0x16e>
    case 'u':
    case 'U':
      return 30;
 8004e1c:	231e      	movs	r3, #30
 8004e1e:	e00a      	b.n	8004e36 <_ZNSt8__detail25__from_chars_alpha_to_numEc+0x16e>
    case 'v':
    case 'V':
      return 31;
 8004e20:	231f      	movs	r3, #31
 8004e22:	e008      	b.n	8004e36 <_ZNSt8__detail25__from_chars_alpha_to_numEc+0x16e>
    case 'w':
    case 'W':
      return 32;
 8004e24:	2320      	movs	r3, #32
 8004e26:	e006      	b.n	8004e36 <_ZNSt8__detail25__from_chars_alpha_to_numEc+0x16e>
    case 'x':
    case 'X':
      return 33;
 8004e28:	2321      	movs	r3, #33	; 0x21
 8004e2a:	e004      	b.n	8004e36 <_ZNSt8__detail25__from_chars_alpha_to_numEc+0x16e>
    case 'y':
    case 'Y':
      return 34;
 8004e2c:	2322      	movs	r3, #34	; 0x22
 8004e2e:	e002      	b.n	8004e36 <_ZNSt8__detail25__from_chars_alpha_to_numEc+0x16e>
    case 'z':
    case 'Z':
      return 35;
 8004e30:	2323      	movs	r3, #35	; 0x23
 8004e32:	e000      	b.n	8004e36 <_ZNSt8__detail25__from_chars_alpha_to_numEc+0x16e>
    }
    return 127;
 8004e34:	237f      	movs	r3, #127	; 0x7f
  }
 8004e36:	4618      	mov	r0, r3
 8004e38:	370c      	adds	r7, #12
 8004e3a:	46bd      	mov	sp, r7
 8004e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e40:	4770      	bx	lr
 8004e42:	bf00      	nop

08004e44 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE7compareEPKc>:
      {
	return this->substr(__pos1, __n1).compare(__str.substr(__pos2, __n2));
      }

      __attribute__((__nonnull__)) constexpr int
      compare(const _CharT* __str) const noexcept
 8004e44:	b580      	push	{r7, lr}
 8004e46:	b084      	sub	sp, #16
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	6078      	str	r0, [r7, #4]
 8004e4c:	6039      	str	r1, [r7, #0]
      { return this->compare(basic_string_view{__str}); }
 8004e4e:	f107 0308 	add.w	r3, r7, #8
 8004e52:	6839      	ldr	r1, [r7, #0]
 8004e54:	4618      	mov	r0, r3
 8004e56:	f7ff feef 	bl	8004c38 <_ZNSt17basic_string_viewIcSt11char_traitsIcEEC1EPKc>
 8004e5a:	f107 0308 	add.w	r3, r7, #8
 8004e5e:	e893 0006 	ldmia.w	r3, {r1, r2}
 8004e62:	6878      	ldr	r0, [r7, #4]
 8004e64:	f000 f805 	bl	8004e72 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE7compareES2_>
 8004e68:	4603      	mov	r3, r0
 8004e6a:	4618      	mov	r0, r3
 8004e6c:	3710      	adds	r7, #16
 8004e6e:	46bd      	mov	sp, r7
 8004e70:	bd80      	pop	{r7, pc}

08004e72 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE7compareES2_>:
      compare(basic_string_view __str) const noexcept
 8004e72:	b580      	push	{r7, lr}
 8004e74:	b086      	sub	sp, #24
 8004e76:	af00      	add	r7, sp, #0
 8004e78:	60f8      	str	r0, [r7, #12]
 8004e7a:	1d3b      	adds	r3, r7, #4
 8004e7c:	e883 0006 	stmia.w	r3, {r1, r2}
	const size_type __rlen = std::min(this->_M_len, __str._M_len);
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	1d3a      	adds	r2, r7, #4
 8004e84:	4611      	mov	r1, r2
 8004e86:	4618      	mov	r0, r3
 8004e88:	f7ff fec2 	bl	8004c10 <_ZSt3minIjERKT_S2_S2_>
 8004e8c:	4603      	mov	r3, r0
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	613b      	str	r3, [r7, #16]
	int __ret = traits_type::compare(this->_M_str, __str._M_str, __rlen);
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	685b      	ldr	r3, [r3, #4]
 8004e96:	68b9      	ldr	r1, [r7, #8]
 8004e98:	693a      	ldr	r2, [r7, #16]
 8004e9a:	4618      	mov	r0, r3
 8004e9c:	f7ff fe24 	bl	8004ae8 <_ZNSt11char_traitsIcE7compareEPKcS2_j>
 8004ea0:	6178      	str	r0, [r7, #20]
	if (__ret == 0)
 8004ea2:	697b      	ldr	r3, [r7, #20]
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d107      	bne.n	8004eb8 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE7compareES2_+0x46>
	  __ret = _S_compare(this->_M_len, __str._M_len);
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	687a      	ldr	r2, [r7, #4]
 8004eae:	4611      	mov	r1, r2
 8004eb0:	4618      	mov	r0, r3
 8004eb2:	f000 fd25 	bl	8005900 <_ZNSt17basic_string_viewIcSt11char_traitsIcEE10_S_compareEjj>
 8004eb6:	6178      	str	r0, [r7, #20]
	return __ret;
 8004eb8:	697b      	ldr	r3, [r7, #20]
      }
 8004eba:	4618      	mov	r0, r3
 8004ebc:	3718      	adds	r7, #24
 8004ebe:	46bd      	mov	sp, r7
 8004ec0:	bd80      	pop	{r7, pc}

08004ec2 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE7compareEjjPKc>:

      __attribute__((__nonnull__)) constexpr int
      compare(size_type __pos1, size_type __n1, const _CharT* __str) const
 8004ec2:	b580      	push	{r7, lr}
 8004ec4:	b088      	sub	sp, #32
 8004ec6:	af00      	add	r7, sp, #0
 8004ec8:	60f8      	str	r0, [r7, #12]
 8004eca:	60b9      	str	r1, [r7, #8]
 8004ecc:	607a      	str	r2, [r7, #4]
 8004ece:	603b      	str	r3, [r7, #0]
      { return this->substr(__pos1, __n1).compare(basic_string_view{__str}); }
 8004ed0:	f107 0010 	add.w	r0, r7, #16
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	68ba      	ldr	r2, [r7, #8]
 8004ed8:	68f9      	ldr	r1, [r7, #12]
 8004eda:	f000 f813 	bl	8004f04 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE6substrEjj>
 8004ede:	f107 0318 	add.w	r3, r7, #24
 8004ee2:	6839      	ldr	r1, [r7, #0]
 8004ee4:	4618      	mov	r0, r3
 8004ee6:	f7ff fea7 	bl	8004c38 <_ZNSt17basic_string_viewIcSt11char_traitsIcEEC1EPKc>
 8004eea:	f107 0010 	add.w	r0, r7, #16
 8004eee:	f107 0318 	add.w	r3, r7, #24
 8004ef2:	e893 0006 	ldmia.w	r3, {r1, r2}
 8004ef6:	f7ff ffbc 	bl	8004e72 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE7compareES2_>
 8004efa:	4603      	mov	r3, r0
 8004efc:	4618      	mov	r0, r3
 8004efe:	3720      	adds	r7, #32
 8004f00:	46bd      	mov	sp, r7
 8004f02:	bd80      	pop	{r7, pc}

08004f04 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE6substrEjj>:
      substr(size_type __pos = 0, size_type __n = npos) const noexcept(false)
 8004f04:	b580      	push	{r7, lr}
 8004f06:	b086      	sub	sp, #24
 8004f08:	af00      	add	r7, sp, #0
 8004f0a:	60f8      	str	r0, [r7, #12]
 8004f0c:	60b9      	str	r1, [r7, #8]
 8004f0e:	607a      	str	r2, [r7, #4]
 8004f10:	603b      	str	r3, [r7, #0]
	__pos = std::__sv_check(size(), __pos, "basic_string_view::substr");
 8004f12:	68b8      	ldr	r0, [r7, #8]
 8004f14:	f000 f826 	bl	8004f64 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4sizeEv>
 8004f18:	4603      	mov	r3, r0
 8004f1a:	4a11      	ldr	r2, [pc, #68]	; (8004f60 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE6substrEjj+0x5c>)
 8004f1c:	6879      	ldr	r1, [r7, #4]
 8004f1e:	4618      	mov	r0, r3
 8004f20:	f7ff fe5e 	bl	8004be0 <_ZSt10__sv_checkjjPKc>
 8004f24:	6078      	str	r0, [r7, #4]
	const size_type __rlen = std::min(__n, _M_len - __pos);
 8004f26:	68bb      	ldr	r3, [r7, #8]
 8004f28:	681a      	ldr	r2, [r3, #0]
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	1ad3      	subs	r3, r2, r3
 8004f2e:	613b      	str	r3, [r7, #16]
 8004f30:	f107 0210 	add.w	r2, r7, #16
 8004f34:	463b      	mov	r3, r7
 8004f36:	4611      	mov	r1, r2
 8004f38:	4618      	mov	r0, r3
 8004f3a:	f7ff fe69 	bl	8004c10 <_ZSt3minIjERKT_S2_S2_>
 8004f3e:	4603      	mov	r3, r0
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	617b      	str	r3, [r7, #20]
	return basic_string_view{_M_str + __pos, __rlen};
 8004f44:	68bb      	ldr	r3, [r7, #8]
 8004f46:	685a      	ldr	r2, [r3, #4]
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	4413      	add	r3, r2
 8004f4c:	697a      	ldr	r2, [r7, #20]
 8004f4e:	4619      	mov	r1, r3
 8004f50:	68f8      	ldr	r0, [r7, #12]
 8004f52:	f000 fcc2 	bl	80058da <_ZNSt17basic_string_viewIcSt11char_traitsIcEEC1EPKcj>
      }
 8004f56:	68f8      	ldr	r0, [r7, #12]
 8004f58:	3718      	adds	r7, #24
 8004f5a:	46bd      	mov	sp, r7
 8004f5c:	bd80      	pop	{r7, pc}
 8004f5e:	bf00      	nop
 8004f60:	0800ca1c 	.word	0x0800ca1c

08004f64 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4sizeEv>:
      size() const noexcept
 8004f64:	b480      	push	{r7}
 8004f66:	b083      	sub	sp, #12
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	6078      	str	r0, [r7, #4]
      { return this->_M_len; }
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	4618      	mov	r0, r3
 8004f72:	370c      	adds	r7, #12
 8004f74:	46bd      	mov	sp, r7
 8004f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7a:	4770      	bx	lr

08004f7c <_ZN10CDCHandler14ProcessCommandEv>:



// Check if a command has been received from USB, parse and action as required
void CDCHandler::ProcessCommand()
{
 8004f7c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004f80:	b0bb      	sub	sp, #236	; 0xec
 8004f82:	af0a      	add	r7, sp, #40	; 0x28
 8004f84:	6178      	str	r0, [r7, #20]
	if (!cmdPending) {
 8004f86:	697b      	ldr	r3, [r7, #20]
 8004f88:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8004f8c:	f083 0301 	eor.w	r3, r3, #1
 8004f90:	b2db      	uxtb	r3, r3
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	f040 8379 	bne.w	800568a <_ZN10CDCHandler14ProcessCommandEv+0x70e>
		return;
	}

	std::string_view cmd {comCmd};
 8004f98:	697b      	ldr	r3, [r7, #20]
 8004f9a:	f103 022d 	add.w	r2, r3, #45	; 0x2d
 8004f9e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8004fa2:	4611      	mov	r1, r2
 8004fa4:	4618      	mov	r0, r3
 8004fa6:	f7ff fe47 	bl	8004c38 <_ZNSt17basic_string_viewIcSt11char_traitsIcEEC1EPKc>

	// Provide option to switch to USB DFU mode - this allows the MCU to be programmed with STM32CubeProgrammer in DFU mode
	if (state == serialState::dfuConfirm) {
 8004faa:	697b      	ldr	r3, [r7, #20]
 8004fac:	f8d3 3564 	ldr.w	r3, [r3, #1380]	; 0x564
 8004fb0:	2b01      	cmp	r3, #1
 8004fb2:	d13a      	bne.n	800502a <_ZN10CDCHandler14ProcessCommandEv+0xae>
		if (cmd.compare("y\n") == 0 || cmd.compare("Y\n") == 0) {
 8004fb4:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8004fb8:	49b3      	ldr	r1, [pc, #716]	; (8005288 <_ZN10CDCHandler14ProcessCommandEv+0x30c>)
 8004fba:	4618      	mov	r0, r3
 8004fbc:	f7ff ff42 	bl	8004e44 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE7compareEPKc>
 8004fc0:	4603      	mov	r3, r0
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d008      	beq.n	8004fd8 <_ZN10CDCHandler14ProcessCommandEv+0x5c>
 8004fc6:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8004fca:	49b0      	ldr	r1, [pc, #704]	; (800528c <_ZN10CDCHandler14ProcessCommandEv+0x310>)
 8004fcc:	4618      	mov	r0, r3
 8004fce:	f7ff ff39 	bl	8004e44 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE7compareEPKc>
 8004fd2:	4603      	mov	r3, r0
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d101      	bne.n	8004fdc <_ZN10CDCHandler14ProcessCommandEv+0x60>
 8004fd8:	2301      	movs	r3, #1
 8004fda:	e000      	b.n	8004fde <_ZN10CDCHandler14ProcessCommandEv+0x62>
 8004fdc:	2300      	movs	r3, #0
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d018      	beq.n	8005014 <_ZN10CDCHandler14ProcessCommandEv+0x98>
			usb->SendString("Switching to DFU Mode ...\r\n");
 8004fe2:	697b      	ldr	r3, [r7, #20]
 8004fe4:	685b      	ldr	r3, [r3, #4]
 8004fe6:	49aa      	ldr	r1, [pc, #680]	; (8005290 <_ZN10CDCHandler14ProcessCommandEv+0x314>)
 8004fe8:	4618      	mov	r0, r3
 8004fea:	f002 fa6b 	bl	80074c4 <_ZN7USBMain10SendStringEPKc>
			uint32_t old = SysTickVal;
 8004fee:	4ba9      	ldr	r3, [pc, #676]	; (8005294 <_ZN10CDCHandler14ProcessCommandEv+0x318>)
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
			while (SysTickVal < old + 100) {};		// Give enough time to send the message
 8004ff6:	bf00      	nop
 8004ff8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004ffc:	f103 0264 	add.w	r2, r3, #100	; 0x64
 8005000:	4ba4      	ldr	r3, [pc, #656]	; (8005294 <_ZN10CDCHandler14ProcessCommandEv+0x318>)
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	429a      	cmp	r2, r3
 8005006:	bf8c      	ite	hi
 8005008:	2301      	movhi	r3, #1
 800500a:	2300      	movls	r3, #0
 800500c:	b2db      	uxtb	r3, r3
 800500e:	2b00      	cmp	r3, #0
 8005010:	d1f2      	bne.n	8004ff8 <_ZN10CDCHandler14ProcessCommandEv+0x7c>
 8005012:	e335      	b.n	8005680 <_ZN10CDCHandler14ProcessCommandEv+0x704>
			//bootloader.BootDFU();
		} else {
			state = serialState::pending;
 8005014:	697b      	ldr	r3, [r7, #20]
 8005016:	2200      	movs	r2, #0
 8005018:	f8c3 2564 	str.w	r2, [r3, #1380]	; 0x564
			usb->SendString("Upgrade cancelled\r\n");
 800501c:	697b      	ldr	r3, [r7, #20]
 800501e:	685b      	ldr	r3, [r3, #4]
 8005020:	499d      	ldr	r1, [pc, #628]	; (8005298 <_ZN10CDCHandler14ProcessCommandEv+0x31c>)
 8005022:	4618      	mov	r0, r3
 8005024:	f002 fa4e 	bl	80074c4 <_ZN7USBMain10SendStringEPKc>
 8005028:	e32a      	b.n	8005680 <_ZN10CDCHandler14ProcessCommandEv+0x704>
		}

	} else if (cmd.compare("info") == 0) {		// Print diagnostic information
 800502a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800502e:	499b      	ldr	r1, [pc, #620]	; (800529c <_ZN10CDCHandler14ProcessCommandEv+0x320>)
 8005030:	4618      	mov	r0, r3
 8005032:	f7ff ff07 	bl	8004e44 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE7compareEPKc>
 8005036:	4603      	mov	r3, r0
 8005038:	2b00      	cmp	r3, #0
 800503a:	bf0c      	ite	eq
 800503c:	2301      	moveq	r3, #1
 800503e:	2300      	movne	r3, #0
 8005040:	b2db      	uxtb	r3, r3
 8005042:	2b00      	cmp	r3, #0
 8005044:	d069      	beq.n	800511a <_ZN10CDCHandler14ProcessCommandEv+0x19e>

		int8_t rssi = -127;
 8005046:	2381      	movs	r3, #129	; 0x81
 8005048:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
		if (bleApp.connectionStatus == BleApp::ConnStatus::Connected) {
 800504c:	4b94      	ldr	r3, [pc, #592]	; (80052a0 <_ZN10CDCHandler14ProcessCommandEv+0x324>)
 800504e:	685b      	ldr	r3, [r3, #4]
 8005050:	2b05      	cmp	r3, #5
 8005052:	d107      	bne.n	8005064 <_ZN10CDCHandler14ProcessCommandEv+0xe8>
			hci_read_rssi(bleApp.connectionHandle, (uint8_t*)&rssi);
 8005054:	4b92      	ldr	r3, [pc, #584]	; (80052a0 <_ZN10CDCHandler14ProcessCommandEv+0x324>)
 8005056:	881b      	ldrh	r3, [r3, #0]
 8005058:	f107 0263 	add.w	r2, r7, #99	; 0x63
 800505c:	4611      	mov	r1, r2
 800505e:	4618      	mov	r0, r3
 8005060:	f7fd f8bf 	bl	80021e2 <hci_read_rssi>
		}

		WirelessFwInfo_t fwInfo {};
 8005064:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8005068:	2200      	movs	r2, #0
 800506a:	601a      	str	r2, [r3, #0]
 800506c:	605a      	str	r2, [r3, #4]
 800506e:	609a      	str	r2, [r3, #8]
 8005070:	60da      	str	r2, [r3, #12]
		SHCI_GetWirelessFwInfo(&fwInfo);
 8005072:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8005076:	4618      	mov	r0, r3
 8005078:	f7fd f9d6 	bl	8002428 <SHCI_GetWirelessFwInfo>

		sprintf(buf, "\r\nMountjoy Ball Remote v1.0 - Current Settings:\r\n\r\n"
 800507c:	697b      	ldr	r3, [r7, #20]
 800507e:	f503 74b2 	add.w	r4, r3, #356	; 0x164
				"Battery: %.2fv  %d%%\r\n"
				"Wireless Stack: %s\r\n"
				"BLE firmware version: %d.%d.%d.%d; FUS version: %d.%d.%d\r\n"
				"RSSI Value: %d dBm\r\n",
				basService.GetBatteryLevel(), basService.Level,
 8005082:	4888      	ldr	r0, [pc, #544]	; (80052a4 <_ZN10CDCHandler14ProcessCommandEv+0x328>)
 8005084:	f003 faac 	bl	80085e0 <_ZN10BasService15GetBatteryLevelEv>
 8005088:	ee10 3a10 	vmov	r3, s0
		sprintf(buf, "\r\nMountjoy Ball Remote v1.0 - Current Settings:\r\n\r\n"
 800508c:	4618      	mov	r0, r3
 800508e:	f7fb fa33 	bl	80004f8 <__aeabi_f2d>
 8005092:	4680      	mov	r8, r0
 8005094:	4689      	mov	r9, r1
				basService.GetBatteryLevel(), basService.Level,
 8005096:	4983      	ldr	r1, [pc, #524]	; (80052a4 <_ZN10CDCHandler14ProcessCommandEv+0x328>)
 8005098:	8809      	ldrh	r1, [r1, #0]
		sprintf(buf, "\r\nMountjoy Ball Remote v1.0 - Current Settings:\r\n\r\n"
 800509a:	4608      	mov	r0, r1
				(bleApp.coprocessorFailure ? "Off" : "Running"),
 800509c:	4980      	ldr	r1, [pc, #512]	; (80052a0 <_ZN10CDCHandler14ProcessCommandEv+0x324>)
 800509e:	7b09      	ldrb	r1, [r1, #12]
		sprintf(buf, "\r\nMountjoy Ball Remote v1.0 - Current Settings:\r\n\r\n"
 80050a0:	2900      	cmp	r1, #0
 80050a2:	d001      	beq.n	80050a8 <_ZN10CDCHandler14ProcessCommandEv+0x12c>
 80050a4:	4980      	ldr	r1, [pc, #512]	; (80052a8 <_ZN10CDCHandler14ProcessCommandEv+0x32c>)
 80050a6:	e000      	b.n	80050aa <_ZN10CDCHandler14ProcessCommandEv+0x12e>
 80050a8:	4980      	ldr	r1, [pc, #512]	; (80052ac <_ZN10CDCHandler14ProcessCommandEv+0x330>)
				fwInfo.VersionMajor, fwInfo.VersionMinor, fwInfo.VersionSub, fwInfo.VersionBranch,
 80050aa:	f897 5050 	ldrb.w	r5, [r7, #80]	; 0x50
 80050ae:	f897 6051 	ldrb.w	r6, [r7, #81]	; 0x51
 80050b2:	f897 c052 	ldrb.w	ip, [r7, #82]	; 0x52
		sprintf(buf, "\r\nMountjoy Ball Remote v1.0 - Current Settings:\r\n\r\n"
 80050b6:	f8c7 c010 	str.w	ip, [r7, #16]
				fwInfo.VersionMajor, fwInfo.VersionMinor, fwInfo.VersionSub, fwInfo.VersionBranch,
 80050ba:	f897 c053 	ldrb.w	ip, [r7, #83]	; 0x53
		sprintf(buf, "\r\nMountjoy Ball Remote v1.0 - Current Settings:\r\n\r\n"
 80050be:	f8c7 c00c 	str.w	ip, [r7, #12]
				fwInfo.FusVersionMajor, fwInfo.FusVersionMinor, fwInfo.FusVersionSub,
 80050c2:	f897 c05a 	ldrb.w	ip, [r7, #90]	; 0x5a
		sprintf(buf, "\r\nMountjoy Ball Remote v1.0 - Current Settings:\r\n\r\n"
 80050c6:	f8c7 c008 	str.w	ip, [r7, #8]
				fwInfo.FusVersionMajor, fwInfo.FusVersionMinor, fwInfo.FusVersionSub,
 80050ca:	f897 c05b 	ldrb.w	ip, [r7, #91]	; 0x5b
		sprintf(buf, "\r\nMountjoy Ball Remote v1.0 - Current Settings:\r\n\r\n"
 80050ce:	f8c7 c004 	str.w	ip, [r7, #4]
				fwInfo.FusVersionMajor, fwInfo.FusVersionMinor, fwInfo.FusVersionSub,
 80050d2:	f897 c05c 	ldrb.w	ip, [r7, #92]	; 0x5c
		sprintf(buf, "\r\nMountjoy Ball Remote v1.0 - Current Settings:\r\n\r\n"
 80050d6:	4662      	mov	r2, ip
 80050d8:	f997 c063 	ldrsb.w	ip, [r7, #99]	; 0x63
 80050dc:	4663      	mov	r3, ip
 80050de:	9309      	str	r3, [sp, #36]	; 0x24
 80050e0:	9208      	str	r2, [sp, #32]
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	9307      	str	r3, [sp, #28]
 80050e6:	68bb      	ldr	r3, [r7, #8]
 80050e8:	9306      	str	r3, [sp, #24]
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	9305      	str	r3, [sp, #20]
 80050ee:	693b      	ldr	r3, [r7, #16]
 80050f0:	9304      	str	r3, [sp, #16]
 80050f2:	9603      	str	r6, [sp, #12]
 80050f4:	9502      	str	r5, [sp, #8]
 80050f6:	9101      	str	r1, [sp, #4]
 80050f8:	9000      	str	r0, [sp, #0]
 80050fa:	4642      	mov	r2, r8
 80050fc:	464b      	mov	r3, r9
 80050fe:	496c      	ldr	r1, [pc, #432]	; (80052b0 <_ZN10CDCHandler14ProcessCommandEv+0x334>)
 8005100:	4620      	mov	r0, r4
 8005102:	f005 fb95 	bl	800a830 <siprintf>
				rssi);

		usb->SendString(buf);
 8005106:	697b      	ldr	r3, [r7, #20]
 8005108:	685a      	ldr	r2, [r3, #4]
 800510a:	697b      	ldr	r3, [r7, #20]
 800510c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005110:	4619      	mov	r1, r3
 8005112:	4610      	mov	r0, r2
 8005114:	f002 f9d6 	bl	80074c4 <_ZN7USBMain10SendStringEPKc>
 8005118:	e2b2      	b.n	8005680 <_ZN10CDCHandler14ProcessCommandEv+0x704>


	} else if (cmd.compare("help") == 0) {
 800511a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800511e:	4965      	ldr	r1, [pc, #404]	; (80052b4 <_ZN10CDCHandler14ProcessCommandEv+0x338>)
 8005120:	4618      	mov	r0, r3
 8005122:	f7ff fe8f 	bl	8004e44 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE7compareEPKc>
 8005126:	4603      	mov	r3, r0
 8005128:	2b00      	cmp	r3, #0
 800512a:	bf0c      	ite	eq
 800512c:	2301      	moveq	r3, #1
 800512e:	2300      	movne	r3, #0
 8005130:	b2db      	uxtb	r3, r3
 8005132:	2b00      	cmp	r3, #0
 8005134:	d006      	beq.n	8005144 <_ZN10CDCHandler14ProcessCommandEv+0x1c8>

		usb->SendString("Mountjoy Ball Remote\r\n"
 8005136:	697b      	ldr	r3, [r7, #20]
 8005138:	685b      	ldr	r3, [r3, #4]
 800513a:	495f      	ldr	r1, [pc, #380]	; (80052b8 <_ZN10CDCHandler14ProcessCommandEv+0x33c>)
 800513c:	4618      	mov	r0, r3
 800513e:	f002 f9c1 	bl	80074c4 <_ZN7USBMain10SendStringEPKc>
 8005142:	e29d      	b.n	8005680 <_ZN10CDCHandler14ProcessCommandEv+0x704>
	} else if (cmd.compare("usbdebug") == 0) {				// Configure gate LED
		USBDebug = true;
		usb->SendString("Press link button to dump output\r\n");
#endif

	} else if (cmd.compare("outputgyro") == 0) {					// Output raw gyro data
 8005144:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8005148:	495c      	ldr	r1, [pc, #368]	; (80052bc <_ZN10CDCHandler14ProcessCommandEv+0x340>)
 800514a:	4618      	mov	r0, r3
 800514c:	f7ff fe7a 	bl	8004e44 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE7compareEPKc>
 8005150:	4603      	mov	r3, r0
 8005152:	2b00      	cmp	r3, #0
 8005154:	bf0c      	ite	eq
 8005156:	2301      	moveq	r3, #1
 8005158:	2300      	movne	r3, #0
 800515a:	b2db      	uxtb	r3, r3
 800515c:	2b00      	cmp	r3, #0
 800515e:	d015      	beq.n	800518c <_ZN10CDCHandler14ProcessCommandEv+0x210>
		hidService.outputGyro = !hidService.outputGyro;
 8005160:	4b57      	ldr	r3, [pc, #348]	; (80052c0 <_ZN10CDCHandler14ProcessCommandEv+0x344>)
 8005162:	785b      	ldrb	r3, [r3, #1]
 8005164:	f083 0301 	eor.w	r3, r3, #1
 8005168:	b2da      	uxtb	r2, r3
 800516a:	4b55      	ldr	r3, [pc, #340]	; (80052c0 <_ZN10CDCHandler14ProcessCommandEv+0x344>)
 800516c:	705a      	strb	r2, [r3, #1]
		if (!hidService.JoystickNotifications) {					// If not outputting to BLE client start timer interrupt
 800516e:	4b54      	ldr	r3, [pc, #336]	; (80052c0 <_ZN10CDCHandler14ProcessCommandEv+0x344>)
 8005170:	781b      	ldrb	r3, [r3, #0]
 8005172:	f083 0301 	eor.w	r3, r3, #1
 8005176:	b2db      	uxtb	r3, r3
 8005178:	2b00      	cmp	r3, #0
 800517a:	f000 8281 	beq.w	8005680 <_ZN10CDCHandler14ProcessCommandEv+0x704>
			gyro.ContinualRead(hidService.outputGyro);
 800517e:	4b50      	ldr	r3, [pc, #320]	; (80052c0 <_ZN10CDCHandler14ProcessCommandEv+0x344>)
 8005180:	785b      	ldrb	r3, [r3, #1]
 8005182:	4619      	mov	r1, r3
 8005184:	484f      	ldr	r0, [pc, #316]	; (80052c4 <_ZN10CDCHandler14ProcessCommandEv+0x348>)
 8005186:	f000 ff59 	bl	800603c <_ZN7GyroSPI13ContinualReadEb>
 800518a:	e279      	b.n	8005680 <_ZN10CDCHandler14ProcessCommandEv+0x704>
		}


	} else if (cmd.compare("gyroread") == 0) {						// Trigger a gyroscope read
 800518c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8005190:	494d      	ldr	r1, [pc, #308]	; (80052c8 <_ZN10CDCHandler14ProcessCommandEv+0x34c>)
 8005192:	4618      	mov	r0, r3
 8005194:	f7ff fe56 	bl	8004e44 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE7compareEPKc>
 8005198:	4603      	mov	r3, r0
 800519a:	2b00      	cmp	r3, #0
 800519c:	bf0c      	ite	eq
 800519e:	2301      	moveq	r3, #1
 80051a0:	2300      	movne	r3, #0
 80051a2:	b2db      	uxtb	r3, r3
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d018      	beq.n	80051da <_ZN10CDCHandler14ProcessCommandEv+0x25e>
		if (!hidService.JoystickNotifications) {
 80051a8:	4b45      	ldr	r3, [pc, #276]	; (80052c0 <_ZN10CDCHandler14ProcessCommandEv+0x344>)
 80051aa:	781b      	ldrb	r3, [r3, #0]
 80051ac:	f083 0301 	eor.w	r3, r3, #1
 80051b0:	b2db      	uxtb	r3, r3
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d002      	beq.n	80051bc <_ZN10CDCHandler14ProcessCommandEv+0x240>
			gyro.GyroRead();
 80051b6:	4843      	ldr	r0, [pc, #268]	; (80052c4 <_ZN10CDCHandler14ProcessCommandEv+0x348>)
 80051b8:	f000 ff10 	bl	8005fdc <_ZN7GyroSPI8GyroReadEv>
		}
		printf("x: %d, y:%d, z: %d\n", gyro.gyroData.x, gyro.gyroData.y, gyro.gyroData.z);
 80051bc:	4b41      	ldr	r3, [pc, #260]	; (80052c4 <_ZN10CDCHandler14ProcessCommandEv+0x348>)
 80051be:	f9b3 3000 	ldrsh.w	r3, [r3]
 80051c2:	4619      	mov	r1, r3
 80051c4:	4b3f      	ldr	r3, [pc, #252]	; (80052c4 <_ZN10CDCHandler14ProcessCommandEv+0x348>)
 80051c6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80051ca:	461a      	mov	r2, r3
 80051cc:	4b3d      	ldr	r3, [pc, #244]	; (80052c4 <_ZN10CDCHandler14ProcessCommandEv+0x348>)
 80051ce:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80051d2:	483e      	ldr	r0, [pc, #248]	; (80052cc <_ZN10CDCHandler14ProcessCommandEv+0x350>)
 80051d4:	f005 fa8a 	bl	800a6ec <iprintf>
 80051d8:	e252      	b.n	8005680 <_ZN10CDCHandler14ProcessCommandEv+0x704>

	} else if (cmd.compare(0, 8, "readspi:") == 0) {				// Read spi register
 80051da:	f107 0064 	add.w	r0, r7, #100	; 0x64
 80051de:	4b3c      	ldr	r3, [pc, #240]	; (80052d0 <_ZN10CDCHandler14ProcessCommandEv+0x354>)
 80051e0:	2208      	movs	r2, #8
 80051e2:	2100      	movs	r1, #0
 80051e4:	f7ff fe6d 	bl	8004ec2 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE7compareEjjPKc>
 80051e8:	4603      	mov	r3, r0
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	bf0c      	ite	eq
 80051ee:	2301      	moveq	r3, #1
 80051f0:	2300      	movne	r3, #0
 80051f2:	b2db      	uxtb	r3, r3
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d07a      	beq.n	80052ee <_ZN10CDCHandler14ProcessCommandEv+0x372>
		if (hidService.JoystickNotifications) {
 80051f8:	4b31      	ldr	r3, [pc, #196]	; (80052c0 <_ZN10CDCHandler14ProcessCommandEv+0x344>)
 80051fa:	781b      	ldrb	r3, [r3, #0]
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d006      	beq.n	800520e <_ZN10CDCHandler14ProcessCommandEv+0x292>
			usb->SendString("Currently connected\r\n");
 8005200:	697b      	ldr	r3, [r7, #20]
 8005202:	685b      	ldr	r3, [r3, #4]
 8005204:	4933      	ldr	r1, [pc, #204]	; (80052d4 <_ZN10CDCHandler14ProcessCommandEv+0x358>)
 8005206:	4618      	mov	r0, r3
 8005208:	f002 f95c 	bl	80074c4 <_ZN7USBMain10SendStringEPKc>
 800520c:	e238      	b.n	8005680 <_ZN10CDCHandler14ProcessCommandEv+0x704>
		} else {

			uint8_t regNo;
			auto res = std::from_chars(cmd.data() + cmd.find(":") + 1, cmd.data() + cmd.size(), regNo, 16);
 800520e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8005212:	4618      	mov	r0, r3
 8005214:	f000 fb55 	bl	80058c2 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4dataEv>
 8005218:	4604      	mov	r4, r0
 800521a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800521e:	2200      	movs	r2, #0
 8005220:	492d      	ldr	r1, [pc, #180]	; (80052d8 <_ZN10CDCHandler14ProcessCommandEv+0x35c>)
 8005222:	4618      	mov	r0, r3
 8005224:	f000 fb7c 	bl	8005920 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4findEPKcj>
 8005228:	4603      	mov	r3, r0
 800522a:	3301      	adds	r3, #1
 800522c:	441c      	add	r4, r3
 800522e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8005232:	4618      	mov	r0, r3
 8005234:	f000 fb45 	bl	80058c2 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4dataEv>
 8005238:	4605      	mov	r5, r0
 800523a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800523e:	4618      	mov	r0, r3
 8005240:	f7ff fe90 	bl	8004f64 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4sizeEv>
 8005244:	4603      	mov	r3, r0
 8005246:	18ea      	adds	r2, r5, r3
 8005248:	f107 0044 	add.w	r0, r7, #68	; 0x44
 800524c:	f107 034f 	add.w	r3, r7, #79	; 0x4f
 8005250:	2110      	movs	r1, #16
 8005252:	9100      	str	r1, [sp, #0]
 8005254:	4621      	mov	r1, r4
 8005256:	f000 fb77 	bl	8005948 <_ZSt10from_charsIhENSt9enable_ifIXsrSt5__or_IJS1_IJSt7is_sameINSt9remove_cvIT_E4typeEaES2_IS6_sES2_IS6_iES2_IS6_lES2_IS6_xEEES1_IJS2_IS6_hES2_IS6_tES2_IS6_jES2_IS6_mES2_IS6_yEEES2_IcS6_EEE5valueESt17from_chars_resultE4typeEPKcSP_RS4_i>

			if (res.ec == std::errc()) {
 800525a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800525c:	2b00      	cmp	r3, #0
 800525e:	d13f      	bne.n	80052e0 <_ZN10CDCHandler14ProcessCommandEv+0x364>
				uint8_t readData = gyro.ReadRegister(regNo);
 8005260:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8005264:	4619      	mov	r1, r3
 8005266:	4817      	ldr	r0, [pc, #92]	; (80052c4 <_ZN10CDCHandler14ProcessCommandEv+0x348>)
 8005268:	f000 fe6e 	bl	8005f48 <_ZN7GyroSPI12ReadRegisterEh>
 800526c:	4603      	mov	r3, r0
 800526e:	f887 30bf 	strb.w	r3, [r7, #191]	; 0xbf
				printf("I2C Register: %#04x Value: %#04x\r\n", regNo, readData);
 8005272:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8005276:	4619      	mov	r1, r3
 8005278:	f897 30bf 	ldrb.w	r3, [r7, #191]	; 0xbf
 800527c:	461a      	mov	r2, r3
 800527e:	4817      	ldr	r0, [pc, #92]	; (80052dc <_ZN10CDCHandler14ProcessCommandEv+0x360>)
 8005280:	f005 fa34 	bl	800a6ec <iprintf>
 8005284:	e1fc      	b.n	8005680 <_ZN10CDCHandler14ProcessCommandEv+0x704>
 8005286:	bf00      	nop
 8005288:	0800ca38 	.word	0x0800ca38
 800528c:	0800ca3c 	.word	0x0800ca3c
 8005290:	0800ca40 	.word	0x0800ca40
 8005294:	20000cdc 	.word	0x20000cdc
 8005298:	0800ca5c 	.word	0x0800ca5c
 800529c:	0800ca70 	.word	0x0800ca70
 80052a0:	20000c40 	.word	0x20000c40
 80052a4:	20000ca8 	.word	0x20000ca8
 80052a8:	0800ca78 	.word	0x0800ca78
 80052ac:	0800ca7c 	.word	0x0800ca7c
 80052b0:	0800ca84 	.word	0x0800ca84
 80052b4:	0800cb30 	.word	0x0800cb30
 80052b8:	0800cb38 	.word	0x0800cb38
 80052bc:	0800cd44 	.word	0x0800cd44
 80052c0:	20000cbc 	.word	0x20000cbc
 80052c4:	200003d8 	.word	0x200003d8
 80052c8:	0800cd50 	.word	0x0800cd50
 80052cc:	0800cd5c 	.word	0x0800cd5c
 80052d0:	0800cd70 	.word	0x0800cd70
 80052d4:	0800cd7c 	.word	0x0800cd7c
 80052d8:	0800cd94 	.word	0x0800cd94
 80052dc:	0800cd98 	.word	0x0800cd98
			} else {
				usb->SendString("Invalid register\r\n");
 80052e0:	697b      	ldr	r3, [r7, #20]
 80052e2:	685b      	ldr	r3, [r3, #4]
 80052e4:	49b1      	ldr	r1, [pc, #708]	; (80055ac <_ZN10CDCHandler14ProcessCommandEv+0x630>)
 80052e6:	4618      	mov	r0, r3
 80052e8:	f002 f8ec 	bl	80074c4 <_ZN7USBMain10SendStringEPKc>
 80052ec:	e1c8      	b.n	8005680 <_ZN10CDCHandler14ProcessCommandEv+0x704>
			}
		}

	} else if (cmd.compare(0, 9, "writespi:") == 0) {			// write i2c register
 80052ee:	f107 0064 	add.w	r0, r7, #100	; 0x64
 80052f2:	4baf      	ldr	r3, [pc, #700]	; (80055b0 <_ZN10CDCHandler14ProcessCommandEv+0x634>)
 80052f4:	2209      	movs	r2, #9
 80052f6:	2100      	movs	r1, #0
 80052f8:	f7ff fde3 	bl	8004ec2 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE7compareEjjPKc>
 80052fc:	4603      	mov	r3, r0
 80052fe:	2b00      	cmp	r3, #0
 8005300:	bf0c      	ite	eq
 8005302:	2301      	moveq	r3, #1
 8005304:	2300      	movne	r3, #0
 8005306:	b2db      	uxtb	r3, r3
 8005308:	2b00      	cmp	r3, #0
 800530a:	d07c      	beq.n	8005406 <_ZN10CDCHandler14ProcessCommandEv+0x48a>
		if (hidService.JoystickNotifications) {
 800530c:	4ba9      	ldr	r3, [pc, #676]	; (80055b4 <_ZN10CDCHandler14ProcessCommandEv+0x638>)
 800530e:	781b      	ldrb	r3, [r3, #0]
 8005310:	2b00      	cmp	r3, #0
 8005312:	d006      	beq.n	8005322 <_ZN10CDCHandler14ProcessCommandEv+0x3a6>
			usb->SendString("Currently connected\r\n");
 8005314:	697b      	ldr	r3, [r7, #20]
 8005316:	685b      	ldr	r3, [r3, #4]
 8005318:	49a7      	ldr	r1, [pc, #668]	; (80055b8 <_ZN10CDCHandler14ProcessCommandEv+0x63c>)
 800531a:	4618      	mov	r0, r3
 800531c:	f002 f8d2 	bl	80074c4 <_ZN7USBMain10SendStringEPKc>
 8005320:	e1ae      	b.n	8005680 <_ZN10CDCHandler14ProcessCommandEv+0x704>
		} else {

			uint8_t regNo, value;
			auto res = std::from_chars(cmd.data() + cmd.find(":") + 1, cmd.data() + cmd.size(), regNo, 16);
 8005322:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8005326:	4618      	mov	r0, r3
 8005328:	f000 facb 	bl	80058c2 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4dataEv>
 800532c:	4604      	mov	r4, r0
 800532e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8005332:	2200      	movs	r2, #0
 8005334:	49a1      	ldr	r1, [pc, #644]	; (80055bc <_ZN10CDCHandler14ProcessCommandEv+0x640>)
 8005336:	4618      	mov	r0, r3
 8005338:	f000 faf2 	bl	8005920 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4findEPKcj>
 800533c:	4603      	mov	r3, r0
 800533e:	3301      	adds	r3, #1
 8005340:	441c      	add	r4, r3
 8005342:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8005346:	4618      	mov	r0, r3
 8005348:	f000 fabb 	bl	80058c2 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4dataEv>
 800534c:	4605      	mov	r5, r0
 800534e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8005352:	4618      	mov	r0, r3
 8005354:	f7ff fe06 	bl	8004f64 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4sizeEv>
 8005358:	4603      	mov	r3, r0
 800535a:	18ea      	adds	r2, r5, r3
 800535c:	f107 0038 	add.w	r0, r7, #56	; 0x38
 8005360:	f107 0343 	add.w	r3, r7, #67	; 0x43
 8005364:	2110      	movs	r1, #16
 8005366:	9100      	str	r1, [sp, #0]
 8005368:	4621      	mov	r1, r4
 800536a:	f000 faed 	bl	8005948 <_ZSt10from_charsIhENSt9enable_ifIXsrSt5__or_IJS1_IJSt7is_sameINSt9remove_cvIT_E4typeEaES2_IS6_sES2_IS6_iES2_IS6_lES2_IS6_xEEES1_IJS2_IS6_hES2_IS6_tES2_IS6_jES2_IS6_mES2_IS6_yEEES2_IcS6_EEE5valueESt17from_chars_resultE4typeEPKcSP_RS4_i>

			if (res.ec == std::errc()) {			// no error
 800536e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005370:	2b00      	cmp	r3, #0
 8005372:	d141      	bne.n	80053f8 <_ZN10CDCHandler14ProcessCommandEv+0x47c>
				auto res = std::from_chars(cmd.data() + cmd.find(",") + 1, cmd.data() + cmd.size(), value, 16);
 8005374:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8005378:	4618      	mov	r0, r3
 800537a:	f000 faa2 	bl	80058c2 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4dataEv>
 800537e:	4604      	mov	r4, r0
 8005380:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8005384:	2200      	movs	r2, #0
 8005386:	498e      	ldr	r1, [pc, #568]	; (80055c0 <_ZN10CDCHandler14ProcessCommandEv+0x644>)
 8005388:	4618      	mov	r0, r3
 800538a:	f000 fac9 	bl	8005920 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4findEPKcj>
 800538e:	4603      	mov	r3, r0
 8005390:	3301      	adds	r3, #1
 8005392:	441c      	add	r4, r3
 8005394:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8005398:	4618      	mov	r0, r3
 800539a:	f000 fa92 	bl	80058c2 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4dataEv>
 800539e:	4605      	mov	r5, r0
 80053a0:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80053a4:	4618      	mov	r0, r3
 80053a6:	f7ff fddd 	bl	8004f64 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4sizeEv>
 80053aa:	4603      	mov	r3, r0
 80053ac:	18ea      	adds	r2, r5, r3
 80053ae:	f107 0030 	add.w	r0, r7, #48	; 0x30
 80053b2:	f107 0342 	add.w	r3, r7, #66	; 0x42
 80053b6:	2110      	movs	r1, #16
 80053b8:	9100      	str	r1, [sp, #0]
 80053ba:	4621      	mov	r1, r4
 80053bc:	f000 fac4 	bl	8005948 <_ZSt10from_charsIhENSt9enable_ifIXsrSt5__or_IJS1_IJSt7is_sameINSt9remove_cvIT_E4typeEaES2_IS6_sES2_IS6_iES2_IS6_lES2_IS6_xEEES1_IJS2_IS6_hES2_IS6_tES2_IS6_jES2_IS6_mES2_IS6_yEEES2_IcS6_EEE5valueESt17from_chars_resultE4typeEPKcSP_RS4_i>
				if (res.ec == std::errc()) {			// no error
 80053c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d111      	bne.n	80053ea <_ZN10CDCHandler14ProcessCommandEv+0x46e>
					gyro.WriteCmd(regNo, value);
 80053c6:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80053ca:	f897 2042 	ldrb.w	r2, [r7, #66]	; 0x42
 80053ce:	4619      	mov	r1, r3
 80053d0:	487c      	ldr	r0, [pc, #496]	; (80055c4 <_ZN10CDCHandler14ProcessCommandEv+0x648>)
 80053d2:	f000 fd7b 	bl	8005ecc <_ZN7GyroSPI8WriteCmdEhh>
					printf("SPI write: Register: %#04x Value: %#04x\r\n", regNo, value);
 80053d6:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80053da:	4619      	mov	r1, r3
 80053dc:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 80053e0:	461a      	mov	r2, r3
 80053e2:	4879      	ldr	r0, [pc, #484]	; (80055c8 <_ZN10CDCHandler14ProcessCommandEv+0x64c>)
 80053e4:	f005 f982 	bl	800a6ec <iprintf>
 80053e8:	e14a      	b.n	8005680 <_ZN10CDCHandler14ProcessCommandEv+0x704>
				} else {
					usb->SendString("Invalid value\r\n");
 80053ea:	697b      	ldr	r3, [r7, #20]
 80053ec:	685b      	ldr	r3, [r3, #4]
 80053ee:	4977      	ldr	r1, [pc, #476]	; (80055cc <_ZN10CDCHandler14ProcessCommandEv+0x650>)
 80053f0:	4618      	mov	r0, r3
 80053f2:	f002 f867 	bl	80074c4 <_ZN7USBMain10SendStringEPKc>
 80053f6:	e143      	b.n	8005680 <_ZN10CDCHandler14ProcessCommandEv+0x704>
				}
			} else {
				usb->SendString("Invalid register\r\n");
 80053f8:	697b      	ldr	r3, [r7, #20]
 80053fa:	685b      	ldr	r3, [r3, #4]
 80053fc:	496b      	ldr	r1, [pc, #428]	; (80055ac <_ZN10CDCHandler14ProcessCommandEv+0x630>)
 80053fe:	4618      	mov	r0, r3
 8005400:	f002 f860 	bl	80074c4 <_ZN7USBMain10SendStringEPKc>
 8005404:	e13c      	b.n	8005680 <_ZN10CDCHandler14ProcessCommandEv+0x704>
			}
		}


	} else if (cmd.compare("rssi") == 0) {					// RSSI value
 8005406:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800540a:	4971      	ldr	r1, [pc, #452]	; (80055d0 <_ZN10CDCHandler14ProcessCommandEv+0x654>)
 800540c:	4618      	mov	r0, r3
 800540e:	f7ff fd19 	bl	8004e44 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE7compareEPKc>
 8005412:	4603      	mov	r3, r0
 8005414:	2b00      	cmp	r3, #0
 8005416:	bf0c      	ite	eq
 8005418:	2301      	moveq	r3, #1
 800541a:	2300      	movne	r3, #0
 800541c:	b2db      	uxtb	r3, r3
 800541e:	2b00      	cmp	r3, #0
 8005420:	d025      	beq.n	800546e <_ZN10CDCHandler14ProcessCommandEv+0x4f2>
		if (bleApp.connectionStatus != BleApp::ConnStatus::Connected) {
 8005422:	4b6c      	ldr	r3, [pc, #432]	; (80055d4 <_ZN10CDCHandler14ProcessCommandEv+0x658>)
 8005424:	685b      	ldr	r3, [r3, #4]
 8005426:	2b05      	cmp	r3, #5
 8005428:	d003      	beq.n	8005432 <_ZN10CDCHandler14ProcessCommandEv+0x4b6>
			printf("Not connected\r\n");
 800542a:	486b      	ldr	r0, [pc, #428]	; (80055d8 <_ZN10CDCHandler14ProcessCommandEv+0x65c>)
 800542c:	f005 f9c4 	bl	800a7b8 <puts>
 8005430:	e126      	b.n	8005680 <_ZN10CDCHandler14ProcessCommandEv+0x704>
		} else {
			int8_t rssi = 0;
 8005432:	2300      	movs	r3, #0
 8005434:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (hci_read_rssi(bleApp.connectionHandle, (uint8_t*)&rssi) == 0) {
 8005438:	4b66      	ldr	r3, [pc, #408]	; (80055d4 <_ZN10CDCHandler14ProcessCommandEv+0x658>)
 800543a:	881b      	ldrh	r3, [r3, #0]
 800543c:	f107 022f 	add.w	r2, r7, #47	; 0x2f
 8005440:	4611      	mov	r1, r2
 8005442:	4618      	mov	r0, r3
 8005444:	f7fc fecd 	bl	80021e2 <hci_read_rssi>
 8005448:	4603      	mov	r3, r0
 800544a:	2b00      	cmp	r3, #0
 800544c:	bf0c      	ite	eq
 800544e:	2301      	moveq	r3, #1
 8005450:	2300      	movne	r3, #0
 8005452:	b2db      	uxtb	r3, r3
 8005454:	2b00      	cmp	r3, #0
 8005456:	d006      	beq.n	8005466 <_ZN10CDCHandler14ProcessCommandEv+0x4ea>
				printf("RSSI Value: %d dBm\r\n", rssi);
 8005458:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800545c:	4619      	mov	r1, r3
 800545e:	485f      	ldr	r0, [pc, #380]	; (80055dc <_ZN10CDCHandler14ProcessCommandEv+0x660>)
 8005460:	f005 f944 	bl	800a6ec <iprintf>
 8005464:	e10c      	b.n	8005680 <_ZN10CDCHandler14ProcessCommandEv+0x704>
			} else {
				printf("Error reading RSSI Value\r\n");
 8005466:	485e      	ldr	r0, [pc, #376]	; (80055e0 <_ZN10CDCHandler14ProcessCommandEv+0x664>)
 8005468:	f005 f9a6 	bl	800a7b8 <puts>
 800546c:	e108      	b.n	8005680 <_ZN10CDCHandler14ProcessCommandEv+0x704>
			}
		}

	} else if (cmd.compare("fwversion") == 0) {			// Version of BLE firmware
 800546e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8005472:	495c      	ldr	r1, [pc, #368]	; (80055e4 <_ZN10CDCHandler14ProcessCommandEv+0x668>)
 8005474:	4618      	mov	r0, r3
 8005476:	f7ff fce5 	bl	8004e44 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE7compareEPKc>
 800547a:	4603      	mov	r3, r0
 800547c:	2b00      	cmp	r3, #0
 800547e:	bf0c      	ite	eq
 8005480:	2301      	moveq	r3, #1
 8005482:	2300      	movne	r3, #0
 8005484:	b2db      	uxtb	r3, r3
 8005486:	2b00      	cmp	r3, #0
 8005488:	d025      	beq.n	80054d6 <_ZN10CDCHandler14ProcessCommandEv+0x55a>
		WirelessFwInfo_t fwInfo;
		if (SHCI_GetWirelessFwInfo(&fwInfo) == 0) {
 800548a:	f107 031c 	add.w	r3, r7, #28
 800548e:	4618      	mov	r0, r3
 8005490:	f7fc ffca 	bl	8002428 <SHCI_GetWirelessFwInfo>
 8005494:	4603      	mov	r3, r0
 8005496:	2b00      	cmp	r3, #0
 8005498:	bf0c      	ite	eq
 800549a:	2301      	moveq	r3, #1
 800549c:	2300      	movne	r3, #0
 800549e:	b2db      	uxtb	r3, r3
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	f000 80ed 	beq.w	8005680 <_ZN10CDCHandler14ProcessCommandEv+0x704>
			printf("BLE firmware version: %d.%d.%d.%d; FUS version: %d.%d.%d\r\n",
					fwInfo.VersionMajor, fwInfo.VersionMinor, fwInfo.VersionSub, fwInfo.VersionBranch,
 80054a6:	7f3b      	ldrb	r3, [r7, #28]
			printf("BLE firmware version: %d.%d.%d.%d; FUS version: %d.%d.%d\r\n",
 80054a8:	461c      	mov	r4, r3
					fwInfo.VersionMajor, fwInfo.VersionMinor, fwInfo.VersionSub, fwInfo.VersionBranch,
 80054aa:	7f7b      	ldrb	r3, [r7, #29]
			printf("BLE firmware version: %d.%d.%d.%d; FUS version: %d.%d.%d\r\n",
 80054ac:	461d      	mov	r5, r3
					fwInfo.VersionMajor, fwInfo.VersionMinor, fwInfo.VersionSub, fwInfo.VersionBranch,
 80054ae:	7fbb      	ldrb	r3, [r7, #30]
			printf("BLE firmware version: %d.%d.%d.%d; FUS version: %d.%d.%d\r\n",
 80054b0:	461e      	mov	r6, r3
					fwInfo.VersionMajor, fwInfo.VersionMinor, fwInfo.VersionSub, fwInfo.VersionBranch,
 80054b2:	7ffb      	ldrb	r3, [r7, #31]
					fwInfo.FusVersionMajor, fwInfo.FusVersionMinor, fwInfo.FusVersionSub);
 80054b4:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80054b8:	f897 1027 	ldrb.w	r1, [r7, #39]	; 0x27
 80054bc:	f897 0028 	ldrb.w	r0, [r7, #40]	; 0x28
			printf("BLE firmware version: %d.%d.%d.%d; FUS version: %d.%d.%d\r\n",
 80054c0:	9003      	str	r0, [sp, #12]
 80054c2:	9102      	str	r1, [sp, #8]
 80054c4:	9201      	str	r2, [sp, #4]
 80054c6:	9300      	str	r3, [sp, #0]
 80054c8:	4633      	mov	r3, r6
 80054ca:	462a      	mov	r2, r5
 80054cc:	4621      	mov	r1, r4
 80054ce:	4846      	ldr	r0, [pc, #280]	; (80055e8 <_ZN10CDCHandler14ProcessCommandEv+0x66c>)
 80054d0:	f005 f90c 	bl	800a6ec <iprintf>
 80054d4:	e0d4      	b.n	8005680 <_ZN10CDCHandler14ProcessCommandEv+0x704>
		}

	} else if (cmd.compare("sleep") == 0) {				// Enter sleep mode
 80054d6:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80054da:	4944      	ldr	r1, [pc, #272]	; (80055ec <_ZN10CDCHandler14ProcessCommandEv+0x670>)
 80054dc:	4618      	mov	r0, r3
 80054de:	f7ff fcb1 	bl	8004e44 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE7compareEPKc>
 80054e2:	4603      	mov	r3, r0
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	bf0c      	ite	eq
 80054e8:	2301      	moveq	r3, #1
 80054ea:	2300      	movne	r3, #0
 80054ec:	b2db      	uxtb	r3, r3
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d009      	beq.n	8005506 <_ZN10CDCHandler14ProcessCommandEv+0x58a>
		usb->SendString("Going to sleep\n");
 80054f2:	697b      	ldr	r3, [r7, #20]
 80054f4:	685b      	ldr	r3, [r3, #4]
 80054f6:	493e      	ldr	r1, [pc, #248]	; (80055f0 <_ZN10CDCHandler14ProcessCommandEv+0x674>)
 80054f8:	4618      	mov	r0, r3
 80054fa:	f001 ffe3 	bl	80074c4 <_ZN7USBMain10SendStringEPKc>
		extern bool sleep;
		sleep = true;		// Triggers idle routine UTIL_SEQ_Idle() in app_entry.c
 80054fe:	4b3d      	ldr	r3, [pc, #244]	; (80055f4 <_ZN10CDCHandler14ProcessCommandEv+0x678>)
 8005500:	2201      	movs	r2, #1
 8005502:	701a      	strb	r2, [r3, #0]
 8005504:	e0bc      	b.n	8005680 <_ZN10CDCHandler14ProcessCommandEv+0x704>

	} else if (cmd.compare("shutdown") == 0) {				// Enter sleep mode
 8005506:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800550a:	493b      	ldr	r1, [pc, #236]	; (80055f8 <_ZN10CDCHandler14ProcessCommandEv+0x67c>)
 800550c:	4618      	mov	r0, r3
 800550e:	f7ff fc99 	bl	8004e44 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE7compareEPKc>
 8005512:	4603      	mov	r3, r0
 8005514:	2b00      	cmp	r3, #0
 8005516:	bf0c      	ite	eq
 8005518:	2301      	moveq	r3, #1
 800551a:	2300      	movne	r3, #0
 800551c:	b2db      	uxtb	r3, r3
 800551e:	2b00      	cmp	r3, #0
 8005520:	d00c      	beq.n	800553c <_ZN10CDCHandler14ProcessCommandEv+0x5c0>
		usb->SendString("Shutting down\n");
 8005522:	697b      	ldr	r3, [r7, #20]
 8005524:	685b      	ldr	r3, [r3, #4]
 8005526:	4935      	ldr	r1, [pc, #212]	; (80055fc <_ZN10CDCHandler14ProcessCommandEv+0x680>)
 8005528:	4618      	mov	r0, r3
 800552a:	f001 ffcb 	bl	80074c4 <_ZN7USBMain10SendStringEPKc>
		bleApp.lowPowerMode = BleApp::LowPowerMode::Shutdown;
 800552e:	4b29      	ldr	r3, [pc, #164]	; (80055d4 <_ZN10CDCHandler14ProcessCommandEv+0x658>)
 8005530:	2201      	movs	r2, #1
 8005532:	609a      	str	r2, [r3, #8]
		extern bool sleep;
		sleep = true;		// Triggers idle routine UTIL_SEQ_Idle() in app_entry.c
 8005534:	4b2f      	ldr	r3, [pc, #188]	; (80055f4 <_ZN10CDCHandler14ProcessCommandEv+0x678>)
 8005536:	2201      	movs	r2, #1
 8005538:	701a      	strb	r2, [r3, #0]
 800553a:	e0a1      	b.n	8005680 <_ZN10CDCHandler14ProcessCommandEv+0x704>

	} else if (cmd.compare("canceladv") == 0) {			// Cancel advertising
 800553c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8005540:	492f      	ldr	r1, [pc, #188]	; (8005600 <_ZN10CDCHandler14ProcessCommandEv+0x684>)
 8005542:	4618      	mov	r0, r3
 8005544:	f7ff fc7e 	bl	8004e44 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE7compareEPKc>
 8005548:	4603      	mov	r3, r0
 800554a:	2b00      	cmp	r3, #0
 800554c:	bf0c      	ite	eq
 800554e:	2301      	moveq	r3, #1
 8005550:	2300      	movne	r3, #0
 8005552:	b2db      	uxtb	r3, r3
 8005554:	2b00      	cmp	r3, #0
 8005556:	d004      	beq.n	8005562 <_ZN10CDCHandler14ProcessCommandEv+0x5e6>
		UTIL_SEQ_SetTask(1 << CFG_TASK_CancelAdvertising, CFG_SCH_PRIO_0);
 8005558:	2100      	movs	r1, #0
 800555a:	2004      	movs	r0, #4
 800555c:	f7ff f990 	bl	8004880 <UTIL_SEQ_SetTask>
 8005560:	e08e      	b.n	8005680 <_ZN10CDCHandler14ProcessCommandEv+0x704>

	} else if (cmd.compare("startadv") == 0) {				// Start advertising
 8005562:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8005566:	4927      	ldr	r1, [pc, #156]	; (8005604 <_ZN10CDCHandler14ProcessCommandEv+0x688>)
 8005568:	4618      	mov	r0, r3
 800556a:	f7ff fc6b 	bl	8004e44 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE7compareEPKc>
 800556e:	4603      	mov	r3, r0
 8005570:	2b00      	cmp	r3, #0
 8005572:	bf0c      	ite	eq
 8005574:	2301      	moveq	r3, #1
 8005576:	2300      	movne	r3, #0
 8005578:	b2db      	uxtb	r3, r3
 800557a:	2b00      	cmp	r3, #0
 800557c:	d004      	beq.n	8005588 <_ZN10CDCHandler14ProcessCommandEv+0x60c>
		UTIL_SEQ_SetTask(1 << CFG_TASK_SwitchFastAdvertising, CFG_SCH_PRIO_0);
 800557e:	2100      	movs	r1, #0
 8005580:	2002      	movs	r0, #2
 8005582:	f7ff f97d 	bl	8004880 <UTIL_SEQ_SetTask>
 8005586:	e07b      	b.n	8005680 <_ZN10CDCHandler14ProcessCommandEv+0x704>

	} else if (cmd.compare("disconnect") == 0) {				// Disconnect client
 8005588:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800558c:	491e      	ldr	r1, [pc, #120]	; (8005608 <_ZN10CDCHandler14ProcessCommandEv+0x68c>)
 800558e:	4618      	mov	r0, r3
 8005590:	f7ff fc58 	bl	8004e44 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE7compareEPKc>
 8005594:	4603      	mov	r3, r0
 8005596:	2b00      	cmp	r3, #0
 8005598:	bf0c      	ite	eq
 800559a:	2301      	moveq	r3, #1
 800559c:	2300      	movne	r3, #0
 800559e:	b2db      	uxtb	r3, r3
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d033      	beq.n	800560c <_ZN10CDCHandler14ProcessCommandEv+0x690>
		bleApp.DisconnectRequest();
 80055a4:	f002 fd34 	bl	8008010 <_ZN6BleApp17DisconnectRequestEv>
 80055a8:	e06a      	b.n	8005680 <_ZN10CDCHandler14ProcessCommandEv+0x704>
 80055aa:	bf00      	nop
 80055ac:	0800cdbc 	.word	0x0800cdbc
 80055b0:	0800cdd0 	.word	0x0800cdd0
 80055b4:	20000cbc 	.word	0x20000cbc
 80055b8:	0800cd7c 	.word	0x0800cd7c
 80055bc:	0800cd94 	.word	0x0800cd94
 80055c0:	0800cddc 	.word	0x0800cddc
 80055c4:	200003d8 	.word	0x200003d8
 80055c8:	0800cde0 	.word	0x0800cde0
 80055cc:	0800ce0c 	.word	0x0800ce0c
 80055d0:	0800ce1c 	.word	0x0800ce1c
 80055d4:	20000c40 	.word	0x20000c40
 80055d8:	0800ce24 	.word	0x0800ce24
 80055dc:	0800ce34 	.word	0x0800ce34
 80055e0:	0800ce4c 	.word	0x0800ce4c
 80055e4:	0800ce68 	.word	0x0800ce68
 80055e8:	0800ce74 	.word	0x0800ce74
 80055ec:	0800ceb0 	.word	0x0800ceb0
 80055f0:	0800ceb8 	.word	0x0800ceb8
 80055f4:	20000cd8 	.word	0x20000cd8
 80055f8:	0800cec8 	.word	0x0800cec8
 80055fc:	0800ced4 	.word	0x0800ced4
 8005600:	0800cee4 	.word	0x0800cee4
 8005604:	0800cef0 	.word	0x0800cef0
 8005608:	0800cefc 	.word	0x0800cefc

	} else {
		usb->SendString("Unrecognised command: " + std::string(cmd) + "Type 'help' for supported commands\r\n");
 800560c:	697b      	ldr	r3, [r7, #20]
 800560e:	685c      	ldr	r4, [r3, #4]
 8005610:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8005614:	4618      	mov	r0, r3
 8005616:	f003 ffc9 	bl	80095ac <_ZNSaIcEC1Ev>
 800561a:	f107 02b4 	add.w	r2, r7, #180	; 0xb4
 800561e:	f107 0164 	add.w	r1, r7, #100	; 0x64
 8005622:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8005626:	4618      	mov	r0, r3
 8005628:	f000 f9f3 	bl	8005a12 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ISt17basic_string_viewIcS2_EvEERKT_RKS3_>
 800562c:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8005630:	f107 029c 	add.w	r2, r7, #156	; 0x9c
 8005634:	4917      	ldr	r1, [pc, #92]	; (8005694 <_ZN10CDCHandler14ProcessCommandEv+0x718>)
 8005636:	4618      	mov	r0, r3
 8005638:	f000 fa0c 	bl	8005a54 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_OS8_>
 800563c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8005640:	f107 0184 	add.w	r1, r7, #132	; 0x84
 8005644:	4a14      	ldr	r2, [pc, #80]	; (8005698 <_ZN10CDCHandler14ProcessCommandEv+0x71c>)
 8005646:	4618      	mov	r0, r3
 8005648:	f000 fa1c 	bl	8005a84 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_>
 800564c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8005650:	4619      	mov	r1, r3
 8005652:	4620      	mov	r0, r4
 8005654:	f001 ff59 	bl	800750a <_ZN7USBMain10SendStringERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8005658:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800565c:	4618      	mov	r0, r3
 800565e:	f004 f928 	bl	80098b2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8005662:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8005666:	4618      	mov	r0, r3
 8005668:	f004 f923 	bl	80098b2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800566c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8005670:	4618      	mov	r0, r3
 8005672:	f004 f91e 	bl	80098b2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8005676:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800567a:	4618      	mov	r0, r3
 800567c:	f003 ff97 	bl	80095ae <_ZNSaIcED1Ev>
	}

	cmdPending = false;
 8005680:	697b      	ldr	r3, [r7, #20]
 8005682:	2200      	movs	r2, #0
 8005684:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 8005688:	e000      	b.n	800568c <_ZN10CDCHandler14ProcessCommandEv+0x710>
		return;
 800568a:	bf00      	nop
}
 800568c:	37c4      	adds	r7, #196	; 0xc4
 800568e:	46bd      	mov	sp, r7
 8005690:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005694:	0800cf08 	.word	0x0800cf08
 8005698:	0800cf20 	.word	0x0800cf20

0800569c <_ZN10CDCHandler6DataInEv>:


void CDCHandler::DataIn()
{
 800569c:	b580      	push	{r7, lr}
 800569e:	b082      	sub	sp, #8
 80056a0:	af00      	add	r7, sp, #0
 80056a2:	6078      	str	r0, [r7, #4]
	if (inBuffSize > 0 && inBuffSize % USBMain::ep_maxPacket == 0) {
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	6a1b      	ldr	r3, [r3, #32]
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d00f      	beq.n	80056cc <_ZN10CDCHandler6DataInEv+0x30>
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	6a1b      	ldr	r3, [r3, #32]
 80056b0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d109      	bne.n	80056cc <_ZN10CDCHandler6DataInEv+0x30>
		inBuffSize = 0;
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	2200      	movs	r2, #0
 80056bc:	621a      	str	r2, [r3, #32]
		EndPointTransfer(Direction::in, inEP, 0);				// Fixes issue transmitting an exact multiple of max packet size (n x 64)
 80056be:	6878      	ldr	r0, [r7, #4]
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	7a1a      	ldrb	r2, [r3, #8]
 80056c4:	2300      	movs	r3, #0
 80056c6:	2100      	movs	r1, #0
 80056c8:	f002 f824 	bl	8007714 <_ZN10USBHandler16EndPointTransferE9Directionhm>
	}
}
 80056cc:	bf00      	nop
 80056ce:	3708      	adds	r7, #8
 80056d0:	46bd      	mov	sp, r7
 80056d2:	bd80      	pop	{r7, pc}

080056d4 <_ZN10CDCHandler7DataOutEv>:


// As this is called from an interrupt assign the command to a variable so it can be handled in the main loop
void CDCHandler::DataOut()
{
 80056d4:	b580      	push	{r7, lr}
 80056d6:	b084      	sub	sp, #16
 80056d8:	af00      	add	r7, sp, #0
 80056da:	6078      	str	r0, [r7, #4]
	// Check if sufficient space in command buffer
	const uint32_t newCharCnt = std::min(outBuffCount, maxCmdLen - 1 - buffPos);
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	f103 0210 	add.w	r2, r3, #16
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 80056e8:	f1c3 0327 	rsb	r3, r3, #39	; 0x27
 80056ec:	60bb      	str	r3, [r7, #8]
 80056ee:	f107 0308 	add.w	r3, r7, #8
 80056f2:	4619      	mov	r1, r3
 80056f4:	4610      	mov	r0, r2
 80056f6:	f000 f9dc 	bl	8005ab2 <_ZSt3minImERKT_S2_S2_>
 80056fa:	4603      	mov	r3, r0
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	60fb      	str	r3, [r7, #12]

	strncpy(&comCmd[buffPos], (char*)outBuff, newCharCnt);
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 8005706:	3328      	adds	r3, #40	; 0x28
 8005708:	687a      	ldr	r2, [r7, #4]
 800570a:	4413      	add	r3, r2
 800570c:	1d58      	adds	r0, r3, #5
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	68db      	ldr	r3, [r3, #12]
 8005712:	68fa      	ldr	r2, [r7, #12]
 8005714:	4619      	mov	r1, r3
 8005716:	f005 f9b5 	bl	800aa84 <strncpy>
	buffPos += newCharCnt;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	f8d3 2160 	ldr.w	r2, [r3, #352]	; 0x160
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	441a      	add	r2, r3
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

	// Check if cr has been sent yet
	if (comCmd[buffPos - 1] == 13 || comCmd[buffPos - 1] == 10 || buffPos == maxCmdLen - 1) {
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 8005730:	3b01      	subs	r3, #1
 8005732:	687a      	ldr	r2, [r7, #4]
 8005734:	4413      	add	r3, r2
 8005736:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800573a:	2b0d      	cmp	r3, #13
 800573c:	d00e      	beq.n	800575c <_ZN10CDCHandler7DataOutEv+0x88>
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 8005744:	3b01      	subs	r3, #1
 8005746:	687a      	ldr	r2, [r7, #4]
 8005748:	4413      	add	r3, r2
 800574a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800574e:	2b0a      	cmp	r3, #10
 8005750:	d004      	beq.n	800575c <_ZN10CDCHandler7DataOutEv+0x88>
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 8005758:	2b27      	cmp	r3, #39	; 0x27
 800575a:	d110      	bne.n	800577e <_ZN10CDCHandler7DataOutEv+0xaa>
		comCmd[buffPos - 1] = '\0';
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 8005762:	3b01      	subs	r3, #1
 8005764:	687a      	ldr	r2, [r7, #4]
 8005766:	4413      	add	r3, r2
 8005768:	2200      	movs	r2, #0
 800576a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
		cmdPending = true;
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	2201      	movs	r2, #1
 8005772:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
		buffPos = 0;
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	2200      	movs	r2, #0
 800577a:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160
	}
}
 800577e:	bf00      	nop
 8005780:	3710      	adds	r7, #16
 8005782:	46bd      	mov	sp, r7
 8005784:	bd80      	pop	{r7, pc}

08005786 <_ZN10CDCHandler10ActivateEPEv>:


void CDCHandler::ActivateEP()
{
 8005786:	b580      	push	{r7, lr}
 8005788:	b082      	sub	sp, #8
 800578a:	af00      	add	r7, sp, #0
 800578c:	6078      	str	r0, [r7, #4]
	EndPointActivate(USBMain::CDC_In,   Direction::in,  EndPointType::Bulk);			// Activate CDC in endpoint
 800578e:	6878      	ldr	r0, [r7, #4]
 8005790:	2302      	movs	r3, #2
 8005792:	2200      	movs	r2, #0
 8005794:	2181      	movs	r1, #129	; 0x81
 8005796:	f001 ffd0 	bl	800773a <_ZN10USBHandler16EndPointActivateEh9Direction12EndPointType>
	EndPointActivate(USBMain::CDC_Out,  Direction::out, EndPointType::Bulk);			// Activate CDC out endpoint
 800579a:	6878      	ldr	r0, [r7, #4]
 800579c:	2302      	movs	r3, #2
 800579e:	2201      	movs	r2, #1
 80057a0:	2101      	movs	r1, #1
 80057a2:	f001 ffca 	bl	800773a <_ZN10USBHandler16EndPointActivateEh9Direction12EndPointType>
	EndPointActivate(USBMain::CDC_Cmd,  Direction::in,  EndPointType::Interrupt);		// Activate Command IN EP
 80057a6:	6878      	ldr	r0, [r7, #4]
 80057a8:	2303      	movs	r3, #3
 80057aa:	2200      	movs	r2, #0
 80057ac:	2182      	movs	r1, #130	; 0x82
 80057ae:	f001 ffc4 	bl	800773a <_ZN10USBHandler16EndPointActivateEh9Direction12EndPointType>

	EndPointTransfer(Direction::out, USBMain::CDC_Out, USBMain::ep_maxPacket);
 80057b2:	6878      	ldr	r0, [r7, #4]
 80057b4:	2340      	movs	r3, #64	; 0x40
 80057b6:	2201      	movs	r2, #1
 80057b8:	2101      	movs	r1, #1
 80057ba:	f001 ffab 	bl	8007714 <_ZN10USBHandler16EndPointTransferE9Directionhm>
}
 80057be:	bf00      	nop
 80057c0:	3708      	adds	r7, #8
 80057c2:	46bd      	mov	sp, r7
 80057c4:	bd80      	pop	{r7, pc}

080057c6 <_ZN10CDCHandler10ClassSetupER10usbRequest>:


void CDCHandler::ClassSetup(usbRequest& req)
{
 80057c6:	b580      	push	{r7, lr}
 80057c8:	b082      	sub	sp, #8
 80057ca:	af00      	add	r7, sp, #0
 80057cc:	6078      	str	r0, [r7, #4]
 80057ce:	6039      	str	r1, [r7, #0]
	if (req.RequestType == DtoH_Class_Interface && req.Request == GetLineCoding) {
 80057d0:	683b      	ldr	r3, [r7, #0]
 80057d2:	781b      	ldrb	r3, [r3, #0]
 80057d4:	2ba1      	cmp	r3, #161	; 0xa1
 80057d6:	d10c      	bne.n	80057f2 <_ZN10CDCHandler10ClassSetupER10usbRequest+0x2c>
 80057d8:	683b      	ldr	r3, [r7, #0]
 80057da:	785b      	ldrb	r3, [r3, #1]
 80057dc:	2b21      	cmp	r3, #33	; 0x21
 80057de:	d108      	bne.n	80057f2 <_ZN10CDCHandler10ClassSetupER10usbRequest+0x2c>
		SetupIn(req.Length, (uint8_t*)&lineCoding);
 80057e0:	6878      	ldr	r0, [r7, #4]
 80057e2:	683b      	ldr	r3, [r7, #0]
 80057e4:	88db      	ldrh	r3, [r3, #6]
 80057e6:	4619      	mov	r1, r3
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	3358      	adds	r3, #88	; 0x58
 80057ec:	461a      	mov	r2, r3
 80057ee:	f001 ffb9 	bl	8007764 <_ZN10USBHandler7SetupInEmPKh>
	}

	if (req.RequestType == HtoD_Class_Interface && req.Request == SetLineCoding) {
 80057f2:	683b      	ldr	r3, [r7, #0]
 80057f4:	781b      	ldrb	r3, [r3, #0]
 80057f6:	2b21      	cmp	r3, #33	; 0x21
 80057f8:	d10f      	bne.n	800581a <_ZN10CDCHandler10ClassSetupER10usbRequest+0x54>
 80057fa:	683b      	ldr	r3, [r7, #0]
 80057fc:	785b      	ldrb	r3, [r3, #1]
 80057fe:	2b20      	cmp	r3, #32
 8005800:	d10b      	bne.n	800581a <_ZN10CDCHandler10ClassSetupER10usbRequest+0x54>
		// Prepare to receive line coding data in ClassSetupData
		usb->classPendingData = true;
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	685b      	ldr	r3, [r3, #4]
 8005806:	2201      	movs	r2, #1
 8005808:	f883 2698 	strb.w	r2, [r3, #1688]	; 0x698
		EndPointTransfer(Direction::out, 0, req.Length);
 800580c:	6878      	ldr	r0, [r7, #4]
 800580e:	683b      	ldr	r3, [r7, #0]
 8005810:	88db      	ldrh	r3, [r3, #6]
 8005812:	2200      	movs	r2, #0
 8005814:	2101      	movs	r1, #1
 8005816:	f001 ff7d 	bl	8007714 <_ZN10USBHandler16EndPointTransferE9Directionhm>
	}
}
 800581a:	bf00      	nop
 800581c:	3708      	adds	r7, #8
 800581e:	46bd      	mov	sp, r7
 8005820:	bd80      	pop	{r7, pc}

08005822 <_ZN10CDCHandler14ClassSetupDataER10usbRequestPKh>:


void CDCHandler::ClassSetupData(usbRequest& req, const uint8_t* data)
{
 8005822:	b480      	push	{r7}
 8005824:	b085      	sub	sp, #20
 8005826:	af00      	add	r7, sp, #0
 8005828:	60f8      	str	r0, [r7, #12]
 800582a:	60b9      	str	r1, [r7, #8]
 800582c:	607a      	str	r2, [r7, #4]
	// ClassSetup passes instruction to set line coding - this is the data portion where the line coding is transferred
	if (req.RequestType == HtoD_Class_Interface && req.Request == SetLineCoding) {
 800582e:	68bb      	ldr	r3, [r7, #8]
 8005830:	781b      	ldrb	r3, [r3, #0]
 8005832:	2b21      	cmp	r3, #33	; 0x21
 8005834:	d10a      	bne.n	800584c <_ZN10CDCHandler14ClassSetupDataER10usbRequestPKh+0x2a>
 8005836:	68bb      	ldr	r3, [r7, #8]
 8005838:	785b      	ldrb	r3, [r3, #1]
 800583a:	2b20      	cmp	r3, #32
 800583c:	d106      	bne.n	800584c <_ZN10CDCHandler14ClassSetupDataER10usbRequestPKh+0x2a>
		lineCoding = *(LineCoding*)data;
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	687a      	ldr	r2, [r7, #4]
 8005842:	3358      	adds	r3, #88	; 0x58
 8005844:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005848:	e883 0003 	stmia.w	r3, {r0, r1}
	}
}
 800584c:	bf00      	nop
 800584e:	3714      	adds	r7, #20
 8005850:	46bd      	mov	sp, r7
 8005852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005856:	4770      	bx	lr

08005858 <_ZN10CDCHandler22GetInterfaceDescriptorEPPKh>:
	HIBYTE(USBMain::ep_maxPacket),
	0x00,									// bInterval: ignore for Bulk transfer
};


uint32_t CDCHandler::GetInterfaceDescriptor(const uint8_t** buffer) {
 8005858:	b480      	push	{r7}
 800585a:	b083      	sub	sp, #12
 800585c:	af00      	add	r7, sp, #0
 800585e:	6078      	str	r0, [r7, #4]
 8005860:	6039      	str	r1, [r7, #0]
	*buffer = Descriptor;
 8005862:	683b      	ldr	r3, [r7, #0]
 8005864:	4a04      	ldr	r2, [pc, #16]	; (8005878 <_ZN10CDCHandler22GetInterfaceDescriptorEPPKh+0x20>)
 8005866:	601a      	str	r2, [r3, #0]
	return sizeof(Descriptor);
 8005868:	2342      	movs	r3, #66	; 0x42
}
 800586a:	4618      	mov	r0, r3
 800586c:	370c      	adds	r7, #12
 800586e:	46bd      	mov	sp, r7
 8005870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005874:	4770      	bx	lr
 8005876:	bf00      	nop
 8005878:	0800d5c4 	.word	0x0800d5c4

0800587c <_ZN9__gnu_cxx11char_traitsIcE4findEPKcjRS2_>:
    char_traits<_CharT>::
 800587c:	b580      	push	{r7, lr}
 800587e:	b086      	sub	sp, #24
 8005880:	af00      	add	r7, sp, #0
 8005882:	60f8      	str	r0, [r7, #12]
 8005884:	60b9      	str	r1, [r7, #8]
 8005886:	607a      	str	r2, [r7, #4]
      for (std::size_t __i = 0; __i < __n; ++__i)
 8005888:	2300      	movs	r3, #0
 800588a:	617b      	str	r3, [r7, #20]
 800588c:	e010      	b.n	80058b0 <_ZN9__gnu_cxx11char_traitsIcE4findEPKcjRS2_+0x34>
        if (eq(__s[__i], __a))
 800588e:	68fa      	ldr	r2, [r7, #12]
 8005890:	697b      	ldr	r3, [r7, #20]
 8005892:	4413      	add	r3, r2
 8005894:	6879      	ldr	r1, [r7, #4]
 8005896:	4618      	mov	r0, r3
 8005898:	f7ff f9e1 	bl	8004c5e <_ZN9__gnu_cxx11char_traitsIcE2eqERKcS3_>
 800589c:	4603      	mov	r3, r0
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d003      	beq.n	80058aa <_ZN9__gnu_cxx11char_traitsIcE4findEPKcjRS2_+0x2e>
          return __s + __i;
 80058a2:	68fa      	ldr	r2, [r7, #12]
 80058a4:	697b      	ldr	r3, [r7, #20]
 80058a6:	4413      	add	r3, r2
 80058a8:	e007      	b.n	80058ba <_ZN9__gnu_cxx11char_traitsIcE4findEPKcjRS2_+0x3e>
      for (std::size_t __i = 0; __i < __n; ++__i)
 80058aa:	697b      	ldr	r3, [r7, #20]
 80058ac:	3301      	adds	r3, #1
 80058ae:	617b      	str	r3, [r7, #20]
 80058b0:	697a      	ldr	r2, [r7, #20]
 80058b2:	68bb      	ldr	r3, [r7, #8]
 80058b4:	429a      	cmp	r2, r3
 80058b6:	d3ea      	bcc.n	800588e <_ZN9__gnu_cxx11char_traitsIcE4findEPKcjRS2_+0x12>
      return 0;
 80058b8:	2300      	movs	r3, #0
    }
 80058ba:	4618      	mov	r0, r3
 80058bc:	3718      	adds	r7, #24
 80058be:	46bd      	mov	sp, r7
 80058c0:	bd80      	pop	{r7, pc}

080058c2 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4dataEv>:
      data() const noexcept
 80058c2:	b480      	push	{r7}
 80058c4:	b083      	sub	sp, #12
 80058c6:	af00      	add	r7, sp, #0
 80058c8:	6078      	str	r0, [r7, #4]
      { return this->_M_str; }
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	685b      	ldr	r3, [r3, #4]
 80058ce:	4618      	mov	r0, r3
 80058d0:	370c      	adds	r7, #12
 80058d2:	46bd      	mov	sp, r7
 80058d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d8:	4770      	bx	lr

080058da <_ZNSt17basic_string_viewIcSt11char_traitsIcEEC1EPKcj>:
      basic_string_view(const _CharT* __str, size_type __len) noexcept
 80058da:	b480      	push	{r7}
 80058dc:	b085      	sub	sp, #20
 80058de:	af00      	add	r7, sp, #0
 80058e0:	60f8      	str	r0, [r7, #12]
 80058e2:	60b9      	str	r1, [r7, #8]
 80058e4:	607a      	str	r2, [r7, #4]
      : _M_len{__len}, _M_str{__str}
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	687a      	ldr	r2, [r7, #4]
 80058ea:	601a      	str	r2, [r3, #0]
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	68ba      	ldr	r2, [r7, #8]
 80058f0:	605a      	str	r2, [r3, #4]
      { }
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	4618      	mov	r0, r3
 80058f6:	3714      	adds	r7, #20
 80058f8:	46bd      	mov	sp, r7
 80058fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058fe:	4770      	bx	lr

08005900 <_ZNSt17basic_string_viewIcSt11char_traitsIcEE10_S_compareEjj>:
      }

    private:

      static constexpr int
      _S_compare(size_type __n1, size_type __n2) noexcept
 8005900:	b480      	push	{r7}
 8005902:	b085      	sub	sp, #20
 8005904:	af00      	add	r7, sp, #0
 8005906:	6078      	str	r0, [r7, #4]
 8005908:	6039      	str	r1, [r7, #0]
      {
	using __limits = __gnu_cxx::__int_traits<int>;
	const difference_type __diff = __n1 - __n2;
 800590a:	687a      	ldr	r2, [r7, #4]
 800590c:	683b      	ldr	r3, [r7, #0]
 800590e:	1ad3      	subs	r3, r2, r3
 8005910:	60fb      	str	r3, [r7, #12]
	if (__diff > __limits::__max)
	  return __limits::__max;
	if (__diff < __limits::__min)
	  return __limits::__min;
	return static_cast<int>(__diff);
 8005912:	68fb      	ldr	r3, [r7, #12]
      }
 8005914:	4618      	mov	r0, r3
 8005916:	3714      	adds	r7, #20
 8005918:	46bd      	mov	sp, r7
 800591a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800591e:	4770      	bx	lr

08005920 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4findEPKcj>:
      find(const _CharT* __str, size_type __pos = 0) const noexcept
 8005920:	b580      	push	{r7, lr}
 8005922:	b084      	sub	sp, #16
 8005924:	af00      	add	r7, sp, #0
 8005926:	60f8      	str	r0, [r7, #12]
 8005928:	60b9      	str	r1, [r7, #8]
 800592a:	607a      	str	r2, [r7, #4]
      { return this->find(__str, __pos, traits_type::length(__str)); }
 800592c:	68b8      	ldr	r0, [r7, #8]
 800592e:	f7ff f91d 	bl	8004b6c <_ZNSt11char_traitsIcE6lengthEPKc>
 8005932:	4603      	mov	r3, r0
 8005934:	687a      	ldr	r2, [r7, #4]
 8005936:	68b9      	ldr	r1, [r7, #8]
 8005938:	68f8      	ldr	r0, [r7, #12]
 800593a:	f000 f8ce 	bl	8005ada <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4findEPKcjj>
 800593e:	4603      	mov	r3, r0
 8005940:	4618      	mov	r0, r3
 8005942:	3710      	adds	r7, #16
 8005944:	46bd      	mov	sp, r7
 8005946:	bd80      	pop	{r7, pc}

08005948 <_ZSt10from_charsIhENSt9enable_ifIXsrSt5__or_IJS1_IJSt7is_sameINSt9remove_cvIT_E4typeEaES2_IS6_sES2_IS6_iES2_IS6_lES2_IS6_xEEES1_IJS2_IS6_hES2_IS6_tES2_IS6_jES2_IS6_mES2_IS6_yEEES2_IcS6_EEE5valueESt17from_chars_resultE4typeEPKcSP_RS4_i>:
} // namespace __detail

  /// std::from_chars for integral types.
  template<typename _Tp>
    __detail::__integer_from_chars_result_type<_Tp>
    from_chars(const char* __first, const char* __last, _Tp& __value,
 8005948:	b580      	push	{r7, lr}
 800594a:	b088      	sub	sp, #32
 800594c:	af00      	add	r7, sp, #0
 800594e:	60f8      	str	r0, [r7, #12]
 8005950:	60b9      	str	r1, [r7, #8]
 8005952:	607a      	str	r2, [r7, #4]
 8005954:	603b      	str	r3, [r7, #0]
	       int __base = 10)
    {
      __glibcxx_assert(2 <= __base && __base <= 36);

      from_chars_result __res{__first, {}};
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	461a      	mov	r2, r3
 800595a:	2300      	movs	r3, #0
 800595c:	6013      	str	r3, [r2, #0]
 800595e:	6053      	str	r3, [r2, #4]
 8005960:	68ba      	ldr	r2, [r7, #8]
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	601a      	str	r2, [r3, #0]

      int __sign = 1;
 8005966:	2301      	movs	r3, #1
 8005968:	61bb      	str	r3, [r7, #24]
	    __sign = -1;
	    ++__first;
	  }

      using _Up = __detail::__unsigned_least_t<_Tp>;
      _Up __val = 0;
 800596a:	2300      	movs	r3, #0
 800596c:	613b      	str	r3, [r7, #16]

      const auto __start = __first;
 800596e:	68bb      	ldr	r3, [r7, #8]
 8005970:	617b      	str	r3, [r7, #20]
      bool __valid;
      if (__base == 2)
 8005972:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005974:	2b02      	cmp	r3, #2
 8005976:	d10a      	bne.n	800598e <_ZSt10from_charsIhENSt9enable_ifIXsrSt5__or_IJS1_IJSt7is_sameINSt9remove_cvIT_E4typeEaES2_IS6_sES2_IS6_iES2_IS6_lES2_IS6_xEEES1_IJS2_IS6_hES2_IS6_tES2_IS6_jES2_IS6_mES2_IS6_yEEES2_IcS6_EEE5valueESt17from_chars_resultE4typeEPKcSP_RS4_i+0x46>
	__valid = __detail::__from_chars_binary(__first, __last, __val);
 8005978:	f107 0210 	add.w	r2, r7, #16
 800597c:	f107 0308 	add.w	r3, r7, #8
 8005980:	6879      	ldr	r1, [r7, #4]
 8005982:	4618      	mov	r0, r3
 8005984:	f000 f90e 	bl	8005ba4 <_ZNSt8__detail19__from_chars_binaryIjEEbRPKcS2_RT_>
 8005988:	4603      	mov	r3, r0
 800598a:	77fb      	strb	r3, [r7, #31]
 800598c:	e017      	b.n	80059be <_ZSt10from_charsIhENSt9enable_ifIXsrSt5__or_IJS1_IJSt7is_sameINSt9remove_cvIT_E4typeEaES2_IS6_sES2_IS6_iES2_IS6_lES2_IS6_xEEES1_IJS2_IS6_hES2_IS6_tES2_IS6_jES2_IS6_mES2_IS6_yEEES2_IcS6_EEE5valueESt17from_chars_resultE4typeEPKcSP_RS4_i+0x76>
      else if (__base <= 10)
 800598e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005990:	2b0a      	cmp	r3, #10
 8005992:	dc0a      	bgt.n	80059aa <_ZSt10from_charsIhENSt9enable_ifIXsrSt5__or_IJS1_IJSt7is_sameINSt9remove_cvIT_E4typeEaES2_IS6_sES2_IS6_iES2_IS6_lES2_IS6_xEEES1_IJS2_IS6_hES2_IS6_tES2_IS6_jES2_IS6_mES2_IS6_yEEES2_IcS6_EEE5valueESt17from_chars_resultE4typeEPKcSP_RS4_i+0x62>
	__valid = __detail::__from_chars_digit(__first, __last, __val, __base);
 8005994:	f107 0210 	add.w	r2, r7, #16
 8005998:	f107 0008 	add.w	r0, r7, #8
 800599c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800599e:	6879      	ldr	r1, [r7, #4]
 80059a0:	f000 f965 	bl	8005c6e <_ZNSt8__detail18__from_chars_digitIjEEbRPKcS2_RT_i>
 80059a4:	4603      	mov	r3, r0
 80059a6:	77fb      	strb	r3, [r7, #31]
 80059a8:	e009      	b.n	80059be <_ZSt10from_charsIhENSt9enable_ifIXsrSt5__or_IJS1_IJSt7is_sameINSt9remove_cvIT_E4typeEaES2_IS6_sES2_IS6_iES2_IS6_lES2_IS6_xEEES1_IJS2_IS6_hES2_IS6_tES2_IS6_jES2_IS6_mES2_IS6_yEEES2_IcS6_EEE5valueESt17from_chars_resultE4typeEPKcSP_RS4_i+0x76>
      else
	__valid = __detail::__from_chars_alnum(__first, __last, __val, __base);
 80059aa:	f107 0210 	add.w	r2, r7, #16
 80059ae:	f107 0008 	add.w	r0, r7, #8
 80059b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059b4:	6879      	ldr	r1, [r7, #4]
 80059b6:	f000 f9b0 	bl	8005d1a <_ZNSt8__detail18__from_chars_alnumIjEEbRPKcS2_RT_i>
 80059ba:	4603      	mov	r3, r0
 80059bc:	77fb      	strb	r3, [r7, #31]

      if (__builtin_expect(__first == __start, 0))
 80059be:	68bb      	ldr	r3, [r7, #8]
 80059c0:	697a      	ldr	r2, [r7, #20]
 80059c2:	429a      	cmp	r2, r3
 80059c4:	bf0c      	ite	eq
 80059c6:	2301      	moveq	r3, #1
 80059c8:	2300      	movne	r3, #0
 80059ca:	b2db      	uxtb	r3, r3
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d003      	beq.n	80059d8 <_ZSt10from_charsIhENSt9enable_ifIXsrSt5__or_IJS1_IJSt7is_sameINSt9remove_cvIT_E4typeEaES2_IS6_sES2_IS6_iES2_IS6_lES2_IS6_xEEES1_IJS2_IS6_hES2_IS6_tES2_IS6_jES2_IS6_mES2_IS6_yEEES2_IcS6_EEE5valueESt17from_chars_resultE4typeEPKcSP_RS4_i+0x90>
	__res.ec = errc::invalid_argument;
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	2216      	movs	r2, #22
 80059d4:	605a      	str	r2, [r3, #4]
		  else
		    __value = __val;
		}
	    }
	}
      return __res;
 80059d6:	e017      	b.n	8005a08 <_ZSt10from_charsIhENSt9enable_ifIXsrSt5__or_IJS1_IJSt7is_sameINSt9remove_cvIT_E4typeEaES2_IS6_sES2_IS6_iES2_IS6_lES2_IS6_xEEES1_IJS2_IS6_hES2_IS6_tES2_IS6_jES2_IS6_mES2_IS6_yEEES2_IcS6_EEE5valueESt17from_chars_resultE4typeEPKcSP_RS4_i+0xc0>
	  __res.ptr = __first;
 80059d8:	68ba      	ldr	r2, [r7, #8]
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	601a      	str	r2, [r3, #0]
	  if (!__valid)
 80059de:	7ffb      	ldrb	r3, [r7, #31]
 80059e0:	f083 0301 	eor.w	r3, r3, #1
 80059e4:	b2db      	uxtb	r3, r3
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d003      	beq.n	80059f2 <_ZSt10from_charsIhENSt9enable_ifIXsrSt5__or_IJS1_IJSt7is_sameINSt9remove_cvIT_E4typeEaES2_IS6_sES2_IS6_iES2_IS6_lES2_IS6_xEEES1_IJS2_IS6_hES2_IS6_tES2_IS6_jES2_IS6_mES2_IS6_yEEES2_IcS6_EEE5valueESt17from_chars_resultE4typeEPKcSP_RS4_i+0xaa>
	    __res.ec = errc::result_out_of_range;
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	2222      	movs	r2, #34	; 0x22
 80059ee:	605a      	str	r2, [r3, #4]
      return __res;
 80059f0:	e00a      	b.n	8005a08 <_ZSt10from_charsIhENSt9enable_ifIXsrSt5__or_IJS1_IJSt7is_sameINSt9remove_cvIT_E4typeEaES2_IS6_sES2_IS6_iES2_IS6_lES2_IS6_xEEES1_IJS2_IS6_hES2_IS6_tES2_IS6_jES2_IS6_mES2_IS6_yEEES2_IcS6_EEE5valueESt17from_chars_resultE4typeEPKcSP_RS4_i+0xc0>
		      if (__val > __gnu_cxx::__int_traits<_Tp>::__max)
 80059f2:	693b      	ldr	r3, [r7, #16]
 80059f4:	2bff      	cmp	r3, #255	; 0xff
 80059f6:	d903      	bls.n	8005a00 <_ZSt10from_charsIhENSt9enable_ifIXsrSt5__or_IJS1_IJSt7is_sameINSt9remove_cvIT_E4typeEaES2_IS6_sES2_IS6_iES2_IS6_lES2_IS6_xEEES1_IJS2_IS6_hES2_IS6_tES2_IS6_jES2_IS6_mES2_IS6_yEEES2_IcS6_EEE5valueESt17from_chars_resultE4typeEPKcSP_RS4_i+0xb8>
			__res.ec = errc::result_out_of_range;
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	2222      	movs	r2, #34	; 0x22
 80059fc:	605a      	str	r2, [r3, #4]
      return __res;
 80059fe:	e003      	b.n	8005a08 <_ZSt10from_charsIhENSt9enable_ifIXsrSt5__or_IJS1_IJSt7is_sameINSt9remove_cvIT_E4typeEaES2_IS6_sES2_IS6_iES2_IS6_lES2_IS6_xEEES1_IJS2_IS6_hES2_IS6_tES2_IS6_jES2_IS6_mES2_IS6_yEEES2_IcS6_EEE5valueESt17from_chars_resultE4typeEPKcSP_RS4_i+0xc0>
			__value = __val;
 8005a00:	693b      	ldr	r3, [r7, #16]
 8005a02:	b2da      	uxtb	r2, r3
 8005a04:	683b      	ldr	r3, [r7, #0]
 8005a06:	701a      	strb	r2, [r3, #0]
      return __res;
 8005a08:	bf00      	nop
    }
 8005a0a:	68f8      	ldr	r0, [r7, #12]
 8005a0c:	3720      	adds	r7, #32
 8005a0e:	46bd      	mov	sp, r7
 8005a10:	bd80      	pop	{r7, pc}

08005a12 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ISt17basic_string_viewIcS2_EvEERKT_RKS3_>:
       *  @param  __t  Source object convertible to string view.
       *  @param  __a  Allocator to use (default is default allocator).
       */
      template<typename _Tp, typename = _If_sv<_Tp, void>>
	explicit
	basic_string(const _Tp& __t, const _Alloc& __a = _Alloc())
 8005a12:	b580      	push	{r7, lr}
 8005a14:	b088      	sub	sp, #32
 8005a16:	af00      	add	r7, sp, #0
 8005a18:	60f8      	str	r0, [r7, #12]
 8005a1a:	60b9      	str	r1, [r7, #8]
 8005a1c:	607a      	str	r2, [r7, #4]
	: basic_string(__sv_wrapper(_S_to_string_view(__t)), __a) { }
 8005a1e:	f107 0018 	add.w	r0, r7, #24
 8005a22:	68bb      	ldr	r3, [r7, #8]
 8005a24:	e893 0006 	ldmia.w	r3, {r1, r2}
 8005a28:	f004 f85f 	bl	8009aea <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE17_S_to_string_viewESt17basic_string_viewIcS2_E>
 8005a2c:	f107 0010 	add.w	r0, r7, #16
 8005a30:	f107 0318 	add.w	r3, r7, #24
 8005a34:	e893 0006 	ldmia.w	r3, {r1, r2}
 8005a38:	f004 f84c 	bl	8009ad4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12__sv_wrapperC1ESt17basic_string_viewIcS2_E>
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	f107 0210 	add.w	r2, r7, #16
 8005a42:	ca06      	ldmia	r2, {r1, r2}
 8005a44:	68f8      	ldr	r0, [r7, #12]
 8005a46:	f004 f81b 	bl	8009a80 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ENS4_12__sv_wrapperERKS3_>
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	4618      	mov	r0, r3
 8005a4e:	3720      	adds	r7, #32
 8005a50:	46bd      	mov	sp, r7
 8005a52:	bd80      	pop	{r7, pc}

08005a54 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_OS8_>:
      return std::move(__lhs.append(__rhs));
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    inline basic_string<_CharT, _Traits, _Alloc>
    operator+(const _CharT* __lhs,
 8005a54:	b580      	push	{r7, lr}
 8005a56:	b084      	sub	sp, #16
 8005a58:	af00      	add	r7, sp, #0
 8005a5a:	60f8      	str	r0, [r7, #12]
 8005a5c:	60b9      	str	r1, [r7, #8]
 8005a5e:	607a      	str	r2, [r7, #4]
	      basic_string<_CharT, _Traits, _Alloc>&& __rhs)
    { return std::move(__rhs.insert(0, __lhs)); }
 8005a60:	68ba      	ldr	r2, [r7, #8]
 8005a62:	2100      	movs	r1, #0
 8005a64:	6878      	ldr	r0, [r7, #4]
 8005a66:	f003 ffc1 	bl	80099ec <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6insertEjPKc>
 8005a6a:	4603      	mov	r3, r0
 8005a6c:	4618      	mov	r0, r3
 8005a6e:	f000 f992 	bl	8005d96 <_ZSt4moveIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEONSt16remove_referenceIT_E4typeEOS8_>
 8005a72:	4603      	mov	r3, r0
 8005a74:	4619      	mov	r1, r3
 8005a76:	68f8      	ldr	r0, [r7, #12]
 8005a78:	f003 ff01 	bl	800987e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_>
 8005a7c:	68f8      	ldr	r0, [r7, #12]
 8005a7e:	3710      	adds	r7, #16
 8005a80:	46bd      	mov	sp, r7
 8005a82:	bd80      	pop	{r7, pc}

08005a84 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_>:
	      basic_string<_CharT, _Traits, _Alloc>&& __rhs)
    { return std::move(__rhs.insert(0, 1, __lhs)); }

  template<typename _CharT, typename _Traits, typename _Alloc>
    inline basic_string<_CharT, _Traits, _Alloc>
    operator+(basic_string<_CharT, _Traits, _Alloc>&& __lhs,
 8005a84:	b580      	push	{r7, lr}
 8005a86:	b084      	sub	sp, #16
 8005a88:	af00      	add	r7, sp, #0
 8005a8a:	60f8      	str	r0, [r7, #12]
 8005a8c:	60b9      	str	r1, [r7, #8]
 8005a8e:	607a      	str	r2, [r7, #4]
	      const _CharT* __rhs)
    { return std::move(__lhs.append(__rhs)); }
 8005a90:	6879      	ldr	r1, [r7, #4]
 8005a92:	68b8      	ldr	r0, [r7, #8]
 8005a94:	f003 ffdc 	bl	8009a50 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKc>
 8005a98:	4603      	mov	r3, r0
 8005a9a:	4618      	mov	r0, r3
 8005a9c:	f000 f97b 	bl	8005d96 <_ZSt4moveIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEONSt16remove_referenceIT_E4typeEOS8_>
 8005aa0:	4603      	mov	r3, r0
 8005aa2:	4619      	mov	r1, r3
 8005aa4:	68f8      	ldr	r0, [r7, #12]
 8005aa6:	f003 feea 	bl	800987e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_>
 8005aaa:	68f8      	ldr	r0, [r7, #12]
 8005aac:	3710      	adds	r7, #16
 8005aae:	46bd      	mov	sp, r7
 8005ab0:	bd80      	pop	{r7, pc}

08005ab2 <_ZSt3minImERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 8005ab2:	b480      	push	{r7}
 8005ab4:	b083      	sub	sp, #12
 8005ab6:	af00      	add	r7, sp, #0
 8005ab8:	6078      	str	r0, [r7, #4]
 8005aba:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 8005abc:	683b      	ldr	r3, [r7, #0]
 8005abe:	681a      	ldr	r2, [r3, #0]
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	429a      	cmp	r2, r3
 8005ac6:	d201      	bcs.n	8005acc <_ZSt3minImERKT_S2_S2_+0x1a>
	return __b;
 8005ac8:	683b      	ldr	r3, [r7, #0]
 8005aca:	e000      	b.n	8005ace <_ZSt3minImERKT_S2_S2_+0x1c>
      return __a;
 8005acc:	687b      	ldr	r3, [r7, #4]
    }
 8005ace:	4618      	mov	r0, r3
 8005ad0:	370c      	adds	r7, #12
 8005ad2:	46bd      	mov	sp, r7
 8005ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad8:	4770      	bx	lr

08005ada <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4findEPKcjj>:
{
_GLIBCXX_BEGIN_NAMESPACE_VERSION

  template<typename _CharT, typename _Traits>
    constexpr typename basic_string_view<_CharT, _Traits>::size_type
    basic_string_view<_CharT, _Traits>::
 8005ada:	b580      	push	{r7, lr}
 8005adc:	b088      	sub	sp, #32
 8005ade:	af00      	add	r7, sp, #0
 8005ae0:	60f8      	str	r0, [r7, #12]
 8005ae2:	60b9      	str	r1, [r7, #8]
 8005ae4:	607a      	str	r2, [r7, #4]
 8005ae6:	603b      	str	r3, [r7, #0]
    find(const _CharT* __str, size_type __pos, size_type __n) const noexcept
    {
      __glibcxx_requires_string_len(__str, __n);

      if (__n == 0)
 8005ae8:	683b      	ldr	r3, [r7, #0]
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d10a      	bne.n	8005b04 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4findEPKcjj+0x2a>
	return __pos <= _M_len ? __pos : npos;
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	681a      	ldr	r2, [r3, #0]
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	429a      	cmp	r2, r3
 8005af6:	d302      	bcc.n	8005afe <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4findEPKcjj+0x24>
 8005af8:	1d3b      	adds	r3, r7, #4
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	e04e      	b.n	8005b9c <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4findEPKcjj+0xc2>
 8005afe:	f04f 33ff 	mov.w	r3, #4294967295
 8005b02:	e04b      	b.n	8005b9c <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4findEPKcjj+0xc2>
      if (__pos >= _M_len)
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	681a      	ldr	r2, [r3, #0]
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	429a      	cmp	r2, r3
 8005b0c:	d802      	bhi.n	8005b14 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4findEPKcjj+0x3a>
	return npos;
 8005b0e:	f04f 33ff 	mov.w	r3, #4294967295
 8005b12:	e043      	b.n	8005b9c <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4findEPKcjj+0xc2>

      const _CharT __elem0 = __str[0];
 8005b14:	68bb      	ldr	r3, [r7, #8]
 8005b16:	781b      	ldrb	r3, [r3, #0]
 8005b18:	74fb      	strb	r3, [r7, #19]
      const _CharT* __first = _M_str + __pos;
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	685a      	ldr	r2, [r3, #4]
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	4413      	add	r3, r2
 8005b22:	61fb      	str	r3, [r7, #28]
      const _CharT* const __last = _M_str + _M_len;
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	685a      	ldr	r2, [r3, #4]
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	4413      	add	r3, r2
 8005b2e:	617b      	str	r3, [r7, #20]
      size_type __len = _M_len - __pos;
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	681a      	ldr	r2, [r3, #0]
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	1ad3      	subs	r3, r2, r3
 8005b38:	61bb      	str	r3, [r7, #24]

      while (__len >= __n)
 8005b3a:	e029      	b.n	8005b90 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4findEPKcjj+0xb6>
	{
	  // Find the first occurrence of __elem0:
	  __first = traits_type::find(__first, __len - __n + 1, __elem0);
 8005b3c:	69ba      	ldr	r2, [r7, #24]
 8005b3e:	683b      	ldr	r3, [r7, #0]
 8005b40:	1ad3      	subs	r3, r2, r3
 8005b42:	3301      	adds	r3, #1
 8005b44:	f107 0213 	add.w	r2, r7, #19
 8005b48:	4619      	mov	r1, r3
 8005b4a:	69f8      	ldr	r0, [r7, #28]
 8005b4c:	f7ff f825 	bl	8004b9a <_ZNSt11char_traitsIcE4findEPKcjRS1_>
 8005b50:	61f8      	str	r0, [r7, #28]
	  if (!__first)
 8005b52:	69fb      	ldr	r3, [r7, #28]
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d102      	bne.n	8005b5e <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4findEPKcjj+0x84>
	    return npos;
 8005b58:	f04f 33ff 	mov.w	r3, #4294967295
 8005b5c:	e01e      	b.n	8005b9c <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4findEPKcjj+0xc2>
	  // Compare the full strings from the first occurrence of __elem0.
	  // We already know that __first[0] == __s[0] but compare them again
	  // anyway because __s is probably aligned, which helps memcmp.
	  if (traits_type::compare(__first, __str, __n) == 0)
 8005b5e:	683a      	ldr	r2, [r7, #0]
 8005b60:	68b9      	ldr	r1, [r7, #8]
 8005b62:	69f8      	ldr	r0, [r7, #28]
 8005b64:	f7fe ffc0 	bl	8004ae8 <_ZNSt11char_traitsIcE7compareEPKcS2_j>
 8005b68:	4603      	mov	r3, r0
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	bf0c      	ite	eq
 8005b6e:	2301      	moveq	r3, #1
 8005b70:	2300      	movne	r3, #0
 8005b72:	b2db      	uxtb	r3, r3
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d004      	beq.n	8005b82 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4findEPKcjj+0xa8>
	    return __first - _M_str;
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	685b      	ldr	r3, [r3, #4]
 8005b7c:	69fa      	ldr	r2, [r7, #28]
 8005b7e:	1ad3      	subs	r3, r2, r3
 8005b80:	e00c      	b.n	8005b9c <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4findEPKcjj+0xc2>
	  __len = __last - ++__first;
 8005b82:	69fb      	ldr	r3, [r7, #28]
 8005b84:	3301      	adds	r3, #1
 8005b86:	61fb      	str	r3, [r7, #28]
 8005b88:	697a      	ldr	r2, [r7, #20]
 8005b8a:	69fb      	ldr	r3, [r7, #28]
 8005b8c:	1ad3      	subs	r3, r2, r3
 8005b8e:	61bb      	str	r3, [r7, #24]
      while (__len >= __n)
 8005b90:	69ba      	ldr	r2, [r7, #24]
 8005b92:	683b      	ldr	r3, [r7, #0]
 8005b94:	429a      	cmp	r2, r3
 8005b96:	d2d1      	bcs.n	8005b3c <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4findEPKcjj+0x62>
	}
      return npos;
 8005b98:	f04f 33ff 	mov.w	r3, #4294967295
    }
 8005b9c:	4618      	mov	r0, r3
 8005b9e:	3720      	adds	r7, #32
 8005ba0:	46bd      	mov	sp, r7
 8005ba2:	bd80      	pop	{r7, pc}

08005ba4 <_ZNSt8__detail19__from_chars_binaryIjEEbRPKcS2_RT_>:
    __from_chars_binary(const char*& __first, const char* __last, _Tp& __val)
 8005ba4:	b480      	push	{r7}
 8005ba6:	b089      	sub	sp, #36	; 0x24
 8005ba8:	af00      	add	r7, sp, #0
 8005baa:	60f8      	str	r0, [r7, #12]
 8005bac:	60b9      	str	r1, [r7, #8]
 8005bae:	607a      	str	r2, [r7, #4]
      const ptrdiff_t __len = __last - __first;
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	68ba      	ldr	r2, [r7, #8]
 8005bb6:	1ad3      	subs	r3, r2, r3
 8005bb8:	61bb      	str	r3, [r7, #24]
      ptrdiff_t __i = 0;
 8005bba:	2300      	movs	r3, #0
 8005bbc:	61fb      	str	r3, [r7, #28]
      while (__i < __len && __first[__i] == '0')
 8005bbe:	e002      	b.n	8005bc6 <_ZNSt8__detail19__from_chars_binaryIjEEbRPKcS2_RT_+0x22>
	++__i;
 8005bc0:	69fb      	ldr	r3, [r7, #28]
 8005bc2:	3301      	adds	r3, #1
 8005bc4:	61fb      	str	r3, [r7, #28]
      while (__i < __len && __first[__i] == '0')
 8005bc6:	69fa      	ldr	r2, [r7, #28]
 8005bc8:	69bb      	ldr	r3, [r7, #24]
 8005bca:	429a      	cmp	r2, r3
 8005bcc:	da06      	bge.n	8005bdc <_ZNSt8__detail19__from_chars_binaryIjEEbRPKcS2_RT_+0x38>
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	681a      	ldr	r2, [r3, #0]
 8005bd2:	69fb      	ldr	r3, [r7, #28]
 8005bd4:	4413      	add	r3, r2
 8005bd6:	781b      	ldrb	r3, [r3, #0]
 8005bd8:	2b30      	cmp	r3, #48	; 0x30
 8005bda:	d0f1      	beq.n	8005bc0 <_ZNSt8__detail19__from_chars_binaryIjEEbRPKcS2_RT_+0x1c>
      const ptrdiff_t __leading_zeroes = __i;
 8005bdc:	69fb      	ldr	r3, [r7, #28]
 8005bde:	617b      	str	r3, [r7, #20]
      while (__i < __len)
 8005be0:	e013      	b.n	8005c0a <_ZNSt8__detail19__from_chars_binaryIjEEbRPKcS2_RT_+0x66>
	  const unsigned char __c = (unsigned)__first[__i] - '0';
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	681a      	ldr	r2, [r3, #0]
 8005be6:	69fb      	ldr	r3, [r7, #28]
 8005be8:	4413      	add	r3, r2
 8005bea:	781b      	ldrb	r3, [r3, #0]
 8005bec:	3b30      	subs	r3, #48	; 0x30
 8005bee:	74fb      	strb	r3, [r7, #19]
	  if (__c < 2)
 8005bf0:	7cfb      	ldrb	r3, [r7, #19]
 8005bf2:	2b01      	cmp	r3, #1
 8005bf4:	d80e      	bhi.n	8005c14 <_ZNSt8__detail19__from_chars_binaryIjEEbRPKcS2_RT_+0x70>
	    __val = (__val << 1) | __c;
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	005a      	lsls	r2, r3, #1
 8005bfc:	7cfb      	ldrb	r3, [r7, #19]
 8005bfe:	431a      	orrs	r2, r3
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	601a      	str	r2, [r3, #0]
	  __i++;
 8005c04:	69fb      	ldr	r3, [r7, #28]
 8005c06:	3301      	adds	r3, #1
 8005c08:	61fb      	str	r3, [r7, #28]
      while (__i < __len)
 8005c0a:	69fa      	ldr	r2, [r7, #28]
 8005c0c:	69bb      	ldr	r3, [r7, #24]
 8005c0e:	429a      	cmp	r2, r3
 8005c10:	dbe7      	blt.n	8005be2 <_ZNSt8__detail19__from_chars_binaryIjEEbRPKcS2_RT_+0x3e>
 8005c12:	e000      	b.n	8005c16 <_ZNSt8__detail19__from_chars_binaryIjEEbRPKcS2_RT_+0x72>
	    break;
 8005c14:	bf00      	nop
      __first += __i;
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	681a      	ldr	r2, [r3, #0]
 8005c1a:	69fb      	ldr	r3, [r7, #28]
 8005c1c:	441a      	add	r2, r3
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	601a      	str	r2, [r3, #0]
      return (__i - __leading_zeroes) <= __gnu_cxx::__int_traits<_Tp>::__digits;
 8005c22:	69fa      	ldr	r2, [r7, #28]
 8005c24:	697b      	ldr	r3, [r7, #20]
 8005c26:	1ad3      	subs	r3, r2, r3
 8005c28:	2b20      	cmp	r3, #32
 8005c2a:	bfd4      	ite	le
 8005c2c:	2301      	movle	r3, #1
 8005c2e:	2300      	movgt	r3, #0
 8005c30:	b2db      	uxtb	r3, r3
    }
 8005c32:	4618      	mov	r0, r3
 8005c34:	3724      	adds	r7, #36	; 0x24
 8005c36:	46bd      	mov	sp, r7
 8005c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c3c:	4770      	bx	lr

08005c3e <_ZZNSt8__detail18__from_chars_digitIjEEbRPKcS2_RT_iENKUlcE_clEc>:
      auto __matches = [__base](char __c) {
 8005c3e:	b480      	push	{r7}
 8005c40:	b083      	sub	sp, #12
 8005c42:	af00      	add	r7, sp, #0
 8005c44:	6078      	str	r0, [r7, #4]
 8005c46:	460b      	mov	r3, r1
 8005c48:	70fb      	strb	r3, [r7, #3]
	  return '0' <= __c && __c <= ('0' + (__base - 1));
 8005c4a:	78fb      	ldrb	r3, [r7, #3]
 8005c4c:	2b2f      	cmp	r3, #47	; 0x2f
 8005c4e:	d907      	bls.n	8005c60 <_ZZNSt8__detail18__from_chars_digitIjEEbRPKcS2_RT_iENKUlcE_clEc+0x22>
 8005c50:	78fa      	ldrb	r2, [r7, #3]
      auto __matches = [__base](char __c) {
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
	  return '0' <= __c && __c <= ('0' + (__base - 1));
 8005c56:	332f      	adds	r3, #47	; 0x2f
 8005c58:	429a      	cmp	r2, r3
 8005c5a:	dc01      	bgt.n	8005c60 <_ZZNSt8__detail18__from_chars_digitIjEEbRPKcS2_RT_iENKUlcE_clEc+0x22>
 8005c5c:	2301      	movs	r3, #1
 8005c5e:	e000      	b.n	8005c62 <_ZZNSt8__detail18__from_chars_digitIjEEbRPKcS2_RT_iENKUlcE_clEc+0x24>
 8005c60:	2300      	movs	r3, #0
      auto __matches = [__base](char __c) {
 8005c62:	4618      	mov	r0, r3
 8005c64:	370c      	adds	r7, #12
 8005c66:	46bd      	mov	sp, r7
 8005c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c6c:	4770      	bx	lr

08005c6e <_ZNSt8__detail18__from_chars_digitIjEEbRPKcS2_RT_i>:
    __from_chars_digit(const char*& __first, const char* __last, _Tp& __val,
 8005c6e:	b580      	push	{r7, lr}
 8005c70:	b086      	sub	sp, #24
 8005c72:	af00      	add	r7, sp, #0
 8005c74:	60f8      	str	r0, [r7, #12]
 8005c76:	60b9      	str	r1, [r7, #8]
 8005c78:	607a      	str	r2, [r7, #4]
 8005c7a:	603b      	str	r3, [r7, #0]
      auto __matches = [__base](char __c) {
 8005c7c:	683b      	ldr	r3, [r7, #0]
 8005c7e:	613b      	str	r3, [r7, #16]
      while (__first != __last)
 8005c80:	e041      	b.n	8005d06 <_ZNSt8__detail18__from_chars_digitIjEEbRPKcS2_RT_i+0x98>
	  const char __c = *__first;
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	781b      	ldrb	r3, [r3, #0]
 8005c88:	75fb      	strb	r3, [r7, #23]
	  if (__matches(__c))
 8005c8a:	7dfa      	ldrb	r2, [r7, #23]
 8005c8c:	f107 0310 	add.w	r3, r7, #16
 8005c90:	4611      	mov	r1, r2
 8005c92:	4618      	mov	r0, r3
 8005c94:	f7ff ffd3 	bl	8005c3e <_ZZNSt8__detail18__from_chars_digitIjEEbRPKcS2_RT_iENKUlcE_clEc>
 8005c98:	4603      	mov	r3, r0
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d031      	beq.n	8005d02 <_ZNSt8__detail18__from_chars_digitIjEEbRPKcS2_RT_i+0x94>
	    if (!__raise_and_add(__val, __base, __c - '0'))
 8005c9e:	7dfb      	ldrb	r3, [r7, #23]
 8005ca0:	3b30      	subs	r3, #48	; 0x30
 8005ca2:	b2db      	uxtb	r3, r3
 8005ca4:	461a      	mov	r2, r3
 8005ca6:	6839      	ldr	r1, [r7, #0]
 8005ca8:	6878      	ldr	r0, [r7, #4]
 8005caa:	f000 f87f 	bl	8005dac <_ZNSt8__detail15__raise_and_addIjEEbRT_ih>
 8005cae:	4603      	mov	r3, r0
 8005cb0:	f083 0301 	eor.w	r3, r3, #1
 8005cb4:	b2db      	uxtb	r3, r3
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d01d      	beq.n	8005cf6 <_ZNSt8__detail18__from_chars_digitIjEEbRPKcS2_RT_i+0x88>
		while (++__first != __last && __matches(*__first))
 8005cba:	bf00      	nop
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	1c5a      	adds	r2, r3, #1
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	601a      	str	r2, [r3, #0]
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	68ba      	ldr	r2, [r7, #8]
 8005ccc:	429a      	cmp	r2, r3
 8005cce:	d00d      	beq.n	8005cec <_ZNSt8__detail18__from_chars_digitIjEEbRPKcS2_RT_i+0x7e>
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	781a      	ldrb	r2, [r3, #0]
 8005cd6:	f107 0310 	add.w	r3, r7, #16
 8005cda:	4611      	mov	r1, r2
 8005cdc:	4618      	mov	r0, r3
 8005cde:	f7ff ffae 	bl	8005c3e <_ZZNSt8__detail18__from_chars_digitIjEEbRPKcS2_RT_iENKUlcE_clEc>
 8005ce2:	4603      	mov	r3, r0
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d001      	beq.n	8005cec <_ZNSt8__detail18__from_chars_digitIjEEbRPKcS2_RT_i+0x7e>
 8005ce8:	2301      	movs	r3, #1
 8005cea:	e000      	b.n	8005cee <_ZNSt8__detail18__from_chars_digitIjEEbRPKcS2_RT_i+0x80>
 8005cec:	2300      	movs	r3, #0
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d1e4      	bne.n	8005cbc <_ZNSt8__detail18__from_chars_digitIjEEbRPKcS2_RT_i+0x4e>
		return false;
 8005cf2:	2300      	movs	r3, #0
 8005cf4:	e00d      	b.n	8005d12 <_ZNSt8__detail18__from_chars_digitIjEEbRPKcS2_RT_i+0xa4>
	    __first++;
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	1c5a      	adds	r2, r3, #1
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	601a      	str	r2, [r3, #0]
 8005d00:	e001      	b.n	8005d06 <_ZNSt8__detail18__from_chars_digitIjEEbRPKcS2_RT_i+0x98>
	    return true;
 8005d02:	2301      	movs	r3, #1
 8005d04:	e005      	b.n	8005d12 <_ZNSt8__detail18__from_chars_digitIjEEbRPKcS2_RT_i+0xa4>
      while (__first != __last)
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	68ba      	ldr	r2, [r7, #8]
 8005d0c:	429a      	cmp	r2, r3
 8005d0e:	d1b8      	bne.n	8005c82 <_ZNSt8__detail18__from_chars_digitIjEEbRPKcS2_RT_i+0x14>
      return true;
 8005d10:	2301      	movs	r3, #1
    }
 8005d12:	4618      	mov	r0, r3
 8005d14:	3718      	adds	r7, #24
 8005d16:	46bd      	mov	sp, r7
 8005d18:	bd80      	pop	{r7, pc}

08005d1a <_ZNSt8__detail18__from_chars_alnumIjEEbRPKcS2_RT_i>:
    __from_chars_alnum(const char*& __first, const char* __last, _Tp& __val,
 8005d1a:	b580      	push	{r7, lr}
 8005d1c:	b086      	sub	sp, #24
 8005d1e:	af00      	add	r7, sp, #0
 8005d20:	60f8      	str	r0, [r7, #12]
 8005d22:	60b9      	str	r1, [r7, #8]
 8005d24:	607a      	str	r2, [r7, #4]
 8005d26:	603b      	str	r3, [r7, #0]
      bool __valid = true;
 8005d28:	2301      	movs	r3, #1
 8005d2a:	75fb      	strb	r3, [r7, #23]
      while (__first != __last)
 8005d2c:	e027      	b.n	8005d7e <_ZNSt8__detail18__from_chars_alnumIjEEbRPKcS2_RT_i+0x64>
	  char __c = *__first;
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	781b      	ldrb	r3, [r3, #0]
 8005d34:	75bb      	strb	r3, [r7, #22]
	  if ('0' <= __c && __c <= '9') // isdigit
 8005d36:	7dbb      	ldrb	r3, [r7, #22]
 8005d38:	2b2f      	cmp	r3, #47	; 0x2f
 8005d3a:	d906      	bls.n	8005d4a <_ZNSt8__detail18__from_chars_alnumIjEEbRPKcS2_RT_i+0x30>
 8005d3c:	7dbb      	ldrb	r3, [r7, #22]
 8005d3e:	2b39      	cmp	r3, #57	; 0x39
 8005d40:	d803      	bhi.n	8005d4a <_ZNSt8__detail18__from_chars_alnumIjEEbRPKcS2_RT_i+0x30>
	    __c -= '0';
 8005d42:	7dbb      	ldrb	r3, [r7, #22]
 8005d44:	3b30      	subs	r3, #48	; 0x30
 8005d46:	75bb      	strb	r3, [r7, #22]
 8005d48:	e009      	b.n	8005d5e <_ZNSt8__detail18__from_chars_alnumIjEEbRPKcS2_RT_i+0x44>
	      __c = __from_chars_alpha_to_num(__c);
 8005d4a:	7dbb      	ldrb	r3, [r7, #22]
 8005d4c:	4618      	mov	r0, r3
 8005d4e:	f7fe ffbb 	bl	8004cc8 <_ZNSt8__detail25__from_chars_alpha_to_numEc>
 8005d52:	4603      	mov	r3, r0
 8005d54:	75bb      	strb	r3, [r7, #22]
	      if (__c >= __base)
 8005d56:	7dbb      	ldrb	r3, [r7, #22]
 8005d58:	683a      	ldr	r2, [r7, #0]
 8005d5a:	429a      	cmp	r2, r3
 8005d5c:	dd15      	ble.n	8005d8a <_ZNSt8__detail18__from_chars_alnumIjEEbRPKcS2_RT_i+0x70>
	  if (__builtin_expect(__valid, 1))
 8005d5e:	7dfb      	ldrb	r3, [r7, #23]
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d007      	beq.n	8005d74 <_ZNSt8__detail18__from_chars_alnumIjEEbRPKcS2_RT_i+0x5a>
	    __valid = __raise_and_add(__val, __base, __c);
 8005d64:	7dbb      	ldrb	r3, [r7, #22]
 8005d66:	461a      	mov	r2, r3
 8005d68:	6839      	ldr	r1, [r7, #0]
 8005d6a:	6878      	ldr	r0, [r7, #4]
 8005d6c:	f000 f81e 	bl	8005dac <_ZNSt8__detail15__raise_and_addIjEEbRT_ih>
 8005d70:	4603      	mov	r3, r0
 8005d72:	75fb      	strb	r3, [r7, #23]
	  __first++;
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	1c5a      	adds	r2, r3, #1
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	601a      	str	r2, [r3, #0]
      while (__first != __last)
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	68ba      	ldr	r2, [r7, #8]
 8005d84:	429a      	cmp	r2, r3
 8005d86:	d1d2      	bne.n	8005d2e <_ZNSt8__detail18__from_chars_alnumIjEEbRPKcS2_RT_i+0x14>
 8005d88:	e000      	b.n	8005d8c <_ZNSt8__detail18__from_chars_alnumIjEEbRPKcS2_RT_i+0x72>
		break;
 8005d8a:	bf00      	nop
      return __valid;
 8005d8c:	7dfb      	ldrb	r3, [r7, #23]
    }
 8005d8e:	4618      	mov	r0, r3
 8005d90:	3718      	adds	r7, #24
 8005d92:	46bd      	mov	sp, r7
 8005d94:	bd80      	pop	{r7, pc}

08005d96 <_ZSt4moveIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEONSt16remove_referenceIT_E4typeEOS8_>:
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    _GLIBCXX_NODISCARD
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 8005d96:	b480      	push	{r7}
 8005d98:	b083      	sub	sp, #12
 8005d9a:	af00      	add	r7, sp, #0
 8005d9c:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	4618      	mov	r0, r3
 8005da2:	370c      	adds	r7, #12
 8005da4:	46bd      	mov	sp, r7
 8005da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005daa:	4770      	bx	lr

08005dac <_ZNSt8__detail15__raise_and_addIjEEbRT_ih>:
    __raise_and_add(_Tp& __val, int __base, unsigned char __c)
 8005dac:	b4b0      	push	{r4, r5, r7}
 8005dae:	b085      	sub	sp, #20
 8005db0:	af00      	add	r7, sp, #0
 8005db2:	60f8      	str	r0, [r7, #12]
 8005db4:	60b9      	str	r1, [r7, #8]
 8005db6:	4613      	mov	r3, r2
 8005db8:	71fb      	strb	r3, [r7, #7]
      if (__builtin_mul_overflow(__val, __base, &__val)
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	2100      	movs	r1, #0
 8005dc0:	68ba      	ldr	r2, [r7, #8]
 8005dc2:	2a00      	cmp	r2, #0
 8005dc4:	da02      	bge.n	8005dcc <_ZNSt8__detail15__raise_and_addIjEEbRT_ih+0x20>
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d000      	beq.n	8005dcc <_ZNSt8__detail15__raise_and_addIjEEbRT_ih+0x20>
 8005dca:	2101      	movs	r1, #1
 8005dcc:	68ba      	ldr	r2, [r7, #8]
 8005dce:	fba3 4502 	umull	r4, r5, r3, r2
 8005dd2:	f04f 0200 	mov.w	r2, #0
 8005dd6:	f04f 0300 	mov.w	r3, #0
 8005dda:	002a      	movs	r2, r5
 8005ddc:	2300      	movs	r3, #0
 8005dde:	2a00      	cmp	r2, #0
 8005de0:	d000      	beq.n	8005de4 <_ZNSt8__detail15__raise_and_addIjEEbRT_ih+0x38>
 8005de2:	2101      	movs	r1, #1
 8005de4:	4623      	mov	r3, r4
 8005de6:	461a      	mov	r2, r3
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	601a      	str	r2, [r3, #0]
 8005dec:	460b      	mov	r3, r1
 8005dee:	f003 0301 	and.w	r3, r3, #1
 8005df2:	b2db      	uxtb	r3, r3
	  || __builtin_add_overflow(__val, __c, &__val))
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d10f      	bne.n	8005e18 <_ZNSt8__detail15__raise_and_addIjEEbRT_ih+0x6c>
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	79fa      	ldrb	r2, [r7, #7]
 8005dfe:	2100      	movs	r1, #0
 8005e00:	189b      	adds	r3, r3, r2
 8005e02:	d300      	bcc.n	8005e06 <_ZNSt8__detail15__raise_and_addIjEEbRT_ih+0x5a>
 8005e04:	2101      	movs	r1, #1
 8005e06:	461a      	mov	r2, r3
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	601a      	str	r2, [r3, #0]
 8005e0c:	460b      	mov	r3, r1
 8005e0e:	f003 0301 	and.w	r3, r3, #1
 8005e12:	b2db      	uxtb	r3, r3
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d001      	beq.n	8005e1c <_ZNSt8__detail15__raise_and_addIjEEbRT_ih+0x70>
 8005e18:	2301      	movs	r3, #1
 8005e1a:	e000      	b.n	8005e1e <_ZNSt8__detail15__raise_and_addIjEEbRT_ih+0x72>
 8005e1c:	2300      	movs	r3, #0
      if (__builtin_mul_overflow(__val, __base, &__val)
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d001      	beq.n	8005e26 <_ZNSt8__detail15__raise_and_addIjEEbRT_ih+0x7a>
	return false;
 8005e22:	2300      	movs	r3, #0
 8005e24:	e000      	b.n	8005e28 <_ZNSt8__detail15__raise_and_addIjEEbRT_ih+0x7c>
      return true;
 8005e26:	2301      	movs	r3, #1
    }
 8005e28:	4618      	mov	r0, r3
 8005e2a:	3714      	adds	r7, #20
 8005e2c:	46bd      	mov	sp, r7
 8005e2e:	bcb0      	pop	{r4, r5, r7}
 8005e30:	4770      	bx	lr
	...

08005e34 <__NVIC_EnableIRQ>:
{
 8005e34:	b480      	push	{r7}
 8005e36:	b083      	sub	sp, #12
 8005e38:	af00      	add	r7, sp, #0
 8005e3a:	4603      	mov	r3, r0
 8005e3c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005e3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	db0b      	blt.n	8005e5e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005e46:	79fb      	ldrb	r3, [r7, #7]
 8005e48:	f003 021f 	and.w	r2, r3, #31
 8005e4c:	4907      	ldr	r1, [pc, #28]	; (8005e6c <__NVIC_EnableIRQ+0x38>)
 8005e4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005e52:	095b      	lsrs	r3, r3, #5
 8005e54:	2001      	movs	r0, #1
 8005e56:	fa00 f202 	lsl.w	r2, r0, r2
 8005e5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8005e5e:	bf00      	nop
 8005e60:	370c      	adds	r7, #12
 8005e62:	46bd      	mov	sp, r7
 8005e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e68:	4770      	bx	lr
 8005e6a:	bf00      	nop
 8005e6c:	e000e100 	.word	0xe000e100

08005e70 <_ZN7GyroSPI15ClearReadBufferEv>:
	static constexpr uint16_t readGyro = (1 << 7);
	static constexpr uint16_t incrAddr = (1 << 6);
	static constexpr uint16_t dataRegStart = 0x28;		// Address of gyroscope register holding first data byte in sequence for full read
	uint8_t* const spi8BitWrite = (uint8_t*)&SPI1->DR;

	inline void ClearReadBuffer()
 8005e70:	b480      	push	{r7}
 8005e72:	b085      	sub	sp, #20
 8005e74:	af00      	add	r7, sp, #0
 8005e76:	6078      	str	r0, [r7, #4]
	{
		while ((SPI1->SR & SPI_SR_RXNE) == SPI_SR_RXNE) {
 8005e78:	e003      	b.n	8005e82 <_ZN7GyroSPI15ClearReadBufferEv+0x12>
			[[maybe_unused]] volatile uint16_t dummy = SPI1->DR;
 8005e7a:	4b0b      	ldr	r3, [pc, #44]	; (8005ea8 <_ZN7GyroSPI15ClearReadBufferEv+0x38>)
 8005e7c:	68db      	ldr	r3, [r3, #12]
 8005e7e:	b29b      	uxth	r3, r3
 8005e80:	81fb      	strh	r3, [r7, #14]
		while ((SPI1->SR & SPI_SR_RXNE) == SPI_SR_RXNE) {
 8005e82:	4b09      	ldr	r3, [pc, #36]	; (8005ea8 <_ZN7GyroSPI15ClearReadBufferEv+0x38>)
 8005e84:	689b      	ldr	r3, [r3, #8]
 8005e86:	f003 0301 	and.w	r3, r3, #1
 8005e8a:	2b01      	cmp	r3, #1
 8005e8c:	bf0c      	ite	eq
 8005e8e:	2301      	moveq	r3, #1
 8005e90:	2300      	movne	r3, #0
 8005e92:	b2db      	uxtb	r3, r3
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d1f0      	bne.n	8005e7a <_ZN7GyroSPI15ClearReadBufferEv+0xa>
		}
	}
 8005e98:	bf00      	nop
 8005e9a:	bf00      	nop
 8005e9c:	3714      	adds	r7, #20
 8005e9e:	46bd      	mov	sp, r7
 8005ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea4:	4770      	bx	lr
 8005ea6:	bf00      	nop
 8005ea8:	40013000 	.word	0x40013000

08005eac <_ZN7GyroSPIC1Ev>:
struct GyroSPI {
 8005eac:	b480      	push	{r7}
 8005eae:	b083      	sub	sp, #12
 8005eb0:	af00      	add	r7, sp, #0
 8005eb2:	6078      	str	r0, [r7, #4]
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	4a04      	ldr	r2, [pc, #16]	; (8005ec8 <_ZN7GyroSPIC1Ev+0x1c>)
 8005eb8:	609a      	str	r2, [r3, #8]
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	4618      	mov	r0, r3
 8005ebe:	370c      	adds	r7, #12
 8005ec0:	46bd      	mov	sp, r7
 8005ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec6:	4770      	bx	lr
 8005ec8:	4001300c 	.word	0x4001300c

08005ecc <_ZN7GyroSPI8WriteCmdEhh>:
}


// Writes data to a register
void GyroSPI::WriteCmd(uint8_t reg, uint8_t val)
{
 8005ecc:	b480      	push	{r7}
 8005ece:	b083      	sub	sp, #12
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	6078      	str	r0, [r7, #4]
 8005ed4:	460b      	mov	r3, r1
 8005ed6:	70fb      	strb	r3, [r7, #3]
 8005ed8:	4613      	mov	r3, r2
 8005eda:	70bb      	strb	r3, [r7, #2]
	// 16 bit command format: ~RW | ~MS | AD5 | ... | AD0 | DI7 | ... | DI0
	// MS bit: 0 = address remains unchanged in multiple read/write commands

	SPI1->CR2 |= SPI_CR2_DS;								// Set data size to 16 bit
 8005edc:	4b19      	ldr	r3, [pc, #100]	; (8005f44 <_ZN7GyroSPI8WriteCmdEhh+0x78>)
 8005ede:	685b      	ldr	r3, [r3, #4]
 8005ee0:	4a18      	ldr	r2, [pc, #96]	; (8005f44 <_ZN7GyroSPI8WriteCmdEhh+0x78>)
 8005ee2:	f443 6370 	orr.w	r3, r3, #3840	; 0xf00
 8005ee6:	6053      	str	r3, [r2, #4]
	GPIOA->ODR &= ~GPIO_ODR_OD15;							// Set CS low
 8005ee8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005eec:	695b      	ldr	r3, [r3, #20]
 8005eee:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8005ef2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005ef6:	6153      	str	r3, [r2, #20]

	SPI1->DR = (reg << 8) | val;
 8005ef8:	78fb      	ldrb	r3, [r7, #3]
 8005efa:	021a      	lsls	r2, r3, #8
 8005efc:	78bb      	ldrb	r3, [r7, #2]
 8005efe:	431a      	orrs	r2, r3
 8005f00:	4b10      	ldr	r3, [pc, #64]	; (8005f44 <_ZN7GyroSPI8WriteCmdEhh+0x78>)
 8005f02:	60da      	str	r2, [r3, #12]
	while ((SPI1->SR & SPI_SR_BSY) != 0) {}
 8005f04:	bf00      	nop
 8005f06:	4b0f      	ldr	r3, [pc, #60]	; (8005f44 <_ZN7GyroSPI8WriteCmdEhh+0x78>)
 8005f08:	689b      	ldr	r3, [r3, #8]
 8005f0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	bf14      	ite	ne
 8005f12:	2301      	movne	r3, #1
 8005f14:	2300      	moveq	r3, #0
 8005f16:	b2db      	uxtb	r3, r3
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d1f4      	bne.n	8005f06 <_ZN7GyroSPI8WriteCmdEhh+0x3a>

	GPIOA->ODR |= GPIO_ODR_OD15;							// Set CS high
 8005f1c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005f20:	695b      	ldr	r3, [r3, #20]
 8005f22:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8005f26:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f2a:	6153      	str	r3, [r2, #20]
	SPI1->CR2 &= ~SPI_CR2_DS;								// Set data size to 8 bit
 8005f2c:	4b05      	ldr	r3, [pc, #20]	; (8005f44 <_ZN7GyroSPI8WriteCmdEhh+0x78>)
 8005f2e:	685b      	ldr	r3, [r3, #4]
 8005f30:	4a04      	ldr	r2, [pc, #16]	; (8005f44 <_ZN7GyroSPI8WriteCmdEhh+0x78>)
 8005f32:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005f36:	6053      	str	r3, [r2, #4]
}
 8005f38:	bf00      	nop
 8005f3a:	370c      	adds	r7, #12
 8005f3c:	46bd      	mov	sp, r7
 8005f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f42:	4770      	bx	lr
 8005f44:	40013000 	.word	0x40013000

08005f48 <_ZN7GyroSPI12ReadRegisterEh>:


uint8_t GyroSPI::ReadRegister(uint8_t reg)
{
 8005f48:	b580      	push	{r7, lr}
 8005f4a:	b084      	sub	sp, #16
 8005f4c:	af00      	add	r7, sp, #0
 8005f4e:	6078      	str	r0, [r7, #4]
 8005f50:	460b      	mov	r3, r1
 8005f52:	70fb      	strb	r3, [r7, #3]
	GPIOA->ODR &= ~GPIO_ODR_OD15;							// Set CS low
 8005f54:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005f58:	695b      	ldr	r3, [r3, #20]
 8005f5a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8005f5e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005f62:	6153      	str	r3, [r2, #20]

	*spi8BitWrite = readGyro | reg; 						// set RW bit to 1 to indicate read
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	689b      	ldr	r3, [r3, #8]
 8005f68:	78fa      	ldrb	r2, [r7, #3]
 8005f6a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005f6e:	b2d2      	uxtb	r2, r2
 8005f70:	701a      	strb	r2, [r3, #0]
	ClearReadBuffer();										// Clear RX buffer while data is sending
 8005f72:	6878      	ldr	r0, [r7, #4]
 8005f74:	f7ff ff7c 	bl	8005e70 <_ZN7GyroSPI15ClearReadBufferEv>
	*spi8BitWrite = 0;										// Dummy write to trigger read - add to FIFO
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	689b      	ldr	r3, [r3, #8]
 8005f7c:	2200      	movs	r2, #0
 8005f7e:	701a      	strb	r2, [r3, #0]

	while ((SPI1->SR & SPI_SR_RXNE) == 0) {}
 8005f80:	bf00      	nop
 8005f82:	4b15      	ldr	r3, [pc, #84]	; (8005fd8 <_ZN7GyroSPI12ReadRegisterEh+0x90>)
 8005f84:	689b      	ldr	r3, [r3, #8]
 8005f86:	f003 0301 	and.w	r3, r3, #1
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	bf0c      	ite	eq
 8005f8e:	2301      	moveq	r3, #1
 8005f90:	2300      	movne	r3, #0
 8005f92:	b2db      	uxtb	r3, r3
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d1f4      	bne.n	8005f82 <_ZN7GyroSPI12ReadRegisterEh+0x3a>
	[[maybe_unused]] volatile uint8_t dummy = SPI1->DR;		// Clear dummy read
 8005f98:	4b0f      	ldr	r3, [pc, #60]	; (8005fd8 <_ZN7GyroSPI12ReadRegisterEh+0x90>)
 8005f9a:	68db      	ldr	r3, [r3, #12]
 8005f9c:	b2db      	uxtb	r3, r3
 8005f9e:	73fb      	strb	r3, [r7, #15]

	while ((SPI1->SR & SPI_SR_RXNE) == 0) {}				// Wait for RX data to be ready
 8005fa0:	bf00      	nop
 8005fa2:	4b0d      	ldr	r3, [pc, #52]	; (8005fd8 <_ZN7GyroSPI12ReadRegisterEh+0x90>)
 8005fa4:	689b      	ldr	r3, [r3, #8]
 8005fa6:	f003 0301 	and.w	r3, r3, #1
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	bf0c      	ite	eq
 8005fae:	2301      	moveq	r3, #1
 8005fb0:	2300      	movne	r3, #0
 8005fb2:	b2db      	uxtb	r3, r3
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d1f4      	bne.n	8005fa2 <_ZN7GyroSPI12ReadRegisterEh+0x5a>
	GPIOA->ODR |= GPIO_ODR_OD15;							// Set CS high
 8005fb8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005fbc:	695b      	ldr	r3, [r3, #20]
 8005fbe:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8005fc2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005fc6:	6153      	str	r3, [r2, #20]

	return SPI1->DR;
 8005fc8:	4b03      	ldr	r3, [pc, #12]	; (8005fd8 <_ZN7GyroSPI12ReadRegisterEh+0x90>)
 8005fca:	68db      	ldr	r3, [r3, #12]
 8005fcc:	b2db      	uxtb	r3, r3
}
 8005fce:	4618      	mov	r0, r3
 8005fd0:	3710      	adds	r7, #16
 8005fd2:	46bd      	mov	sp, r7
 8005fd4:	bd80      	pop	{r7, pc}
 8005fd6:	bf00      	nop
 8005fd8:	40013000 	.word	0x40013000

08005fdc <_ZN7GyroSPI8GyroReadEv>:


void GyroSPI::GyroRead()
{
 8005fdc:	b480      	push	{r7}
 8005fde:	b083      	sub	sp, #12
 8005fe0:	af00      	add	r7, sp, #0
 8005fe2:	6078      	str	r0, [r7, #4]

	GPIOA->ODR |= GPIO_ODR_OD15;							// Set CS high

	uint16_t* buff16bit = (uint16_t*)gyroBuffer;
*/
	gyroData.x = 0x1111;
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	f241 1211 	movw	r2, #4369	; 0x1111
 8005fea:	801a      	strh	r2, [r3, #0]
	gyroData.y = 0x2222;
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	f242 2222 	movw	r2, #8738	; 0x2222
 8005ff2:	805a      	strh	r2, [r3, #2]
	gyroData.z = 0x3333;
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	f243 3233 	movw	r2, #13107	; 0x3333
 8005ffa:	809a      	strh	r2, [r3, #4]
}
 8005ffc:	bf00      	nop
 8005ffe:	370c      	adds	r7, #12
 8006000:	46bd      	mov	sp, r7
 8006002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006006:	4770      	bx	lr

08006008 <_ZN7GyroSPI10OutputGyroEv>:


void GyroSPI::OutputGyro()
{
 8006008:	b580      	push	{r7, lr}
 800600a:	b082      	sub	sp, #8
 800600c:	af00      	add	r7, sp, #0
 800600e:	6078      	str	r0, [r7, #4]
	GyroRead();
 8006010:	6878      	ldr	r0, [r7, #4]
 8006012:	f7ff ffe3 	bl	8005fdc <_ZN7GyroSPI8GyroReadEv>
	hidService.JoystickNotification(gyroData.x, gyroData.y, gyroData.z);
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	f9b3 1000 	ldrsh.w	r1, [r3]
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8006028:	4803      	ldr	r0, [pc, #12]	; (8006038 <_ZN7GyroSPI10OutputGyroEv+0x30>)
 800602a:	f002 fd99 	bl	8008b60 <_ZN10HidService20JoystickNotificationEsss>
}
 800602e:	bf00      	nop
 8006030:	3708      	adds	r7, #8
 8006032:	46bd      	mov	sp, r7
 8006034:	bd80      	pop	{r7, pc}
 8006036:	bf00      	nop
 8006038:	20000cbc 	.word	0x20000cbc

0800603c <_ZN7GyroSPI13ContinualReadEb>:


void GyroSPI::ContinualRead(bool on)
{
 800603c:	b580      	push	{r7, lr}
 800603e:	b082      	sub	sp, #8
 8006040:	af00      	add	r7, sp, #0
 8006042:	6078      	str	r0, [r7, #4]
 8006044:	460b      	mov	r3, r1
 8006046:	70fb      	strb	r3, [r7, #3]
	// Initiate Timer to output continual readings
	if (on) {
 8006048:	78fb      	ldrb	r3, [r7, #3]
 800604a:	2b00      	cmp	r3, #0
 800604c:	d00b      	beq.n	8006066 <_ZN7GyroSPI13ContinualReadEb+0x2a>
		TIM2->CR1 |= TIM_CR1_CEN;
 800604e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8006058:	f043 0301 	orr.w	r3, r3, #1
 800605c:	6013      	str	r3, [r2, #0]
		NVIC_EnableIRQ(TIM2_IRQn);
 800605e:	201c      	movs	r0, #28
 8006060:	f7ff fee8 	bl	8005e34 <__NVIC_EnableIRQ>
	} else {
		TIM2->CR1 &= ~TIM_CR1_CEN;
	}
}
 8006064:	e007      	b.n	8006076 <_ZN7GyroSPI13ContinualReadEb+0x3a>
		TIM2->CR1 &= ~TIM_CR1_CEN;
 8006066:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8006070:	f023 0301 	bic.w	r3, r3, #1
 8006074:	6013      	str	r3, [r2, #0]
}
 8006076:	bf00      	nop
 8006078:	3708      	adds	r7, #8
 800607a:	46bd      	mov	sp, r7
 800607c:	bd80      	pop	{r7, pc}
	...

08006080 <_Z41__static_initialization_and_destruction_0ii>:
 8006080:	b580      	push	{r7, lr}
 8006082:	b082      	sub	sp, #8
 8006084:	af00      	add	r7, sp, #0
 8006086:	6078      	str	r0, [r7, #4]
 8006088:	6039      	str	r1, [r7, #0]
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	2b01      	cmp	r3, #1
 800608e:	d107      	bne.n	80060a0 <_Z41__static_initialization_and_destruction_0ii+0x20>
 8006090:	683b      	ldr	r3, [r7, #0]
 8006092:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006096:	4293      	cmp	r3, r2
 8006098:	d102      	bne.n	80060a0 <_Z41__static_initialization_and_destruction_0ii+0x20>
GyroSPI gyro;		// For use with ST L3GD20
 800609a:	4803      	ldr	r0, [pc, #12]	; (80060a8 <_Z41__static_initialization_and_destruction_0ii+0x28>)
 800609c:	f7ff ff06 	bl	8005eac <_ZN7GyroSPIC1Ev>
}
 80060a0:	bf00      	nop
 80060a2:	3708      	adds	r7, #8
 80060a4:	46bd      	mov	sp, r7
 80060a6:	bd80      	pop	{r7, pc}
 80060a8:	200003d8 	.word	0x200003d8

080060ac <_GLOBAL__sub_I_gyro>:
 80060ac:	b580      	push	{r7, lr}
 80060ae:	af00      	add	r7, sp, #0
 80060b0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80060b4:	2001      	movs	r0, #1
 80060b6:	f7ff ffe3 	bl	8006080 <_Z41__static_initialization_and_destruction_0ii>
 80060ba:	bd80      	pop	{r7, pc}

080060bc <__NVIC_EnableIRQ>:
{
 80060bc:	b480      	push	{r7}
 80060be:	b083      	sub	sp, #12
 80060c0:	af00      	add	r7, sp, #0
 80060c2:	4603      	mov	r3, r0
 80060c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80060c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	db0b      	blt.n	80060e6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80060ce:	79fb      	ldrb	r3, [r7, #7]
 80060d0:	f003 021f 	and.w	r2, r3, #31
 80060d4:	4907      	ldr	r1, [pc, #28]	; (80060f4 <__NVIC_EnableIRQ+0x38>)
 80060d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80060da:	095b      	lsrs	r3, r3, #5
 80060dc:	2001      	movs	r0, #1
 80060de:	fa00 f202 	lsl.w	r2, r0, r2
 80060e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80060e6:	bf00      	nop
 80060e8:	370c      	adds	r7, #12
 80060ea:	46bd      	mov	sp, r7
 80060ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f0:	4770      	bx	lr
 80060f2:	bf00      	nop
 80060f4:	e000e100 	.word	0xe000e100

080060f8 <__NVIC_SetPriority>:
{
 80060f8:	b480      	push	{r7}
 80060fa:	b083      	sub	sp, #12
 80060fc:	af00      	add	r7, sp, #0
 80060fe:	4603      	mov	r3, r0
 8006100:	6039      	str	r1, [r7, #0]
 8006102:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006104:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006108:	2b00      	cmp	r3, #0
 800610a:	db0a      	blt.n	8006122 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800610c:	683b      	ldr	r3, [r7, #0]
 800610e:	b2da      	uxtb	r2, r3
 8006110:	490c      	ldr	r1, [pc, #48]	; (8006144 <__NVIC_SetPriority+0x4c>)
 8006112:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006116:	0112      	lsls	r2, r2, #4
 8006118:	b2d2      	uxtb	r2, r2
 800611a:	440b      	add	r3, r1
 800611c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8006120:	e00a      	b.n	8006138 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006122:	683b      	ldr	r3, [r7, #0]
 8006124:	b2da      	uxtb	r2, r3
 8006126:	4908      	ldr	r1, [pc, #32]	; (8006148 <__NVIC_SetPriority+0x50>)
 8006128:	79fb      	ldrb	r3, [r7, #7]
 800612a:	f003 030f 	and.w	r3, r3, #15
 800612e:	3b04      	subs	r3, #4
 8006130:	0112      	lsls	r2, r2, #4
 8006132:	b2d2      	uxtb	r2, r2
 8006134:	440b      	add	r3, r1
 8006136:	761a      	strb	r2, [r3, #24]
}
 8006138:	bf00      	nop
 800613a:	370c      	adds	r7, #12
 800613c:	46bd      	mov	sp, r7
 800613e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006142:	4770      	bx	lr
 8006144:	e000e100 	.word	0xe000e100
 8006148:	e000ed00 	.word	0xe000ed00

0800614c <_ZN10usbRequest8loadDataEPKh>:
	uint8_t Request;
	uint16_t Value;
	uint16_t Index;
	uint16_t Length;

	void loadData(const uint8_t* data) {
 800614c:	b480      	push	{r7}
 800614e:	b083      	sub	sp, #12
 8006150:	af00      	add	r7, sp, #0
 8006152:	6078      	str	r0, [r7, #4]
 8006154:	6039      	str	r1, [r7, #0]
		RequestType = data[0];
 8006156:	683b      	ldr	r3, [r7, #0]
 8006158:	781a      	ldrb	r2, [r3, #0]
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	701a      	strb	r2, [r3, #0]
		Request = data[1];
 800615e:	683b      	ldr	r3, [r7, #0]
 8006160:	3301      	adds	r3, #1
 8006162:	781a      	ldrb	r2, [r3, #0]
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	705a      	strb	r2, [r3, #1]
		Value = (uint16_t)(data[2]) + (data[3] << 8);
 8006168:	683b      	ldr	r3, [r7, #0]
 800616a:	3302      	adds	r3, #2
 800616c:	781b      	ldrb	r3, [r3, #0]
 800616e:	b29a      	uxth	r2, r3
 8006170:	683b      	ldr	r3, [r7, #0]
 8006172:	3303      	adds	r3, #3
 8006174:	781b      	ldrb	r3, [r3, #0]
 8006176:	b29b      	uxth	r3, r3
 8006178:	021b      	lsls	r3, r3, #8
 800617a:	b29b      	uxth	r3, r3
 800617c:	4413      	add	r3, r2
 800617e:	b29a      	uxth	r2, r3
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	805a      	strh	r2, [r3, #2]
		Index = (uint16_t)(data[4]) + (data[5] << 8);
 8006184:	683b      	ldr	r3, [r7, #0]
 8006186:	3304      	adds	r3, #4
 8006188:	781b      	ldrb	r3, [r3, #0]
 800618a:	b29a      	uxth	r2, r3
 800618c:	683b      	ldr	r3, [r7, #0]
 800618e:	3305      	adds	r3, #5
 8006190:	781b      	ldrb	r3, [r3, #0]
 8006192:	b29b      	uxth	r3, r3
 8006194:	021b      	lsls	r3, r3, #8
 8006196:	b29b      	uxth	r3, r3
 8006198:	4413      	add	r3, r2
 800619a:	b29a      	uxth	r2, r3
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	809a      	strh	r2, [r3, #4]
		Length = (uint16_t)(data[6]) + (data[7] << 8);
 80061a0:	683b      	ldr	r3, [r7, #0]
 80061a2:	3306      	adds	r3, #6
 80061a4:	781b      	ldrb	r3, [r3, #0]
 80061a6:	b29a      	uxth	r2, r3
 80061a8:	683b      	ldr	r3, [r7, #0]
 80061aa:	3307      	adds	r3, #7
 80061ac:	781b      	ldrb	r3, [r3, #0]
 80061ae:	b29b      	uxth	r3, r3
 80061b0:	021b      	lsls	r3, r3, #8
 80061b2:	b29b      	uxth	r3, r3
 80061b4:	4413      	add	r3, r2
 80061b6:	b29a      	uxth	r2, r3
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	80da      	strh	r2, [r3, #6]
	}
 80061bc:	bf00      	nop
 80061be:	370c      	adds	r7, #12
 80061c0:	46bd      	mov	sp, r7
 80061c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c6:	4770      	bx	lr

080061c8 <_ZN10EP0HandlerC1EP7USBMainhha>:
	void SetupIn(const uint32_t size, const uint8_t* buff);
};

class EP0Handler : public USBHandler {
public:
	EP0Handler(USBMain* usb, const uint8_t inEP, const uint8_t outEP, int8_t interface) : USBHandler(usb, inEP, outEP, interface) {
 80061c8:	b580      	push	{r7, lr}
 80061ca:	b086      	sub	sp, #24
 80061cc:	af02      	add	r7, sp, #8
 80061ce:	60f8      	str	r0, [r7, #12]
 80061d0:	60b9      	str	r1, [r7, #8]
 80061d2:	4611      	mov	r1, r2
 80061d4:	461a      	mov	r2, r3
 80061d6:	460b      	mov	r3, r1
 80061d8:	71fb      	strb	r3, [r7, #7]
 80061da:	4613      	mov	r3, r2
 80061dc:	71bb      	strb	r3, [r7, #6]
 80061de:	68f8      	ldr	r0, [r7, #12]
 80061e0:	79b9      	ldrb	r1, [r7, #6]
 80061e2:	79fa      	ldrb	r2, [r7, #7]
 80061e4:	f997 3018 	ldrsb.w	r3, [r7, #24]
 80061e8:	9300      	str	r3, [sp, #0]
 80061ea:	460b      	mov	r3, r1
 80061ec:	68b9      	ldr	r1, [r7, #8]
 80061ee:	f001 fa53 	bl	8007698 <_ZN10USBHandlerC1EP7USBMainhha>
 80061f2:	4a06      	ldr	r2, [pc, #24]	; (800620c <_ZN10EP0HandlerC1EP7USBMainhha+0x44>)
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	601a      	str	r2, [r3, #0]
		outBuff = ep0OutBuff;
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	60da      	str	r2, [r3, #12]
	}
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	4618      	mov	r0, r3
 8006206:	3710      	adds	r7, #16
 8006208:	46bd      	mov	sp, r7
 800620a:	bd80      	pop	{r7, pc}
 800620c:	0800d650 	.word	0x0800d650

08006210 <_ZN10CDCHandlerC1EP7USBMainhha>:
#include "USBHandler.h"
#include <string>

class CDCHandler : public USBHandler {
public:
	CDCHandler(USBMain* usb, uint8_t inEP, uint8_t outEP, int8_t interface) : USBHandler(usb, inEP, outEP, interface) {
 8006210:	b580      	push	{r7, lr}
 8006212:	b086      	sub	sp, #24
 8006214:	af02      	add	r7, sp, #8
 8006216:	60f8      	str	r0, [r7, #12]
 8006218:	60b9      	str	r1, [r7, #8]
 800621a:	4611      	mov	r1, r2
 800621c:	461a      	mov	r2, r3
 800621e:	460b      	mov	r3, r1
 8006220:	71fb      	strb	r3, [r7, #7]
 8006222:	4613      	mov	r3, r2
 8006224:	71bb      	strb	r3, [r7, #6]
 8006226:	68f8      	ldr	r0, [r7, #12]
 8006228:	79b9      	ldrb	r1, [r7, #6]
 800622a:	79fa      	ldrb	r2, [r7, #7]
 800622c:	f997 3018 	ldrsb.w	r3, [r7, #24]
 8006230:	9300      	str	r3, [sp, #0]
 8006232:	460b      	mov	r3, r1
 8006234:	68b9      	ldr	r1, [r7, #8]
 8006236:	f001 fa2f 	bl	8007698 <_ZN10USBHandlerC1EP7USBMainhha>
 800623a:	4a0c      	ldr	r2, [pc, #48]	; (800626c <_ZN10CDCHandlerC1EP7USBMainhha+0x5c>)
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	601a      	str	r2, [r3, #0]
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	2200      	movs	r2, #0
 8006244:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	2200      	movs	r2, #0
 800624c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	2200      	movs	r2, #0
 8006254:	f8c3 2564 	str.w	r2, [r3, #1380]	; 0x564
		outBuff = xfer_buff;
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	f103 0260 	add.w	r2, r3, #96	; 0x60
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	60da      	str	r2, [r3, #12]
	}
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	4618      	mov	r0, r3
 8006266:	3710      	adds	r7, #16
 8006268:	46bd      	mov	sp, r7
 800626a:	bd80      	pop	{r7, pc}
 800626c:	0800d610 	.word	0x0800d610

08006270 <_ZN15USB_PMA_TypeDef10GetTXCountEv>:
typedef struct {
	volatile uint16_t ADDR_TX;
	volatile uint16_t COUNT_TX;
	volatile uint16_t ADDR_RX;
	volatile uint16_t COUNT_RX;
	uint32_t GetTXCount()	{ return COUNT_TX & 0x3FF; }
 8006270:	b480      	push	{r7}
 8006272:	b083      	sub	sp, #12
 8006274:	af00      	add	r7, sp, #0
 8006276:	6078      	str	r0, [r7, #4]
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	885b      	ldrh	r3, [r3, #2]
 800627c:	b29b      	uxth	r3, r3
 800627e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006282:	4618      	mov	r0, r3
 8006284:	370c      	adds	r7, #12
 8006286:	46bd      	mov	sp, r7
 8006288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800628c:	4770      	bx	lr

0800628e <_ZN15USB_PMA_TypeDef10GetRXCountEv>:
	uint32_t GetRXCount()	{ return COUNT_RX & 0x3FF; }
 800628e:	b480      	push	{r7}
 8006290:	b083      	sub	sp, #12
 8006292:	af00      	add	r7, sp, #0
 8006294:	6078      	str	r0, [r7, #4]
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	88db      	ldrh	r3, [r3, #6]
 800629a:	b29b      	uxth	r3, r3
 800629c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80062a0:	4618      	mov	r0, r3
 80062a2:	370c      	adds	r7, #12
 80062a4:	46bd      	mov	sp, r7
 80062a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062aa:	4770      	bx	lr

080062ac <_ZN15USB_PMA_TypeDef11SetRXBlocksEm>:
	void SetRXBlocks(uint32_t cnt)	{ COUNT_RX = (COUNT_RX & ~pmaBlocksMask) | (cnt << 10); }
 80062ac:	b480      	push	{r7}
 80062ae:	b083      	sub	sp, #12
 80062b0:	af00      	add	r7, sp, #0
 80062b2:	6078      	str	r0, [r7, #4]
 80062b4:	6039      	str	r1, [r7, #0]
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	88db      	ldrh	r3, [r3, #6]
 80062ba:	b29b      	uxth	r3, r3
 80062bc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80062c0:	b29a      	uxth	r2, r3
 80062c2:	683b      	ldr	r3, [r7, #0]
 80062c4:	b29b      	uxth	r3, r3
 80062c6:	029b      	lsls	r3, r3, #10
 80062c8:	b29b      	uxth	r3, r3
 80062ca:	4313      	orrs	r3, r2
 80062cc:	b29a      	uxth	r2, r3
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	80da      	strh	r2, [r3, #6]
 80062d2:	bf00      	nop
 80062d4:	370c      	adds	r7, #12
 80062d6:	46bd      	mov	sp, r7
 80062d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062dc:	4770      	bx	lr

080062de <_ZN15USB_PMA_TypeDef12SetRXBlkSizeEm>:
	void SetRXBlkSize(uint32_t cnt)	{ COUNT_RX = (COUNT_RX & ~pmaBlkSizeMask) | (cnt << 15); }
 80062de:	b480      	push	{r7}
 80062e0:	b083      	sub	sp, #12
 80062e2:	af00      	add	r7, sp, #0
 80062e4:	6078      	str	r0, [r7, #4]
 80062e6:	6039      	str	r1, [r7, #0]
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	88db      	ldrh	r3, [r3, #6]
 80062ec:	b29b      	uxth	r3, r3
 80062ee:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80062f2:	b29a      	uxth	r2, r3
 80062f4:	683b      	ldr	r3, [r7, #0]
 80062f6:	b29b      	uxth	r3, r3
 80062f8:	03db      	lsls	r3, r3, #15
 80062fa:	b29b      	uxth	r3, r3
 80062fc:	4313      	orrs	r3, r2
 80062fe:	b29a      	uxth	r2, r3
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	80da      	strh	r2, [r3, #6]
 8006304:	bf00      	nop
 8006306:	370c      	adds	r7, #12
 8006308:	46bd      	mov	sp, r7
 800630a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800630e:	4770      	bx	lr

08006310 <LL_HSEM_1StepLock>:
  * @param  HSEMx HSEM Instance.
  * @param  Semaphore Semaphore number. Value between Min_Data=0 and Max_Data=31
  * @retval 1 lock fail, 0 lock successful or already locked by same core
  */
__STATIC_INLINE uint32_t LL_HSEM_1StepLock(HSEM_TypeDef *HSEMx, uint32_t Semaphore)
{
 8006310:	b480      	push	{r7}
 8006312:	b083      	sub	sp, #12
 8006314:	af00      	add	r7, sp, #0
 8006316:	6078      	str	r0, [r7, #4]
 8006318:	6039      	str	r1, [r7, #0]
  return ((HSEMx->RLR[Semaphore] != (HSEM_R_LOCK | LL_HSEM_COREID)) ? 1UL : 0UL);
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	683a      	ldr	r2, [r7, #0]
 800631e:	3220      	adds	r2, #32
 8006320:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006324:	4a05      	ldr	r2, [pc, #20]	; (800633c <LL_HSEM_1StepLock+0x2c>)
 8006326:	4293      	cmp	r3, r2
 8006328:	d001      	beq.n	800632e <LL_HSEM_1StepLock+0x1e>
 800632a:	2301      	movs	r3, #1
 800632c:	e000      	b.n	8006330 <LL_HSEM_1StepLock+0x20>
 800632e:	2300      	movs	r3, #0
}
 8006330:	4618      	mov	r0, r3
 8006332:	370c      	adds	r7, #12
 8006334:	46bd      	mov	sp, r7
 8006336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800633a:	4770      	bx	lr
 800633c:	80000400 	.word	0x80000400

08006340 <_ZN7USBMainC1Ev>:
#define USBP     USB

#define LOBYTE(x)  (static_cast<uint8_t>(x & 0x00FFU))
#define HIBYTE(x)  (static_cast<uint8_t>((x & 0xFF00U) >> 8))

class USBMain {
 8006340:	b5b0      	push	{r4, r5, r7, lr}
 8006342:	b084      	sub	sp, #16
 8006344:	af02      	add	r7, sp, #8
 8006346:	6078      	str	r0, [r7, #4]
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	1d18      	adds	r0, r3, #4
 800634c:	f04f 33ff 	mov.w	r3, #4294967295
 8006350:	9300      	str	r3, [sp, #0]
 8006352:	2300      	movs	r3, #0
 8006354:	2200      	movs	r2, #0
 8006356:	6879      	ldr	r1, [r7, #4]
 8006358:	f7ff ff36 	bl	80061c8 <_ZN10EP0HandlerC1EP7USBMainhha>
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	f503 7098 	add.w	r0, r3, #304	; 0x130
 8006362:	2300      	movs	r3, #0
 8006364:	9300      	str	r3, [sp, #0]
 8006366:	2301      	movs	r3, #1
 8006368:	2281      	movs	r2, #129	; 0x81
 800636a:	6879      	ldr	r1, [r7, #4]
 800636c:	f7ff ff50 	bl	8006210 <_ZN10CDCHandlerC1EP7USBMainhha>
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	2200      	movs	r2, #0
 8006374:	f883 2698 	strb.w	r2, [r3, #1688]	; 0x698
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	2200      	movs	r2, #0
 800637c:	f883 26b8 	strb.w	r2, [r3, #1720]	; 0x6b8
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	4a0e      	ldr	r2, [pc, #56]	; (80063bc <_ZN7USBMainC1Ev+0x7c>)
 8006384:	f603 0438 	addw	r4, r3, #2104	; 0x838
 8006388:	4615      	mov	r5, r2
 800638a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800638c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800638e:	682b      	ldr	r3, [r5, #0]
 8006390:	8023      	strh	r3, [r4, #0]
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	4a0a      	ldr	r2, [pc, #40]	; (80063c0 <_ZN7USBMainC1Ev+0x80>)
 8006396:	f603 044a 	addw	r4, r3, #2122	; 0x84a
 800639a:	4613      	mov	r3, r2
 800639c:	cb07      	ldmia	r3!, {r0, r1, r2}
 800639e:	6020      	str	r0, [r4, #0]
 80063a0:	6061      	str	r1, [r4, #4]
 80063a2:	60a2      	str	r2, [r4, #8]
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	4a07      	ldr	r2, [pc, #28]	; (80063c4 <_ZN7USBMainC1Ev+0x84>)
 80063a8:	f603 0356 	addw	r3, r3, #2134	; 0x856
 80063ac:	6810      	ldr	r0, [r2, #0]
 80063ae:	6018      	str	r0, [r3, #0]
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	4618      	mov	r0, r3
 80063b4:	3708      	adds	r7, #8
 80063b6:	46bd      	mov	sp, r7
 80063b8:	bdb0      	pop	{r4, r5, r7, pc}
 80063ba:	bf00      	nop
 80063bc:	0800d038 	.word	0x0800d038
 80063c0:	0800d04c 	.word	0x0800d04c
 80063c4:	0800d058 	.word	0x0800d058

080063c8 <_write>:
USBMain usb;

extern "C" {
// To enable USB for printf commands (To print floats enable 'Use float with printf from newlib-nano' MCU Build Settings)
size_t _write(int handle, const unsigned char* buf, size_t bufSize)
{
 80063c8:	b580      	push	{r7, lr}
 80063ca:	b084      	sub	sp, #16
 80063cc:	af00      	add	r7, sp, #0
 80063ce:	60f8      	str	r0, [r7, #12]
 80063d0:	60b9      	str	r1, [r7, #8]
 80063d2:	607a      	str	r2, [r7, #4]
	if (usb.devState == USBMain::DeviceState::Configured) {
 80063d4:	4b07      	ldr	r3, [pc, #28]	; (80063f4 <_write+0x2c>)
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	2b02      	cmp	r3, #2
 80063da:	d106      	bne.n	80063ea <_write+0x22>
		return usb.SendString(buf, bufSize);
 80063dc:	687a      	ldr	r2, [r7, #4]
 80063de:	68b9      	ldr	r1, [r7, #8]
 80063e0:	4804      	ldr	r0, [pc, #16]	; (80063f4 <_write+0x2c>)
 80063e2:	f001 f8a3 	bl	800752c <_ZN7USBMain10SendStringEPKhj>
 80063e6:	4603      	mov	r3, r0
 80063e8:	e000      	b.n	80063ec <_write+0x24>
	} else {
		return 0;
 80063ea:	2300      	movs	r3, #0
	}
}
 80063ec:	4618      	mov	r0, r3
 80063ee:	3710      	adds	r7, #16
 80063f0:	46bd      	mov	sp, r7
 80063f2:	bd80      	pop	{r7, pc}
 80063f4:	200003e4 	.word	0x200003e4

080063f8 <_Z16ClearRxInterrupth>:
}

inline void ClearRxInterrupt(uint8_t ep)
{
 80063f8:	b480      	push	{r7}
 80063fa:	b085      	sub	sp, #20
 80063fc:	af00      	add	r7, sp, #0
 80063fe:	4603      	mov	r3, r0
 8006400:	71fb      	strb	r3, [r7, #7]
	uint16_t wRegVal = (USB_EPR[ep].EPR & USB_EPREG_MASK) & ~USB_EP_CTR_RX;
 8006402:	79fb      	ldrb	r3, [r7, #7]
 8006404:	f103 5380 	add.w	r3, r3, #268435456	; 0x10000000
 8006408:	f503 53d0 	add.w	r3, r3, #6656	; 0x1a00
 800640c:	009b      	lsls	r3, r3, #2
 800640e:	881b      	ldrh	r3, [r3, #0]
 8006410:	b29a      	uxth	r2, r3
 8006412:	f640 738f 	movw	r3, #3983	; 0xf8f
 8006416:	4013      	ands	r3, r2
 8006418:	81fb      	strh	r3, [r7, #14]
	USB_EPR[ep].EPR = wRegVal | USB_EP_CTR_TX;
 800641a:	79fb      	ldrb	r3, [r7, #7]
 800641c:	f103 5380 	add.w	r3, r3, #268435456	; 0x10000000
 8006420:	f503 53d0 	add.w	r3, r3, #6656	; 0x1a00
 8006424:	009b      	lsls	r3, r3, #2
 8006426:	461a      	mov	r2, r3
 8006428:	89fb      	ldrh	r3, [r7, #14]
 800642a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800642e:	b29b      	uxth	r3, r3
 8006430:	8013      	strh	r3, [r2, #0]
}
 8006432:	bf00      	nop
 8006434:	3714      	adds	r7, #20
 8006436:	46bd      	mov	sp, r7
 8006438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800643c:	4770      	bx	lr

0800643e <_Z16ClearTxInterrupth>:


inline void ClearTxInterrupt(uint8_t ep)
{
 800643e:	b480      	push	{r7}
 8006440:	b085      	sub	sp, #20
 8006442:	af00      	add	r7, sp, #0
 8006444:	4603      	mov	r3, r0
 8006446:	71fb      	strb	r3, [r7, #7]
	uint16_t wRegVal = (USB_EPR[ep].EPR & USB_EPREG_MASK) & ~USB_EP_CTR_TX;
 8006448:	79fb      	ldrb	r3, [r7, #7]
 800644a:	f103 5380 	add.w	r3, r3, #268435456	; 0x10000000
 800644e:	f503 53d0 	add.w	r3, r3, #6656	; 0x1a00
 8006452:	009b      	lsls	r3, r3, #2
 8006454:	881b      	ldrh	r3, [r3, #0]
 8006456:	b29b      	uxth	r3, r3
 8006458:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800645c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006460:	81fb      	strh	r3, [r7, #14]
	USB_EPR[ep].EPR = wRegVal | USB_EP_CTR_RX;
 8006462:	79fb      	ldrb	r3, [r7, #7]
 8006464:	f103 5380 	add.w	r3, r3, #268435456	; 0x10000000
 8006468:	f503 53d0 	add.w	r3, r3, #6656	; 0x1a00
 800646c:	009b      	lsls	r3, r3, #2
 800646e:	461a      	mov	r2, r3
 8006470:	89fb      	ldrh	r3, [r7, #14]
 8006472:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006476:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800647a:	b29b      	uxth	r3, r3
 800647c:	8013      	strh	r3, [r2, #0]
}
 800647e:	bf00      	nop
 8006480:	3714      	adds	r7, #20
 8006482:	46bd      	mov	sp, r7
 8006484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006488:	4770      	bx	lr

0800648a <_Z11SetTxStatusht>:


inline void SetTxStatus(uint8_t ep, uint16_t status)		// Set endpoint transmit status - have to use XOR to toggle bits
{
 800648a:	b480      	push	{r7}
 800648c:	b085      	sub	sp, #20
 800648e:	af00      	add	r7, sp, #0
 8006490:	4603      	mov	r3, r0
 8006492:	460a      	mov	r2, r1
 8006494:	71fb      	strb	r3, [r7, #7]
 8006496:	4613      	mov	r3, r2
 8006498:	80bb      	strh	r3, [r7, #4]
	uint16_t wRegVal = (USB_EPR[ep].EPR & USB_EPTX_DTOGMASK) ^ status;
 800649a:	79fb      	ldrb	r3, [r7, #7]
 800649c:	f103 5380 	add.w	r3, r3, #268435456	; 0x10000000
 80064a0:	f503 53d0 	add.w	r3, r3, #6656	; 0x1a00
 80064a4:	009b      	lsls	r3, r3, #2
 80064a6:	881b      	ldrh	r3, [r3, #0]
 80064a8:	b29b      	uxth	r3, r3
 80064aa:	b21b      	sxth	r3, r3
 80064ac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80064b0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80064b4:	b21a      	sxth	r2, r3
 80064b6:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80064ba:	4053      	eors	r3, r2
 80064bc:	b21b      	sxth	r3, r3
 80064be:	81fb      	strh	r3, [r7, #14]
	USB_EPR[ep].EPR = wRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX;
 80064c0:	79fb      	ldrb	r3, [r7, #7]
 80064c2:	f103 5380 	add.w	r3, r3, #268435456	; 0x10000000
 80064c6:	f503 53d0 	add.w	r3, r3, #6656	; 0x1a00
 80064ca:	009b      	lsls	r3, r3, #2
 80064cc:	461a      	mov	r2, r3
 80064ce:	89fb      	ldrh	r3, [r7, #14]
 80064d0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80064d4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80064d8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80064dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80064e0:	b29b      	uxth	r3, r3
 80064e2:	8013      	strh	r3, [r2, #0]
}
 80064e4:	bf00      	nop
 80064e6:	3714      	adds	r7, #20
 80064e8:	46bd      	mov	sp, r7
 80064ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ee:	4770      	bx	lr

080064f0 <_Z11SetRxStatusht>:


inline void SetRxStatus(uint8_t ep, uint16_t status)		// Set endpoint receive status - have to use XOR to toggle bits
{
 80064f0:	b480      	push	{r7}
 80064f2:	b085      	sub	sp, #20
 80064f4:	af00      	add	r7, sp, #0
 80064f6:	4603      	mov	r3, r0
 80064f8:	460a      	mov	r2, r1
 80064fa:	71fb      	strb	r3, [r7, #7]
 80064fc:	4613      	mov	r3, r2
 80064fe:	80bb      	strh	r3, [r7, #4]
	uint16_t wRegVal = (USB_EPR[ep].EPR & USB_EPRX_DTOGMASK) ^ status;
 8006500:	79fb      	ldrb	r3, [r7, #7]
 8006502:	f103 5380 	add.w	r3, r3, #268435456	; 0x10000000
 8006506:	f503 53d0 	add.w	r3, r3, #6656	; 0x1a00
 800650a:	009b      	lsls	r3, r3, #2
 800650c:	881b      	ldrh	r3, [r3, #0]
 800650e:	b29b      	uxth	r3, r3
 8006510:	b21b      	sxth	r3, r3
 8006512:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006516:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800651a:	b21a      	sxth	r2, r3
 800651c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8006520:	4053      	eors	r3, r2
 8006522:	b21b      	sxth	r3, r3
 8006524:	81fb      	strh	r3, [r7, #14]
	USB_EPR[ep].EPR = wRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX;
 8006526:	79fb      	ldrb	r3, [r7, #7]
 8006528:	f103 5380 	add.w	r3, r3, #268435456	; 0x10000000
 800652c:	f503 53d0 	add.w	r3, r3, #6656	; 0x1a00
 8006530:	009b      	lsls	r3, r3, #2
 8006532:	461a      	mov	r2, r3
 8006534:	89fb      	ldrh	r3, [r7, #14]
 8006536:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800653a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800653e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006542:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006546:	b29b      	uxth	r3, r3
 8006548:	8013      	strh	r3, [r2, #0]
}
 800654a:	bf00      	nop
 800654c:	3714      	adds	r7, #20
 800654e:	46bd      	mov	sp, r7
 8006550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006554:	4770      	bx	lr

08006556 <_ZN7USBMain7ReadPMAEtP10USBHandler>:


void USBMain::ReadPMA(uint16_t pma, USBHandler* handler)
{
 8006556:	b480      	push	{r7}
 8006558:	b087      	sub	sp, #28
 800655a:	af00      	add	r7, sp, #0
 800655c:	60f8      	str	r0, [r7, #12]
 800655e:	460b      	mov	r3, r1
 8006560:	607a      	str	r2, [r7, #4]
 8006562:	817b      	strh	r3, [r7, #10]
	volatile uint16_t* pmaBuff = reinterpret_cast<volatile uint16_t*>(USB_PMAADDR + pma);		// Eg 0x40006018
 8006564:	897b      	ldrh	r3, [r7, #10]
 8006566:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800656a:	f503 43d8 	add.w	r3, r3, #27648	; 0x6c00
 800656e:	617b      	str	r3, [r7, #20]

	for (uint32_t i = 0; i < (handler->outBuffCount + 1) / 2; i++) {
 8006570:	2300      	movs	r3, #0
 8006572:	613b      	str	r3, [r7, #16]
 8006574:	e00d      	b.n	8006592 <_ZN7USBMain7ReadPMAEtP10USBHandler+0x3c>
		reinterpret_cast<volatile uint16_t*>(handler->outBuff)[i] = *pmaBuff++;				// pma buffer can only be read in 16 bit words
 8006576:	697b      	ldr	r3, [r7, #20]
 8006578:	1c9a      	adds	r2, r3, #2
 800657a:	617a      	str	r2, [r7, #20]
 800657c:	687a      	ldr	r2, [r7, #4]
 800657e:	68d1      	ldr	r1, [r2, #12]
 8006580:	693a      	ldr	r2, [r7, #16]
 8006582:	0052      	lsls	r2, r2, #1
 8006584:	440a      	add	r2, r1
 8006586:	881b      	ldrh	r3, [r3, #0]
 8006588:	b29b      	uxth	r3, r3
 800658a:	8013      	strh	r3, [r2, #0]
	for (uint32_t i = 0; i < (handler->outBuffCount + 1) / 2; i++) {
 800658c:	693b      	ldr	r3, [r7, #16]
 800658e:	3301      	adds	r3, #1
 8006590:	613b      	str	r3, [r7, #16]
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	691b      	ldr	r3, [r3, #16]
 8006596:	3301      	adds	r3, #1
 8006598:	085b      	lsrs	r3, r3, #1
 800659a:	693a      	ldr	r2, [r7, #16]
 800659c:	429a      	cmp	r2, r3
 800659e:	d3ea      	bcc.n	8006576 <_ZN7USBMain7ReadPMAEtP10USBHandler+0x20>
#if (USB_DEBUG)
	usbDebug[usbDebugNo].PacketSize = handler->outBuffCount;
	usbDebug[usbDebugNo].xferBuff0 = ((uint32_t*)handler->outBuff)[0];
	usbDebug[usbDebugNo].xferBuff1 = ((uint32_t*)handler->outBuff)[1];
#endif
}
 80065a0:	bf00      	nop
 80065a2:	bf00      	nop
 80065a4:	371c      	adds	r7, #28
 80065a6:	46bd      	mov	sp, r7
 80065a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ac:	4770      	bx	lr

080065ae <_ZN7USBMain8WritePMAEttP10USBHandler>:


void USBMain::WritePMA(uint16_t pma, uint16_t bytes, USBHandler* handler)
{
 80065ae:	b480      	push	{r7}
 80065b0:	b087      	sub	sp, #28
 80065b2:	af00      	add	r7, sp, #0
 80065b4:	60f8      	str	r0, [r7, #12]
 80065b6:	607b      	str	r3, [r7, #4]
 80065b8:	460b      	mov	r3, r1
 80065ba:	817b      	strh	r3, [r7, #10]
 80065bc:	4613      	mov	r3, r2
 80065be:	813b      	strh	r3, [r7, #8]
	volatile uint16_t* pmaBuff = reinterpret_cast<volatile uint16_t*>(USB_PMAADDR + pma);
 80065c0:	897b      	ldrh	r3, [r7, #10]
 80065c2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80065c6:	f503 43d8 	add.w	r3, r3, #27648	; 0x6c00
 80065ca:	613b      	str	r3, [r7, #16]

	for (int i = 0; i < (bytes + 1) / 2; i++) {
 80065cc:	2300      	movs	r3, #0
 80065ce:	617b      	str	r3, [r7, #20]
 80065d0:	e00d      	b.n	80065ee <_ZN7USBMain8WritePMAEttP10USBHandler+0x40>
		pmaBuff[i] = reinterpret_cast<const uint16_t*>(handler->inBuff)[i];
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	69da      	ldr	r2, [r3, #28]
 80065d6:	697b      	ldr	r3, [r7, #20]
 80065d8:	005b      	lsls	r3, r3, #1
 80065da:	441a      	add	r2, r3
 80065dc:	697b      	ldr	r3, [r7, #20]
 80065de:	005b      	lsls	r3, r3, #1
 80065e0:	6939      	ldr	r1, [r7, #16]
 80065e2:	440b      	add	r3, r1
 80065e4:	8812      	ldrh	r2, [r2, #0]
 80065e6:	801a      	strh	r2, [r3, #0]
	for (int i = 0; i < (bytes + 1) / 2; i++) {
 80065e8:	697b      	ldr	r3, [r7, #20]
 80065ea:	3301      	adds	r3, #1
 80065ec:	617b      	str	r3, [r7, #20]
 80065ee:	893b      	ldrh	r3, [r7, #8]
 80065f0:	3301      	adds	r3, #1
 80065f2:	0fda      	lsrs	r2, r3, #31
 80065f4:	4413      	add	r3, r2
 80065f6:	105b      	asrs	r3, r3, #1
 80065f8:	461a      	mov	r2, r3
 80065fa:	697b      	ldr	r3, [r7, #20]
 80065fc:	4293      	cmp	r3, r2
 80065fe:	dbe8      	blt.n	80065d2 <_ZN7USBMain8WritePMAEttP10USBHandler+0x24>
	}
}
 8006600:	bf00      	nop
 8006602:	bf00      	nop
 8006604:	371c      	adds	r7, #28
 8006606:	46bd      	mov	sp, r7
 8006608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800660c:	4770      	bx	lr

0800660e <_ZN7USBMain18ProcessSetupPacketEv>:


void USBMain::ProcessSetupPacket()
{
 800660e:	b590      	push	{r4, r7, lr}
 8006610:	b087      	sub	sp, #28
 8006612:	af00      	add	r7, sp, #0
 8006614:	6078      	str	r0, [r7, #4]
	req.loadData((uint8_t*)classByEP[0]->outBuff);		// Parse the setup request into the req object
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	f203 64ac 	addw	r4, r3, #1708	; 0x6ac
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	f203 63a4 	addw	r3, r3, #1700	; 0x6a4
 8006622:	2100      	movs	r1, #0
 8006624:	4618      	mov	r0, r3
 8006626:	f000 ffa3 	bl	8007570 <_ZNSt5arrayIP10USBHandlerLj2EEixEj>
 800662a:	4603      	mov	r3, r0
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	68db      	ldr	r3, [r3, #12]
 8006630:	4619      	mov	r1, r3
 8006632:	4620      	mov	r0, r4
 8006634:	f7ff fd8a 	bl	800614c <_ZN10usbRequest8loadDataEPKh>

#if (USB_DEBUG)
	usbDebug[usbDebugNo].Request = req;
#endif
	// Previously USBD_StdDevReq
	if ((req.RequestType & recipientMask) == RequestRecipientDevice && (req.RequestType & requestTypeMask) == RequestTypeStandard) {
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	f893 36ac 	ldrb.w	r3, [r3, #1708]	; 0x6ac
 800663e:	f003 0303 	and.w	r3, r3, #3
 8006642:	2b00      	cmp	r3, #0
 8006644:	d15b      	bne.n	80066fe <_ZN7USBMain18ProcessSetupPacketEv+0xf0>
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	f893 36ac 	ldrb.w	r3, [r3, #1708]	; 0x6ac
 800664c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006650:	2b00      	cmp	r3, #0
 8006652:	d154      	bne.n	80066fe <_ZN7USBMain18ProcessSetupPacketEv+0xf0>
		switch (static_cast<Request>(req.Request)) {
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	f893 36ad 	ldrb.w	r3, [r3, #1709]	; 0x6ad
 800665a:	2b09      	cmp	r3, #9
 800665c:	d01d      	beq.n	800669a <_ZN7USBMain18ProcessSetupPacketEv+0x8c>
 800665e:	2b09      	cmp	r3, #9
 8006660:	dc46      	bgt.n	80066f0 <_ZN7USBMain18ProcessSetupPacketEv+0xe2>
 8006662:	2b05      	cmp	r3, #5
 8006664:	d005      	beq.n	8006672 <_ZN7USBMain18ProcessSetupPacketEv+0x64>
 8006666:	2b06      	cmp	r3, #6
 8006668:	d142      	bne.n	80066f0 <_ZN7USBMain18ProcessSetupPacketEv+0xe2>
		case Request::GetDescriptor:
			GetDescriptor();
 800666a:	6878      	ldr	r0, [r7, #4]
 800666c:	f000 fd0a 	bl	8007084 <_ZN7USBMain13GetDescriptorEv>
			break;
 8006670:	e044      	b.n	80066fc <_ZN7USBMain18ProcessSetupPacketEv+0xee>

		case Request::SetAddress:
			devAddress = static_cast<uint8_t>(req.Value) & 0x7F;			// Address address is set on the next interrupt - hold in temp storage
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	f8b3 36ae 	ldrh.w	r3, [r3, #1710]	; 0x6ae
 8006678:	b2db      	uxtb	r3, r3
 800667a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800667e:	b2da      	uxtb	r2, r3
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	f883 26b8 	strb.w	r2, [r3, #1720]	; 0x6b8

			EPStartXfer(Direction::in, 0, 0);
 8006686:	2300      	movs	r3, #0
 8006688:	2200      	movs	r2, #0
 800668a:	2100      	movs	r1, #0
 800668c:	6878      	ldr	r0, [r7, #4]
 800668e:	f000 f86e 	bl	800676e <_ZN7USBMain11EPStartXferE9Directionhm>
			devState = DeviceState::Addressed;
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	2201      	movs	r2, #1
 8006696:	601a      	str	r2, [r3, #0]
			break;
 8006698:	e030      	b.n	80066fc <_ZN7USBMain18ProcessSetupPacketEv+0xee>

		case Request::SetConfiguration:
			if (devState == DeviceState::Addressed) {
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	2b01      	cmp	r3, #1
 80066a0:	d12b      	bne.n	80066fa <_ZN7USBMain18ProcessSetupPacketEv+0xec>
				devState = DeviceState::Configured;
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	2202      	movs	r2, #2
 80066a6:	601a      	str	r2, [r3, #0]

				for (auto c : classByEP) {
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	f203 63a4 	addw	r3, r3, #1700	; 0x6a4
 80066ae:	613b      	str	r3, [r7, #16]
 80066b0:	6938      	ldr	r0, [r7, #16]
 80066b2:	f000 ff6c 	bl	800758e <_ZNSt5arrayIP10USBHandlerLj2EE5beginEv>
 80066b6:	6178      	str	r0, [r7, #20]
 80066b8:	6938      	ldr	r0, [r7, #16]
 80066ba:	f000 ff74 	bl	80075a6 <_ZNSt5arrayIP10USBHandlerLj2EE3endEv>
 80066be:	60f8      	str	r0, [r7, #12]
 80066c0:	e00b      	b.n	80066da <_ZN7USBMain18ProcessSetupPacketEv+0xcc>
 80066c2:	697b      	ldr	r3, [r7, #20]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	60bb      	str	r3, [r7, #8]
					c->ActivateEP();
 80066c8:	68bb      	ldr	r3, [r7, #8]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	3308      	adds	r3, #8
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	68b8      	ldr	r0, [r7, #8]
 80066d2:	4798      	blx	r3
				for (auto c : classByEP) {
 80066d4:	697b      	ldr	r3, [r7, #20]
 80066d6:	3304      	adds	r3, #4
 80066d8:	617b      	str	r3, [r7, #20]
 80066da:	697a      	ldr	r2, [r7, #20]
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	429a      	cmp	r2, r3
 80066e0:	d1ef      	bne.n	80066c2 <_ZN7USBMain18ProcessSetupPacketEv+0xb4>
				}

				EPStartXfer(Direction::in, 0, 0);
 80066e2:	2300      	movs	r3, #0
 80066e4:	2200      	movs	r2, #0
 80066e6:	2100      	movs	r1, #0
 80066e8:	6878      	ldr	r0, [r7, #4]
 80066ea:	f000 f840 	bl	800676e <_ZN7USBMain11EPStartXferE9Directionhm>
			}
			break;
 80066ee:	e004      	b.n	80066fa <_ZN7USBMain18ProcessSetupPacketEv+0xec>

		default:
			SetTxStatus(0, USB_EP_TX_STALL);
 80066f0:	2110      	movs	r1, #16
 80066f2:	2000      	movs	r0, #0
 80066f4:	f7ff fec9 	bl	800648a <_Z11SetTxStatusht>
			break;
 80066f8:	e000      	b.n	80066fc <_ZN7USBMain18ProcessSetupPacketEv+0xee>
			break;
 80066fa:	bf00      	nop
		}

	// Previously USBD_StdItfReq
	} else if ((req.RequestType & recipientMask) == RequestRecipientInterface && (req.RequestType & requestTypeMask) == RequestTypeClass) {
 80066fc:	e033      	b.n	8006766 <_ZN7USBMain18ProcessSetupPacketEv+0x158>
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	f893 36ac 	ldrb.w	r3, [r3, #1708]	; 0x6ac
 8006704:	f003 0303 	and.w	r3, r3, #3
 8006708:	2b01      	cmp	r3, #1
 800670a:	d127      	bne.n	800675c <_ZN7USBMain18ProcessSetupPacketEv+0x14e>
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	f893 36ac 	ldrb.w	r3, [r3, #1708]	; 0x6ac
 8006712:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006716:	2b20      	cmp	r3, #32
 8006718:	d120      	bne.n	800675c <_ZN7USBMain18ProcessSetupPacketEv+0x14e>

		// req.Index holds interface - call the appropriate handler's setup
		if (req.Length > 0) {
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	f8b3 36b2 	ldrh.w	r3, [r3, #1714]	; 0x6b2
 8006720:	2b00      	cmp	r3, #0
 8006722:	d014      	beq.n	800674e <_ZN7USBMain18ProcessSetupPacketEv+0x140>
			classesByInterface[req.Index]->ClassSetup(req);
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	f203 629c 	addw	r2, r3, #1692	; 0x69c
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	f8b3 36b0 	ldrh.w	r3, [r3, #1712]	; 0x6b0
 8006730:	4619      	mov	r1, r3
 8006732:	4610      	mov	r0, r2
 8006734:	f000 ff1c 	bl	8007570 <_ZNSt5arrayIP10USBHandlerLj2EEixEj>
 8006738:	4603      	mov	r3, r0
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	681a      	ldr	r2, [r3, #0]
 800673e:	320c      	adds	r2, #12
 8006740:	6812      	ldr	r2, [r2, #0]
 8006742:	6879      	ldr	r1, [r7, #4]
 8006744:	f201 61ac 	addw	r1, r1, #1708	; 0x6ac
 8006748:	4618      	mov	r0, r3
 800674a:	4790      	blx	r2
		if (req.Length > 0) {
 800674c:	e00b      	b.n	8006766 <_ZN7USBMain18ProcessSetupPacketEv+0x158>
		} else {
			EPStartXfer(Direction::in, 0, 0);
 800674e:	2300      	movs	r3, #0
 8006750:	2200      	movs	r2, #0
 8006752:	2100      	movs	r1, #0
 8006754:	6878      	ldr	r0, [r7, #4]
 8006756:	f000 f80a 	bl	800676e <_ZN7USBMain11EPStartXferE9Directionhm>
		if (req.Length > 0) {
 800675a:	e004      	b.n	8006766 <_ZN7USBMain18ProcessSetupPacketEv+0x158>
		}
	} else {
		SetTxStatus(0, USB_EP_TX_STALL);
 800675c:	2110      	movs	r1, #16
 800675e:	2000      	movs	r0, #0
 8006760:	f7ff fe93 	bl	800648a <_Z11SetTxStatusht>
	}
}
 8006764:	bf00      	nop
 8006766:	bf00      	nop
 8006768:	371c      	adds	r7, #28
 800676a:	46bd      	mov	sp, r7
 800676c:	bd90      	pop	{r4, r7, pc}

0800676e <_ZN7USBMain11EPStartXferE9Directionhm>:


// EPStartXfer setup and starts a transfer over an EP
void USBMain::EPStartXfer(const Direction direction, uint8_t endpoint, uint32_t len)
{
 800676e:	b5b0      	push	{r4, r5, r7, lr}
 8006770:	b086      	sub	sp, #24
 8006772:	af00      	add	r7, sp, #0
 8006774:	60f8      	str	r0, [r7, #12]
 8006776:	60b9      	str	r1, [r7, #8]
 8006778:	603b      	str	r3, [r7, #0]
 800677a:	4613      	mov	r3, r2
 800677c:	71fb      	strb	r3, [r7, #7]
	uint8_t epIndex = (endpoint & epAddrMask);
 800677e:	79fb      	ldrb	r3, [r7, #7]
 8006780:	f003 030f 	and.w	r3, r3, #15
 8006784:	75fb      	strb	r3, [r7, #23]

	if (direction == Direction::in) {						// IN endpoint
 8006786:	68bb      	ldr	r3, [r7, #8]
 8006788:	2b00      	cmp	r3, #0
 800678a:	d12c      	bne.n	80067e6 <_ZN7USBMain11EPStartXferE9Directionhm+0x78>
		if (len > ep_maxPacket) {
 800678c:	683b      	ldr	r3, [r7, #0]
 800678e:	2b40      	cmp	r3, #64	; 0x40
 8006790:	d901      	bls.n	8006796 <_ZN7USBMain11EPStartXferE9Directionhm+0x28>
			len = ep_maxPacket;
 8006792:	2340      	movs	r3, #64	; 0x40
 8006794:	603b      	str	r3, [r7, #0]
		}

		WritePMA(USB_PMA[epIndex].ADDR_TX, len, classByEP[epIndex]);
 8006796:	7dfb      	ldrb	r3, [r7, #23]
 8006798:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 800679c:	f503 6358 	add.w	r3, r3, #3456	; 0xd80
 80067a0:	00db      	lsls	r3, r3, #3
 80067a2:	881b      	ldrh	r3, [r3, #0]
 80067a4:	b29c      	uxth	r4, r3
 80067a6:	683b      	ldr	r3, [r7, #0]
 80067a8:	b29d      	uxth	r5, r3
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	f203 63a4 	addw	r3, r3, #1700	; 0x6a4
 80067b0:	7dfa      	ldrb	r2, [r7, #23]
 80067b2:	4611      	mov	r1, r2
 80067b4:	4618      	mov	r0, r3
 80067b6:	f000 fedb 	bl	8007570 <_ZNSt5arrayIP10USBHandlerLj2EEixEj>
 80067ba:	4603      	mov	r3, r0
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	462a      	mov	r2, r5
 80067c0:	4621      	mov	r1, r4
 80067c2:	68f8      	ldr	r0, [r7, #12]
 80067c4:	f7ff fef3 	bl	80065ae <_ZN7USBMain8WritePMAEttP10USBHandler>
		USB_PMA[epIndex].COUNT_TX = len;
 80067c8:	7dfb      	ldrb	r3, [r7, #23]
 80067ca:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 80067ce:	f503 6358 	add.w	r3, r3, #3456	; 0xd80
 80067d2:	00db      	lsls	r3, r3, #3
 80067d4:	683a      	ldr	r2, [r7, #0]
 80067d6:	b292      	uxth	r2, r2
 80067d8:	805a      	strh	r2, [r3, #2]
					usbDebug[usbDebugNo].xferBuff0 = ((uint32_t*)classByEP[epIndex]->inBuff)[0];
					usbDebug[usbDebugNo].xferBuff1 = ((uint32_t*)classByEP[epIndex]->inBuff)[1];
				}
#endif

		SetTxStatus(epIndex, USB_EP_TX_VALID);
 80067da:	7dfb      	ldrb	r3, [r7, #23]
 80067dc:	2130      	movs	r1, #48	; 0x30
 80067de:	4618      	mov	r0, r3
 80067e0:	f7ff fe53 	bl	800648a <_Z11SetTxStatusht>
	} else {												// OUT endpoint
		SetRxStatus(0, USB_EP_RX_VALID);
	}
}
 80067e4:	e004      	b.n	80067f0 <_ZN7USBMain11EPStartXferE9Directionhm+0x82>
		SetRxStatus(0, USB_EP_RX_VALID);
 80067e6:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 80067ea:	2000      	movs	r0, #0
 80067ec:	f7ff fe80 	bl	80064f0 <_Z11SetRxStatusht>
}
 80067f0:	bf00      	nop
 80067f2:	3718      	adds	r7, #24
 80067f4:	46bd      	mov	sp, r7
 80067f6:	bdb0      	pop	{r4, r5, r7, pc}

080067f8 <_ZN7USBMain19USBInterruptHandlerEv>:


void USBMain::USBInterruptHandler()						// Originally in Drivers\STM32F4xx_HAL_Driver\Src\stm32f4xx_hal_pcd.c
{
 80067f8:	b590      	push	{r4, r7, lr}
 80067fa:	b085      	sub	sp, #20
 80067fc:	af00      	add	r7, sp, #0
 80067fe:	6078      	str	r0, [r7, #4]
	// Handle spurious interrupt
	USBP->ISTR &= ~(USB_ISTR_SOF | USB_ISTR_ESOF);
 8006800:	4b9c      	ldr	r3, [pc, #624]	; (8006a74 <_ZN7USBMain19USBInterruptHandlerEv+0x27c>)
 8006802:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006806:	b29b      	uxth	r3, r3
 8006808:	4a9a      	ldr	r2, [pc, #616]	; (8006a74 <_ZN7USBMain19USBInterruptHandlerEv+0x27c>)
 800680a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800680e:	b29b      	uxth	r3, r3
 8006810:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
	if ((USBP->ISTR) == 0) {
 8006814:	4b97      	ldr	r3, [pc, #604]	; (8006a74 <_ZN7USBMain19USBInterruptHandlerEv+0x27c>)
 8006816:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800681a:	b29b      	uxth	r3, r3
 800681c:	2b00      	cmp	r3, #0
 800681e:	bf0c      	ite	eq
 8006820:	2301      	moveq	r3, #1
 8006822:	2300      	movne	r3, #0
 8006824:	b2db      	uxtb	r3, r3
 8006826:	2b00      	cmp	r3, #0
 8006828:	f040 8293 	bne.w	8006d52 <_ZN7USBMain19USBInterruptHandlerEv+0x55a>
		return;
	}


	/////////// 	8000 		USB_ISTR_CTR: Correct Transfer
	while (ReadInterrupts(USB_ISTR_CTR)) {					// Originally PCD_EP_ISR_Handler
 800682c:	e1ee      	b.n	8006c0c <_ZN7USBMain19USBInterruptHandlerEv+0x414>
		uint8_t epIndex = USBP->ISTR & USB_ISTR_EP_ID;		// Extract highest priority endpoint number
 800682e:	4b91      	ldr	r3, [pc, #580]	; (8006a74 <_ZN7USBMain19USBInterruptHandlerEv+0x27c>)
 8006830:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006834:	b29b      	uxth	r3, r3
 8006836:	b2db      	uxtb	r3, r3
 8006838:	f003 030f 	and.w	r3, r3, #15
 800683c:	73fb      	strb	r3, [r7, #15]

#if (USB_DEBUG)
		usbDebug[usbDebugNo].endpoint = epIndex;
#endif

		if (epIndex == 0) {
 800683e:	7bfb      	ldrb	r3, [r7, #15]
 8006840:	2b00      	cmp	r3, #0
 8006842:	f040 811b 	bne.w	8006a7c <_ZN7USBMain19USBInterruptHandlerEv+0x284>
			if ((USBP->ISTR & USB_ISTR_DIR) == 0) {			// DIR = 0: Direction IN
 8006846:	4b8b      	ldr	r3, [pc, #556]	; (8006a74 <_ZN7USBMain19USBInterruptHandlerEv+0x27c>)
 8006848:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800684c:	b29b      	uxth	r3, r3
 800684e:	f003 0310 	and.w	r3, r3, #16
 8006852:	2b00      	cmp	r3, #0
 8006854:	bf0c      	ite	eq
 8006856:	2301      	moveq	r3, #1
 8006858:	2300      	movne	r3, #0
 800685a:	b2db      	uxtb	r3, r3
 800685c:	2b00      	cmp	r3, #0
 800685e:	d06e      	beq.n	800693e <_ZN7USBMain19USBInterruptHandlerEv+0x146>
				ClearTxInterrupt(0);
 8006860:	2000      	movs	r0, #0
 8006862:	f7ff fdec 	bl	800643e <_Z16ClearTxInterrupth>

				uint16_t txBytes = USB_PMA[0].GetTXCount();
 8006866:	4884      	ldr	r0, [pc, #528]	; (8006a78 <_ZN7USBMain19USBInterruptHandlerEv+0x280>)
 8006868:	f7ff fd02 	bl	8006270 <_ZN15USB_PMA_TypeDef10GetTXCountEv>
 800686c:	4603      	mov	r3, r0
 800686e:	817b      	strh	r3, [r7, #10]
				classByEP[epIndex]->inBuff += txBytes;
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	f203 63a4 	addw	r3, r3, #1700	; 0x6a4
 8006876:	7bfa      	ldrb	r2, [r7, #15]
 8006878:	4611      	mov	r1, r2
 800687a:	4618      	mov	r0, r3
 800687c:	f000 fe78 	bl	8007570 <_ZNSt5arrayIP10USBHandlerLj2EEixEj>
 8006880:	4603      	mov	r3, r0
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	69d9      	ldr	r1, [r3, #28]
 8006886:	897a      	ldrh	r2, [r7, #10]
 8006888:	440a      	add	r2, r1
 800688a:	61da      	str	r2, [r3, #28]

				if (classByEP[epIndex]->inBuffRem > ep_maxPacket) {
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	f203 63a4 	addw	r3, r3, #1700	; 0x6a4
 8006892:	7bfa      	ldrb	r2, [r7, #15]
 8006894:	4611      	mov	r1, r2
 8006896:	4618      	mov	r0, r3
 8006898:	f000 fe6a 	bl	8007570 <_ZNSt5arrayIP10USBHandlerLj2EEixEj>
 800689c:	4603      	mov	r3, r0
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068a2:	2b40      	cmp	r3, #64	; 0x40
 80068a4:	bf8c      	ite	hi
 80068a6:	2301      	movhi	r3, #1
 80068a8:	2300      	movls	r3, #0
 80068aa:	b2db      	uxtb	r3, r3
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d023      	beq.n	80068f8 <_ZN7USBMain19USBInterruptHandlerEv+0x100>
					classByEP[epIndex]->inBuffRem -= ep_maxPacket;
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	f203 63a4 	addw	r3, r3, #1700	; 0x6a4
 80068b6:	7bfa      	ldrb	r2, [r7, #15]
 80068b8:	4611      	mov	r1, r2
 80068ba:	4618      	mov	r0, r3
 80068bc:	f000 fe58 	bl	8007570 <_ZNSt5arrayIP10USBHandlerLj2EEixEj>
 80068c0:	4603      	mov	r3, r0
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80068c6:	3a40      	subs	r2, #64	; 0x40
 80068c8:	625a      	str	r2, [r3, #36]	; 0x24
					EPStartXfer(Direction::in, 0, classByEP[epIndex]->inBuffRem);
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	f203 63a4 	addw	r3, r3, #1700	; 0x6a4
 80068d0:	7bfa      	ldrb	r2, [r7, #15]
 80068d2:	4611      	mov	r1, r2
 80068d4:	4618      	mov	r0, r3
 80068d6:	f000 fe4b 	bl	8007570 <_ZNSt5arrayIP10USBHandlerLj2EEixEj>
 80068da:	4603      	mov	r3, r0
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068e0:	2200      	movs	r2, #0
 80068e2:	2100      	movs	r1, #0
 80068e4:	6878      	ldr	r0, [r7, #4]
 80068e6:	f7ff ff42 	bl	800676e <_ZN7USBMain11EPStartXferE9Directionhm>
					EPStartXfer(Direction::out, 0, 0);
 80068ea:	2300      	movs	r3, #0
 80068ec:	2200      	movs	r2, #0
 80068ee:	2101      	movs	r1, #1
 80068f0:	6878      	ldr	r0, [r7, #4]
 80068f2:	f7ff ff3c 	bl	800676e <_ZN7USBMain11EPStartXferE9Directionhm>
 80068f6:	e009      	b.n	800690c <_ZN7USBMain19USBInterruptHandlerEv+0x114>
				} else {
					// FIXME if (rem_length ==  maxpacket) etc - where non zero size packet and last packet is a multiple of max packet size
					SetTxStatus(0, USB_EP_TX_STALL);
 80068f8:	2110      	movs	r1, #16
 80068fa:	2000      	movs	r0, #0
 80068fc:	f7ff fdc5 	bl	800648a <_Z11SetTxStatusht>
					EPStartXfer(Direction::out, 0, 0);
 8006900:	2300      	movs	r3, #0
 8006902:	2200      	movs	r2, #0
 8006904:	2101      	movs	r1, #1
 8006906:	6878      	ldr	r0, [r7, #4]
 8006908:	f7ff ff31 	bl	800676e <_ZN7USBMain11EPStartXferE9Directionhm>
				}

				if (devAddress > 0 && txBytes == 0) {
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	f893 36b8 	ldrb.w	r3, [r3, #1720]	; 0x6b8
 8006912:	2b00      	cmp	r3, #0
 8006914:	f000 817a 	beq.w	8006c0c <_ZN7USBMain19USBInterruptHandlerEv+0x414>
 8006918:	897b      	ldrh	r3, [r7, #10]
 800691a:	2b00      	cmp	r3, #0
 800691c:	f040 8176 	bne.w	8006c0c <_ZN7USBMain19USBInterruptHandlerEv+0x414>
					USBP->DADDR = (devAddress | USB_DADDR_EF);
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	f893 36b8 	ldrb.w	r3, [r3, #1720]	; 0x6b8
 8006926:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800692a:	b2da      	uxtb	r2, r3
 800692c:	4b51      	ldr	r3, [pc, #324]	; (8006a74 <_ZN7USBMain19USBInterruptHandlerEv+0x27c>)
 800692e:	b292      	uxth	r2, r2
 8006930:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
					devAddress = 0;
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	2200      	movs	r2, #0
 8006938:	f883 26b8 	strb.w	r2, [r3, #1720]	; 0x6b8
 800693c:	e166      	b.n	8006c0c <_ZN7USBMain19USBInterruptHandlerEv+0x414>
				}

			} else {										// DIR = 1: Setup or OUT interrupt

				if ((USBP->EP0R & USB_EP_SETUP) != 0) {
 800693e:	4b4d      	ldr	r3, [pc, #308]	; (8006a74 <_ZN7USBMain19USBInterruptHandlerEv+0x27c>)
 8006940:	881b      	ldrh	r3, [r3, #0]
 8006942:	b29b      	uxth	r3, r3
 8006944:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006948:	2b00      	cmp	r3, #0
 800694a:	bf14      	ite	ne
 800694c:	2301      	movne	r3, #1
 800694e:	2300      	moveq	r3, #0
 8006950:	b2db      	uxtb	r3, r3
 8006952:	2b00      	cmp	r3, #0
 8006954:	d025      	beq.n	80069a2 <_ZN7USBMain19USBInterruptHandlerEv+0x1aa>
					classByEP[0]->outBuffCount = USB_PMA[0].GetRXCount();
 8006956:	4848      	ldr	r0, [pc, #288]	; (8006a78 <_ZN7USBMain19USBInterruptHandlerEv+0x280>)
 8006958:	f7ff fc99 	bl	800628e <_ZN15USB_PMA_TypeDef10GetRXCountEv>
 800695c:	4604      	mov	r4, r0
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	f203 63a4 	addw	r3, r3, #1700	; 0x6a4
 8006964:	2100      	movs	r1, #0
 8006966:	4618      	mov	r0, r3
 8006968:	f000 fe02 	bl	8007570 <_ZNSt5arrayIP10USBHandlerLj2EEixEj>
 800696c:	4603      	mov	r3, r0
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	611c      	str	r4, [r3, #16]
					ReadPMA(USB_PMA[0].ADDR_RX, classByEP[0]);	// Read setup data into  receive buffer
 8006972:	4b41      	ldr	r3, [pc, #260]	; (8006a78 <_ZN7USBMain19USBInterruptHandlerEv+0x280>)
 8006974:	889b      	ldrh	r3, [r3, #4]
 8006976:	b29c      	uxth	r4, r3
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	f203 63a4 	addw	r3, r3, #1700	; 0x6a4
 800697e:	2100      	movs	r1, #0
 8006980:	4618      	mov	r0, r3
 8006982:	f000 fdf5 	bl	8007570 <_ZNSt5arrayIP10USBHandlerLj2EEixEj>
 8006986:	4603      	mov	r3, r0
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	461a      	mov	r2, r3
 800698c:	4621      	mov	r1, r4
 800698e:	6878      	ldr	r0, [r7, #4]
 8006990:	f7ff fde1 	bl	8006556 <_ZN7USBMain7ReadPMAEtP10USBHandler>
					ClearRxInterrupt(0);					// clears 8000 interrupt
 8006994:	2000      	movs	r0, #0
 8006996:	f7ff fd2f 	bl	80063f8 <_Z16ClearRxInterrupth>
					ProcessSetupPacket();					// Parse setup packet into request, locate data (eg descriptor) and populate TX buffer
 800699a:	6878      	ldr	r0, [r7, #4]
 800699c:	f7ff fe37 	bl	800660e <_ZN7USBMain18ProcessSetupPacketEv>
 80069a0:	e134      	b.n	8006c0c <_ZN7USBMain19USBInterruptHandlerEv+0x414>

				} else {
					ClearRxInterrupt(0);
 80069a2:	2000      	movs	r0, #0
 80069a4:	f7ff fd28 	bl	80063f8 <_Z16ClearRxInterrupth>
					classByEP[0]->outBuffCount = USB_PMA[0].GetRXCount();
 80069a8:	4833      	ldr	r0, [pc, #204]	; (8006a78 <_ZN7USBMain19USBInterruptHandlerEv+0x280>)
 80069aa:	f7ff fc70 	bl	800628e <_ZN15USB_PMA_TypeDef10GetRXCountEv>
 80069ae:	4604      	mov	r4, r0
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	f203 63a4 	addw	r3, r3, #1700	; 0x6a4
 80069b6:	2100      	movs	r1, #0
 80069b8:	4618      	mov	r0, r3
 80069ba:	f000 fdd9 	bl	8007570 <_ZNSt5arrayIP10USBHandlerLj2EEixEj>
 80069be:	4603      	mov	r3, r0
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	611c      	str	r4, [r3, #16]
					if (classByEP[0]->outBuffCount != 0) {
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	f203 63a4 	addw	r3, r3, #1700	; 0x6a4
 80069ca:	2100      	movs	r1, #0
 80069cc:	4618      	mov	r0, r3
 80069ce:	f000 fdcf 	bl	8007570 <_ZNSt5arrayIP10USBHandlerLj2EEixEj>
 80069d2:	4603      	mov	r3, r0
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	691b      	ldr	r3, [r3, #16]
 80069d8:	2b00      	cmp	r3, #0
 80069da:	bf14      	ite	ne
 80069dc:	2301      	movne	r3, #1
 80069de:	2300      	moveq	r3, #0
 80069e0:	b2db      	uxtb	r3, r3
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d040      	beq.n	8006a68 <_ZN7USBMain19USBInterruptHandlerEv+0x270>
						ReadPMA(USB_PMA[0].ADDR_RX, classByEP[0]);
 80069e6:	4b24      	ldr	r3, [pc, #144]	; (8006a78 <_ZN7USBMain19USBInterruptHandlerEv+0x280>)
 80069e8:	889b      	ldrh	r3, [r3, #4]
 80069ea:	b29c      	uxth	r4, r3
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	f203 63a4 	addw	r3, r3, #1700	; 0x6a4
 80069f2:	2100      	movs	r1, #0
 80069f4:	4618      	mov	r0, r3
 80069f6:	f000 fdbb 	bl	8007570 <_ZNSt5arrayIP10USBHandlerLj2EEixEj>
 80069fa:	4603      	mov	r3, r0
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	461a      	mov	r2, r3
 8006a00:	4621      	mov	r1, r4
 8006a02:	6878      	ldr	r0, [r7, #4]
 8006a04:	f7ff fda7 	bl	8006556 <_ZN7USBMain7ReadPMAEtP10USBHandler>

						if (devState == DeviceState::Configured && classPendingData) {
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	2b02      	cmp	r3, #2
 8006a0e:	d12b      	bne.n	8006a68 <_ZN7USBMain19USBInterruptHandlerEv+0x270>
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	f893 3698 	ldrb.w	r3, [r3, #1688]	; 0x698
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d026      	beq.n	8006a68 <_ZN7USBMain19USBInterruptHandlerEv+0x270>
							if ((req.RequestType & requestTypeMask) == RequestTypeClass) {
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	f893 36ac 	ldrb.w	r3, [r3, #1708]	; 0x6ac
 8006a20:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006a24:	2b20      	cmp	r3, #32
 8006a26:	d115      	bne.n	8006a54 <_ZN7USBMain19USBInterruptHandlerEv+0x25c>
								// Previous OUT interrupt contains instruction (eg host sending CDC LineCoding); next command sends data (Eg LineCoding data)
								classesByInterface[req.Index]->ClassSetupData(req, (uint8_t*)ep0.outBuff);
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	f203 629c 	addw	r2, r3, #1692	; 0x69c
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	f8b3 36b0 	ldrh.w	r3, [r3, #1712]	; 0x6b0
 8006a34:	4619      	mov	r1, r3
 8006a36:	4610      	mov	r0, r2
 8006a38:	f000 fd9a 	bl	8007570 <_ZNSt5arrayIP10USBHandlerLj2EEixEj>
 8006a3c:	4603      	mov	r3, r0
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	681a      	ldr	r2, [r3, #0]
 8006a42:	3210      	adds	r2, #16
 8006a44:	6814      	ldr	r4, [r2, #0]
 8006a46:	687a      	ldr	r2, [r7, #4]
 8006a48:	f202 61ac 	addw	r1, r2, #1708	; 0x6ac
 8006a4c:	687a      	ldr	r2, [r7, #4]
 8006a4e:	6912      	ldr	r2, [r2, #16]
 8006a50:	4618      	mov	r0, r3
 8006a52:	47a0      	blx	r4
							}
							classPendingData = false;
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	2200      	movs	r2, #0
 8006a58:	f883 2698 	strb.w	r2, [r3, #1688]	; 0x698
							EPStartXfer(Direction::in, 0, 0);
 8006a5c:	2300      	movs	r3, #0
 8006a5e:	2200      	movs	r2, #0
 8006a60:	2100      	movs	r1, #0
 8006a62:	6878      	ldr	r0, [r7, #4]
 8006a64:	f7ff fe83 	bl	800676e <_ZN7USBMain11EPStartXferE9Directionhm>
						}
					}
					SetRxStatus(0, USB_EP_RX_VALID);
 8006a68:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8006a6c:	2000      	movs	r0, #0
 8006a6e:	f7ff fd3f 	bl	80064f0 <_Z11SetRxStatusht>
 8006a72:	e0cb      	b.n	8006c0c <_ZN7USBMain19USBInterruptHandlerEv+0x414>
 8006a74:	40006800 	.word	0x40006800
 8006a78:	40006c00 	.word	0x40006c00
				}
			}

		} else {
			// Non zero endpoint
			if ((USB_EPR[epIndex].EPR & USB_EP_CTR_RX) != 0) {
 8006a7c:	7bfb      	ldrb	r3, [r7, #15]
 8006a7e:	f103 5380 	add.w	r3, r3, #268435456	; 0x10000000
 8006a82:	f503 53d0 	add.w	r3, r3, #6656	; 0x1a00
 8006a86:	009b      	lsls	r3, r3, #2
 8006a88:	881b      	ldrh	r3, [r3, #0]
 8006a8a:	b29b      	uxth	r3, r3
 8006a8c:	b21b      	sxth	r3, r3
 8006a8e:	b29b      	uxth	r3, r3
 8006a90:	0bdb      	lsrs	r3, r3, #15
 8006a92:	b2db      	uxtb	r3, r3
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d056      	beq.n	8006b46 <_ZN7USBMain19USBInterruptHandlerEv+0x34e>
				ClearRxInterrupt(epIndex);
 8006a98:	7bfb      	ldrb	r3, [r7, #15]
 8006a9a:	4618      	mov	r0, r3
 8006a9c:	f7ff fcac 	bl	80063f8 <_Z16ClearRxInterrupth>

				classByEP[epIndex]->outBuffCount = USB_PMA[epIndex].GetRXCount();
 8006aa0:	7bfb      	ldrb	r3, [r7, #15]
 8006aa2:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 8006aa6:	f503 6358 	add.w	r3, r3, #3456	; 0xd80
 8006aaa:	00db      	lsls	r3, r3, #3
 8006aac:	4618      	mov	r0, r3
 8006aae:	f7ff fbee 	bl	800628e <_ZN15USB_PMA_TypeDef10GetRXCountEv>
 8006ab2:	4604      	mov	r4, r0
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	f203 63a4 	addw	r3, r3, #1700	; 0x6a4
 8006aba:	7bfa      	ldrb	r2, [r7, #15]
 8006abc:	4611      	mov	r1, r2
 8006abe:	4618      	mov	r0, r3
 8006ac0:	f000 fd56 	bl	8007570 <_ZNSt5arrayIP10USBHandlerLj2EEixEj>
 8006ac4:	4603      	mov	r3, r0
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	611c      	str	r4, [r3, #16]
				if (classByEP[epIndex]->outBuffCount != 0) {
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	f203 63a4 	addw	r3, r3, #1700	; 0x6a4
 8006ad0:	7bfa      	ldrb	r2, [r7, #15]
 8006ad2:	4611      	mov	r1, r2
 8006ad4:	4618      	mov	r0, r3
 8006ad6:	f000 fd4b 	bl	8007570 <_ZNSt5arrayIP10USBHandlerLj2EEixEj>
 8006ada:	4603      	mov	r3, r0
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	691b      	ldr	r3, [r3, #16]
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	bf14      	ite	ne
 8006ae4:	2301      	movne	r3, #1
 8006ae6:	2300      	moveq	r3, #0
 8006ae8:	b2db      	uxtb	r3, r3
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d016      	beq.n	8006b1c <_ZN7USBMain19USBInterruptHandlerEv+0x324>
					ReadPMA(USB_PMA[epIndex].ADDR_RX, classByEP[epIndex]);
 8006aee:	7bfb      	ldrb	r3, [r7, #15]
 8006af0:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 8006af4:	f503 6358 	add.w	r3, r3, #3456	; 0xd80
 8006af8:	00db      	lsls	r3, r3, #3
 8006afa:	889b      	ldrh	r3, [r3, #4]
 8006afc:	b29c      	uxth	r4, r3
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	f203 63a4 	addw	r3, r3, #1700	; 0x6a4
 8006b04:	7bfa      	ldrb	r2, [r7, #15]
 8006b06:	4611      	mov	r1, r2
 8006b08:	4618      	mov	r0, r3
 8006b0a:	f000 fd31 	bl	8007570 <_ZNSt5arrayIP10USBHandlerLj2EEixEj>
 8006b0e:	4603      	mov	r3, r0
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	461a      	mov	r2, r3
 8006b14:	4621      	mov	r1, r4
 8006b16:	6878      	ldr	r0, [r7, #4]
 8006b18:	f7ff fd1d 	bl	8006556 <_ZN7USBMain7ReadPMAEtP10USBHandler>
				}
				SetRxStatus(epIndex, USB_EP_RX_VALID);
 8006b1c:	7bfb      	ldrb	r3, [r7, #15]
 8006b1e:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8006b22:	4618      	mov	r0, r3
 8006b24:	f7ff fce4 	bl	80064f0 <_Z11SetRxStatusht>


				classByEP[epIndex]->DataOut();
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	f203 63a4 	addw	r3, r3, #1700	; 0x6a4
 8006b2e:	7bfa      	ldrb	r2, [r7, #15]
 8006b30:	4611      	mov	r1, r2
 8006b32:	4618      	mov	r0, r3
 8006b34:	f000 fd1c 	bl	8007570 <_ZNSt5arrayIP10USBHandlerLj2EEixEj>
 8006b38:	4603      	mov	r3, r0
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	681a      	ldr	r2, [r3, #0]
 8006b3e:	3204      	adds	r2, #4
 8006b40:	6812      	ldr	r2, [r2, #0]
 8006b42:	4618      	mov	r0, r3
 8006b44:	4790      	blx	r2
			}

			if ((USB_EPR[epIndex].EPR & USB_EP_CTR_TX) != 0) {
 8006b46:	7bfb      	ldrb	r3, [r7, #15]
 8006b48:	f103 5380 	add.w	r3, r3, #268435456	; 0x10000000
 8006b4c:	f503 53d0 	add.w	r3, r3, #6656	; 0x1a00
 8006b50:	009b      	lsls	r3, r3, #2
 8006b52:	881b      	ldrh	r3, [r3, #0]
 8006b54:	b29b      	uxth	r3, r3
 8006b56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	bf14      	ite	ne
 8006b5e:	2301      	movne	r3, #1
 8006b60:	2300      	moveq	r3, #0
 8006b62:	b2db      	uxtb	r3, r3
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d051      	beq.n	8006c0c <_ZN7USBMain19USBInterruptHandlerEv+0x414>
				transmitting = false;
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	2200      	movs	r2, #0
 8006b6c:	f883 2699 	strb.w	r2, [r3, #1689]	; 0x699
				ClearTxInterrupt(epIndex);
 8006b70:	7bfb      	ldrb	r3, [r7, #15]
 8006b72:	4618      	mov	r0, r3
 8006b74:	f7ff fc63 	bl	800643e <_Z16ClearTxInterrupth>

				uint16_t txBytes = USB_PMA[epIndex].GetTXCount();
 8006b78:	7bfb      	ldrb	r3, [r7, #15]
 8006b7a:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 8006b7e:	f503 6358 	add.w	r3, r3, #3456	; 0xd80
 8006b82:	00db      	lsls	r3, r3, #3
 8006b84:	4618      	mov	r0, r3
 8006b86:	f7ff fb73 	bl	8006270 <_ZN15USB_PMA_TypeDef10GetTXCountEv>
 8006b8a:	4603      	mov	r3, r0
 8006b8c:	81bb      	strh	r3, [r7, #12]
				if (classByEP[epIndex]->inBuffSize >= txBytes) {					// Transmitting data larger than buffer size
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	f203 63a4 	addw	r3, r3, #1700	; 0x6a4
 8006b94:	7bfa      	ldrb	r2, [r7, #15]
 8006b96:	4611      	mov	r1, r2
 8006b98:	4618      	mov	r0, r3
 8006b9a:	f000 fce9 	bl	8007570 <_ZNSt5arrayIP10USBHandlerLj2EEixEj>
 8006b9e:	4603      	mov	r3, r0
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	6a1a      	ldr	r2, [r3, #32]
 8006ba4:	89bb      	ldrh	r3, [r7, #12]
 8006ba6:	429a      	cmp	r2, r3
 8006ba8:	bf2c      	ite	cs
 8006baa:	2301      	movcs	r3, #1
 8006bac:	2300      	movcc	r3, #0
 8006bae:	b2db      	uxtb	r3, r3
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d02b      	beq.n	8006c0c <_ZN7USBMain19USBInterruptHandlerEv+0x414>
					classByEP[epIndex]->inBuffSize -= txBytes;
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	f203 63a4 	addw	r3, r3, #1700	; 0x6a4
 8006bba:	7bfa      	ldrb	r2, [r7, #15]
 8006bbc:	4611      	mov	r1, r2
 8006bbe:	4618      	mov	r0, r3
 8006bc0:	f000 fcd6 	bl	8007570 <_ZNSt5arrayIP10USBHandlerLj2EEixEj>
 8006bc4:	4603      	mov	r3, r0
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	6a19      	ldr	r1, [r3, #32]
 8006bca:	89ba      	ldrh	r2, [r7, #12]
 8006bcc:	1a8a      	subs	r2, r1, r2
 8006bce:	621a      	str	r2, [r3, #32]
					classByEP[epIndex]->inBuff += txBytes;
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	f203 63a4 	addw	r3, r3, #1700	; 0x6a4
 8006bd6:	7bfa      	ldrb	r2, [r7, #15]
 8006bd8:	4611      	mov	r1, r2
 8006bda:	4618      	mov	r0, r3
 8006bdc:	f000 fcc8 	bl	8007570 <_ZNSt5arrayIP10USBHandlerLj2EEixEj>
 8006be0:	4603      	mov	r3, r0
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	69d9      	ldr	r1, [r3, #28]
 8006be6:	89ba      	ldrh	r2, [r7, #12]
 8006be8:	440a      	add	r2, r1
 8006bea:	61da      	str	r2, [r3, #28]
					EPStartXfer(Direction::in, epIndex, classByEP[epIndex]->inBuffSize);
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	f203 63a4 	addw	r3, r3, #1700	; 0x6a4
 8006bf2:	7bfa      	ldrb	r2, [r7, #15]
 8006bf4:	4611      	mov	r1, r2
 8006bf6:	4618      	mov	r0, r3
 8006bf8:	f000 fcba 	bl	8007570 <_ZNSt5arrayIP10USBHandlerLj2EEixEj>
 8006bfc:	4603      	mov	r3, r0
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	6a1b      	ldr	r3, [r3, #32]
 8006c02:	7bfa      	ldrb	r2, [r7, #15]
 8006c04:	2100      	movs	r1, #0
 8006c06:	6878      	ldr	r0, [r7, #4]
 8006c08:	f7ff fdb1 	bl	800676e <_ZN7USBMain11EPStartXferE9Directionhm>
	while (ReadInterrupts(USB_ISTR_CTR)) {					// Originally PCD_EP_ISR_Handler
 8006c0c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006c10:	6878      	ldr	r0, [r7, #4]
 8006c12:	f000 fbf9 	bl	8007408 <_ZN7USBMain14ReadInterruptsEm>
 8006c16:	4603      	mov	r3, r0
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	f47f ae08 	bne.w	800682e <_ZN7USBMain19USBInterruptHandlerEv+0x36>
		}
	}


	/////////// 	1000 		USB_ISTR_WKUP: Wake Up
	if (ReadInterrupts(USB_ISTR_WKUP)) {
 8006c1e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006c22:	6878      	ldr	r0, [r7, #4]
 8006c24:	f000 fbf0 	bl	8007408 <_ZN7USBMain14ReadInterruptsEm>
 8006c28:	4603      	mov	r3, r0
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d01d      	beq.n	8006c6a <_ZN7USBMain19USBInterruptHandlerEv+0x472>
		USBP->CNTR &= ~USB_CNTR_FSUSP;
 8006c2e:	4b4b      	ldr	r3, [pc, #300]	; (8006d5c <_ZN7USBMain19USBInterruptHandlerEv+0x564>)
 8006c30:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8006c34:	b29b      	uxth	r3, r3
 8006c36:	4a49      	ldr	r2, [pc, #292]	; (8006d5c <_ZN7USBMain19USBInterruptHandlerEv+0x564>)
 8006c38:	f023 0308 	bic.w	r3, r3, #8
 8006c3c:	b29b      	uxth	r3, r3
 8006c3e:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
		USBP->CNTR &= ~USB_CNTR_LPMODE;
 8006c42:	4b46      	ldr	r3, [pc, #280]	; (8006d5c <_ZN7USBMain19USBInterruptHandlerEv+0x564>)
 8006c44:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8006c48:	b29b      	uxth	r3, r3
 8006c4a:	4a44      	ldr	r2, [pc, #272]	; (8006d5c <_ZN7USBMain19USBInterruptHandlerEv+0x564>)
 8006c4c:	f023 0304 	bic.w	r3, r3, #4
 8006c50:	b29b      	uxth	r3, r3
 8006c52:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
		USBP->ISTR &= ~USB_ISTR_WKUP;
 8006c56:	4b41      	ldr	r3, [pc, #260]	; (8006d5c <_ZN7USBMain19USBInterruptHandlerEv+0x564>)
 8006c58:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006c5c:	b29b      	uxth	r3, r3
 8006c5e:	4a3f      	ldr	r2, [pc, #252]	; (8006d5c <_ZN7USBMain19USBInterruptHandlerEv+0x564>)
 8006c60:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006c64:	b29b      	uxth	r3, r3
 8006c66:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
	}

	/////////// 	800 		SUSP: Suspend Interrupt
	if (ReadInterrupts(USB_ISTR_SUSP)) {
 8006c6a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006c6e:	6878      	ldr	r0, [r7, #4]
 8006c70:	f000 fbca 	bl	8007408 <_ZN7USBMain14ReadInterruptsEm>
 8006c74:	4603      	mov	r3, r0
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d020      	beq.n	8006cbc <_ZN7USBMain19USBInterruptHandlerEv+0x4c4>
		USBP->CNTR |= USB_CNTR_FSUSP;
 8006c7a:	4b38      	ldr	r3, [pc, #224]	; (8006d5c <_ZN7USBMain19USBInterruptHandlerEv+0x564>)
 8006c7c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8006c80:	b29b      	uxth	r3, r3
 8006c82:	4a36      	ldr	r2, [pc, #216]	; (8006d5c <_ZN7USBMain19USBInterruptHandlerEv+0x564>)
 8006c84:	f043 0308 	orr.w	r3, r3, #8
 8006c88:	b29b      	uxth	r3, r3
 8006c8a:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
		USBP->ISTR &= ~USB_ISTR_SUSP;
 8006c8e:	4b33      	ldr	r3, [pc, #204]	; (8006d5c <_ZN7USBMain19USBInterruptHandlerEv+0x564>)
 8006c90:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006c94:	b29b      	uxth	r3, r3
 8006c96:	4a31      	ldr	r2, [pc, #196]	; (8006d5c <_ZN7USBMain19USBInterruptHandlerEv+0x564>)
 8006c98:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006c9c:	b29b      	uxth	r3, r3
 8006c9e:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
		USBP->CNTR |= USB_CNTR_LPMODE;
 8006ca2:	4b2e      	ldr	r3, [pc, #184]	; (8006d5c <_ZN7USBMain19USBInterruptHandlerEv+0x564>)
 8006ca4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8006ca8:	b29b      	uxth	r3, r3
 8006caa:	4a2c      	ldr	r2, [pc, #176]	; (8006d5c <_ZN7USBMain19USBInterruptHandlerEv+0x564>)
 8006cac:	f043 0304 	orr.w	r3, r3, #4
 8006cb0:	b29b      	uxth	r3, r3
 8006cb2:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
		devState = DeviceState::Suspended;
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	2200      	movs	r2, #0
 8006cba:	601a      	str	r2, [r3, #0]
	}

	/////////// 	400 		RESET: Reset Interrupt
	if (ReadInterrupts(USB_ISTR_RESET))	{
 8006cbc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006cc0:	6878      	ldr	r0, [r7, #4]
 8006cc2:	f000 fba1 	bl	8007408 <_ZN7USBMain14ReadInterruptsEm>
 8006cc6:	4603      	mov	r3, r0
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d01d      	beq.n	8006d08 <_ZN7USBMain19USBInterruptHandlerEv+0x510>
		USBP->ISTR &= ~USB_ISTR_RESET;
 8006ccc:	4b23      	ldr	r3, [pc, #140]	; (8006d5c <_ZN7USBMain19USBInterruptHandlerEv+0x564>)
 8006cce:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006cd2:	b29b      	uxth	r3, r3
 8006cd4:	4a21      	ldr	r2, [pc, #132]	; (8006d5c <_ZN7USBMain19USBInterruptHandlerEv+0x564>)
 8006cd6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006cda:	b29b      	uxth	r3, r3
 8006cdc:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44

		pmaAddress = pmaStartAddr;						// Reset PMA allocation start address
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	2220      	movs	r2, #32
 8006ce4:	f8c3 26b4 	str.w	r2, [r3, #1716]	; 0x6b4
		ActivateEndpoint(0, Direction::out, Control);
 8006ce8:	2300      	movs	r3, #0
 8006cea:	2201      	movs	r2, #1
 8006cec:	2100      	movs	r1, #0
 8006cee:	6878      	ldr	r0, [r7, #4]
 8006cf0:	f000 f8ac 	bl	8006e4c <_ZN7USBMain16ActivateEndpointEh9DirectionNS_12EndPointTypeE>
		ActivateEndpoint(0, Direction::in,  Control);
 8006cf4:	2300      	movs	r3, #0
 8006cf6:	2200      	movs	r2, #0
 8006cf8:	2100      	movs	r1, #0
 8006cfa:	6878      	ldr	r0, [r7, #4]
 8006cfc:	f000 f8a6 	bl	8006e4c <_ZN7USBMain16ActivateEndpointEh9DirectionNS_12EndPointTypeE>

		USBP->DADDR = USB_DADDR_EF;						// Enable endpoint and set address to 0
 8006d00:	4b16      	ldr	r3, [pc, #88]	; (8006d5c <_ZN7USBMain19USBInterruptHandlerEv+0x564>)
 8006d02:	2280      	movs	r2, #128	; 0x80
 8006d04:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
	}

	/////////// 	100 		USB_ISTR_ESOF: Expected Start of frame
	if (ReadInterrupts(USB_ISTR_ESOF)) {
 8006d08:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006d0c:	6878      	ldr	r0, [r7, #4]
 8006d0e:	f000 fb7b 	bl	8007408 <_ZN7USBMain14ReadInterruptsEm>
 8006d12:	4603      	mov	r3, r0
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d009      	beq.n	8006d2c <_ZN7USBMain19USBInterruptHandlerEv+0x534>
		USBP->ISTR &= ~USB_ISTR_ESOF;
 8006d18:	4b10      	ldr	r3, [pc, #64]	; (8006d5c <_ZN7USBMain19USBInterruptHandlerEv+0x564>)
 8006d1a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006d1e:	b29b      	uxth	r3, r3
 8006d20:	4a0e      	ldr	r2, [pc, #56]	; (8006d5c <_ZN7USBMain19USBInterruptHandlerEv+0x564>)
 8006d22:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006d26:	b29b      	uxth	r3, r3
 8006d28:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
	}

	/////////// 	2000 		ERR: Error Interrupt
	if (ReadInterrupts(USB_ISTR_ERR)) {
 8006d2c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006d30:	6878      	ldr	r0, [r7, #4]
 8006d32:	f000 fb69 	bl	8007408 <_ZN7USBMain14ReadInterruptsEm>
 8006d36:	4603      	mov	r3, r0
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d00b      	beq.n	8006d54 <_ZN7USBMain19USBInterruptHandlerEv+0x55c>
		USBP->ISTR &= ~USB_ISTR_ERR;
 8006d3c:	4b07      	ldr	r3, [pc, #28]	; (8006d5c <_ZN7USBMain19USBInterruptHandlerEv+0x564>)
 8006d3e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006d42:	b29b      	uxth	r3, r3
 8006d44:	4a05      	ldr	r2, [pc, #20]	; (8006d5c <_ZN7USBMain19USBInterruptHandlerEv+0x564>)
 8006d46:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006d4a:	b29b      	uxth	r3, r3
 8006d4c:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
 8006d50:	e000      	b.n	8006d54 <_ZN7USBMain19USBInterruptHandlerEv+0x55c>
		return;
 8006d52:	bf00      	nop
	}
}
 8006d54:	3714      	adds	r7, #20
 8006d56:	46bd      	mov	sp, r7
 8006d58:	bd90      	pop	{r4, r7, pc}
 8006d5a:	bf00      	nop
 8006d5c:	40006800 	.word	0x40006800

08006d60 <_ZN7USBMain7InitUSBEv>:


void USBMain::InitUSB()
{
 8006d60:	b580      	push	{r7, lr}
 8006d62:	b082      	sub	sp, #8
 8006d64:	af00      	add	r7, sp, #0
 8006d66:	6078      	str	r0, [r7, #4]
    // PA11 USB_DM; PA12 USB_DP
	GPIOA->MODER &= ~(GPIO_MODER_MODE11_0 | GPIO_MODER_MODE12_0);
 8006d68:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8006d72:	f023 73a0 	bic.w	r3, r3, #20971520	; 0x1400000
 8006d76:	6013      	str	r3, [r2, #0]
	GPIOA->AFR[1] |= ((0xA << GPIO_AFRH_AFSEL11_Pos) | (0xA << GPIO_AFRH_AFSEL12_Pos));
 8006d78:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006d7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d7e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8006d82:	f443 232a 	orr.w	r3, r3, #696320	; 0xaa000
 8006d86:	6253      	str	r3, [r2, #36]	; 0x24

	PWR->CR2 |= PWR_CR2_USV;							// To determine if USB power is valid
 8006d88:	4b2d      	ldr	r3, [pc, #180]	; (8006e40 <_ZN7USBMain7InitUSBEv+0xe0>)
 8006d8a:	685b      	ldr	r3, [r3, #4]
 8006d8c:	4a2c      	ldr	r2, [pc, #176]	; (8006e40 <_ZN7USBMain7InitUSBEv+0xe0>)
 8006d8e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006d92:	6053      	str	r3, [r2, #4]

	while (LL_HSEM_1StepLock(HSEM, 5)) {};				// Lock semaphore 5 (See AN5289 p.25)
 8006d94:	bf00      	nop
 8006d96:	2105      	movs	r1, #5
 8006d98:	482a      	ldr	r0, [pc, #168]	; (8006e44 <_ZN7USBMain7InitUSBEv+0xe4>)
 8006d9a:	f7ff fab9 	bl	8006310 <LL_HSEM_1StepLock>
 8006d9e:	4603      	mov	r3, r0
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	bf14      	ite	ne
 8006da4:	2301      	movne	r3, #1
 8006da6:	2300      	moveq	r3, #0
 8006da8:	b2db      	uxtb	r3, r3
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d1f3      	bne.n	8006d96 <_ZN7USBMain7InitUSBEv+0x36>
	RCC->CRRCR |= RCC_CRRCR_HSI48ON;					// Enable Internal High Speed oscillator for USB
 8006dae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006db2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006db6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006dba:	f043 0301 	orr.w	r3, r3, #1
 8006dbe:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
	while ((RCC->CRRCR & RCC_CRRCR_HSI48RDY) == 0);		// Wait till internal USB oscillator is ready
 8006dc2:	bf00      	nop
 8006dc4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006dc8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006dcc:	f003 0302 	and.w	r3, r3, #2
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	bf0c      	ite	eq
 8006dd4:	2301      	moveq	r3, #1
 8006dd6:	2300      	movne	r3, #0
 8006dd8:	b2db      	uxtb	r3, r3
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d1f2      	bne.n	8006dc4 <_ZN7USBMain7InitUSBEv+0x64>

	RCC->APB1ENR1 |= RCC_APB1ENR1_USBEN;				// USB Clock Enable
 8006dde:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006de2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006de4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006de8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006dec:	6593      	str	r3, [r2, #88]	; 0x58

	NVIC_SetPriority(USB_LP_IRQn, 3);
 8006dee:	2103      	movs	r1, #3
 8006df0:	2014      	movs	r0, #20
 8006df2:	f7ff f981 	bl	80060f8 <__NVIC_SetPriority>
	NVIC_EnableIRQ(USB_LP_IRQn);
 8006df6:	2014      	movs	r0, #20
 8006df8:	f7ff f960 	bl	80060bc <__NVIC_EnableIRQ>

	USBP->CNTR = USB_CNTR_FRES;							// Force USB Reset
 8006dfc:	4b12      	ldr	r3, [pc, #72]	; (8006e48 <_ZN7USBMain7InitUSBEv+0xe8>)
 8006dfe:	2201      	movs	r2, #1
 8006e00:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
	USBP->BTABLE = 0;									// Set Buffer table Address BTABLE_ADDRESS
 8006e04:	4b10      	ldr	r3, [pc, #64]	; (8006e48 <_ZN7USBMain7InitUSBEv+0xe8>)
 8006e06:	2200      	movs	r2, #0
 8006e08:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
	USBP->ISTR = 0;										// Clear pending interrupts
 8006e0c:	4b0e      	ldr	r3, [pc, #56]	; (8006e48 <_ZN7USBMain7InitUSBEv+0xe8>)
 8006e0e:	2200      	movs	r2, #0
 8006e10:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
	USBP->CNTR = USB_CNTR_CTRM  | USB_CNTR_WKUPM | USB_CNTR_SUSPM | USB_CNTR_ERRM | USB_CNTR_RESETM;
 8006e14:	4b0c      	ldr	r3, [pc, #48]	; (8006e48 <_ZN7USBMain7InitUSBEv+0xe8>)
 8006e16:	f44f 423c 	mov.w	r2, #48128	; 0xbc00
 8006e1a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
	USBP->BCDR |= USB_BCDR_DPPU;						// Connect internal PU resistor on USB DP line
 8006e1e:	4b0a      	ldr	r3, [pc, #40]	; (8006e48 <_ZN7USBMain7InitUSBEv+0xe8>)
 8006e20:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006e24:	b29b      	uxth	r3, r3
 8006e26:	4a08      	ldr	r2, [pc, #32]	; (8006e48 <_ZN7USBMain7InitUSBEv+0xe8>)
 8006e28:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006e2c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006e30:	b29b      	uxth	r3, r3
 8006e32:	f8a2 3058 	strh.w	r3, [r2, #88]	; 0x58
}
 8006e36:	bf00      	nop
 8006e38:	3708      	adds	r7, #8
 8006e3a:	46bd      	mov	sp, r7
 8006e3c:	bd80      	pop	{r7, pc}
 8006e3e:	bf00      	nop
 8006e40:	58000400 	.word	0x58000400
 8006e44:	58001400 	.word	0x58001400
 8006e48:	40006800 	.word	0x40006800

08006e4c <_ZN7USBMain16ActivateEndpointEh9DirectionNS_12EndPointTypeE>:


void USBMain::ActivateEndpoint(uint8_t endpoint, Direction direction, EndPointType eptype)
{
 8006e4c:	b580      	push	{r7, lr}
 8006e4e:	b086      	sub	sp, #24
 8006e50:	af00      	add	r7, sp, #0
 8006e52:	60f8      	str	r0, [r7, #12]
 8006e54:	607a      	str	r2, [r7, #4]
 8006e56:	461a      	mov	r2, r3
 8006e58:	460b      	mov	r3, r1
 8006e5a:	72fb      	strb	r3, [r7, #11]
 8006e5c:	4613      	mov	r3, r2
 8006e5e:	72bb      	strb	r3, [r7, #10]
	endpoint = endpoint & 0xF;
 8006e60:	7afb      	ldrb	r3, [r7, #11]
 8006e62:	f003 030f 	and.w	r3, r3, #15
 8006e66:	72fb      	strb	r3, [r7, #11]
	uint16_t ep_type = 0;
 8006e68:	2300      	movs	r3, #0
 8006e6a:	82fb      	strh	r3, [r7, #22]
	switch (eptype) {
 8006e6c:	7abb      	ldrb	r3, [r7, #10]
 8006e6e:	2b03      	cmp	r3, #3
 8006e70:	d819      	bhi.n	8006ea6 <_ZN7USBMain16ActivateEndpointEh9DirectionNS_12EndPointTypeE+0x5a>
 8006e72:	a201      	add	r2, pc, #4	; (adr r2, 8006e78 <_ZN7USBMain16ActivateEndpointEh9DirectionNS_12EndPointTypeE+0x2c>)
 8006e74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e78:	08006e89 	.word	0x08006e89
 8006e7c:	08006e91 	.word	0x08006e91
 8006e80:	08006e99 	.word	0x08006e99
 8006e84:	08006e9f 	.word	0x08006e9f
		case Control:		ep_type = USB_EP_CONTROL;		break;
 8006e88:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006e8c:	82fb      	strh	r3, [r7, #22]
 8006e8e:	e00a      	b.n	8006ea6 <_ZN7USBMain16ActivateEndpointEh9DirectionNS_12EndPointTypeE+0x5a>
		case Isochronous:	ep_type = USB_EP_ISOCHRONOUS;	break;
 8006e90:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006e94:	82fb      	strh	r3, [r7, #22]
 8006e96:	e006      	b.n	8006ea6 <_ZN7USBMain16ActivateEndpointEh9DirectionNS_12EndPointTypeE+0x5a>
		case Bulk:			ep_type = USB_EP_BULK;			break;
 8006e98:	2300      	movs	r3, #0
 8006e9a:	82fb      	strh	r3, [r7, #22]
 8006e9c:	e003      	b.n	8006ea6 <_ZN7USBMain16ActivateEndpointEh9DirectionNS_12EndPointTypeE+0x5a>
		case Interrupt:		ep_type = USB_EP_INTERRUPT;		break;
 8006e9e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8006ea2:	82fb      	strh	r3, [r7, #22]
 8006ea4:	bf00      	nop
	}

	// Set the address (EA=endpoint) and type (EP_TYPE=ep_type)
	USB_EPR[endpoint].EPR = (USB_EPR[endpoint].EPR & USB_EP_T_MASK) | (endpoint | ep_type | USB_EP_CTR_RX | USB_EP_CTR_TX);
 8006ea6:	7afb      	ldrb	r3, [r7, #11]
 8006ea8:	f103 5380 	add.w	r3, r3, #268435456	; 0x10000000
 8006eac:	f503 53d0 	add.w	r3, r3, #6656	; 0x1a00
 8006eb0:	009b      	lsls	r3, r3, #2
 8006eb2:	881b      	ldrh	r3, [r3, #0]
 8006eb4:	b29b      	uxth	r3, r3
 8006eb6:	b21b      	sxth	r3, r3
 8006eb8:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8006ebc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ec0:	b21a      	sxth	r2, r3
 8006ec2:	7afb      	ldrb	r3, [r7, #11]
 8006ec4:	b299      	uxth	r1, r3
 8006ec6:	8afb      	ldrh	r3, [r7, #22]
 8006ec8:	430b      	orrs	r3, r1
 8006eca:	b29b      	uxth	r3, r3
 8006ecc:	b219      	sxth	r1, r3
 8006ece:	4b59      	ldr	r3, [pc, #356]	; (8007034 <_ZN7USBMain16ActivateEndpointEh9DirectionNS_12EndPointTypeE+0x1e8>)
 8006ed0:	430b      	orrs	r3, r1
 8006ed2:	b21b      	sxth	r3, r3
 8006ed4:	4313      	orrs	r3, r2
 8006ed6:	b21a      	sxth	r2, r3
 8006ed8:	7afb      	ldrb	r3, [r7, #11]
 8006eda:	f103 5380 	add.w	r3, r3, #268435456	; 0x10000000
 8006ede:	f503 53d0 	add.w	r3, r3, #6656	; 0x1a00
 8006ee2:	009b      	lsls	r3, r3, #2
 8006ee4:	b292      	uxth	r2, r2
 8006ee6:	801a      	strh	r2, [r3, #0]

	if (direction == Direction::in) {
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d140      	bne.n	8006f70 <_ZN7USBMain16ActivateEndpointEh9DirectionNS_12EndPointTypeE+0x124>
		USB_PMA[endpoint].ADDR_TX = pmaAddress;						// Offset of PMA used for EP TX
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	f8d3 26b4 	ldr.w	r2, [r3, #1716]	; 0x6b4
 8006ef4:	7afb      	ldrb	r3, [r7, #11]
 8006ef6:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 8006efa:	f503 6358 	add.w	r3, r3, #3456	; 0xd80
 8006efe:	00db      	lsls	r3, r3, #3
 8006f00:	b292      	uxth	r2, r2
 8006f02:	801a      	strh	r2, [r3, #0]

		// Clear tx data toggle (data packets must alternate 1 and 0 in the data field)
		if ((USB_EPR[endpoint].EPR & USB_EP_DTOG_TX) != 0) {
 8006f04:	7afb      	ldrb	r3, [r7, #11]
 8006f06:	f103 5380 	add.w	r3, r3, #268435456	; 0x10000000
 8006f0a:	f503 53d0 	add.w	r3, r3, #6656	; 0x1a00
 8006f0e:	009b      	lsls	r3, r3, #2
 8006f10:	881b      	ldrh	r3, [r3, #0]
 8006f12:	b29b      	uxth	r3, r3
 8006f14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	bf14      	ite	ne
 8006f1c:	2301      	movne	r3, #1
 8006f1e:	2300      	moveq	r3, #0
 8006f20:	b2db      	uxtb	r3, r3
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d01e      	beq.n	8006f64 <_ZN7USBMain16ActivateEndpointEh9DirectionNS_12EndPointTypeE+0x118>
			uint16_t wEPVal = USB_EPR[endpoint].EPR & USB_EPREG_MASK;
 8006f26:	7afb      	ldrb	r3, [r7, #11]
 8006f28:	f103 5380 	add.w	r3, r3, #268435456	; 0x10000000
 8006f2c:	f503 53d0 	add.w	r3, r3, #6656	; 0x1a00
 8006f30:	009b      	lsls	r3, r3, #2
 8006f32:	881b      	ldrh	r3, [r3, #0]
 8006f34:	b29b      	uxth	r3, r3
 8006f36:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006f3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f3e:	827b      	strh	r3, [r7, #18]
			USB_EPR[endpoint].EPR = wEPVal | USB_EP_CTR_RX | USB_EP_CTR_TX | USB_EP_DTOG_TX;
 8006f40:	7afb      	ldrb	r3, [r7, #11]
 8006f42:	f103 5380 	add.w	r3, r3, #268435456	; 0x10000000
 8006f46:	f503 53d0 	add.w	r3, r3, #6656	; 0x1a00
 8006f4a:	009b      	lsls	r3, r3, #2
 8006f4c:	461a      	mov	r2, r3
 8006f4e:	8a7b      	ldrh	r3, [r7, #18]
 8006f50:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006f54:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006f58:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006f5c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006f60:	b29b      	uxth	r3, r3
 8006f62:	8013      	strh	r3, [r2, #0]
		}

		SetTxStatus(endpoint, USB_EP_TX_NAK);
 8006f64:	7afb      	ldrb	r3, [r7, #11]
 8006f66:	2120      	movs	r1, #32
 8006f68:	4618      	mov	r0, r3
 8006f6a:	f7ff fa8e 	bl	800648a <_Z11SetTxStatusht>
 8006f6e:	e054      	b.n	800701a <_ZN7USBMain16ActivateEndpointEh9DirectionNS_12EndPointTypeE+0x1ce>

	} else {
		USB_PMA[endpoint].ADDR_RX = pmaAddress;				// Offset of PMA used for EP RX
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	f8d3 26b4 	ldr.w	r2, [r3, #1716]	; 0x6b4
 8006f76:	7afb      	ldrb	r3, [r7, #11]
 8006f78:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 8006f7c:	f503 6358 	add.w	r3, r3, #3456	; 0xd80
 8006f80:	00db      	lsls	r3, r3, #3
 8006f82:	b292      	uxth	r2, r2
 8006f84:	809a      	strh	r2, [r3, #4]
		USB_PMA[endpoint].SetRXBlkSize(1);					// configure block size = 1 (32 Bytes)
 8006f86:	7afb      	ldrb	r3, [r7, #11]
 8006f88:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 8006f8c:	f503 6358 	add.w	r3, r3, #3456	; 0xd80
 8006f90:	00db      	lsls	r3, r3, #3
 8006f92:	2101      	movs	r1, #1
 8006f94:	4618      	mov	r0, r3
 8006f96:	f7ff f9a2 	bl	80062de <_ZN15USB_PMA_TypeDef12SetRXBlkSizeEm>
		USB_PMA[endpoint].SetRXBlocks(1);					// number of blocks = 2 (64 bytes)
 8006f9a:	7afb      	ldrb	r3, [r7, #11]
 8006f9c:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 8006fa0:	f503 6358 	add.w	r3, r3, #3456	; 0xd80
 8006fa4:	00db      	lsls	r3, r3, #3
 8006fa6:	2101      	movs	r1, #1
 8006fa8:	4618      	mov	r0, r3
 8006faa:	f7ff f97f 	bl	80062ac <_ZN15USB_PMA_TypeDef11SetRXBlocksEm>
		//USB_PMA[endpoint].COUNT_RX = (1 << USB_COUNT0_RX_BLSIZE_Pos) | (1 << USB_COUNT0_RX_NUM_BLOCK_Pos);		// configure block size = 1 (32 Bytes); number of blocks = 2 (64 bytes)

		// Clear rx data toggle
		if ((USB_EPR[endpoint].EPR & USB_EP_DTOG_RX) != 0) {
 8006fae:	7afb      	ldrb	r3, [r7, #11]
 8006fb0:	f103 5380 	add.w	r3, r3, #268435456	; 0x10000000
 8006fb4:	f503 53d0 	add.w	r3, r3, #6656	; 0x1a00
 8006fb8:	009b      	lsls	r3, r3, #2
 8006fba:	881b      	ldrh	r3, [r3, #0]
 8006fbc:	b29b      	uxth	r3, r3
 8006fbe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	bf14      	ite	ne
 8006fc6:	2301      	movne	r3, #1
 8006fc8:	2300      	moveq	r3, #0
 8006fca:	b2db      	uxtb	r3, r3
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d01e      	beq.n	800700e <_ZN7USBMain16ActivateEndpointEh9DirectionNS_12EndPointTypeE+0x1c2>
			uint16_t wEPVal = USB_EPR[endpoint].EPR & USB_EPREG_MASK;
 8006fd0:	7afb      	ldrb	r3, [r7, #11]
 8006fd2:	f103 5380 	add.w	r3, r3, #268435456	; 0x10000000
 8006fd6:	f503 53d0 	add.w	r3, r3, #6656	; 0x1a00
 8006fda:	009b      	lsls	r3, r3, #2
 8006fdc:	881b      	ldrh	r3, [r3, #0]
 8006fde:	b29b      	uxth	r3, r3
 8006fe0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006fe4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006fe8:	82bb      	strh	r3, [r7, #20]
			USB_EPR[endpoint].EPR = wEPVal | USB_EP_CTR_RX | USB_EP_CTR_TX | USB_EP_DTOG_RX;
 8006fea:	7afb      	ldrb	r3, [r7, #11]
 8006fec:	f103 5380 	add.w	r3, r3, #268435456	; 0x10000000
 8006ff0:	f503 53d0 	add.w	r3, r3, #6656	; 0x1a00
 8006ff4:	009b      	lsls	r3, r3, #2
 8006ff6:	461a      	mov	r2, r3
 8006ff8:	8abb      	ldrh	r3, [r7, #20]
 8006ffa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006ffe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007002:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007006:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800700a:	b29b      	uxth	r3, r3
 800700c:	8013      	strh	r3, [r2, #0]
		}

		SetRxStatus(endpoint, USB_EP_RX_VALID);
 800700e:	7afb      	ldrb	r3, [r7, #11]
 8007010:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8007014:	4618      	mov	r0, r3
 8007016:	f7ff fa6b 	bl	80064f0 <_Z11SetRxStatusht>
	}

	// Increment PMA address in 64 byte chunks
	pmaAddress += ep_maxPacket;
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	f8d3 36b4 	ldr.w	r3, [r3, #1716]	; 0x6b4
 8007020:	f103 0240 	add.w	r2, r3, #64	; 0x40
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	f8c3 26b4 	str.w	r2, [r3, #1716]	; 0x6b4
}
 800702a:	bf00      	nop
 800702c:	3718      	adds	r7, #24
 800702e:	46bd      	mov	sp, r7
 8007030:	bd80      	pop	{r7, pc}
 8007032:	bf00      	nop
 8007034:	ffff8080 	.word	0xffff8080

08007038 <_ZN7USBMain5EP0InEPKhm>:


// procedure to allow classes to pass configuration data back via endpoint 0 (eg CDC line setup, MSC MaxLUN etc)
void USBMain::EP0In(const uint8_t* buff, const uint32_t size)
{
 8007038:	b580      	push	{r7, lr}
 800703a:	b086      	sub	sp, #24
 800703c:	af00      	add	r7, sp, #0
 800703e:	60f8      	str	r0, [r7, #12]
 8007040:	60b9      	str	r1, [r7, #8]
 8007042:	607a      	str	r2, [r7, #4]
	ep0.inBuff = buff;
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	68ba      	ldr	r2, [r7, #8]
 8007048:	621a      	str	r2, [r3, #32]
	ep0.inBuffRem = size;
 800704a:	687a      	ldr	r2, [r7, #4]
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	629a      	str	r2, [r3, #40]	; 0x28
	ep0.inBuffSize = std::min(size, static_cast<uint32_t>(req.Length));
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	f8b3 36b2 	ldrh.w	r3, [r3, #1714]	; 0x6b2
 8007056:	617b      	str	r3, [r7, #20]
 8007058:	f107 0214 	add.w	r2, r7, #20
 800705c:	1d3b      	adds	r3, r7, #4
 800705e:	4611      	mov	r1, r2
 8007060:	4618      	mov	r0, r3
 8007062:	f7fe fd26 	bl	8005ab2 <_ZSt3minImERKT_S2_S2_>
 8007066:	4603      	mov	r3, r0
 8007068:	681a      	ldr	r2, [r3, #0]
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	625a      	str	r2, [r3, #36]	; 0x24
	EPStartXfer(Direction::in, 0, ep0.inBuffSize);		// sends blank request back
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007072:	2200      	movs	r2, #0
 8007074:	2100      	movs	r1, #0
 8007076:	68f8      	ldr	r0, [r7, #12]
 8007078:	f7ff fb79 	bl	800676e <_ZN7USBMain11EPStartXferE9Directionhm>

#if (USB_DEBUG)
	USBUpdateDbg({}, {}, {}, ep0.inBuffSize, {}, (uint32_t*)ep0.inBuff);
#endif
}
 800707c:	bf00      	nop
 800707e:	3718      	adds	r7, #24
 8007080:	46bd      	mov	sp, r7
 8007082:	bd80      	pop	{r7, pc}

08007084 <_ZN7USBMain13GetDescriptorEv>:


void USBMain::GetDescriptor()
{
 8007084:	b590      	push	{r4, r7, lr}
 8007086:	b085      	sub	sp, #20
 8007088:	af00      	add	r7, sp, #0
 800708a:	6078      	str	r0, [r7, #4]
	uint32_t strSize;

	switch (static_cast<Descriptor>(req.Value >> 8))	{
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	f8b3 36ae 	ldrh.w	r3, [r3, #1710]	; 0x6ae
 8007092:	0a1b      	lsrs	r3, r3, #8
 8007094:	b29b      	uxth	r3, r3
 8007096:	b2db      	uxtb	r3, r3
 8007098:	3b01      	subs	r3, #1
 800709a:	2b0e      	cmp	r3, #14
 800709c:	f200 80be 	bhi.w	800721c <_ZN7USBMain13GetDescriptorEv+0x198>
 80070a0:	a201      	add	r2, pc, #4	; (adr r2, 80070a8 <_ZN7USBMain13GetDescriptorEv+0x24>)
 80070a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070a6:	bf00      	nop
 80070a8:	080070e5 	.word	0x080070e5
 80070ac:	080070f7 	.word	0x080070f7
 80070b0:	08007123 	.word	0x08007123
 80070b4:	0800721d 	.word	0x0800721d
 80070b8:	0800721d 	.word	0x0800721d
 80070bc:	0800721d 	.word	0x0800721d
 80070c0:	0800721d 	.word	0x0800721d
 80070c4:	0800721d 	.word	0x0800721d
 80070c8:	0800721d 	.word	0x0800721d
 80070cc:	0800721d 	.word	0x0800721d
 80070d0:	0800721d 	.word	0x0800721d
 80070d4:	0800721d 	.word	0x0800721d
 80070d8:	0800721d 	.word	0x0800721d
 80070dc:	0800721d 	.word	0x0800721d
 80070e0:	08007111 	.word	0x08007111
	case DeviceDescriptor:
		return EP0In(USBD_FS_DeviceDesc, sizeof(USBD_FS_DeviceDesc));
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	f603 0338 	addw	r3, r3, #2104	; 0x838
 80070ea:	2212      	movs	r2, #18
 80070ec:	4619      	mov	r1, r3
 80070ee:	6878      	ldr	r0, [r7, #4]
 80070f0:	f7ff ffa2 	bl	8007038 <_ZN7USBMain5EP0InEPKhm>
 80070f4:	e097      	b.n	8007226 <_ZN7USBMain13GetDescriptorEv+0x1a2>
		break;

	case ConfigurationDescriptor:
		return EP0In(configDescriptor, MakeConfigDescriptor());		// Construct config descriptor from individual classes
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	f203 7439 	addw	r4, r3, #1849	; 0x739
 80070fc:	6878      	ldr	r0, [r7, #4]
 80070fe:	f000 f89d 	bl	800723c <_ZN7USBMain20MakeConfigDescriptorEv>
 8007102:	4603      	mov	r3, r0
 8007104:	461a      	mov	r2, r3
 8007106:	4621      	mov	r1, r4
 8007108:	6878      	ldr	r0, [r7, #4]
 800710a:	f7ff ff95 	bl	8007038 <_ZN7USBMain5EP0InEPKhm>
 800710e:	e08a      	b.n	8007226 <_ZN7USBMain13GetDescriptorEv+0x1a2>
		break;

	case BosDescriptor:
		return EP0In(USBD_FS_BOSDesc, sizeof(USBD_FS_BOSDesc));
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	f603 034a 	addw	r3, r3, #2122	; 0x84a
 8007116:	220c      	movs	r2, #12
 8007118:	4619      	mov	r1, r3
 800711a:	6878      	ldr	r0, [r7, #4]
 800711c:	f7ff ff8c 	bl	8007038 <_ZN7USBMain5EP0InEPKhm>
 8007120:	e081      	b.n	8007226 <_ZN7USBMain13GetDescriptorEv+0x1a2>
		break;

	case StringDescriptor:

		switch ((uint8_t)(req.Value)) {
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	f8b3 36ae 	ldrh.w	r3, [r3, #1710]	; 0x6ae
 8007128:	b2db      	uxtb	r3, r3
 800712a:	2b07      	cmp	r3, #7
 800712c:	d871      	bhi.n	8007212 <_ZN7USBMain13GetDescriptorEv+0x18e>
 800712e:	a201      	add	r2, pc, #4	; (adr r2, 8007134 <_ZN7USBMain13GetDescriptorEv+0xb0>)
 8007130:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007134:	08007155 	.word	0x08007155
 8007138:	08007167 	.word	0x08007167
 800713c:	0800718b 	.word	0x0800718b
 8007140:	080071af 	.word	0x080071af
 8007144:	08007213 	.word	0x08007213
 8007148:	08007213 	.word	0x08007213
 800714c:	080071ef 	.word	0x080071ef
 8007150:	080071cb 	.word	0x080071cb
		case StringIndex::LangId:				// 300
			return EP0In(USBD_LangIDDesc, sizeof(USBD_LangIDDesc));
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	f603 0356 	addw	r3, r3, #2134	; 0x856
 800715a:	2204      	movs	r2, #4
 800715c:	4619      	mov	r1, r3
 800715e:	6878      	ldr	r0, [r7, #4]
 8007160:	f7ff ff6a 	bl	8007038 <_ZN7USBMain5EP0InEPKhm>
 8007164:	e05f      	b.n	8007226 <_ZN7USBMain13GetDescriptorEv+0x1a2>
			break;

		case StringIndex::Manufacturer:			// 301
			strSize = StringToUnicode(manufacturerString, stringDescr);
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	f203 63b9 	addw	r3, r3, #1721	; 0x6b9
 800716c:	4a2f      	ldr	r2, [pc, #188]	; (800722c <_ZN7USBMain13GetDescriptorEv+0x1a8>)
 800716e:	ca06      	ldmia	r2, {r1, r2}
 8007170:	6878      	ldr	r0, [r7, #4]
 8007172:	f000 f8c9 	bl	8007308 <_ZN7USBMain15StringToUnicodeESt17basic_string_viewIcSt11char_traitsIcEEPh>
 8007176:	60f8      	str	r0, [r7, #12]
			return EP0In(stringDescr, strSize);
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	f203 63b9 	addw	r3, r3, #1721	; 0x6b9
 800717e:	68fa      	ldr	r2, [r7, #12]
 8007180:	4619      	mov	r1, r3
 8007182:	6878      	ldr	r0, [r7, #4]
 8007184:	f7ff ff58 	bl	8007038 <_ZN7USBMain5EP0InEPKhm>
 8007188:	e04d      	b.n	8007226 <_ZN7USBMain13GetDescriptorEv+0x1a2>
			break;

		case StringIndex::Product:				// 302
			strSize = StringToUnicode(productString, stringDescr);
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	f203 63b9 	addw	r3, r3, #1721	; 0x6b9
 8007190:	4a27      	ldr	r2, [pc, #156]	; (8007230 <_ZN7USBMain13GetDescriptorEv+0x1ac>)
 8007192:	ca06      	ldmia	r2, {r1, r2}
 8007194:	6878      	ldr	r0, [r7, #4]
 8007196:	f000 f8b7 	bl	8007308 <_ZN7USBMain15StringToUnicodeESt17basic_string_viewIcSt11char_traitsIcEEPh>
 800719a:	60f8      	str	r0, [r7, #12]
			return EP0In(stringDescr, strSize);
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	f203 63b9 	addw	r3, r3, #1721	; 0x6b9
 80071a2:	68fa      	ldr	r2, [r7, #12]
 80071a4:	4619      	mov	r1, r3
 80071a6:	6878      	ldr	r0, [r7, #4]
 80071a8:	f7ff ff46 	bl	8007038 <_ZN7USBMain5EP0InEPKhm>
 80071ac:	e03b      	b.n	8007226 <_ZN7USBMain13GetDescriptorEv+0x1a2>
			break;

		case StringIndex::Serial:				// 303
			SerialToUnicode();
 80071ae:	6878      	ldr	r0, [r7, #4]
 80071b0:	f000 f8e6 	bl	8007380 <_ZN7USBMain15SerialToUnicodeEv>
			return EP0In(stringDescr, stringDescr[0]);				// length is 24 bytes (x2 for unicode padding) + 2 for header
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	f203 61b9 	addw	r1, r3, #1721	; 0x6b9
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	f893 36b9 	ldrb.w	r3, [r3, #1721]	; 0x6b9
 80071c0:	461a      	mov	r2, r3
 80071c2:	6878      	ldr	r0, [r7, #4]
 80071c4:	f7ff ff38 	bl	8007038 <_ZN7USBMain5EP0InEPKhm>
 80071c8:	e02d      	b.n	8007226 <_ZN7USBMain13GetDescriptorEv+0x1a2>
			break;

		case StringIndex::AudioClass:			// 307
			strSize = StringToUnicode(midiString, stringDescr);
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	f203 63b9 	addw	r3, r3, #1721	; 0x6b9
 80071d0:	4a18      	ldr	r2, [pc, #96]	; (8007234 <_ZN7USBMain13GetDescriptorEv+0x1b0>)
 80071d2:	ca06      	ldmia	r2, {r1, r2}
 80071d4:	6878      	ldr	r0, [r7, #4]
 80071d6:	f000 f897 	bl	8007308 <_ZN7USBMain15StringToUnicodeESt17basic_string_viewIcSt11char_traitsIcEEPh>
 80071da:	60f8      	str	r0, [r7, #12]
			return EP0In(stringDescr, strSize);
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	f203 63b9 	addw	r3, r3, #1721	; 0x6b9
 80071e2:	68fa      	ldr	r2, [r7, #12]
 80071e4:	4619      	mov	r1, r3
 80071e6:	6878      	ldr	r0, [r7, #4]
 80071e8:	f7ff ff26 	bl	8007038 <_ZN7USBMain5EP0InEPKhm>
 80071ec:	e01b      	b.n	8007226 <_ZN7USBMain13GetDescriptorEv+0x1a2>
			break;

	    case StringIndex::CommunicationClass:	// 306
	    	strSize = StringToUnicode(cdcString, stringDescr);
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	f203 63b9 	addw	r3, r3, #1721	; 0x6b9
 80071f4:	4a10      	ldr	r2, [pc, #64]	; (8007238 <_ZN7USBMain13GetDescriptorEv+0x1b4>)
 80071f6:	ca06      	ldmia	r2, {r1, r2}
 80071f8:	6878      	ldr	r0, [r7, #4]
 80071fa:	f000 f885 	bl	8007308 <_ZN7USBMain15StringToUnicodeESt17basic_string_viewIcSt11char_traitsIcEEPh>
 80071fe:	60f8      	str	r0, [r7, #12]
	    	return EP0In(stringDescr, strSize);
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	f203 63b9 	addw	r3, r3, #1721	; 0x6b9
 8007206:	68fa      	ldr	r2, [r7, #12]
 8007208:	4619      	mov	r1, r3
 800720a:	6878      	ldr	r0, [r7, #4]
 800720c:	f7ff ff14 	bl	8007038 <_ZN7USBMain5EP0InEPKhm>
 8007210:	e009      	b.n	8007226 <_ZN7USBMain13GetDescriptorEv+0x1a2>
	      break;

		default:
			SetTxStatus(0, USB_EP_TX_STALL);
 8007212:	2110      	movs	r1, #16
 8007214:	2000      	movs	r0, #0
 8007216:	f7ff f938 	bl	800648a <_Z11SetTxStatusht>
			return;
 800721a:	e004      	b.n	8007226 <_ZN7USBMain13GetDescriptorEv+0x1a2>
		}
		break;

	default:
		SetTxStatus(0, USB_EP_TX_STALL);
 800721c:	2110      	movs	r1, #16
 800721e:	2000      	movs	r0, #0
 8007220:	f7ff f933 	bl	800648a <_Z11SetTxStatusht>
		return;
 8007224:	bf00      	nop
	}

	if (req.Length == 0) {
		EPStartXfer(Direction::in, 0, 0);
	}
}
 8007226:	3714      	adds	r7, #20
 8007228:	46bd      	mov	sp, r7
 800722a:	bd90      	pop	{r4, r7, pc}
 800722c:	0800d628 	.word	0x0800d628
 8007230:	0800d630 	.word	0x0800d630
 8007234:	0800d640 	.word	0x0800d640
 8007238:	0800d638 	.word	0x0800d638

0800723c <_ZN7USBMain20MakeConfigDescriptorEv>:


uint32_t USBMain::MakeConfigDescriptor()
{
 800723c:	b580      	push	{r7, lr}
 800723e:	b08c      	sub	sp, #48	; 0x30
 8007240:	af00      	add	r7, sp, #0
 8007242:	6078      	str	r0, [r7, #4]
	// Construct the configuration descriptor from the various class descriptors with header
	static constexpr uint8_t descrHeaderSize = 9;
	uint32_t descPos = descrHeaderSize;
 8007244:	2309      	movs	r3, #9
 8007246:	62fb      	str	r3, [r7, #44]	; 0x2c
	for (auto c : classByEP) {
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	f203 63a4 	addw	r3, r3, #1700	; 0x6a4
 800724e:	627b      	str	r3, [r7, #36]	; 0x24
 8007250:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007252:	f000 f99c 	bl	800758e <_ZNSt5arrayIP10USBHandlerLj2EE5beginEv>
 8007256:	62b8      	str	r0, [r7, #40]	; 0x28
 8007258:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800725a:	f000 f9a4 	bl	80075a6 <_ZNSt5arrayIP10USBHandlerLj2EE3endEv>
 800725e:	6238      	str	r0, [r7, #32]
 8007260:	e023      	b.n	80072aa <_ZN7USBMain20MakeConfigDescriptorEv+0x6e>
 8007262:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	61fb      	str	r3, [r7, #28]
		if (c != nullptr) {
 8007268:	69fb      	ldr	r3, [r7, #28]
 800726a:	2b00      	cmp	r3, #0
 800726c:	d01a      	beq.n	80072a4 <_ZN7USBMain20MakeConfigDescriptorEv+0x68>
			const uint8_t* descBuff = nullptr;
 800726e:	2300      	movs	r3, #0
 8007270:	60bb      	str	r3, [r7, #8]
			uint32_t descSize = c->GetInterfaceDescriptor(&descBuff);
 8007272:	69fb      	ldr	r3, [r7, #28]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	3314      	adds	r3, #20
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	f107 0208 	add.w	r2, r7, #8
 800727e:	4611      	mov	r1, r2
 8007280:	69f8      	ldr	r0, [r7, #28]
 8007282:	4798      	blx	r3
 8007284:	61b8      	str	r0, [r7, #24]
			memcpy(&configDescriptor[descPos], descBuff, descSize);
 8007286:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007288:	f503 63e7 	add.w	r3, r3, #1848	; 0x738
 800728c:	687a      	ldr	r2, [r7, #4]
 800728e:	4413      	add	r3, r2
 8007290:	3301      	adds	r3, #1
 8007292:	68b9      	ldr	r1, [r7, #8]
 8007294:	69ba      	ldr	r2, [r7, #24]
 8007296:	4618      	mov	r0, r3
 8007298:	f003 fcd2 	bl	800ac40 <memcpy>
			descPos += descSize;
 800729c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800729e:	69bb      	ldr	r3, [r7, #24]
 80072a0:	4413      	add	r3, r2
 80072a2:	62fb      	str	r3, [r7, #44]	; 0x2c
	for (auto c : classByEP) {
 80072a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072a6:	3304      	adds	r3, #4
 80072a8:	62bb      	str	r3, [r7, #40]	; 0x28
 80072aa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80072ac:	6a3b      	ldr	r3, [r7, #32]
 80072ae:	429a      	cmp	r2, r3
 80072b0:	d1d7      	bne.n	8007262 <_ZN7USBMain20MakeConfigDescriptorEv+0x26>
		}
	}

	// Insert config descriptor header
	const uint8_t descriptorHeader[] = {
 80072b2:	f107 030c 	add.w	r3, r7, #12
 80072b6:	2200      	movs	r2, #0
 80072b8:	601a      	str	r2, [r3, #0]
 80072ba:	605a      	str	r2, [r3, #4]
 80072bc:	721a      	strb	r2, [r3, #8]
 80072be:	2309      	movs	r3, #9
 80072c0:	733b      	strb	r3, [r7, #12]
 80072c2:	2302      	movs	r3, #2
 80072c4:	737b      	strb	r3, [r7, #13]
 80072c6:	2302      	movs	r3, #2
 80072c8:	743b      	strb	r3, [r7, #16]
 80072ca:	2301      	movs	r3, #1
 80072cc:	747b      	strb	r3, [r7, #17]
 80072ce:	2304      	movs	r3, #4
 80072d0:	74bb      	strb	r3, [r7, #18]
 80072d2:	23c0      	movs	r3, #192	; 0xc0
 80072d4:	74fb      	strb	r3, [r7, #19]
 80072d6:	2332      	movs	r3, #50	; 0x32
 80072d8:	753b      	strb	r3, [r7, #20]
		interfaceCount,						// bNumInterfaces: 4 [2 CDC, 2 MIDI]
		0x01,								// bConfigurationValue: Configuration value
		0x04,								// iConfiguration: Index of string descriptor describing the configuration
		0xC0,								// bmAttributes: self powered
		0x32,								// MaxPower 0 mA
	};
 80072da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072dc:	b2db      	uxtb	r3, r3
 80072de:	73bb      	strb	r3, [r7, #14]
		HIBYTE(descPos),
 80072e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072e2:	0a1b      	lsrs	r3, r3, #8
	};
 80072e4:	b2db      	uxtb	r3, r3
 80072e6:	73fb      	strb	r3, [r7, #15]
	memcpy(&configDescriptor[0], descriptorHeader, descrHeaderSize);
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	f203 7339 	addw	r3, r3, #1849	; 0x739
 80072ee:	461a      	mov	r2, r3
 80072f0:	f107 030c 	add.w	r3, r7, #12
 80072f4:	cb03      	ldmia	r3!, {r0, r1}
 80072f6:	6010      	str	r0, [r2, #0]
 80072f8:	6051      	str	r1, [r2, #4]
 80072fa:	781b      	ldrb	r3, [r3, #0]
 80072fc:	7213      	strb	r3, [r2, #8]

	return descPos;
 80072fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8007300:	4618      	mov	r0, r3
 8007302:	3730      	adds	r7, #48	; 0x30
 8007304:	46bd      	mov	sp, r7
 8007306:	bd80      	pop	{r7, pc}

08007308 <_ZN7USBMain15StringToUnicodeESt17basic_string_viewIcSt11char_traitsIcEEPh>:


uint32_t USBMain::StringToUnicode(const std::string_view desc, uint8_t *unicode)
{
 8007308:	b580      	push	{r7, lr}
 800730a:	b08a      	sub	sp, #40	; 0x28
 800730c:	af00      	add	r7, sp, #0
 800730e:	60f8      	str	r0, [r7, #12]
 8007310:	1d38      	adds	r0, r7, #4
 8007312:	e880 0006 	stmia.w	r0, {r1, r2}
 8007316:	603b      	str	r3, [r7, #0]
	uint32_t idx = 2;
 8007318:	2302      	movs	r3, #2
 800731a:	627b      	str	r3, [r7, #36]	; 0x24
	for (auto c: desc) {
 800731c:	1d3b      	adds	r3, r7, #4
 800731e:	61fb      	str	r3, [r7, #28]
 8007320:	69f8      	ldr	r0, [r7, #28]
 8007322:	f000 f94d 	bl	80075c0 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE5beginEv>
 8007326:	6238      	str	r0, [r7, #32]
 8007328:	69f8      	ldr	r0, [r7, #28]
 800732a:	f000 f955 	bl	80075d8 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE3endEv>
 800732e:	61b8      	str	r0, [r7, #24]
 8007330:	e014      	b.n	800735c <_ZN7USBMain15StringToUnicodeESt17basic_string_viewIcSt11char_traitsIcEEPh+0x54>
 8007332:	6a3b      	ldr	r3, [r7, #32]
 8007334:	781b      	ldrb	r3, [r3, #0]
 8007336:	75fb      	strb	r3, [r7, #23]
		unicode[idx++] = c;
 8007338:	7df8      	ldrb	r0, [r7, #23]
 800733a:	683a      	ldr	r2, [r7, #0]
 800733c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800733e:	1c59      	adds	r1, r3, #1
 8007340:	6279      	str	r1, [r7, #36]	; 0x24
 8007342:	4413      	add	r3, r2
 8007344:	4602      	mov	r2, r0
 8007346:	701a      	strb	r2, [r3, #0]
		unicode[idx++] = 0;
 8007348:	683a      	ldr	r2, [r7, #0]
 800734a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800734c:	1c59      	adds	r1, r3, #1
 800734e:	6279      	str	r1, [r7, #36]	; 0x24
 8007350:	4413      	add	r3, r2
 8007352:	2200      	movs	r2, #0
 8007354:	701a      	strb	r2, [r3, #0]
	for (auto c: desc) {
 8007356:	6a3b      	ldr	r3, [r7, #32]
 8007358:	3301      	adds	r3, #1
 800735a:	623b      	str	r3, [r7, #32]
 800735c:	6a3a      	ldr	r2, [r7, #32]
 800735e:	69bb      	ldr	r3, [r7, #24]
 8007360:	429a      	cmp	r2, r3
 8007362:	d1e6      	bne.n	8007332 <_ZN7USBMain15StringToUnicodeESt17basic_string_viewIcSt11char_traitsIcEEPh+0x2a>
	}
	unicode[0] = idx;
 8007364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007366:	b2da      	uxtb	r2, r3
 8007368:	683b      	ldr	r3, [r7, #0]
 800736a:	701a      	strb	r2, [r3, #0]
	unicode[1] = StringDescriptor;
 800736c:	683b      	ldr	r3, [r7, #0]
 800736e:	3301      	adds	r3, #1
 8007370:	2203      	movs	r2, #3
 8007372:	701a      	strb	r2, [r3, #0]

	return idx;
 8007374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007376:	4618      	mov	r0, r3
 8007378:	3728      	adds	r7, #40	; 0x28
 800737a:	46bd      	mov	sp, r7
 800737c:	bd80      	pop	{r7, pc}
	...

08007380 <_ZN7USBMain15SerialToUnicodeEv>:


void USBMain::SerialToUnicode()
{
 8007380:	b580      	push	{r7, lr}
 8007382:	b08e      	sub	sp, #56	; 0x38
 8007384:	af02      	add	r7, sp, #8
 8007386:	6078      	str	r0, [r7, #4]
	const uint32_t* uidAddr = (uint32_t*)UID_BASE;			// Location in memory that holds 96 bit Unique device ID register
 8007388:	4b1d      	ldr	r3, [pc, #116]	; (8007400 <_ZN7USBMain15SerialToUnicodeEv+0x80>)
 800738a:	62bb      	str	r3, [r7, #40]	; 0x28

	char uidBuff[usbSerialNoSize + 1];
	snprintf(uidBuff, usbSerialNoSize + 1, "%08lx%08lx%08lx", uidAddr[0], uidAddr[1], uidAddr[2]);
 800738c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800738e:	6819      	ldr	r1, [r3, #0]
 8007390:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007392:	3304      	adds	r3, #4
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007398:	3208      	adds	r2, #8
 800739a:	6812      	ldr	r2, [r2, #0]
 800739c:	f107 000c 	add.w	r0, r7, #12
 80073a0:	9201      	str	r2, [sp, #4]
 80073a2:	9300      	str	r3, [sp, #0]
 80073a4:	460b      	mov	r3, r1
 80073a6:	4a17      	ldr	r2, [pc, #92]	; (8007404 <_ZN7USBMain15SerialToUnicodeEv+0x84>)
 80073a8:	2119      	movs	r1, #25
 80073aa:	f003 fa0d 	bl	800a7c8 <sniprintf>

	stringDescr[0] = usbSerialNoSize * 2 + 2;				// length is 24 bytes (x2 for unicode padding) + 2 for header
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	2232      	movs	r2, #50	; 0x32
 80073b2:	f883 26b9 	strb.w	r2, [r3, #1721]	; 0x6b9
	stringDescr[1] = StringDescriptor;
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	2203      	movs	r2, #3
 80073ba:	f883 26ba 	strb.w	r2, [r3, #1722]	; 0x6ba
	for (uint8_t i = 0; i < usbSerialNoSize; ++i) {
 80073be:	2300      	movs	r3, #0
 80073c0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80073c4:	e013      	b.n	80073ee <_ZN7USBMain15SerialToUnicodeEv+0x6e>
		stringDescr[i * 2 + 2] = uidBuff[i];
 80073c6:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 80073ca:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80073ce:	3301      	adds	r3, #1
 80073d0:	005b      	lsls	r3, r3, #1
 80073d2:	3230      	adds	r2, #48	; 0x30
 80073d4:	443a      	add	r2, r7
 80073d6:	f812 1c24 	ldrb.w	r1, [r2, #-36]
 80073da:	687a      	ldr	r2, [r7, #4]
 80073dc:	4413      	add	r3, r2
 80073de:	460a      	mov	r2, r1
 80073e0:	f883 26b9 	strb.w	r2, [r3, #1721]	; 0x6b9
	for (uint8_t i = 0; i < usbSerialNoSize; ++i) {
 80073e4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80073e8:	3301      	adds	r3, #1
 80073ea:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80073ee:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80073f2:	2b17      	cmp	r3, #23
 80073f4:	d9e7      	bls.n	80073c6 <_ZN7USBMain15SerialToUnicodeEv+0x46>
	}
}
 80073f6:	bf00      	nop
 80073f8:	bf00      	nop
 80073fa:	3730      	adds	r7, #48	; 0x30
 80073fc:	46bd      	mov	sp, r7
 80073fe:	bd80      	pop	{r7, pc}
 8007400:	1fff7590 	.word	0x1fff7590
 8007404:	0800d05c 	.word	0x0800d05c

08007408 <_ZN7USBMain14ReadInterruptsEm>:


bool USBMain::ReadInterrupts(uint32_t interrupt)
{
 8007408:	b480      	push	{r7}
 800740a:	b083      	sub	sp, #12
 800740c:	af00      	add	r7, sp, #0
 800740e:	6078      	str	r0, [r7, #4]
 8007410:	6039      	str	r1, [r7, #0]
		usbDebug[usbDebugNo].Interrupt = USBP->ISTR;
		usbDebugEvent++;
	}
#endif

	return (USBP->ISTR & interrupt) == interrupt;
 8007412:	4b09      	ldr	r3, [pc, #36]	; (8007438 <_ZN7USBMain14ReadInterruptsEm+0x30>)
 8007414:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8007418:	b29b      	uxth	r3, r3
 800741a:	461a      	mov	r2, r3
 800741c:	683b      	ldr	r3, [r7, #0]
 800741e:	4013      	ands	r3, r2
 8007420:	683a      	ldr	r2, [r7, #0]
 8007422:	429a      	cmp	r2, r3
 8007424:	bf0c      	ite	eq
 8007426:	2301      	moveq	r3, #1
 8007428:	2300      	movne	r3, #0
 800742a:	b2db      	uxtb	r3, r3
}
 800742c:	4618      	mov	r0, r3
 800742e:	370c      	adds	r7, #12
 8007430:	46bd      	mov	sp, r7
 8007432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007436:	4770      	bx	lr
 8007438:	40006800 	.word	0x40006800

0800743c <_ZN7USBMain8SendDataEPKhth>:


size_t USBMain::SendData(const uint8_t* data, uint16_t len, uint8_t endpoint)
{
 800743c:	b590      	push	{r4, r7, lr}
 800743e:	b085      	sub	sp, #20
 8007440:	af00      	add	r7, sp, #0
 8007442:	60f8      	str	r0, [r7, #12]
 8007444:	60b9      	str	r1, [r7, #8]
 8007446:	4611      	mov	r1, r2
 8007448:	461a      	mov	r2, r3
 800744a:	460b      	mov	r3, r1
 800744c:	80fb      	strh	r3, [r7, #6]
 800744e:	4613      	mov	r3, r2
 8007450:	717b      	strb	r3, [r7, #5]
	if (devState == DeviceState::Configured && !transmitting) {
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	2b02      	cmp	r3, #2
 8007458:	d12f      	bne.n	80074ba <_ZN7USBMain8SendDataEPKhth+0x7e>
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	f893 3699 	ldrb.w	r3, [r3, #1689]	; 0x699
 8007460:	f083 0301 	eor.w	r3, r3, #1
 8007464:	b2db      	uxtb	r3, r3
 8007466:	2b00      	cmp	r3, #0
 8007468:	d027      	beq.n	80074ba <_ZN7USBMain8SendDataEPKhth+0x7e>
		transmitting = true;
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	2201      	movs	r2, #1
 800746e:	f883 2699 	strb.w	r2, [r3, #1689]	; 0x699
		classByEP[endpoint & epAddrMask]->inBuff = (uint8_t*)data;
 8007472:	68bc      	ldr	r4, [r7, #8]
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	f203 62a4 	addw	r2, r3, #1700	; 0x6a4
 800747a:	797b      	ldrb	r3, [r7, #5]
 800747c:	f003 030f 	and.w	r3, r3, #15
 8007480:	4619      	mov	r1, r3
 8007482:	4610      	mov	r0, r2
 8007484:	f000 f874 	bl	8007570 <_ZNSt5arrayIP10USBHandlerLj2EEixEj>
 8007488:	4603      	mov	r3, r0
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	61dc      	str	r4, [r3, #28]
		classByEP[endpoint & epAddrMask]->inBuffSize = len;
 800748e:	88fc      	ldrh	r4, [r7, #6]
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	f203 62a4 	addw	r2, r3, #1700	; 0x6a4
 8007496:	797b      	ldrb	r3, [r7, #5]
 8007498:	f003 030f 	and.w	r3, r3, #15
 800749c:	4619      	mov	r1, r3
 800749e:	4610      	mov	r0, r2
 80074a0:	f000 f866 	bl	8007570 <_ZNSt5arrayIP10USBHandlerLj2EEixEj>
 80074a4:	4603      	mov	r3, r0
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	621c      	str	r4, [r3, #32]
		EPStartXfer(Direction::in, endpoint, len);
 80074aa:	88fb      	ldrh	r3, [r7, #6]
 80074ac:	797a      	ldrb	r2, [r7, #5]
 80074ae:	2100      	movs	r1, #0
 80074b0:	68f8      	ldr	r0, [r7, #12]
 80074b2:	f7ff f95c 	bl	800676e <_ZN7USBMain11EPStartXferE9Directionhm>
		return len;
 80074b6:	88fb      	ldrh	r3, [r7, #6]
 80074b8:	e000      	b.n	80074bc <_ZN7USBMain8SendDataEPKhth+0x80>
	} else {
		return 0;
 80074ba:	2300      	movs	r3, #0
	}
}
 80074bc:	4618      	mov	r0, r3
 80074be:	3714      	adds	r7, #20
 80074c0:	46bd      	mov	sp, r7
 80074c2:	bd90      	pop	{r4, r7, pc}

080074c4 <_ZN7USBMain10SendStringEPKc>:


void USBMain::SendString(const char* s)
{
 80074c4:	b580      	push	{r7, lr}
 80074c6:	b084      	sub	sp, #16
 80074c8:	af00      	add	r7, sp, #0
 80074ca:	6078      	str	r0, [r7, #4]
 80074cc:	6039      	str	r1, [r7, #0]
	uint16_t counter = 0;
 80074ce:	2300      	movs	r3, #0
 80074d0:	81fb      	strh	r3, [r7, #14]
	while (transmitting && counter < 10000) {
 80074d2:	e002      	b.n	80074da <_ZN7USBMain10SendStringEPKc+0x16>
		++counter;
 80074d4:	89fb      	ldrh	r3, [r7, #14]
 80074d6:	3301      	adds	r3, #1
 80074d8:	81fb      	strh	r3, [r7, #14]
	while (transmitting && counter < 10000) {
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	f893 3699 	ldrb.w	r3, [r3, #1689]	; 0x699
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d004      	beq.n	80074ee <_ZN7USBMain10SendStringEPKc+0x2a>
 80074e4:	89fb      	ldrh	r3, [r7, #14]
 80074e6:	f242 720f 	movw	r2, #9999	; 0x270f
 80074ea:	4293      	cmp	r3, r2
 80074ec:	d9f2      	bls.n	80074d4 <_ZN7USBMain10SendStringEPKc+0x10>
	}
	SendData((uint8_t*)s, strlen(s), CDC_In);
 80074ee:	6838      	ldr	r0, [r7, #0]
 80074f0:	f7f8 fe96 	bl	8000220 <strlen>
 80074f4:	4603      	mov	r3, r0
 80074f6:	b29a      	uxth	r2, r3
 80074f8:	2381      	movs	r3, #129	; 0x81
 80074fa:	6839      	ldr	r1, [r7, #0]
 80074fc:	6878      	ldr	r0, [r7, #4]
 80074fe:	f7ff ff9d 	bl	800743c <_ZN7USBMain8SendDataEPKhth>
}
 8007502:	bf00      	nop
 8007504:	3710      	adds	r7, #16
 8007506:	46bd      	mov	sp, r7
 8007508:	bd80      	pop	{r7, pc}

0800750a <_ZN7USBMain10SendStringERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:


void USBMain::SendString(const std::string& s)
{
 800750a:	b580      	push	{r7, lr}
 800750c:	b082      	sub	sp, #8
 800750e:	af00      	add	r7, sp, #0
 8007510:	6078      	str	r0, [r7, #4]
 8007512:	6039      	str	r1, [r7, #0]
	SendString(s.c_str());
 8007514:	6838      	ldr	r0, [r7, #0]
 8007516:	f002 fab1 	bl	8009a7c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 800751a:	4603      	mov	r3, r0
 800751c:	4619      	mov	r1, r3
 800751e:	6878      	ldr	r0, [r7, #4]
 8007520:	f7ff ffd0 	bl	80074c4 <_ZN7USBMain10SendStringEPKc>
}
 8007524:	bf00      	nop
 8007526:	3708      	adds	r7, #8
 8007528:	46bd      	mov	sp, r7
 800752a:	bd80      	pop	{r7, pc}

0800752c <_ZN7USBMain10SendStringEPKhj>:


size_t USBMain::SendString(const unsigned char* s, size_t len)
{
 800752c:	b580      	push	{r7, lr}
 800752e:	b086      	sub	sp, #24
 8007530:	af00      	add	r7, sp, #0
 8007532:	60f8      	str	r0, [r7, #12]
 8007534:	60b9      	str	r1, [r7, #8]
 8007536:	607a      	str	r2, [r7, #4]
	uint16_t counter = 0;
 8007538:	2300      	movs	r3, #0
 800753a:	82fb      	strh	r3, [r7, #22]
	while (transmitting && counter < 10000) {
 800753c:	e002      	b.n	8007544 <_ZN7USBMain10SendStringEPKhj+0x18>
		++counter;
 800753e:	8afb      	ldrh	r3, [r7, #22]
 8007540:	3301      	adds	r3, #1
 8007542:	82fb      	strh	r3, [r7, #22]
	while (transmitting && counter < 10000) {
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	f893 3699 	ldrb.w	r3, [r3, #1689]	; 0x699
 800754a:	2b00      	cmp	r3, #0
 800754c:	d004      	beq.n	8007558 <_ZN7USBMain10SendStringEPKhj+0x2c>
 800754e:	8afb      	ldrh	r3, [r7, #22]
 8007550:	f242 720f 	movw	r2, #9999	; 0x270f
 8007554:	4293      	cmp	r3, r2
 8007556:	d9f2      	bls.n	800753e <_ZN7USBMain10SendStringEPKhj+0x12>
	}
	return SendData((uint8_t*)s, len, CDC_In);
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	b29a      	uxth	r2, r3
 800755c:	2381      	movs	r3, #129	; 0x81
 800755e:	68b9      	ldr	r1, [r7, #8]
 8007560:	68f8      	ldr	r0, [r7, #12]
 8007562:	f7ff ff6b 	bl	800743c <_ZN7USBMain8SendDataEPKhth>
 8007566:	4603      	mov	r3, r0
}
 8007568:	4618      	mov	r0, r3
 800756a:	3718      	adds	r7, #24
 800756c:	46bd      	mov	sp, r7
 800756e:	bd80      	pop	{r7, pc}

08007570 <_ZNSt5arrayIP10USBHandlerLj2EEixEj>:
      _GLIBCXX_NODISCARD constexpr bool
      empty() const noexcept { return size() == 0; }

      // Element access.
      _GLIBCXX17_CONSTEXPR reference
      operator[](size_type __n) noexcept
 8007570:	b580      	push	{r7, lr}
 8007572:	b082      	sub	sp, #8
 8007574:	af00      	add	r7, sp, #0
 8007576:	6078      	str	r0, [r7, #4]
 8007578:	6039      	str	r1, [r7, #0]
      {
	__glibcxx_requires_subscript(__n);
	return _AT_Type::_S_ref(_M_elems, __n);
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	6839      	ldr	r1, [r7, #0]
 800757e:	4618      	mov	r0, r3
 8007580:	f000 f839 	bl	80075f6 <_ZNSt14__array_traitsIP10USBHandlerLj2EE6_S_refERA2_KS1_j>
 8007584:	4603      	mov	r3, r0
      }
 8007586:	4618      	mov	r0, r3
 8007588:	3708      	adds	r7, #8
 800758a:	46bd      	mov	sp, r7
 800758c:	bd80      	pop	{r7, pc}

0800758e <_ZNSt5arrayIP10USBHandlerLj2EE5beginEv>:
      begin() noexcept
 800758e:	b580      	push	{r7, lr}
 8007590:	b082      	sub	sp, #8
 8007592:	af00      	add	r7, sp, #0
 8007594:	6078      	str	r0, [r7, #4]
      { return iterator(data()); }
 8007596:	6878      	ldr	r0, [r7, #4]
 8007598:	f000 f83c 	bl	8007614 <_ZNSt5arrayIP10USBHandlerLj2EE4dataEv>
 800759c:	4603      	mov	r3, r0
 800759e:	4618      	mov	r0, r3
 80075a0:	3708      	adds	r7, #8
 80075a2:	46bd      	mov	sp, r7
 80075a4:	bd80      	pop	{r7, pc}

080075a6 <_ZNSt5arrayIP10USBHandlerLj2EE3endEv>:
      end() noexcept
 80075a6:	b580      	push	{r7, lr}
 80075a8:	b082      	sub	sp, #8
 80075aa:	af00      	add	r7, sp, #0
 80075ac:	6078      	str	r0, [r7, #4]
      { return iterator(data() + _Nm); }
 80075ae:	6878      	ldr	r0, [r7, #4]
 80075b0:	f000 f830 	bl	8007614 <_ZNSt5arrayIP10USBHandlerLj2EE4dataEv>
 80075b4:	4603      	mov	r3, r0
 80075b6:	3308      	adds	r3, #8
 80075b8:	4618      	mov	r0, r3
 80075ba:	3708      	adds	r7, #8
 80075bc:	46bd      	mov	sp, r7
 80075be:	bd80      	pop	{r7, pc}

080075c0 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE5beginEv>:
      begin() const noexcept
 80075c0:	b480      	push	{r7}
 80075c2:	b083      	sub	sp, #12
 80075c4:	af00      	add	r7, sp, #0
 80075c6:	6078      	str	r0, [r7, #4]
      { return this->_M_str; }
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	685b      	ldr	r3, [r3, #4]
 80075cc:	4618      	mov	r0, r3
 80075ce:	370c      	adds	r7, #12
 80075d0:	46bd      	mov	sp, r7
 80075d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d6:	4770      	bx	lr

080075d8 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE3endEv>:
      end() const noexcept
 80075d8:	b480      	push	{r7}
 80075da:	b083      	sub	sp, #12
 80075dc:	af00      	add	r7, sp, #0
 80075de:	6078      	str	r0, [r7, #4]
      { return this->_M_str + this->_M_len; }
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	685a      	ldr	r2, [r3, #4]
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	4413      	add	r3, r2
 80075ea:	4618      	mov	r0, r3
 80075ec:	370c      	adds	r7, #12
 80075ee:	46bd      	mov	sp, r7
 80075f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f4:	4770      	bx	lr

080075f6 <_ZNSt14__array_traitsIP10USBHandlerLj2EE6_S_refERA2_KS1_j>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 80075f6:	b480      	push	{r7}
 80075f8:	b083      	sub	sp, #12
 80075fa:	af00      	add	r7, sp, #0
 80075fc:	6078      	str	r0, [r7, #4]
 80075fe:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 8007600:	683b      	ldr	r3, [r7, #0]
 8007602:	009b      	lsls	r3, r3, #2
 8007604:	687a      	ldr	r2, [r7, #4]
 8007606:	4413      	add	r3, r2
 8007608:	4618      	mov	r0, r3
 800760a:	370c      	adds	r7, #12
 800760c:	46bd      	mov	sp, r7
 800760e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007612:	4770      	bx	lr

08007614 <_ZNSt5arrayIP10USBHandlerLj2EE4dataEv>:
	return _Nm ? _AT_Type::_S_ref(_M_elems, _Nm - 1)
 	           : _AT_Type::_S_ref(_M_elems, 0);
      }

      _GLIBCXX17_CONSTEXPR pointer
      data() noexcept
 8007614:	b580      	push	{r7, lr}
 8007616:	b082      	sub	sp, #8
 8007618:	af00      	add	r7, sp, #0
 800761a:	6078      	str	r0, [r7, #4]
      { return _AT_Type::_S_ptr(_M_elems); }
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	4618      	mov	r0, r3
 8007620:	f000 f805 	bl	800762e <_ZNSt14__array_traitsIP10USBHandlerLj2EE6_S_ptrERA2_KS1_>
 8007624:	4603      	mov	r3, r0
 8007626:	4618      	mov	r0, r3
 8007628:	3708      	adds	r7, #8
 800762a:	46bd      	mov	sp, r7
 800762c:	bd80      	pop	{r7, pc}

0800762e <_ZNSt14__array_traitsIP10USBHandlerLj2EE6_S_ptrERA2_KS1_>:
      _S_ptr(const _Type& __t) noexcept
 800762e:	b480      	push	{r7}
 8007630:	b083      	sub	sp, #12
 8007632:	af00      	add	r7, sp, #0
 8007634:	6078      	str	r0, [r7, #4]
      { return const_cast<_Tp*>(__t); }
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	4618      	mov	r0, r3
 800763a:	370c      	adds	r7, #12
 800763c:	46bd      	mov	sp, r7
 800763e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007642:	4770      	bx	lr

08007644 <_Z41__static_initialization_and_destruction_0ii>:
 8007644:	b580      	push	{r7, lr}
 8007646:	b082      	sub	sp, #8
 8007648:	af00      	add	r7, sp, #0
 800764a:	6078      	str	r0, [r7, #4]
 800764c:	6039      	str	r1, [r7, #0]
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	2b01      	cmp	r3, #1
 8007652:	d107      	bne.n	8007664 <_Z41__static_initialization_and_destruction_0ii+0x20>
 8007654:	683b      	ldr	r3, [r7, #0]
 8007656:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800765a:	4293      	cmp	r3, r2
 800765c:	d102      	bne.n	8007664 <_Z41__static_initialization_and_destruction_0ii+0x20>
USBMain usb;
 800765e:	4803      	ldr	r0, [pc, #12]	; (800766c <_Z41__static_initialization_and_destruction_0ii+0x28>)
 8007660:	f7fe fe6e 	bl	8006340 <_ZN7USBMainC1Ev>
}
 8007664:	bf00      	nop
 8007666:	3708      	adds	r7, #8
 8007668:	46bd      	mov	sp, r7
 800766a:	bd80      	pop	{r7, pc}
 800766c:	200003e4 	.word	0x200003e4

08007670 <_GLOBAL__sub_I_USBDebug>:
 8007670:	b580      	push	{r7, lr}
 8007672:	af00      	add	r7, sp, #0
 8007674:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8007678:	2001      	movs	r0, #1
 800767a:	f7ff ffe3 	bl	8007644 <_Z41__static_initialization_and_destruction_0ii>
 800767e:	bd80      	pop	{r7, pc}

08007680 <_ZN10EP0Handler22GetInterfaceDescriptorEPPKh>:
	void DataIn() override;
	void DataOut() override;
	void ActivateEP() override;
	void ClassSetup(usbRequest& req) override;
	void ClassSetupData(usbRequest& req, const uint8_t* data) override;
	uint32_t GetInterfaceDescriptor(const uint8_t** buffer) override {return 0;};
 8007680:	b480      	push	{r7}
 8007682:	b083      	sub	sp, #12
 8007684:	af00      	add	r7, sp, #0
 8007686:	6078      	str	r0, [r7, #4]
 8007688:	6039      	str	r1, [r7, #0]
 800768a:	2300      	movs	r3, #0
 800768c:	4618      	mov	r0, r3
 800768e:	370c      	adds	r7, #12
 8007690:	46bd      	mov	sp, r7
 8007692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007696:	4770      	bx	lr

08007698 <_ZN10USBHandlerC1EP7USBMainhha>:
#include "USBHandler.h"
#include "USB.h"

USBHandler::USBHandler(USBMain* usb, const uint8_t inEP, const uint8_t outEP, int8_t interface) : usb(usb), inEP(inEP), outEP(outEP), interface(interface) {
 8007698:	b590      	push	{r4, r7, lr}
 800769a:	b085      	sub	sp, #20
 800769c:	af00      	add	r7, sp, #0
 800769e:	60f8      	str	r0, [r7, #12]
 80076a0:	60b9      	str	r1, [r7, #8]
 80076a2:	4611      	mov	r1, r2
 80076a4:	461a      	mov	r2, r3
 80076a6:	460b      	mov	r3, r1
 80076a8:	71fb      	strb	r3, [r7, #7]
 80076aa:	4613      	mov	r3, r2
 80076ac:	71bb      	strb	r3, [r7, #6]
 80076ae:	4a18      	ldr	r2, [pc, #96]	; (8007710 <_ZN10USBHandlerC1EP7USBMainhha+0x78>)
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	601a      	str	r2, [r3, #0]
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	68ba      	ldr	r2, [r7, #8]
 80076b8:	605a      	str	r2, [r3, #4]
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	79fa      	ldrb	r2, [r7, #7]
 80076be:	721a      	strb	r2, [r3, #8]
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	79ba      	ldrb	r2, [r7, #6]
 80076c4:	725a      	strb	r2, [r3, #9]
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	f897 2020 	ldrb.w	r2, [r7, #32]
 80076cc:	729a      	strb	r2, [r3, #10]
	if (interface >= 0) {
 80076ce:	f997 3020 	ldrsb.w	r3, [r7, #32]
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	db0b      	blt.n	80076ee <_ZN10USBHandlerC1EP7USBMainhha+0x56>
		usb->classesByInterface[interface] = this;
 80076d6:	68fc      	ldr	r4, [r7, #12]
 80076d8:	68bb      	ldr	r3, [r7, #8]
 80076da:	f203 639c 	addw	r3, r3, #1692	; 0x69c
 80076de:	f997 2020 	ldrsb.w	r2, [r7, #32]
 80076e2:	4611      	mov	r1, r2
 80076e4:	4618      	mov	r0, r3
 80076e6:	f7ff ff43 	bl	8007570 <_ZNSt5arrayIP10USBHandlerLj2EEixEj>
 80076ea:	4603      	mov	r3, r0
 80076ec:	601c      	str	r4, [r3, #0]
	}
	usb->classByEP[outEP] = this;
 80076ee:	68fc      	ldr	r4, [r7, #12]
 80076f0:	68bb      	ldr	r3, [r7, #8]
 80076f2:	f203 63a4 	addw	r3, r3, #1700	; 0x6a4
 80076f6:	79ba      	ldrb	r2, [r7, #6]
 80076f8:	4611      	mov	r1, r2
 80076fa:	4618      	mov	r0, r3
 80076fc:	f7ff ff38 	bl	8007570 <_ZNSt5arrayIP10USBHandlerLj2EEixEj>
 8007700:	4603      	mov	r3, r0
 8007702:	601c      	str	r4, [r3, #0]
}
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	4618      	mov	r0, r3
 8007708:	3714      	adds	r7, #20
 800770a:	46bd      	mov	sp, r7
 800770c:	bd90      	pop	{r4, r7, pc}
 800770e:	bf00      	nop
 8007710:	0800d670 	.word	0x0800d670

08007714 <_ZN10USBHandler16EndPointTransferE9Directionhm>:


void USBHandler::EndPointTransfer(const Direction d, const uint8_t ep, const uint32_t len)
{
 8007714:	b580      	push	{r7, lr}
 8007716:	b084      	sub	sp, #16
 8007718:	af00      	add	r7, sp, #0
 800771a:	60f8      	str	r0, [r7, #12]
 800771c:	60b9      	str	r1, [r7, #8]
 800771e:	603b      	str	r3, [r7, #0]
 8007720:	4613      	mov	r3, r2
 8007722:	71fb      	strb	r3, [r7, #7]
	usb->EPStartXfer(d, ep, len);
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	6858      	ldr	r0, [r3, #4]
 8007728:	79fa      	ldrb	r2, [r7, #7]
 800772a:	683b      	ldr	r3, [r7, #0]
 800772c:	68b9      	ldr	r1, [r7, #8]
 800772e:	f7ff f81e 	bl	800676e <_ZN7USBMain11EPStartXferE9Directionhm>
}
 8007732:	bf00      	nop
 8007734:	3710      	adds	r7, #16
 8007736:	46bd      	mov	sp, r7
 8007738:	bd80      	pop	{r7, pc}

0800773a <_ZN10USBHandler16EndPointActivateEh9Direction12EndPointType>:


void USBHandler::EndPointActivate(const uint8_t ep, const Direction d, const EndPointType eptype)
{
 800773a:	b580      	push	{r7, lr}
 800773c:	b084      	sub	sp, #16
 800773e:	af00      	add	r7, sp, #0
 8007740:	60f8      	str	r0, [r7, #12]
 8007742:	607a      	str	r2, [r7, #4]
 8007744:	461a      	mov	r2, r3
 8007746:	460b      	mov	r3, r1
 8007748:	72fb      	strb	r3, [r7, #11]
 800774a:	4613      	mov	r3, r2
 800774c:	72bb      	strb	r3, [r7, #10]
	usb->ActivateEndpoint(ep, d, static_cast<USBMain::EndPointType>(eptype));
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	6858      	ldr	r0, [r3, #4]
 8007752:	7abb      	ldrb	r3, [r7, #10]
 8007754:	7af9      	ldrb	r1, [r7, #11]
 8007756:	687a      	ldr	r2, [r7, #4]
 8007758:	f7ff fb78 	bl	8006e4c <_ZN7USBMain16ActivateEndpointEh9DirectionNS_12EndPointTypeE>
}
 800775c:	bf00      	nop
 800775e:	3710      	adds	r7, #16
 8007760:	46bd      	mov	sp, r7
 8007762:	bd80      	pop	{r7, pc}

08007764 <_ZN10USBHandler7SetupInEmPKh>:

void USBHandler::SetupIn(const uint32_t size, const uint8_t* buff)
{
 8007764:	b580      	push	{r7, lr}
 8007766:	b084      	sub	sp, #16
 8007768:	af00      	add	r7, sp, #0
 800776a:	60f8      	str	r0, [r7, #12]
 800776c:	60b9      	str	r1, [r7, #8]
 800776e:	607a      	str	r2, [r7, #4]
	usb->EP0In(buff, size);
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	685b      	ldr	r3, [r3, #4]
 8007774:	68ba      	ldr	r2, [r7, #8]
 8007776:	6879      	ldr	r1, [r7, #4]
 8007778:	4618      	mov	r0, r3
 800777a:	f7ff fc5d 	bl	8007038 <_ZN7USBMain5EP0InEPKhm>
}
 800777e:	bf00      	nop
 8007780:	3710      	adds	r7, #16
 8007782:	46bd      	mov	sp, r7
 8007784:	bd80      	pop	{r7, pc}

08007786 <_ZN10EP0Handler10ActivateEPEv>:


void EP0Handler::ActivateEP()
{
 8007786:	b480      	push	{r7}
 8007788:	b083      	sub	sp, #12
 800778a:	af00      	add	r7, sp, #0
 800778c:	6078      	str	r0, [r7, #4]
}
 800778e:	bf00      	nop
 8007790:	370c      	adds	r7, #12
 8007792:	46bd      	mov	sp, r7
 8007794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007798:	4770      	bx	lr

0800779a <_ZN10EP0Handler6DataInEv>:

void EP0Handler::DataIn()
{
 800779a:	b480      	push	{r7}
 800779c:	b083      	sub	sp, #12
 800779e:	af00      	add	r7, sp, #0
 80077a0:	6078      	str	r0, [r7, #4]
}
 80077a2:	bf00      	nop
 80077a4:	370c      	adds	r7, #12
 80077a6:	46bd      	mov	sp, r7
 80077a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ac:	4770      	bx	lr

080077ae <_ZN10EP0Handler7DataOutEv>:

void EP0Handler::DataOut()
{
 80077ae:	b480      	push	{r7}
 80077b0:	b083      	sub	sp, #12
 80077b2:	af00      	add	r7, sp, #0
 80077b4:	6078      	str	r0, [r7, #4]
}
 80077b6:	bf00      	nop
 80077b8:	370c      	adds	r7, #12
 80077ba:	46bd      	mov	sp, r7
 80077bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c0:	4770      	bx	lr

080077c2 <_ZN10EP0Handler10ClassSetupER10usbRequest>:

void EP0Handler::ClassSetup(usbRequest& req)
{
 80077c2:	b480      	push	{r7}
 80077c4:	b083      	sub	sp, #12
 80077c6:	af00      	add	r7, sp, #0
 80077c8:	6078      	str	r0, [r7, #4]
 80077ca:	6039      	str	r1, [r7, #0]
}
 80077cc:	bf00      	nop
 80077ce:	370c      	adds	r7, #12
 80077d0:	46bd      	mov	sp, r7
 80077d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077d6:	4770      	bx	lr

080077d8 <_ZN10EP0Handler14ClassSetupDataER10usbRequestPKh>:

void EP0Handler::ClassSetupData(usbRequest& req, const uint8_t* data)
{
 80077d8:	b480      	push	{r7}
 80077da:	b085      	sub	sp, #20
 80077dc:	af00      	add	r7, sp, #0
 80077de:	60f8      	str	r0, [r7, #12]
 80077e0:	60b9      	str	r1, [r7, #8]
 80077e2:	607a      	str	r2, [r7, #4]
}
 80077e4:	bf00      	nop
 80077e6:	3714      	adds	r7, #20
 80077e8:	46bd      	mov	sp, r7
 80077ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ee:	4770      	bx	lr

080077f0 <LL_FLASH_GetUDN>:
  * @note   The 64-bit UID64 may be used by Firmware to derive BLE 48-bit Device Address EUI-48 or
  *         802.15.4 64-bit Device Address EUI-64.
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 80077f0:	b480      	push	{r7}
 80077f2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_REG(*((uint32_t *)UID64_BASE)));
 80077f4:	4b03      	ldr	r3, [pc, #12]	; (8007804 <LL_FLASH_GetUDN+0x14>)
 80077f6:	681b      	ldr	r3, [r3, #0]
}
 80077f8:	4618      	mov	r0, r3
 80077fa:	46bd      	mov	sp, r7
 80077fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007800:	4770      	bx	lr
 8007802:	bf00      	nop
 8007804:	1fff7580 	.word	0x1fff7580

08007808 <LL_FLASH_GetDeviceID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the device ID is 0x26
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x26 for STM32WB55x)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 8007808:	b480      	push	{r7}
 800780a:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 800780c:	4b03      	ldr	r3, [pc, #12]	; (800781c <LL_FLASH_GetDeviceID+0x14>)
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	b2db      	uxtb	r3, r3
}
 8007812:	4618      	mov	r0, r3
 8007814:	46bd      	mov	sp, r7
 8007816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800781a:	4770      	bx	lr
 800781c:	1fff7584 	.word	0x1fff7584

08007820 <LL_FLASH_GetSTCompanyID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the ST Company ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Company ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 8007820:	b480      	push	{r7}
 8007822:	af00      	add	r7, sp, #0
  return (uint32_t)(((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U ) & 0x00FFFFFFU);
 8007824:	4b03      	ldr	r3, [pc, #12]	; (8007834 <LL_FLASH_GetSTCompanyID+0x14>)
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	0a1b      	lsrs	r3, r3, #8
}
 800782a:	4618      	mov	r0, r3
 800782c:	46bd      	mov	sp, r7
 800782e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007832:	4770      	bx	lr
 8007834:	1fff7584 	.word	0x1fff7584

08007838 <LL_PWR_IsActiveFlag_C2SB>:
  * @brief  System standby flag for CPU2
  * @rmtoll EXTSCR       C2SBF         LL_PWR_IsActiveFlag_C2SB
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_C2SB(void)
{
 8007838:	b480      	push	{r7}
 800783a:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->EXTSCR, PWR_EXTSCR_C2SBF) == (PWR_EXTSCR_C2SBF)) ? 1UL : 0UL);
 800783c:	4b07      	ldr	r3, [pc, #28]	; (800785c <LL_PWR_IsActiveFlag_C2SB+0x24>)
 800783e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007842:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007846:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800784a:	d101      	bne.n	8007850 <LL_PWR_IsActiveFlag_C2SB+0x18>
 800784c:	2301      	movs	r3, #1
 800784e:	e000      	b.n	8007852 <LL_PWR_IsActiveFlag_C2SB+0x1a>
 8007850:	2300      	movs	r3, #0
}
 8007852:	4618      	mov	r0, r3
 8007854:	46bd      	mov	sp, r7
 8007856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800785a:	4770      	bx	lr
 800785c:	58000400 	.word	0x58000400

08007860 <LL_PWR_IsActiveFlag_C2DS>:
  * @brief  Get deepsleep mode for CPU2
  * @rmtoll EXTSCR       C2DS          LL_PWR_IsActiveFlag_C2DS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_C2DS(void)
{
 8007860:	b480      	push	{r7}
 8007862:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->EXTSCR, PWR_EXTSCR_C2DS) == (PWR_EXTSCR_C2DS)) ? 1UL : 0UL);
 8007864:	4b07      	ldr	r3, [pc, #28]	; (8007884 <LL_PWR_IsActiveFlag_C2DS+0x24>)
 8007866:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800786a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800786e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007872:	d101      	bne.n	8007878 <LL_PWR_IsActiveFlag_C2DS+0x18>
 8007874:	2301      	movs	r3, #1
 8007876:	e000      	b.n	800787a <LL_PWR_IsActiveFlag_C2DS+0x1a>
 8007878:	2300      	movs	r3, #0
}
 800787a:	4618      	mov	r0, r3
 800787c:	46bd      	mov	sp, r7
 800787e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007882:	4770      	bx	lr
 8007884:	58000400 	.word	0x58000400

08007888 <LL_HSEM_1StepLock>:
{
 8007888:	b480      	push	{r7}
 800788a:	b083      	sub	sp, #12
 800788c:	af00      	add	r7, sp, #0
 800788e:	6078      	str	r0, [r7, #4]
 8007890:	6039      	str	r1, [r7, #0]
  return ((HSEMx->RLR[Semaphore] != (HSEM_R_LOCK | LL_HSEM_COREID)) ? 1UL : 0UL);
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	683a      	ldr	r2, [r7, #0]
 8007896:	3220      	adds	r2, #32
 8007898:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800789c:	4a05      	ldr	r2, [pc, #20]	; (80078b4 <LL_HSEM_1StepLock+0x2c>)
 800789e:	4293      	cmp	r3, r2
 80078a0:	d001      	beq.n	80078a6 <LL_HSEM_1StepLock+0x1e>
 80078a2:	2301      	movs	r3, #1
 80078a4:	e000      	b.n	80078a8 <LL_HSEM_1StepLock+0x20>
 80078a6:	2300      	movs	r3, #0
}
 80078a8:	4618      	mov	r0, r3
 80078aa:	370c      	adds	r7, #12
 80078ac:	46bd      	mov	sp, r7
 80078ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b2:	4770      	bx	lr
 80078b4:	80000400 	.word	0x80000400

080078b8 <LL_HSEM_ReleaseLock>:
  * @param  Semaphore Semaphore number. Value between Min_Data=0 and Max_Data=31
  * @param  process Process number. Value between Min_Data=0 and Max_Data=255
  * @retval None
  */
__STATIC_INLINE void LL_HSEM_ReleaseLock(HSEM_TypeDef *HSEMx, uint32_t Semaphore, uint32_t process)
{
 80078b8:	b480      	push	{r7}
 80078ba:	b085      	sub	sp, #20
 80078bc:	af00      	add	r7, sp, #0
 80078be:	60f8      	str	r0, [r7, #12]
 80078c0:	60b9      	str	r1, [r7, #8]
 80078c2:	607a      	str	r2, [r7, #4]
  WRITE_REG(HSEMx->R[Semaphore], (LL_HSEM_COREID | process));
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	f443 6180 	orr.w	r1, r3, #1024	; 0x400
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	68ba      	ldr	r2, [r7, #8]
 80078ce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 80078d2:	bf00      	nop
 80078d4:	3714      	adds	r7, #20
 80078d6:	46bd      	mov	sp, r7
 80078d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078dc:	4770      	bx	lr
	...

080078e0 <_ZN6BleAppUt_C1Ev>:

	uint8_t bd_addr_udn[bdAddrSize];
	uint8_t lowPowerAdvTimerId;
	SleepState sleepState {SleepState::Awake};

	struct {
 80078e0:	b480      	push	{r7}
 80078e2:	b083      	sub	sp, #12
 80078e4:	af00      	add	r7, sp, #0
 80078e6:	6078      	str	r0, [r7, #4]
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	2203      	movs	r2, #3
 80078ec:	701a      	strb	r2, [r3, #0]
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	2200      	movs	r2, #0
 80078f2:	705a      	strb	r2, [r3, #1]
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	2201      	movs	r2, #1
 80078f8:	709a      	strb	r2, [r3, #2]
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	2200      	movs	r2, #0
 80078fe:	70da      	strb	r2, [r3, #3]
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	2208      	movs	r2, #8
 8007904:	711a      	strb	r2, [r3, #4]
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	2210      	movs	r2, #16
 800790a:	715a      	strb	r2, [r3, #5]
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	2201      	movs	r2, #1
 8007910:	719a      	strb	r2, [r3, #6]
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	2200      	movs	r2, #0
 8007916:	71da      	strb	r2, [r3, #7]
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	2200      	movs	r2, #0
 800791c:	721a      	strb	r2, [r3, #8]
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	4a04      	ldr	r2, [pc, #16]	; (8007934 <_ZN6BleAppUt_C1Ev+0x54>)
 8007922:	60da      	str	r2, [r3, #12]
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	4618      	mov	r0, r3
 8007928:	370c      	adds	r7, #12
 800792a:	46bd      	mov	sp, r7
 800792c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007930:	4770      	bx	lr
 8007932:	bf00      	nop
 8007934:	0001b207 	.word	0x0001b207

08007938 <_ZN6BleAppC1Ev>:
struct BleApp {
 8007938:	b5b0      	push	{r4, r5, r7, lr}
 800793a:	b082      	sub	sp, #8
 800793c:	af00      	add	r7, sp, #0
 800793e:	6078      	str	r0, [r7, #4]
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007946:	801a      	strh	r2, [r3, #0]
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	2200      	movs	r2, #0
 800794c:	605a      	str	r2, [r3, #4]
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	2200      	movs	r2, #0
 8007952:	609a      	str	r2, [r3, #8]
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	2200      	movs	r2, #0
 8007958:	731a      	strb	r2, [r3, #12]
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	4a0d      	ldr	r2, [pc, #52]	; (8007994 <_ZN6BleAppC1Ev+0x5c>)
 800795e:	f103 050d 	add.w	r5, r3, #13
 8007962:	4614      	mov	r4, r2
 8007964:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007966:	6028      	str	r0, [r5, #0]
 8007968:	6069      	str	r1, [r5, #4]
 800796a:	60aa      	str	r2, [r5, #8]
 800796c:	60eb      	str	r3, [r5, #12]
 800796e:	cc03      	ldmia	r4!, {r0, r1}
 8007970:	6128      	str	r0, [r5, #16]
 8007972:	6169      	str	r1, [r5, #20]
 8007974:	7823      	ldrb	r3, [r4, #0]
 8007976:	762b      	strb	r3, [r5, #24]
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	2202      	movs	r2, #2
 800797c:	631a      	str	r2, [r3, #48]	; 0x30
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	3334      	adds	r3, #52	; 0x34
 8007982:	4618      	mov	r0, r3
 8007984:	f7ff ffac 	bl	80078e0 <_ZN6BleAppUt_C1Ev>
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	4618      	mov	r0, r3
 800798c:	3708      	adds	r7, #8
 800798e:	46bd      	mov	sp, r7
 8007990:	bdb0      	pop	{r4, r5, r7, pc}
 8007992:	bf00      	nop
 8007994:	0800d078 	.word	0x0800d078

08007998 <_ZN6BleApp4InitEv>:
PLACE_IN_SECTION("TAG_OTA_END") const uint32_t MagicKeywordValue = 0x94448A29;
PLACE_IN_SECTION("TAG_OTA_START") const uint32_t MagicKeywordAddress = (uint32_t)&MagicKeywordValue;


void BleApp::Init()
{
 8007998:	b5b0      	push	{r4, r5, r7, lr}
 800799a:	b092      	sub	sp, #72	; 0x48
 800799c:	af00      	add	r7, sp, #0
 800799e:	6078      	str	r0, [r7, #4]
	SHCI_C2_Ble_Init_Cmd_Packet_t ble_init_cmd_packet =	{
 80079a0:	4b2c      	ldr	r3, [pc, #176]	; (8007a54 <_ZN6BleApp4InitEv+0xbc>)
 80079a2:	f107 040c 	add.w	r4, r7, #12
 80079a6:	461d      	mov	r5, r3
 80079a8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80079aa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80079ac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80079ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80079b0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80079b2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80079b4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80079b8:	c403      	stmia	r4!, {r0, r1}
 80079ba:	8022      	strh	r2, [r4, #0]
			BLECoreVersion,
			CFG_BLE_OPTIONS_EXT}
	};


	TransportLayerInit();						// Initialize BLE Transport Layer
 80079bc:	6878      	ldr	r0, [r7, #4]
 80079be:	f000 f933 	bl	8007c28 <_ZN6BleApp18TransportLayerInitEv>

	// Register the hci transport layer to handle BLE User Asynchronous Events
	UTIL_SEQ_RegTask(1 << CFG_TASK_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, hci_user_evt_proc);
 80079c2:	4a25      	ldr	r2, [pc, #148]	; (8007a58 <_ZN6BleApp4InitEv+0xc0>)
 80079c4:	2100      	movs	r1, #0
 80079c6:	2020      	movs	r0, #32
 80079c8:	f7fc ff38 	bl	800483c <UTIL_SEQ_RegTask>

	auto result = SHCI_C2_BLE_Init(&ble_init_cmd_packet);		// Starts the BLE Stack on CPU2
 80079cc:	f107 030c 	add.w	r3, r7, #12
 80079d0:	4618      	mov	r0, r3
 80079d2:	f7fa fd11 	bl	80023f8 <SHCI_C2_BLE_Init>
 80079d6:	4603      	mov	r3, r0
 80079d8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (result != SHCI_Success) {
 80079dc:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d003      	beq.n	80079ec <_ZN6BleApp4InitEv+0x54>
		coprocessorFailure = true;
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	2201      	movs	r2, #1
 80079e8:	731a      	strb	r2, [r3, #12]
 80079ea:	e030      	b.n	8007a4e <_ZN6BleApp4InitEv+0xb6>
		return;
	}

	HciGapGattInit();							// Initialization of HCI & GATT & GAP layer
 80079ec:	6878      	ldr	r0, [r7, #4]
 80079ee:	f000 f93f 	bl	8007c70 <_ZN6BleApp14HciGapGattInitEv>

	UTIL_SEQ_RegTask(1 << CFG_TASK_SwitchLPAdvertising, UTIL_SEQ_RFU, SwitchLPAdvertising);
 80079f2:	4a1a      	ldr	r2, [pc, #104]	; (8007a5c <_ZN6BleApp4InitEv+0xc4>)
 80079f4:	2100      	movs	r1, #0
 80079f6:	2001      	movs	r0, #1
 80079f8:	f7fc ff20 	bl	800483c <UTIL_SEQ_RegTask>
	UTIL_SEQ_RegTask(1 << CFG_TASK_SwitchFastAdvertising, UTIL_SEQ_RFU, SwitchFastAdvertising);
 80079fc:	4a18      	ldr	r2, [pc, #96]	; (8007a60 <_ZN6BleApp4InitEv+0xc8>)
 80079fe:	2100      	movs	r1, #0
 8007a00:	2002      	movs	r0, #2
 8007a02:	f7fc ff1b 	bl	800483c <UTIL_SEQ_RegTask>
	UTIL_SEQ_RegTask(1 << CFG_TASK_CancelAdvertising, UTIL_SEQ_RFU, CancelAdvertising);
 8007a06:	4a17      	ldr	r2, [pc, #92]	; (8007a64 <_ZN6BleApp4InitEv+0xcc>)
 8007a08:	2100      	movs	r1, #0
 8007a0a:	2004      	movs	r0, #4
 8007a0c:	f7fc ff16 	bl	800483c <UTIL_SEQ_RegTask>
	UTIL_SEQ_RegTask(1 << CFG_TASK_GoToSleep, UTIL_SEQ_RFU, GoToSleep);
 8007a10:	4a15      	ldr	r2, [pc, #84]	; (8007a68 <_ZN6BleApp4InitEv+0xd0>)
 8007a12:	2100      	movs	r1, #0
 8007a14:	2008      	movs	r0, #8
 8007a16:	f7fc ff11 	bl	800483c <UTIL_SEQ_RegTask>
	UTIL_SEQ_RegTask(1 << CFG_TASK_EnterSleepMode, UTIL_SEQ_RFU, EnterSleepMode);
 8007a1a:	4a14      	ldr	r2, [pc, #80]	; (8007a6c <_ZN6BleApp4InitEv+0xd4>)
 8007a1c:	2100      	movs	r1, #0
 8007a1e:	2010      	movs	r0, #16
 8007a20:	f7fc ff0c 	bl	800483c <UTIL_SEQ_RegTask>

	// Create timer to switch to Low Power advertising
	HW_TS_Create(CFG_TIM_PROC_ID_ISR, &(lowPowerAdvTimerId), hw_ts_SingleShot, QueueLPAdvertising);
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	f103 012c 	add.w	r1, r3, #44	; 0x2c
 8007a2a:	4b11      	ldr	r3, [pc, #68]	; (8007a70 <_ZN6BleApp4InitEv+0xd8>)
 8007a2c:	2200      	movs	r2, #0
 8007a2e:	2000      	movs	r0, #0
 8007a30:	f7fc faa6 	bl	8003f80 <HW_TS_Create>

	disService.Init();							// Initialize Device Information Service
 8007a34:	480f      	ldr	r0, [pc, #60]	; (8007a74 <_ZN6BleApp4InitEv+0xdc>)
 8007a36:	f000 fedf 	bl	80087f8 <_ZN10DisService4InitEv>
	basService.Init();							// Initialize Battery level Service
 8007a3a:	480f      	ldr	r0, [pc, #60]	; (8007a78 <_ZN6BleApp4InitEv+0xe0>)
 8007a3c:	f000 fd56 	bl	80084ec <_ZN10BasService4InitEv>
	hidService.Init();							// Initialize HID Service
 8007a40:	480e      	ldr	r0, [pc, #56]	; (8007a7c <_ZN6BleApp4InitEv+0xe4>)
 8007a42:	f000 ff4b 	bl	80088dc <_ZN10HidService4InitEv>

	EnableAdvertising(ConnStatus::FastAdv);		// Start advertising for client connections
 8007a46:	2101      	movs	r1, #1
 8007a48:	6878      	ldr	r0, [r7, #4]
 8007a4a:	f000 f9d5 	bl	8007df8 <_ZN6BleApp17EnableAdvertisingENS_10ConnStatusE>
}
 8007a4e:	3748      	adds	r7, #72	; 0x48
 8007a50:	46bd      	mov	sp, r7
 8007a52:	bdb0      	pop	{r4, r5, r7, pc}
 8007a54:	0800d094 	.word	0x0800d094
 8007a58:	080025bd 	.word	0x080025bd
 8007a5c:	08007f79 	.word	0x08007f79
 8007a60:	08007f8d 	.word	0x08007f8d
 8007a64:	08007fa1 	.word	0x08007fa1
 8007a68:	08008029 	.word	0x08008029
 8007a6c:	08008085 	.word	0x08008085
 8007a70:	08007f69 	.word	0x08007f69
 8007a74:	20000cb8 	.word	0x20000cb8
 8007a78:	20000ca8 	.word	0x20000ca8
 8007a7c:	20000cbc 	.word	0x20000cbc

08007a80 <_ZN6BleApp22ServiceControlCallbackEP14hci_event_pckt>:


void BleApp::ServiceControlCallback(hci_event_pckt* event_pckt)
{
 8007a80:	b580      	push	{r7, lr}
 8007a82:	b08a      	sub	sp, #40	; 0x28
 8007a84:	af00      	add	r7, sp, #0
 8007a86:	6078      	str	r0, [r7, #4]
 8007a88:	6039      	str	r1, [r7, #0]

	switch (event_pckt->evt) {
 8007a8a:	683b      	ldr	r3, [r7, #0]
 8007a8c:	781b      	ldrb	r3, [r3, #0]
 8007a8e:	2bff      	cmp	r3, #255	; 0xff
 8007a90:	d04f      	beq.n	8007b32 <_ZN6BleApp22ServiceControlCallbackEP14hci_event_pckt+0xb2>
 8007a92:	2bff      	cmp	r3, #255	; 0xff
 8007a94:	f300 80b1 	bgt.w	8007bfa <_ZN6BleApp22ServiceControlCallbackEP14hci_event_pckt+0x17a>
 8007a98:	2b05      	cmp	r3, #5
 8007a9a:	d002      	beq.n	8007aa2 <_ZN6BleApp22ServiceControlCallbackEP14hci_event_pckt+0x22>
 8007a9c:	2b3e      	cmp	r3, #62	; 0x3e
 8007a9e:	d01d      	beq.n	8007adc <_ZN6BleApp22ServiceControlCallbackEP14hci_event_pckt+0x5c>
			}
			break;
		}

		default:
			break;
 8007aa0:	e0ab      	b.n	8007bfa <_ZN6BleApp22ServiceControlCallbackEP14hci_event_pckt+0x17a>
			[[maybe_unused]] auto disconnection_complete_event = (hci_disconnection_complete_event_rp0*) event_pckt->data;
 8007aa2:	683b      	ldr	r3, [r7, #0]
 8007aa4:	3302      	adds	r3, #2
 8007aa6:	60fb      	str	r3, [r7, #12]
			connectionHandle = 0xFFFF;
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007aae:	801a      	strh	r2, [r3, #0]
			connectionStatus = ConnStatus::Idle;
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	2200      	movs	r2, #0
 8007ab4:	605a      	str	r2, [r3, #4]
			hidService.Disconnect();
 8007ab6:	4855      	ldr	r0, [pc, #340]	; (8007c0c <_ZN6BleApp22ServiceControlCallbackEP14hci_event_pckt+0x18c>)
 8007ab8:	f001 f8a0 	bl	8008bfc <_ZN10HidService10DisconnectEv>
			APP_DBG_MSG("\r\n\r** Client Disconnected\n");
 8007abc:	4854      	ldr	r0, [pc, #336]	; (8007c10 <_ZN6BleApp22ServiceControlCallbackEP14hci_event_pckt+0x190>)
 8007abe:	f002 fe7b 	bl	800a7b8 <puts>
			EnableAdvertising(ConnStatus::FastAdv);			// Restart advertising
 8007ac2:	2101      	movs	r1, #1
 8007ac4:	6878      	ldr	r0, [r7, #4]
 8007ac6:	f000 f997 	bl	8007df8 <_ZN6BleApp17EnableAdvertisingENS_10ConnStatusE>
			GPIOA->ODR &= ~GPIO_ODR_OD3;					// Turn off connected LED
 8007aca:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007ace:	695b      	ldr	r3, [r3, #20]
 8007ad0:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8007ad4:	f023 0308 	bic.w	r3, r3, #8
 8007ad8:	6153      	str	r3, [r2, #20]
		break;
 8007ada:	e093      	b.n	8007c04 <_ZN6BleApp22ServiceControlCallbackEP14hci_event_pckt+0x184>
			auto meta_evt = (evt_le_meta_event*) event_pckt->data;
 8007adc:	683b      	ldr	r3, [r7, #0]
 8007ade:	3302      	adds	r3, #2
 8007ae0:	617b      	str	r3, [r7, #20]
			if (meta_evt->subevent == HCI_LE_CONNECTION_COMPLETE_SUBEVT_CODE) {
 8007ae2:	697b      	ldr	r3, [r7, #20]
 8007ae4:	781b      	ldrb	r3, [r3, #0]
 8007ae6:	2b01      	cmp	r3, #1
 8007ae8:	f040 8089 	bne.w	8007bfe <_ZN6BleApp22ServiceControlCallbackEP14hci_event_pckt+0x17e>
				auto connCompleteEvent = (hci_le_connection_complete_event_rp0*) meta_evt->data;
 8007aec:	697b      	ldr	r3, [r7, #20]
 8007aee:	3301      	adds	r3, #1
 8007af0:	613b      	str	r3, [r7, #16]
				HW_TS_Stop(lowPowerAdvTimerId);				// connected: no need anymore to schedule the LP ADV
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8007af8:	4618      	mov	r0, r3
 8007afa:	f7fc fabb 	bl	8004074 <HW_TS_Stop>
				APP_DBG_MSG("Client connected: handle 0x%x\n", connCompleteEvent->Connection_Handle);
 8007afe:	693b      	ldr	r3, [r7, #16]
 8007b00:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8007b04:	b29b      	uxth	r3, r3
 8007b06:	4619      	mov	r1, r3
 8007b08:	4842      	ldr	r0, [pc, #264]	; (8007c14 <_ZN6BleApp22ServiceControlCallbackEP14hci_event_pckt+0x194>)
 8007b0a:	f002 fdef 	bl	800a6ec <iprintf>
				connectionStatus = ConnStatus::Connected;
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	2205      	movs	r2, #5
 8007b12:	605a      	str	r2, [r3, #4]
				connectionHandle = connCompleteEvent->Connection_Handle;
 8007b14:	693b      	ldr	r3, [r7, #16]
 8007b16:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8007b1a:	b29a      	uxth	r2, r3
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	801a      	strh	r2, [r3, #0]
				GPIOA->ODR |= GPIO_ODR_OD3;					// Turn on connected LED
 8007b20:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007b24:	695b      	ldr	r3, [r3, #20]
 8007b26:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8007b2a:	f043 0308 	orr.w	r3, r3, #8
 8007b2e:	6153      	str	r3, [r2, #20]
		break;
 8007b30:	e065      	b.n	8007bfe <_ZN6BleApp22ServiceControlCallbackEP14hci_event_pckt+0x17e>
			auto blecore_evt = (evt_blecore_aci*) event_pckt->data;
 8007b32:	683b      	ldr	r3, [r7, #0]
 8007b34:	3302      	adds	r3, #2
 8007b36:	627b      	str	r3, [r7, #36]	; 0x24
			switch (blecore_evt->ecode)	{
 8007b38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b3a:	881b      	ldrh	r3, [r3, #0]
 8007b3c:	b29b      	uxth	r3, r3
 8007b3e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007b42:	d056      	beq.n	8007bf2 <_ZN6BleApp22ServiceControlCallbackEP14hci_event_pckt+0x172>
 8007b44:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007b48:	dc5b      	bgt.n	8007c02 <_ZN6BleApp22ServiceControlCallbackEP14hci_event_pckt+0x182>
 8007b4a:	2b04      	cmp	r3, #4
 8007b4c:	d053      	beq.n	8007bf6 <_ZN6BleApp22ServiceControlCallbackEP14hci_event_pckt+0x176>
 8007b4e:	2b04      	cmp	r3, #4
 8007b50:	db57      	blt.n	8007c02 <_ZN6BleApp22ServiceControlCallbackEP14hci_event_pckt+0x182>
 8007b52:	f240 420a 	movw	r2, #1034	; 0x40a
 8007b56:	4293      	cmp	r3, r2
 8007b58:	dc53      	bgt.n	8007c02 <_ZN6BleApp22ServiceControlCallbackEP14hci_event_pckt+0x182>
 8007b5a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007b5e:	dd50      	ble.n	8007c02 <_ZN6BleApp22ServiceControlCallbackEP14hci_event_pckt+0x182>
 8007b60:	f2a3 4301 	subw	r3, r3, #1025	; 0x401
 8007b64:	2b09      	cmp	r3, #9
 8007b66:	d84c      	bhi.n	8007c02 <_ZN6BleApp22ServiceControlCallbackEP14hci_event_pckt+0x182>
 8007b68:	a201      	add	r2, pc, #4	; (adr r2, 8007b70 <_ZN6BleApp22ServiceControlCallbackEP14hci_event_pckt+0xf0>)
 8007b6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b6e:	bf00      	nop
 8007b70:	08007bdf 	.word	0x08007bdf
 8007b74:	08007ba9 	.word	0x08007ba9
 8007b78:	08007c03 	.word	0x08007c03
 8007b7c:	08007c03 	.word	0x08007c03
 8007b80:	08007c03 	.word	0x08007c03
 8007b84:	08007c03 	.word	0x08007c03
 8007b88:	08007b99 	.word	0x08007b99
 8007b8c:	08007c03 	.word	0x08007c03
 8007b90:	08007bbb 	.word	0x08007bbb
 8007b94:	08007ba1 	.word	0x08007ba1
					APP_DBG_MSG("\r\n\r** ACI_GAP_PROC_COMPLETE_VSEVT_CODE \n");
 8007b98:	481f      	ldr	r0, [pc, #124]	; (8007c18 <_ZN6BleApp22ServiceControlCallbackEP14hci_event_pckt+0x198>)
 8007b9a:	f002 fe0d 	bl	800a7b8 <puts>
					break;
 8007b9e:	e02b      	b.n	8007bf8 <_ZN6BleApp22ServiceControlCallbackEP14hci_event_pckt+0x178>
					APP_DBG_MSG("\r\n\r** ACI_GAP_KEYPRESS_NOTIFICATION_VSEVT_CODE \n");
 8007ba0:	481e      	ldr	r0, [pc, #120]	; (8007c1c <_ZN6BleApp22ServiceControlCallbackEP14hci_event_pckt+0x19c>)
 8007ba2:	f002 fe09 	bl	800a7b8 <puts>
					break;
 8007ba6:	e027      	b.n	8007bf8 <_ZN6BleApp22ServiceControlCallbackEP14hci_event_pckt+0x178>
					aci_gap_pass_key_resp(connectionHandle, Security.fixedPin);
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	881a      	ldrh	r2, [r3, #0]
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bb0:	4619      	mov	r1, r3
 8007bb2:	4610      	mov	r0, r2
 8007bb4:	f7f9 fb41 	bl	800123a <aci_gap_pass_key_resp>
					break;
 8007bb8:	e01e      	b.n	8007bf8 <_ZN6BleApp22ServiceControlCallbackEP14hci_event_pckt+0x178>
					auto evt_numeric_value = (aci_gap_numeric_comparison_value_event_rp0*)blecore_evt->data;
 8007bba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bbc:	3302      	adds	r3, #2
 8007bbe:	623b      	str	r3, [r7, #32]
					uint32_t numeric_value = evt_numeric_value->Numeric_Value;
 8007bc0:	6a3b      	ldr	r3, [r7, #32]
 8007bc2:	f8d3 3002 	ldr.w	r3, [r3, #2]
 8007bc6:	61fb      	str	r3, [r7, #28]
					APP_DBG_MSG("numeric_value = %ld\n", numeric_value);
 8007bc8:	69f9      	ldr	r1, [r7, #28]
 8007bca:	4815      	ldr	r0, [pc, #84]	; (8007c20 <_ZN6BleApp22ServiceControlCallbackEP14hci_event_pckt+0x1a0>)
 8007bcc:	f002 fd8e 	bl	800a6ec <iprintf>
					aci_gap_numeric_comparison_value_confirm_yesno(connectionHandle, true);
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	881b      	ldrh	r3, [r3, #0]
 8007bd4:	2101      	movs	r1, #1
 8007bd6:	4618      	mov	r0, r3
 8007bd8:	f7f9 fd43 	bl	8001662 <aci_gap_numeric_comparison_value_confirm_yesno>
					break;
 8007bdc:	e00c      	b.n	8007bf8 <_ZN6BleApp22ServiceControlCallbackEP14hci_event_pckt+0x178>
					auto pairing_complete = (aci_gap_pairing_complete_event_rp0*)blecore_evt->data;
 8007bde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007be0:	3302      	adds	r3, #2
 8007be2:	61bb      	str	r3, [r7, #24]
					APP_DBG_MSG("ACI_GAP_PAIRING_COMPLETE_VSEVT_CODE: Status = %d\n", pairing_complete->Status);
 8007be4:	69bb      	ldr	r3, [r7, #24]
 8007be6:	789b      	ldrb	r3, [r3, #2]
 8007be8:	4619      	mov	r1, r3
 8007bea:	480e      	ldr	r0, [pc, #56]	; (8007c24 <_ZN6BleApp22ServiceControlCallbackEP14hci_event_pckt+0x1a4>)
 8007bec:	f002 fd7e 	bl	800a6ec <iprintf>
					break;
 8007bf0:	e002      	b.n	8007bf8 <_ZN6BleApp22ServiceControlCallbackEP14hci_event_pckt+0x178>
					break;
 8007bf2:	bf00      	nop
 8007bf4:	e005      	b.n	8007c02 <_ZN6BleApp22ServiceControlCallbackEP14hci_event_pckt+0x182>
					break;
 8007bf6:	bf00      	nop
			break;
 8007bf8:	e003      	b.n	8007c02 <_ZN6BleApp22ServiceControlCallbackEP14hci_event_pckt+0x182>
			break;
 8007bfa:	bf00      	nop
 8007bfc:	e002      	b.n	8007c04 <_ZN6BleApp22ServiceControlCallbackEP14hci_event_pckt+0x184>
		break;
 8007bfe:	bf00      	nop
 8007c00:	e000      	b.n	8007c04 <_ZN6BleApp22ServiceControlCallbackEP14hci_event_pckt+0x184>
			break;
 8007c02:	bf00      	nop
	}

}
 8007c04:	bf00      	nop
 8007c06:	3728      	adds	r7, #40	; 0x28
 8007c08:	46bd      	mov	sp, r7
 8007c0a:	bd80      	pop	{r7, pc}
 8007c0c:	20000cbc 	.word	0x20000cbc
 8007c10:	0800d0d0 	.word	0x0800d0d0
 8007c14:	0800d0ec 	.word	0x0800d0ec
 8007c18:	0800d10c 	.word	0x0800d10c
 8007c1c:	0800d134 	.word	0x0800d134
 8007c20:	0800d164 	.word	0x0800d164
 8007c24:	0800d17c 	.word	0x0800d17c

08007c28 <_ZN6BleApp18TransportLayerInitEv>:


void BleApp::TransportLayerInit()
{
 8007c28:	b580      	push	{r7, lr}
 8007c2a:	b084      	sub	sp, #16
 8007c2c:	af00      	add	r7, sp, #0
 8007c2e:	6078      	str	r0, [r7, #4]
	HCI_TL_HciInitConf_t Hci_Tl_Init_Conf;

	Hci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&BleCmdBuffer;
 8007c30:	4b06      	ldr	r3, [pc, #24]	; (8007c4c <_ZN6BleApp18TransportLayerInitEv+0x24>)
 8007c32:	60bb      	str	r3, [r7, #8]
	Hci_Tl_Init_Conf.StatusNotCallBack = StatusNotify;
 8007c34:	4b06      	ldr	r3, [pc, #24]	; (8007c50 <_ZN6BleApp18TransportLayerInitEv+0x28>)
 8007c36:	60fb      	str	r3, [r7, #12]
	hci_init(UserEvtRx, (void*) &Hci_Tl_Init_Conf);
 8007c38:	f107 0308 	add.w	r3, r7, #8
 8007c3c:	4619      	mov	r1, r3
 8007c3e:	4805      	ldr	r0, [pc, #20]	; (8007c54 <_ZN6BleApp18TransportLayerInitEv+0x2c>)
 8007c40:	f7fa fca0 	bl	8002584 <hci_init>
}
 8007c44:	bf00      	nop
 8007c46:	3710      	adds	r7, #16
 8007c48:	46bd      	mov	sp, r7
 8007c4a:	bd80      	pop	{r7, pc}
 8007c4c:	200300d8 	.word	0x200300d8
 8007c50:	08008305 	.word	0x08008305
 8007c54:	080082a9 	.word	0x080082a9

08007c58 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE6lengthEv>:
      length() const noexcept
 8007c58:	b480      	push	{r7}
 8007c5a:	b083      	sub	sp, #12
 8007c5c:	af00      	add	r7, sp, #0
 8007c5e:	6078      	str	r0, [r7, #4]
      { return _M_len; }
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	4618      	mov	r0, r3
 8007c66:	370c      	adds	r7, #12
 8007c68:	46bd      	mov	sp, r7
 8007c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c6e:	4770      	bx	lr

08007c70 <_ZN6BleApp14HciGapGattInitEv>:


void BleApp::HciGapGattInit()
{
 8007c70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007c72:	b093      	sub	sp, #76	; 0x4c
 8007c74:	af06      	add	r7, sp, #24
 8007c76:	6078      	str	r0, [r7, #4]
	uint16_t gap_service_handle, gap_dev_name_char_handle, gap_appearance_char_handle;

	uint16_t appearance[1] = { BLE_CFG_GAP_APPEARANCE };
 8007c78:	f240 33c2 	movw	r3, #962	; 0x3c2
 8007c7c:	81bb      	strh	r3, [r7, #12]

	hci_reset();									// HCI Reset to synchronise BLE Stack
 8007c7e:	f7fa fa8c 	bl	800219a <hci_reset>

	// Write the BD Address
	aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET, bdAddrSize, GetBdAddress());
 8007c82:	6878      	ldr	r0, [r7, #4]
 8007c84:	f000 f93c 	bl	8007f00 <_ZN6BleApp12GetBdAddressEv>
 8007c88:	4603      	mov	r3, r0
 8007c8a:	461a      	mov	r2, r3
 8007c8c:	2106      	movs	r1, #6
 8007c8e:	2000      	movs	r0, #0
 8007c90:	f7fa f997 	bl	8001fc2 <aci_hal_write_config_data>

	// Write Identity root key used to derive LTK and CSRK
	aci_hal_write_config_data(CONFIG_DATA_IR_OFFSET, CONFIG_DATA_IR_LEN, IdentityRootKey);
 8007c94:	4a53      	ldr	r2, [pc, #332]	; (8007de4 <_ZN6BleApp14HciGapGattInitEv+0x174>)
 8007c96:	2110      	movs	r1, #16
 8007c98:	2018      	movs	r0, #24
 8007c9a:	f7fa f992 	bl	8001fc2 <aci_hal_write_config_data>

	// Write Encryption root key used to derive LTK and CSRK
	aci_hal_write_config_data(CONFIG_DATA_ER_OFFSET, CONFIG_DATA_ER_LEN, EncryptionRootKey);
 8007c9e:	4a52      	ldr	r2, [pc, #328]	; (8007de8 <_ZN6BleApp14HciGapGattInitEv+0x178>)
 8007ca0:	2110      	movs	r1, #16
 8007ca2:	2008      	movs	r0, #8
 8007ca4:	f7fa f98d 	bl	8001fc2 <aci_hal_write_config_data>

	aci_hal_set_tx_power_level(0, TransmitPower);	// Set TX Power to 0dBm.
 8007ca8:	2110      	movs	r1, #16
 8007caa:	2000      	movs	r0, #0
 8007cac:	f7fa fa0e 	bl	80020cc <aci_hal_set_tx_power_level>
	aci_gatt_init();								// Initialize GATT interface
 8007cb0:	f7f9 fd3e 	bl	8001730 <aci_gatt_init>

	// Initialize GAP interface
	aci_gap_init(
			GAP_PERIPHERAL_ROLE,
			0,
			GapDeviceName.length(),
 8007cb4:	484d      	ldr	r0, [pc, #308]	; (8007dec <_ZN6BleApp14HciGapGattInitEv+0x17c>)
 8007cb6:	f7ff ffcf 	bl	8007c58 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE6lengthEv>
 8007cba:	4603      	mov	r3, r0
	aci_gap_init(
 8007cbc:	b2da      	uxtb	r2, r3
 8007cbe:	f107 0112 	add.w	r1, r7, #18
 8007cc2:	f107 030e 	add.w	r3, r7, #14
 8007cc6:	9301      	str	r3, [sp, #4]
 8007cc8:	f107 0310 	add.w	r3, r7, #16
 8007ccc:	9300      	str	r3, [sp, #0]
 8007cce:	460b      	mov	r3, r1
 8007cd0:	2100      	movs	r1, #0
 8007cd2:	2001      	movs	r0, #1
 8007cd4:	f7f9 fb18 	bl	8001308 <aci_gap_init>
			&gap_service_handle,
			&gap_dev_name_char_handle,
			&gap_appearance_char_handle
			);

	if (aci_gatt_update_char_value(
 8007cd8:	8a7c      	ldrh	r4, [r7, #18]
 8007cda:	8a3d      	ldrh	r5, [r7, #16]
			gap_service_handle,
			gap_dev_name_char_handle,
			0,
			GapDeviceName.length(),
 8007cdc:	4843      	ldr	r0, [pc, #268]	; (8007dec <_ZN6BleApp14HciGapGattInitEv+0x17c>)
 8007cde:	f7ff ffbb 	bl	8007c58 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE6lengthEv>
 8007ce2:	4603      	mov	r3, r0
	if (aci_gatt_update_char_value(
 8007ce4:	b2de      	uxtb	r6, r3
			(uint8_t*)std::string(GapDeviceName).c_str())
 8007ce6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8007cea:	4618      	mov	r0, r3
 8007cec:	f001 fc5e 	bl	80095ac <_ZNSaIcEC1Ev>
 8007cf0:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8007cf4:	f107 0314 	add.w	r3, r7, #20
 8007cf8:	493c      	ldr	r1, [pc, #240]	; (8007dec <_ZN6BleApp14HciGapGattInitEv+0x17c>)
 8007cfa:	4618      	mov	r0, r3
 8007cfc:	f7fd fe89 	bl	8005a12 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ISt17basic_string_viewIcS2_EvEERKT_RKS3_>
 8007d00:	f107 0314 	add.w	r3, r7, #20
 8007d04:	4618      	mov	r0, r3
 8007d06:	f001 feb9 	bl	8009a7c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 8007d0a:	4603      	mov	r3, r0
	if (aci_gatt_update_char_value(
 8007d0c:	9300      	str	r3, [sp, #0]
 8007d0e:	4633      	mov	r3, r6
 8007d10:	2200      	movs	r2, #0
 8007d12:	4629      	mov	r1, r5
 8007d14:	4620      	mov	r0, r4
 8007d16:	f7fa f856 	bl	8001dc6 <aci_gatt_update_char_value>
 8007d1a:	4603      	mov	r3, r0
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	bf14      	ite	ne
 8007d20:	2301      	movne	r3, #1
 8007d22:	2300      	moveq	r3, #0
 8007d24:	b2dc      	uxtb	r4, r3
			(uint8_t*)std::string(GapDeviceName).c_str())
 8007d26:	f107 0314 	add.w	r3, r7, #20
 8007d2a:	4618      	mov	r0, r3
 8007d2c:	f001 fdc1 	bl	80098b2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8007d30:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8007d34:	4618      	mov	r0, r3
 8007d36:	f001 fc3a 	bl	80095ae <_ZNSaIcED1Ev>
	if (aci_gatt_update_char_value(
 8007d3a:	2c00      	cmp	r4, #0
 8007d3c:	d002      	beq.n	8007d44 <_ZN6BleApp14HciGapGattInitEv+0xd4>
		) {
		APP_DBG_MSG("Device Name aci_gatt_update_char_value failed.\n");
 8007d3e:	482c      	ldr	r0, [pc, #176]	; (8007df0 <_ZN6BleApp14HciGapGattInitEv+0x180>)
 8007d40:	f002 fd3a 	bl	800a7b8 <puts>
	}

	if (aci_gatt_update_char_value(gap_service_handle, gap_appearance_char_handle, 0, 2, (uint8_t*)&appearance)) {
 8007d44:	8a78      	ldrh	r0, [r7, #18]
 8007d46:	89f9      	ldrh	r1, [r7, #14]
 8007d48:	f107 030c 	add.w	r3, r7, #12
 8007d4c:	9300      	str	r3, [sp, #0]
 8007d4e:	2302      	movs	r3, #2
 8007d50:	2200      	movs	r2, #0
 8007d52:	f7fa f838 	bl	8001dc6 <aci_gatt_update_char_value>
 8007d56:	4603      	mov	r3, r0
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	bf14      	ite	ne
 8007d5c:	2301      	movne	r3, #1
 8007d5e:	2300      	moveq	r3, #0
 8007d60:	b2db      	uxtb	r3, r3
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d002      	beq.n	8007d6c <_ZN6BleApp14HciGapGattInitEv+0xfc>
		APP_DBG_MSG("Appearance aci_gatt_update_char_value failed.\n");
 8007d66:	4823      	ldr	r0, [pc, #140]	; (8007df4 <_ZN6BleApp14HciGapGattInitEv+0x184>)
 8007d68:	f002 fd26 	bl	800a7b8 <puts>
	}

	// Initialize Default PHY - specify preference for 1 or 2Mbit Phy for TX and RX
	hci_le_set_default_phy(PreferAllPhy, Prefer2MbitPhy, Prefer2MbitPhy);
 8007d6c:	2202      	movs	r2, #2
 8007d6e:	2102      	movs	r1, #2
 8007d70:	2000      	movs	r0, #0
 8007d72:	f7fa faa4 	bl	80022be <hci_le_set_default_phy>

	// Initialize IO capability
	aci_gap_set_io_capability(Security.ioCapability);
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007d7c:	4618      	mov	r0, r3
 8007d7e:	f7f9 f944 	bl	800100a <aci_gap_set_io_capability>

	// Initialize authentication
	aci_gap_set_authentication_requirement(Security.bondingMode,
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	f893 5036 	ldrb.w	r5, [r3, #54]	; 0x36
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	f893 6035 	ldrb.w	r6, [r3, #53]	; 0x35
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	f893 c03a 	ldrb.w	ip, [r3, #58]	; 0x3a
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	f893 e03b 	ldrb.w	lr, [r3, #59]	; 0x3b
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8007da0:	687a      	ldr	r2, [r7, #4]
 8007da2:	f892 2039 	ldrb.w	r2, [r2, #57]	; 0x39
 8007da6:	6879      	ldr	r1, [r7, #4]
 8007da8:	f891 1037 	ldrb.w	r1, [r1, #55]	; 0x37
 8007dac:	6878      	ldr	r0, [r7, #4]
 8007dae:	6c00      	ldr	r0, [r0, #64]	; 0x40
 8007db0:	687c      	ldr	r4, [r7, #4]
 8007db2:	f894 403c 	ldrb.w	r4, [r4, #60]	; 0x3c
 8007db6:	9404      	str	r4, [sp, #16]
 8007db8:	9003      	str	r0, [sp, #12]
 8007dba:	9102      	str	r1, [sp, #8]
 8007dbc:	9201      	str	r2, [sp, #4]
 8007dbe:	9300      	str	r3, [sp, #0]
 8007dc0:	4673      	mov	r3, lr
 8007dc2:	4662      	mov	r2, ip
 8007dc4:	4631      	mov	r1, r6
 8007dc6:	4628      	mov	r0, r5
 8007dc8:	f7f9 f973 	bl	80010b2 <aci_gap_set_authentication_requirement>
			Security.useFixedPin,
			Security.fixedPin,
			Security.BLEAddressType
	);
	// Initialize whitelist
	if (Security.bondingMode) {
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d001      	beq.n	8007dda <_ZN6BleApp14HciGapGattInitEv+0x16a>
		aci_gap_configure_whitelist();
 8007dd6:	f7f9 fbb6 	bl	8001546 <aci_gap_configure_filter_accept_list>
	}
}
 8007dda:	bf00      	nop
 8007ddc:	3734      	adds	r7, #52	; 0x34
 8007dde:	46bd      	mov	sp, r7
 8007de0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007de2:	bf00      	nop
 8007de4:	0800d690 	.word	0x0800d690
 8007de8:	0800d6a0 	.word	0x0800d6a0
 8007dec:	0800d688 	.word	0x0800d688
 8007df0:	0800d1b0 	.word	0x0800d1b0
 8007df4:	0800d1e0 	.word	0x0800d1e0

08007df8 <_ZN6BleApp17EnableAdvertisingENS_10ConnStatusE>:


void BleApp::EnableAdvertising(ConnStatus newStatus)
{
 8007df8:	b580      	push	{r7, lr}
 8007dfa:	b08c      	sub	sp, #48	; 0x30
 8007dfc:	af08      	add	r7, sp, #32
 8007dfe:	6078      	str	r0, [r7, #4]
 8007e00:	6039      	str	r1, [r7, #0]
	tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8007e02:	2392      	movs	r3, #146	; 0x92
 8007e04:	73fb      	strb	r3, [r7, #15]
	uint16_t MinInterval = (newStatus == ConnStatus::FastAdv) ? FastAdvIntervalMin : LPAdvIntervalMin;
 8007e06:	683b      	ldr	r3, [r7, #0]
 8007e08:	2b01      	cmp	r3, #1
 8007e0a:	d101      	bne.n	8007e10 <_ZN6BleApp17EnableAdvertisingENS_10ConnStatusE+0x18>
 8007e0c:	2380      	movs	r3, #128	; 0x80
 8007e0e:	e001      	b.n	8007e14 <_ZN6BleApp17EnableAdvertisingENS_10ConnStatusE+0x1c>
 8007e10:	f44f 63c8 	mov.w	r3, #1600	; 0x640
 8007e14:	81bb      	strh	r3, [r7, #12]
	uint16_t MaxInterval = (newStatus == ConnStatus::FastAdv) ? FastAdvIntervalMax : LPAdvIntervalMax;
 8007e16:	683b      	ldr	r3, [r7, #0]
 8007e18:	2b01      	cmp	r3, #1
 8007e1a:	d101      	bne.n	8007e20 <_ZN6BleApp17EnableAdvertisingENS_10ConnStatusE+0x28>
 8007e1c:	23a0      	movs	r3, #160	; 0xa0
 8007e1e:	e001      	b.n	8007e24 <_ZN6BleApp17EnableAdvertisingENS_10ConnStatusE+0x2c>
 8007e20:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 8007e24:	817b      	strh	r3, [r7, #10]

	// Stop the timer, it will be restarted for a new shot; It does not hurt if the timer was not running
	HW_TS_Stop(lowPowerAdvTimerId);
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8007e2c:	4618      	mov	r0, r3
 8007e2e:	f7fc f921 	bl	8004074 <HW_TS_Stop>

	// If switching to LP advertising first disable fast advertising
	if ((newStatus == ConnStatus::LPAdv) && ((connectionStatus == ConnStatus::FastAdv) || (connectionStatus == ConnStatus::LPAdv))) {
 8007e32:	683b      	ldr	r3, [r7, #0]
 8007e34:	2b02      	cmp	r3, #2
 8007e36:	d117      	bne.n	8007e68 <_ZN6BleApp17EnableAdvertisingENS_10ConnStatusE+0x70>
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	685b      	ldr	r3, [r3, #4]
 8007e3c:	2b01      	cmp	r3, #1
 8007e3e:	d003      	beq.n	8007e48 <_ZN6BleApp17EnableAdvertisingENS_10ConnStatusE+0x50>
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	685b      	ldr	r3, [r3, #4]
 8007e44:	2b02      	cmp	r3, #2
 8007e46:	d10f      	bne.n	8007e68 <_ZN6BleApp17EnableAdvertisingENS_10ConnStatusE+0x70>
		ret = aci_gap_set_non_discoverable();
 8007e48:	f7f8 ffc1 	bl	8000dce <aci_gap_set_non_discoverable>
 8007e4c:	4603      	mov	r3, r0
 8007e4e:	73fb      	strb	r3, [r7, #15]
		if (ret == BLE_STATUS_SUCCESS) {
 8007e50:	7bfb      	ldrb	r3, [r7, #15]
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d103      	bne.n	8007e5e <_ZN6BleApp17EnableAdvertisingENS_10ConnStatusE+0x66>
			APP_DBG_MSG("Stopped Fast Advertising \n");
 8007e56:	4825      	ldr	r0, [pc, #148]	; (8007eec <_ZN6BleApp17EnableAdvertisingENS_10ConnStatusE+0xf4>)
 8007e58:	f002 fcae 	bl	800a7b8 <puts>
 8007e5c:	e004      	b.n	8007e68 <_ZN6BleApp17EnableAdvertisingENS_10ConnStatusE+0x70>
		} else {
			APP_DBG_MSG("Stop Advertising Failed , result: %d \n", ret);
 8007e5e:	7bfb      	ldrb	r3, [r7, #15]
 8007e60:	4619      	mov	r1, r3
 8007e62:	4823      	ldr	r0, [pc, #140]	; (8007ef0 <_ZN6BleApp17EnableAdvertisingENS_10ConnStatusE+0xf8>)
 8007e64:	f002 fc42 	bl	800a6ec <iprintf>
		}
	}
	connectionStatus = newStatus;
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	683a      	ldr	r2, [r7, #0]
 8007e6c:	605a      	str	r2, [r3, #4]

	ret = aci_gap_set_discoverable((uint8_t)AdvertisingType::Indirect, MinInterval, MaxInterval, Security.BLEAddressType, HCI_ADV_FILTER_NO, 0, 0, 0, 0, 0, 0);
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007e74:	897a      	ldrh	r2, [r7, #10]
 8007e76:	89b9      	ldrh	r1, [r7, #12]
 8007e78:	2000      	movs	r0, #0
 8007e7a:	9006      	str	r0, [sp, #24]
 8007e7c:	2000      	movs	r0, #0
 8007e7e:	9005      	str	r0, [sp, #20]
 8007e80:	2000      	movs	r0, #0
 8007e82:	9004      	str	r0, [sp, #16]
 8007e84:	2000      	movs	r0, #0
 8007e86:	9003      	str	r0, [sp, #12]
 8007e88:	2000      	movs	r0, #0
 8007e8a:	9002      	str	r0, [sp, #8]
 8007e8c:	2000      	movs	r0, #0
 8007e8e:	9001      	str	r0, [sp, #4]
 8007e90:	2000      	movs	r0, #0
 8007e92:	9000      	str	r0, [sp, #0]
 8007e94:	2000      	movs	r0, #0
 8007e96:	f7f8 ffbe 	bl	8000e16 <aci_gap_set_discoverable>
 8007e9a:	4603      	mov	r3, r0
 8007e9c:	73fb      	strb	r3, [r7, #15]

	// Update Advertising data
	ret = aci_gap_update_adv_data(sizeof(ad_data), ad_data);
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	330d      	adds	r3, #13
 8007ea2:	4619      	mov	r1, r3
 8007ea4:	2019      	movs	r0, #25
 8007ea6:	f7f9 fadc 	bl	8001462 <aci_gap_update_adv_data>
 8007eaa:	4603      	mov	r3, r0
 8007eac:	73fb      	strb	r3, [r7, #15]

	if (ret == BLE_STATUS_SUCCESS) {
 8007eae:	7bfb      	ldrb	r3, [r7, #15]
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d112      	bne.n	8007eda <_ZN6BleApp17EnableAdvertisingENS_10ConnStatusE+0xe2>
		if (newStatus == ConnStatus::FastAdv)	{
 8007eb4:	683b      	ldr	r3, [r7, #0]
 8007eb6:	2b01      	cmp	r3, #1
 8007eb8:	d10b      	bne.n	8007ed2 <_ZN6BleApp17EnableAdvertisingENS_10ConnStatusE+0xda>
			APP_DBG_MSG("Start Fast Advertising \n");
 8007eba:	480e      	ldr	r0, [pc, #56]	; (8007ef4 <_ZN6BleApp17EnableAdvertisingENS_10ConnStatusE+0xfc>)
 8007ebc:	f002 fc7c 	bl	800a7b8 <puts>
			// Start Timer to STOP ADV - TIMEOUT
			HW_TS_Start(lowPowerAdvTimerId, FastAdvTimeout);
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8007ec6:	f24f 0123 	movw	r1, #61475	; 0xf023
 8007eca:	4618      	mov	r0, r3
 8007ecc:	f7fc f956 	bl	800417c <HW_TS_Start>
		}
	} else {
		APP_DBG_MSG("Start Advertising Failed , result: %d \n", ret);
	}

}
 8007ed0:	e008      	b.n	8007ee4 <_ZN6BleApp17EnableAdvertisingENS_10ConnStatusE+0xec>
			APP_DBG_MSG("Start Low Power Advertising \n");
 8007ed2:	4809      	ldr	r0, [pc, #36]	; (8007ef8 <_ZN6BleApp17EnableAdvertisingENS_10ConnStatusE+0x100>)
 8007ed4:	f002 fc70 	bl	800a7b8 <puts>
}
 8007ed8:	e004      	b.n	8007ee4 <_ZN6BleApp17EnableAdvertisingENS_10ConnStatusE+0xec>
		APP_DBG_MSG("Start Advertising Failed , result: %d \n", ret);
 8007eda:	7bfb      	ldrb	r3, [r7, #15]
 8007edc:	4619      	mov	r1, r3
 8007ede:	4807      	ldr	r0, [pc, #28]	; (8007efc <_ZN6BleApp17EnableAdvertisingENS_10ConnStatusE+0x104>)
 8007ee0:	f002 fc04 	bl	800a6ec <iprintf>
}
 8007ee4:	bf00      	nop
 8007ee6:	3710      	adds	r7, #16
 8007ee8:	46bd      	mov	sp, r7
 8007eea:	bd80      	pop	{r7, pc}
 8007eec:	0800d210 	.word	0x0800d210
 8007ef0:	0800d22c 	.word	0x0800d22c
 8007ef4:	0800d254 	.word	0x0800d254
 8007ef8:	0800d26c 	.word	0x0800d26c
 8007efc:	0800d28c 	.word	0x0800d28c

08007f00 <_ZN6BleApp12GetBdAddressEv>:


uint8_t* BleApp::GetBdAddress()
{
 8007f00:	b580      	push	{r7, lr}
 8007f02:	b086      	sub	sp, #24
 8007f04:	af00      	add	r7, sp, #0
 8007f06:	6078      	str	r0, [r7, #4]
	uint32_t udn = LL_FLASH_GetUDN();
 8007f08:	f7ff fc72 	bl	80077f0 <LL_FLASH_GetUDN>
 8007f0c:	6178      	str	r0, [r7, #20]
	uint32_t company_id = LL_FLASH_GetSTCompanyID();
 8007f0e:	f7ff fc87 	bl	8007820 <LL_FLASH_GetSTCompanyID>
 8007f12:	6138      	str	r0, [r7, #16]
	uint32_t device_id = LL_FLASH_GetDeviceID();
 8007f14:	f7ff fc78 	bl	8007808 <LL_FLASH_GetDeviceID>
 8007f18:	60f8      	str	r0, [r7, #12]
	// Public Address with the ST company ID
	// bit[47:24] : 24 bits (OUI) equal to the company ID
	// bit[23:16] : Device ID.
	// bit[15:0]  : The last 16 bits from the UDN
	// Note: In order to use the Public Address in a final product, a dedicated 24 bit company ID (OUI) must be bought.
	bd_addr_udn[0] = (uint8_t)(udn & 0x000000FF);
 8007f1a:	697b      	ldr	r3, [r7, #20]
 8007f1c:	b2da      	uxtb	r2, r3
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	bd_addr_udn[1] = (uint8_t)((udn & 0x0000FF00) >> 8);
 8007f24:	697b      	ldr	r3, [r7, #20]
 8007f26:	0a1b      	lsrs	r3, r3, #8
 8007f28:	b2da      	uxtb	r2, r3
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	bd_addr_udn[2] = (uint8_t)device_id;
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	b2da      	uxtb	r2, r3
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	bd_addr_udn[3] = (uint8_t)(company_id & 0x000000FF);
 8007f3a:	693b      	ldr	r3, [r7, #16]
 8007f3c:	b2da      	uxtb	r2, r3
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	bd_addr_udn[4] = (uint8_t)((company_id & 0x0000FF00) >> 8);
 8007f44:	693b      	ldr	r3, [r7, #16]
 8007f46:	0a1b      	lsrs	r3, r3, #8
 8007f48:	b2da      	uxtb	r2, r3
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
	bd_addr_udn[5] = (uint8_t)((company_id & 0x00FF0000) >> 16);
 8007f50:	693b      	ldr	r3, [r7, #16]
 8007f52:	0c1b      	lsrs	r3, r3, #16
 8007f54:	b2da      	uxtb	r2, r3
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

	return bd_addr_udn;
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	3326      	adds	r3, #38	; 0x26
}
 8007f60:	4618      	mov	r0, r3
 8007f62:	3718      	adds	r7, #24
 8007f64:	46bd      	mov	sp, r7
 8007f66:	bd80      	pop	{r7, pc}

08007f68 <_ZN6BleApp18QueueLPAdvertisingEv>:


void BleApp::QueueLPAdvertising()
{
 8007f68:	b580      	push	{r7, lr}
 8007f6a:	af00      	add	r7, sp, #0
	// Queues transition from fast to low power advertising
	UTIL_SEQ_SetTask(1 << CFG_TASK_SwitchLPAdvertising, CFG_SCH_PRIO_0);
 8007f6c:	2100      	movs	r1, #0
 8007f6e:	2001      	movs	r0, #1
 8007f70:	f7fc fc86 	bl	8004880 <UTIL_SEQ_SetTask>
}
 8007f74:	bf00      	nop
 8007f76:	bd80      	pop	{r7, pc}

08007f78 <_ZN6BleApp19SwitchLPAdvertisingEv>:
	UTIL_SEQ_SetTask(1 << CFG_TASK_SwitchFastAdvertising, CFG_SCH_PRIO_0);
}


void BleApp::SwitchLPAdvertising()
{
 8007f78:	b580      	push	{r7, lr}
 8007f7a:	af00      	add	r7, sp, #0
	bleApp.EnableAdvertising(ConnStatus::LPAdv);
 8007f7c:	2102      	movs	r1, #2
 8007f7e:	4802      	ldr	r0, [pc, #8]	; (8007f88 <_ZN6BleApp19SwitchLPAdvertisingEv+0x10>)
 8007f80:	f7ff ff3a 	bl	8007df8 <_ZN6BleApp17EnableAdvertisingENS_10ConnStatusE>
}
 8007f84:	bf00      	nop
 8007f86:	bd80      	pop	{r7, pc}
 8007f88:	20000c40 	.word	0x20000c40

08007f8c <_ZN6BleApp21SwitchFastAdvertisingEv>:


void BleApp::SwitchFastAdvertising()
{
 8007f8c:	b580      	push	{r7, lr}
 8007f8e:	af00      	add	r7, sp, #0
	bleApp.EnableAdvertising(ConnStatus::FastAdv);
 8007f90:	2101      	movs	r1, #1
 8007f92:	4802      	ldr	r0, [pc, #8]	; (8007f9c <_ZN6BleApp21SwitchFastAdvertisingEv+0x10>)
 8007f94:	f7ff ff30 	bl	8007df8 <_ZN6BleApp17EnableAdvertisingENS_10ConnStatusE>
}
 8007f98:	bf00      	nop
 8007f9a:	bd80      	pop	{r7, pc}
 8007f9c:	20000c40 	.word	0x20000c40

08007fa0 <_ZN6BleApp17CancelAdvertisingEv>:

void BleApp::CancelAdvertising()
{
 8007fa0:	b580      	push	{r7, lr}
 8007fa2:	b082      	sub	sp, #8
 8007fa4:	af00      	add	r7, sp, #0
	if (bleApp.connectionStatus == ConnStatus::FastAdv || bleApp.connectionStatus == ConnStatus::LPAdv) {
 8007fa6:	4b17      	ldr	r3, [pc, #92]	; (8008004 <_ZN6BleApp17CancelAdvertisingEv+0x64>)
 8007fa8:	685b      	ldr	r3, [r3, #4]
 8007faa:	2b01      	cmp	r3, #1
 8007fac:	d003      	beq.n	8007fb6 <_ZN6BleApp17CancelAdvertisingEv+0x16>
 8007fae:	4b15      	ldr	r3, [pc, #84]	; (8008004 <_ZN6BleApp17CancelAdvertisingEv+0x64>)
 8007fb0:	685b      	ldr	r3, [r3, #4]
 8007fb2:	2b02      	cmp	r3, #2
 8007fb4:	d116      	bne.n	8007fe4 <_ZN6BleApp17CancelAdvertisingEv+0x44>
		HW_TS_Stop(bleApp.lowPowerAdvTimerId);					// Cancel timer to activate LP Advertising
 8007fb6:	4b13      	ldr	r3, [pc, #76]	; (8008004 <_ZN6BleApp17CancelAdvertisingEv+0x64>)
 8007fb8:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8007fbc:	4618      	mov	r0, r3
 8007fbe:	f7fc f859 	bl	8004074 <HW_TS_Stop>

		tBleStatus result = aci_gap_set_non_discoverable();
 8007fc2:	f7f8 ff04 	bl	8000dce <aci_gap_set_non_discoverable>
 8007fc6:	4603      	mov	r3, r0
 8007fc8:	71fb      	strb	r3, [r7, #7]

		bleApp.connectionStatus = ConnStatus::Idle;
 8007fca:	4b0e      	ldr	r3, [pc, #56]	; (8008004 <_ZN6BleApp17CancelAdvertisingEv+0x64>)
 8007fcc:	2200      	movs	r2, #0
 8007fce:	605a      	str	r2, [r3, #4]
		if (result == BLE_STATUS_SUCCESS) {
 8007fd0:	79fb      	ldrb	r3, [r7, #7]
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d103      	bne.n	8007fde <_ZN6BleApp17CancelAdvertisingEv+0x3e>
			APP_DBG_MSG("Stop advertising \r\n");
 8007fd6:	480c      	ldr	r0, [pc, #48]	; (8008008 <_ZN6BleApp17CancelAdvertisingEv+0x68>)
 8007fd8:	f002 fbee 	bl	800a7b8 <puts>
 8007fdc:	e002      	b.n	8007fe4 <_ZN6BleApp17CancelAdvertisingEv+0x44>
		} else {
			APP_DBG_MSG("Stop advertising Failed \r\n");
 8007fde:	480b      	ldr	r0, [pc, #44]	; (800800c <_ZN6BleApp17CancelAdvertisingEv+0x6c>)
 8007fe0:	f002 fbea 	bl	800a7b8 <puts>
		}
	}

	// As advertising must be stopped before entering sleep mode, trigger task here
	if (bleApp.sleepState == SleepState::CancelAdv) {
 8007fe4:	4b07      	ldr	r3, [pc, #28]	; (8008004 <_ZN6BleApp17CancelAdvertisingEv+0x64>)
 8007fe6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d106      	bne.n	8007ffa <_ZN6BleApp17CancelAdvertisingEv+0x5a>
		bleApp.sleepState = SleepState::GoToSleep;
 8007fec:	4b05      	ldr	r3, [pc, #20]	; (8008004 <_ZN6BleApp17CancelAdvertisingEv+0x64>)
 8007fee:	2201      	movs	r2, #1
 8007ff0:	631a      	str	r2, [r3, #48]	; 0x30
		UTIL_SEQ_SetTask(1 << CFG_TASK_EnterSleepMode, CFG_SCH_PRIO_0);
 8007ff2:	2100      	movs	r1, #0
 8007ff4:	2010      	movs	r0, #16
 8007ff6:	f7fc fc43 	bl	8004880 <UTIL_SEQ_SetTask>
	}
}
 8007ffa:	bf00      	nop
 8007ffc:	3708      	adds	r7, #8
 8007ffe:	46bd      	mov	sp, r7
 8008000:	bd80      	pop	{r7, pc}
 8008002:	bf00      	nop
 8008004:	20000c40 	.word	0x20000c40
 8008008:	0800d2b4 	.word	0x0800d2b4
 800800c:	0800d2c8 	.word	0x0800d2c8

08008010 <_ZN6BleApp17DisconnectRequestEv>:


void BleApp::DisconnectRequest()
{
 8008010:	b580      	push	{r7, lr}
 8008012:	af00      	add	r7, sp, #0
	aci_gap_terminate(bleApp.connectionHandle, 0x16);			// 0x16: Connection Terminated by Local Host
 8008014:	4b03      	ldr	r3, [pc, #12]	; (8008024 <_ZN6BleApp17DisconnectRequestEv+0x14>)
 8008016:	881b      	ldrh	r3, [r3, #0]
 8008018:	2116      	movs	r1, #22
 800801a:	4618      	mov	r0, r3
 800801c:	f7f9 fab7 	bl	800158e <aci_gap_terminate>
}
 8008020:	bf00      	nop
 8008022:	bd80      	pop	{r7, pc}
 8008024:	20000c40 	.word	0x20000c40

08008028 <_ZN6BleApp9GoToSleepEv>:


void BleApp::GoToSleep()
{
 8008028:	b580      	push	{r7, lr}
 800802a:	af00      	add	r7, sp, #0
	bleApp.sleepState = SleepState::CancelAdv;
 800802c:	4b04      	ldr	r3, [pc, #16]	; (8008040 <_ZN6BleApp9GoToSleepEv+0x18>)
 800802e:	2200      	movs	r2, #0
 8008030:	631a      	str	r2, [r3, #48]	; 0x30
	UTIL_SEQ_SetTask(1 << CFG_TASK_CancelAdvertising, CFG_SCH_PRIO_0);
 8008032:	2100      	movs	r1, #0
 8008034:	2004      	movs	r0, #4
 8008036:	f7fc fc23 	bl	8004880 <UTIL_SEQ_SetTask>
}
 800803a:	bf00      	nop
 800803c:	bd80      	pop	{r7, pc}
 800803e:	bf00      	nop
 8008040:	20000c40 	.word	0x20000c40

08008044 <_ZL11SwitchToHSIv>:


static void SwitchToHSI()
{
 8008044:	b480      	push	{r7}
 8008046:	af00      	add	r7, sp, #0
	MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, LL_RCC_SYS_CLKSOURCE_HSI);			// Set HSI as clock source
 8008048:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800804c:	689b      	ldr	r3, [r3, #8]
 800804e:	f023 0303 	bic.w	r3, r3, #3
 8008052:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008056:	f043 0301 	orr.w	r3, r3, #1
 800805a:	6093      	str	r3, [r2, #8]
	while ((RCC->CFGR & RCC_CFGR_SWS) != LL_RCC_SYS_CLKSOURCE_STATUS_HSI);	// Wait until HSE is selected
 800805c:	bf00      	nop
 800805e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008062:	689b      	ldr	r3, [r3, #8]
 8008064:	f003 030c 	and.w	r3, r3, #12
 8008068:	2b04      	cmp	r3, #4
 800806a:	bf14      	ite	ne
 800806c:	2301      	movne	r3, #1
 800806e:	2300      	moveq	r3, #0
 8008070:	b2db      	uxtb	r3, r3
 8008072:	2b00      	cmp	r3, #0
 8008074:	d1f3      	bne.n	800805e <_ZL11SwitchToHSIv+0x1a>
}
 8008076:	bf00      	nop
 8008078:	bf00      	nop
 800807a:	46bd      	mov	sp, r7
 800807c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008080:	4770      	bx	lr
	...

08008084 <_ZN6BleApp14EnterSleepModeEv>:


void BleApp::EnterSleepMode()
{
 8008084:	b580      	push	{r7, lr}
 8008086:	b086      	sub	sp, #24
 8008088:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800808a:	f3ef 8310 	mrs	r3, PRIMASK
 800808e:	60fb      	str	r3, [r7, #12]
  return(result);
 8008090:	68fb      	ldr	r3, [r7, #12]
	uint32_t primask_bit = __get_PRIMASK();
 8008092:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8008094:	b672      	cpsid	i
}
 8008096:	bf00      	nop
	__disable_irq();													// Disable interrupts

	SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;							// Disable Systick interrupt
 8008098:	4b46      	ldr	r3, [pc, #280]	; (80081b4 <_ZN6BleApp14EnterSleepModeEv+0x130>)
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	4a45      	ldr	r2, [pc, #276]	; (80081b4 <_ZN6BleApp14EnterSleepModeEv+0x130>)
 800809e:	f023 0302 	bic.w	r3, r3, #2
 80080a2:	6013      	str	r3, [r2, #0]

	while (LL_HSEM_1StepLock(HSEM, CFG_HW_RCC_SEMID));					// Lock the RCC semaphore
 80080a4:	bf00      	nop
 80080a6:	2103      	movs	r1, #3
 80080a8:	4843      	ldr	r0, [pc, #268]	; (80081b8 <_ZN6BleApp14EnterSleepModeEv+0x134>)
 80080aa:	f7ff fbed 	bl	8007888 <LL_HSEM_1StepLock>
 80080ae:	4603      	mov	r3, r0
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	bf14      	ite	ne
 80080b4:	2301      	movne	r3, #1
 80080b6:	2300      	moveq	r3, #0
 80080b8:	b2db      	uxtb	r3, r3
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d1f3      	bne.n	80080a6 <_ZN6BleApp14EnterSleepModeEv+0x22>

	if (!LL_HSEM_1StepLock(HSEM, CFG_HW_ENTRY_STOP_MODE_SEMID)) {		// Lock the Stop mode entry semaphore
 80080be:	2104      	movs	r1, #4
 80080c0:	483d      	ldr	r0, [pc, #244]	; (80081b8 <_ZN6BleApp14EnterSleepModeEv+0x134>)
 80080c2:	f7ff fbe1 	bl	8007888 <LL_HSEM_1StepLock>
 80080c6:	4603      	mov	r3, r0
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	bf0c      	ite	eq
 80080cc:	2301      	moveq	r3, #1
 80080ce:	2300      	movne	r3, #0
 80080d0:	b2db      	uxtb	r3, r3
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d016      	beq.n	8008104 <_ZN6BleApp14EnterSleepModeEv+0x80>
		if (LL_PWR_IsActiveFlag_C2DS() || LL_PWR_IsActiveFlag_C2SB()) {	// PWR->EXTSCR: C2DS = CPU2 in deep sleep; C2SBF = System has been in Shutdown mode
 80080d6:	f7ff fbc3 	bl	8007860 <LL_PWR_IsActiveFlag_C2DS>
 80080da:	4603      	mov	r3, r0
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d104      	bne.n	80080ea <_ZN6BleApp14EnterSleepModeEv+0x66>
 80080e0:	f7ff fbaa 	bl	8007838 <LL_PWR_IsActiveFlag_C2SB>
 80080e4:	4603      	mov	r3, r0
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d001      	beq.n	80080ee <_ZN6BleApp14EnterSleepModeEv+0x6a>
 80080ea:	2301      	movs	r3, #1
 80080ec:	e000      	b.n	80080f0 <_ZN6BleApp14EnterSleepModeEv+0x6c>
 80080ee:	2300      	movs	r3, #0
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d009      	beq.n	8008108 <_ZN6BleApp14EnterSleepModeEv+0x84>
			LL_HSEM_ReleaseLock(HSEM, CFG_HW_ENTRY_STOP_MODE_SEMID, 0);	// Release ENTRY_STOP_MODE semaphore
 80080f4:	2200      	movs	r2, #0
 80080f6:	2104      	movs	r1, #4
 80080f8:	482f      	ldr	r0, [pc, #188]	; (80081b8 <_ZN6BleApp14EnterSleepModeEv+0x134>)
 80080fa:	f7ff fbdd 	bl	80078b8 <LL_HSEM_ReleaseLock>
			SwitchToHSI();
 80080fe:	f7ff ffa1 	bl	8008044 <_ZL11SwitchToHSIv>
 8008102:	e001      	b.n	8008108 <_ZN6BleApp14EnterSleepModeEv+0x84>
		}
	} else {
		SwitchToHSI();
 8008104:	f7ff ff9e 	bl	8008044 <_ZL11SwitchToHSIv>
	}

	LL_HSEM_ReleaseLock(HSEM, CFG_HW_RCC_SEMID, 0);						// Release RCC semaphore
 8008108:	2200      	movs	r2, #0
 800810a:	2103      	movs	r1, #3
 800810c:	482a      	ldr	r0, [pc, #168]	; (80081b8 <_ZN6BleApp14EnterSleepModeEv+0x134>)
 800810e:	f7ff fbd3 	bl	80078b8 <LL_HSEM_ReleaseLock>

	// See p153 for LP modes entry and wake up
	RCC->CFGR |= RCC_CFGR_STOPWUCK;										// HSI16 selected as wakeup from stop clock and CSS backup clock
 8008112:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008116:	689b      	ldr	r3, [r3, #8]
 8008118:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800811c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008120:	6093      	str	r3, [r2, #8]
	SCB->SCR |= SCB_SCR_SLEEPDEEP_Msk;									// SLEEPDEEP must be set for STOP, STANDBY or SHUTDOWN modes
 8008122:	4b26      	ldr	r3, [pc, #152]	; (80081bc <_ZN6BleApp14EnterSleepModeEv+0x138>)
 8008124:	691b      	ldr	r3, [r3, #16]
 8008126:	4a25      	ldr	r2, [pc, #148]	; (80081bc <_ZN6BleApp14EnterSleepModeEv+0x138>)
 8008128:	f043 0304 	orr.w	r3, r3, #4
 800812c:	6113      	str	r3, [r2, #16]

	if (bleApp.lowPowerMode == LowPowerMode::Stop) {
 800812e:	4b24      	ldr	r3, [pc, #144]	; (80081c0 <_ZN6BleApp14EnterSleepModeEv+0x13c>)
 8008130:	689b      	ldr	r3, [r3, #8]
 8008132:	2b00      	cmp	r3, #0
 8008134:	d108      	bne.n	8008148 <_ZN6BleApp14EnterSleepModeEv+0xc4>
		MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, LL_PWR_MODE_STOP1);			// CPU1: 000: Stop0 mode, 001: Stop1 mode, 010: Stop2 mode, 011: Standby mode, 1xx: Shutdown mode
 8008136:	4b23      	ldr	r3, [pc, #140]	; (80081c4 <_ZN6BleApp14EnterSleepModeEv+0x140>)
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	f023 0307 	bic.w	r3, r3, #7
 800813e:	4a21      	ldr	r2, [pc, #132]	; (80081c4 <_ZN6BleApp14EnterSleepModeEv+0x140>)
 8008140:	f043 0301 	orr.w	r3, r3, #1
 8008144:	6013      	str	r3, [r2, #0]
 8008146:	e021      	b.n	800818c <_ZN6BleApp14EnterSleepModeEv+0x108>
		//MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, LL_PWR_MODE_STANDBY);	// CPU2 low power mode: note this doesn't do anything in most cases as CPU2
	} else {
		MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, LL_PWR_MODE_SHUTDOWN);
 8008148:	4b1e      	ldr	r3, [pc, #120]	; (80081c4 <_ZN6BleApp14EnterSleepModeEv+0x140>)
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	f023 0307 	bic.w	r3, r3, #7
 8008150:	4a1c      	ldr	r2, [pc, #112]	; (80081c4 <_ZN6BleApp14EnterSleepModeEv+0x140>)
 8008152:	f043 0304 	orr.w	r3, r3, #4
 8008156:	6013      	str	r3, [r2, #0]
		MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, LL_PWR_MODE_SHUTDOWN);
 8008158:	4b1a      	ldr	r3, [pc, #104]	; (80081c4 <_ZN6BleApp14EnterSleepModeEv+0x140>)
 800815a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800815e:	f023 0307 	bic.w	r3, r3, #7
 8008162:	4a18      	ldr	r2, [pc, #96]	; (80081c4 <_ZN6BleApp14EnterSleepModeEv+0x140>)
 8008164:	f043 0304 	orr.w	r3, r3, #4
 8008168:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

		EXTI->C2IMR2 = 0;												// Clear all wake up interrupts on CPU2
 800816c:	4b16      	ldr	r3, [pc, #88]	; (80081c8 <_ZN6BleApp14EnterSleepModeEv+0x144>)
 800816e:	2200      	movs	r2, #0
 8008170:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
		for (int x = 0; x < 1000000; ++x) {								// Force a delay as otherwise something was using 4mA
 8008174:	2300      	movs	r3, #0
 8008176:	617b      	str	r3, [r7, #20]
 8008178:	e004      	b.n	8008184 <_ZN6BleApp14EnterSleepModeEv+0x100>
			__attribute__((unused)) volatile int y = 1;
 800817a:	2301      	movs	r3, #1
 800817c:	607b      	str	r3, [r7, #4]
		for (int x = 0; x < 1000000; ++x) {								// Force a delay as otherwise something was using 4mA
 800817e:	697b      	ldr	r3, [r7, #20]
 8008180:	3301      	adds	r3, #1
 8008182:	617b      	str	r3, [r7, #20]
 8008184:	697b      	ldr	r3, [r7, #20]
 8008186:	4a11      	ldr	r2, [pc, #68]	; (80081cc <_ZN6BleApp14EnterSleepModeEv+0x148>)
 8008188:	4293      	cmp	r3, r2
 800818a:	ddf6      	ble.n	800817a <_ZN6BleApp14EnterSleepModeEv+0xf6>
		}
	}

	PWR->SCR |= PWR_SCR_CWUF;											// Clear all wake up flags
 800818c:	4b0d      	ldr	r3, [pc, #52]	; (80081c4 <_ZN6BleApp14EnterSleepModeEv+0x140>)
 800818e:	699b      	ldr	r3, [r3, #24]
 8008190:	4a0c      	ldr	r2, [pc, #48]	; (80081c4 <_ZN6BleApp14EnterSleepModeEv+0x140>)
 8008192:	f043 0309 	orr.w	r3, r3, #9
 8008196:	6193      	str	r3, [r2, #24]
 8008198:	693b      	ldr	r3, [r7, #16]
 800819a:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800819c:	68bb      	ldr	r3, [r7, #8]
 800819e:	f383 8810 	msr	PRIMASK, r3
}
 80081a2:	bf00      	nop
	__set_PRIMASK(primask_bit);											// Re-enable interrupts for exiting sleep mode
	__WFI();															// Activates sleep (wait for interrupts)
 80081a4:	bf30      	wfi

	bleApp.WakeFromSleep();
 80081a6:	4806      	ldr	r0, [pc, #24]	; (80081c0 <_ZN6BleApp14EnterSleepModeEv+0x13c>)
 80081a8:	f000 f812 	bl	80081d0 <_ZN6BleApp13WakeFromSleepEv>
}
 80081ac:	bf00      	nop
 80081ae:	3718      	adds	r7, #24
 80081b0:	46bd      	mov	sp, r7
 80081b2:	bd80      	pop	{r7, pc}
 80081b4:	e000e010 	.word	0xe000e010
 80081b8:	58001400 	.word	0x58001400
 80081bc:	e000ed00 	.word	0xe000ed00
 80081c0:	20000c40 	.word	0x20000c40
 80081c4:	58000400 	.word	0x58000400
 80081c8:	58000800 	.word	0x58000800
 80081cc:	000f423f 	.word	0x000f423f

080081d0 <_ZN6BleApp13WakeFromSleepEv>:


void BleApp::WakeFromSleep()
{
 80081d0:	b580      	push	{r7, lr}
 80081d2:	b082      	sub	sp, #8
 80081d4:	af00      	add	r7, sp, #0
 80081d6:	6078      	str	r0, [r7, #4]
	// Executes on wake-up
	RCC->CR |= RCC_CR_HSEON;							// Turn on external oscillator
 80081d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80081e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80081e6:	6013      	str	r3, [r2, #0]
	while ((RCC->CR & RCC_CR_HSERDY) == 0);				// Wait till HSE is ready
 80081e8:	bf00      	nop
 80081ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	bf0c      	ite	eq
 80081f8:	2301      	moveq	r3, #1
 80081fa:	2300      	movne	r3, #0
 80081fc:	b2db      	uxtb	r3, r3
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d1f3      	bne.n	80081ea <_ZN6BleApp13WakeFromSleepEv+0x1a>
	MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, 0b10);			// 10: HSE selected as system clock
 8008202:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008206:	689b      	ldr	r3, [r3, #8]
 8008208:	f023 0303 	bic.w	r3, r3, #3
 800820c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008210:	f043 0302 	orr.w	r3, r3, #2
 8008214:	6093      	str	r3, [r2, #8]
	while ((RCC->CFGR & RCC_CFGR_SWS) == 0);			// Wait until HSE is selected
 8008216:	bf00      	nop
 8008218:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800821c:	689b      	ldr	r3, [r3, #8]
 800821e:	f003 030c 	and.w	r3, r3, #12
 8008222:	2b00      	cmp	r3, #0
 8008224:	bf0c      	ite	eq
 8008226:	2301      	moveq	r3, #1
 8008228:	2300      	movne	r3, #0
 800822a:	b2db      	uxtb	r3, r3
 800822c:	2b00      	cmp	r3, #0
 800822e:	d1f3      	bne.n	8008218 <_ZN6BleApp13WakeFromSleepEv+0x48>

	SystemCoreClockUpdate();							// Read configured clock speed into SystemCoreClock (system clock frequency)
 8008230:	f7fc f966 	bl	8004500 <SystemCoreClockUpdate>
	sleepState = SleepState::Awake;
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	2202      	movs	r2, #2
 8008238:	631a      	str	r2, [r3, #48]	; 0x30

	SysTick->CTRL |= SysTick_CTRL_TICKINT_Msk;			// Restart Systick interrupt
 800823a:	4b08      	ldr	r3, [pc, #32]	; (800825c <_ZN6BleApp13WakeFromSleepEv+0x8c>)
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	4a07      	ldr	r2, [pc, #28]	; (800825c <_ZN6BleApp13WakeFromSleepEv+0x8c>)
 8008240:	f043 0302 	orr.w	r3, r3, #2
 8008244:	6013      	str	r3, [r2, #0]

	APP_DBG_MSG("\nWaking up\n");
 8008246:	4806      	ldr	r0, [pc, #24]	; (8008260 <_ZN6BleApp13WakeFromSleepEv+0x90>)
 8008248:	f002 fab6 	bl	800a7b8 <puts>
	EnableAdvertising(ConnStatus::FastAdv);
 800824c:	2101      	movs	r1, #1
 800824e:	6878      	ldr	r0, [r7, #4]
 8008250:	f7ff fdd2 	bl	8007df8 <_ZN6BleApp17EnableAdvertisingENS_10ConnStatusE>
}
 8008254:	bf00      	nop
 8008256:	3708      	adds	r7, #8
 8008258:	46bd      	mov	sp, r7
 800825a:	bd80      	pop	{r7, pc}
 800825c:	e000e010 	.word	0xe000e010
 8008260:	0800d2e4 	.word	0x0800d2e4

08008264 <hci_notify_asynch_evt>:


void hci_notify_asynch_evt(void* pdata)
{
 8008264:	b580      	push	{r7, lr}
 8008266:	b082      	sub	sp, #8
 8008268:	af00      	add	r7, sp, #0
 800826a:	6078      	str	r0, [r7, #4]
	UTIL_SEQ_SetTask(1 << CFG_TASK_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 800826c:	2100      	movs	r1, #0
 800826e:	2020      	movs	r0, #32
 8008270:	f7fc fb06 	bl	8004880 <UTIL_SEQ_SetTask>
}
 8008274:	bf00      	nop
 8008276:	3708      	adds	r7, #8
 8008278:	46bd      	mov	sp, r7
 800827a:	bd80      	pop	{r7, pc}

0800827c <hci_cmd_resp_release>:


void hci_cmd_resp_release(uint32_t flag)
{
 800827c:	b580      	push	{r7, lr}
 800827e:	b082      	sub	sp, #8
 8008280:	af00      	add	r7, sp, #0
 8008282:	6078      	str	r0, [r7, #4]
	UTIL_SEQ_SetEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 8008284:	2001      	movs	r0, #1
 8008286:	f7fc fb67 	bl	8004958 <UTIL_SEQ_SetEvt>
}
 800828a:	bf00      	nop
 800828c:	3708      	adds	r7, #8
 800828e:	46bd      	mov	sp, r7
 8008290:	bd80      	pop	{r7, pc}

08008292 <hci_cmd_resp_wait>:


void hci_cmd_resp_wait(uint32_t timeout)
{
 8008292:	b580      	push	{r7, lr}
 8008294:	b082      	sub	sp, #8
 8008296:	af00      	add	r7, sp, #0
 8008298:	6078      	str	r0, [r7, #4]
	UTIL_SEQ_WaitEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 800829a:	2001      	movs	r0, #1
 800829c:	f7fc fb7c 	bl	8004998 <UTIL_SEQ_WaitEvt>
}
 80082a0:	bf00      	nop
 80082a2:	3708      	adds	r7, #8
 80082a4:	46bd      	mov	sp, r7
 80082a6:	bd80      	pop	{r7, pc}

080082a8 <_ZN6BleApp9UserEvtRxEPv>:


void BleApp::UserEvtRx(void* pPayload)
{
 80082a8:	b580      	push	{r7, lr}
 80082aa:	b084      	sub	sp, #16
 80082ac:	af00      	add	r7, sp, #0
 80082ae:	6078      	str	r0, [r7, #4]
	// This will first call the service handlers (hids, bas etc) which try and match on Attribute Handles.
	// If not handled will then call bleApp.ServiceControlCallback() for connection/security handling

	auto pParam = (tHCI_UserEvtRxParam*)pPayload;
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	60fb      	str	r3, [r7, #12]
	auto event_pckt = (hci_event_pckt *)&(pParam->pckt->evtserial.evt);
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	685b      	ldr	r3, [r3, #4]
 80082b8:	3309      	adds	r3, #9
 80082ba:	60bb      	str	r3, [r7, #8]

	if (event_pckt->evt == HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE) {
 80082bc:	68bb      	ldr	r3, [r7, #8]
 80082be:	781b      	ldrb	r3, [r3, #0]
 80082c0:	2bff      	cmp	r3, #255	; 0xff
 80082c2:	d10d      	bne.n	80082e0 <_ZN6BleApp9UserEvtRxEPv+0x38>
		if (hidService.EventHandler(event_pckt)) {
 80082c4:	68b9      	ldr	r1, [r7, #8]
 80082c6:	480c      	ldr	r0, [pc, #48]	; (80082f8 <_ZN6BleApp9UserEvtRxEPv+0x50>)
 80082c8:	f000 fcaa 	bl	8008c20 <_ZN10HidService12EventHandlerEP14hci_event_pckt>
 80082cc:	4603      	mov	r3, r0
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d10b      	bne.n	80082ea <_ZN6BleApp9UserEvtRxEPv+0x42>
			return;
		}
		if (basService.EventHandler(event_pckt)) {
 80082d2:	68b9      	ldr	r1, [r7, #8]
 80082d4:	4809      	ldr	r0, [pc, #36]	; (80082fc <_ZN6BleApp9UserEvtRxEPv+0x54>)
 80082d6:	f000 f9fd 	bl	80086d4 <_ZN10BasService12EventHandlerEP14hci_event_pckt>
 80082da:	4603      	mov	r3, r0
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d106      	bne.n	80082ee <_ZN6BleApp9UserEvtRxEPv+0x46>
			return;
		}
	}

	bleApp.ServiceControlCallback(event_pckt);
 80082e0:	68b9      	ldr	r1, [r7, #8]
 80082e2:	4807      	ldr	r0, [pc, #28]	; (8008300 <_ZN6BleApp9UserEvtRxEPv+0x58>)
 80082e4:	f7ff fbcc 	bl	8007a80 <_ZN6BleApp22ServiceControlCallbackEP14hci_event_pckt>
 80082e8:	e002      	b.n	80082f0 <_ZN6BleApp9UserEvtRxEPv+0x48>
			return;
 80082ea:	bf00      	nop
 80082ec:	e000      	b.n	80082f0 <_ZN6BleApp9UserEvtRxEPv+0x48>
			return;
 80082ee:	bf00      	nop
}
 80082f0:	3710      	adds	r7, #16
 80082f2:	46bd      	mov	sp, r7
 80082f4:	bd80      	pop	{r7, pc}
 80082f6:	bf00      	nop
 80082f8:	20000cbc 	.word	0x20000cbc
 80082fc:	20000ca8 	.word	0x20000ca8
 8008300:	20000c40 	.word	0x20000c40

08008304 <_ZN6BleApp12StatusNotifyE18HCI_TL_CmdStatus_t>:


// This callback is triggered at the start and end of hci_send_req() to halt all pending tasks and then resume when command complete
void BleApp::StatusNotify(HCI_TL_CmdStatus_t status)
{
 8008304:	b580      	push	{r7, lr}
 8008306:	b084      	sub	sp, #16
 8008308:	af00      	add	r7, sp, #0
 800830a:	4603      	mov	r3, r0
 800830c:	71fb      	strb	r3, [r7, #7]
	uint32_t task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 800830e:	23ff      	movs	r3, #255	; 0xff
 8008310:	60fb      	str	r3, [r7, #12]
	switch (status)	{
 8008312:	79fb      	ldrb	r3, [r7, #7]
 8008314:	2b00      	cmp	r3, #0
 8008316:	d002      	beq.n	800831e <_ZN6BleApp12StatusNotifyE18HCI_TL_CmdStatus_t+0x1a>
 8008318:	2b01      	cmp	r3, #1
 800831a:	d004      	beq.n	8008326 <_ZN6BleApp12StatusNotifyE18HCI_TL_CmdStatus_t+0x22>
	case HCI_TL_CmdAvailable:
		UTIL_SEQ_ResumeTask(task_id_list);
		break;

	default:
		break;
 800831c:	e007      	b.n	800832e <_ZN6BleApp12StatusNotifyE18HCI_TL_CmdStatus_t+0x2a>
		UTIL_SEQ_PauseTask(task_id_list);
 800831e:	68f8      	ldr	r0, [r7, #12]
 8008320:	f7fc fada 	bl	80048d8 <UTIL_SEQ_PauseTask>
		break;
 8008324:	e003      	b.n	800832e <_ZN6BleApp12StatusNotifyE18HCI_TL_CmdStatus_t+0x2a>
		UTIL_SEQ_ResumeTask(task_id_list);
 8008326:	68f8      	ldr	r0, [r7, #12]
 8008328:	f7fc faf6 	bl	8004918 <UTIL_SEQ_ResumeTask>
		break;
 800832c:	bf00      	nop
	}
}
 800832e:	bf00      	nop
 8008330:	3710      	adds	r7, #16
 8008332:	46bd      	mov	sp, r7
 8008334:	bd80      	pop	{r7, pc}
	...

08008338 <_Z41__static_initialization_and_destruction_0ii>:


void SVCCTL_ResumeUserEventFlow(void)
{
	hci_resume_flow();
}
 8008338:	b580      	push	{r7, lr}
 800833a:	b082      	sub	sp, #8
 800833c:	af00      	add	r7, sp, #0
 800833e:	6078      	str	r0, [r7, #4]
 8008340:	6039      	str	r1, [r7, #0]
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	2b01      	cmp	r3, #1
 8008346:	d107      	bne.n	8008358 <_Z41__static_initialization_and_destruction_0ii+0x20>
 8008348:	683b      	ldr	r3, [r7, #0]
 800834a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800834e:	4293      	cmp	r3, r2
 8008350:	d102      	bne.n	8008358 <_Z41__static_initialization_and_destruction_0ii+0x20>
BleApp bleApp;
 8008352:	4803      	ldr	r0, [pc, #12]	; (8008360 <_Z41__static_initialization_and_destruction_0ii+0x28>)
 8008354:	f7ff faf0 	bl	8007938 <_ZN6BleAppC1Ev>
}
 8008358:	bf00      	nop
 800835a:	3708      	adds	r7, #8
 800835c:	46bd      	mov	sp, r7
 800835e:	bd80      	pop	{r7, pc}
 8008360:	20000c40 	.word	0x20000c40

08008364 <_GLOBAL__sub_I_bleApp>:
 8008364:	b580      	push	{r7, lr}
 8008366:	af00      	add	r7, sp, #0
 8008368:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800836c:	2001      	movs	r0, #1
 800836e:	f7ff ffe3 	bl	8008338 <_Z41__static_initialization_and_destruction_0ii>
 8008372:	bd80      	pop	{r7, pc}

08008374 <_Z9APPE_Initv>:
static void APPE_SysStatusNotify(SHCI_TL_CmdStatus_t status);
static void APPE_SysUserEvtRx(void* pPayload);


void APPE_Init()
{
 8008374:	b580      	push	{r7, lr}
 8008376:	b088      	sub	sp, #32
 8008378:	af00      	add	r7, sp, #0
	// normally configured in HAL set up
	hrtc.Instance = RTC;
 800837a:	4b18      	ldr	r3, [pc, #96]	; (80083dc <_Z9APPE_Initv+0x68>)
 800837c:	4a18      	ldr	r2, [pc, #96]	; (80083e0 <_Z9APPE_Initv+0x6c>)
 800837e:	601a      	str	r2, [r3, #0]
	hrtc.State = HAL_RTC_STATE_READY;
 8008380:	4b16      	ldr	r3, [pc, #88]	; (80083dc <_Z9APPE_Initv+0x68>)
 8008382:	2201      	movs	r2, #1
 8008384:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

	HW_TS_Init(hw_ts_InitMode_Full, &hrtc); 	// Initialize the TimerServer
 8008388:	4914      	ldr	r1, [pc, #80]	; (80083dc <_Z9APPE_Initv+0x68>)
 800838a:	2000      	movs	r0, #0
 800838c:	f7fb fd1e 	bl	8003dcc <HW_TS_Init>


	// Initialize transport layers
	TL_Init();	// Reference table initialization
 8008390:	f7fa fbcc 	bl	8002b2c <TL_Init>

	// System channel initialization
	UTIL_SEQ_RegTask(1 << CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, shci_user_evt_proc);
 8008394:	4a13      	ldr	r2, [pc, #76]	; (80083e4 <_Z9APPE_Initv+0x70>)
 8008396:	2100      	movs	r1, #0
 8008398:	f44f 7080 	mov.w	r0, #256	; 0x100
 800839c:	f7fc fa4e 	bl	800483c <UTIL_SEQ_RegTask>
	SHCI_TL_HciInitConf_t SHci_Tl_Init_Conf;
	SHci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&SystemCmdBuffer;
 80083a0:	4b11      	ldr	r3, [pc, #68]	; (80083e8 <_Z9APPE_Initv+0x74>)
 80083a2:	61bb      	str	r3, [r7, #24]
	SHci_Tl_Init_Conf.StatusNotCallBack = APPE_SysStatusNotify;
 80083a4:	4b11      	ldr	r3, [pc, #68]	; (80083ec <_Z9APPE_Initv+0x78>)
 80083a6:	61fb      	str	r3, [r7, #28]
	shci_init(APPE_SysUserEvtRx, (void*) &SHci_Tl_Init_Conf);
 80083a8:	f107 0318 	add.w	r3, r7, #24
 80083ac:	4619      	mov	r1, r3
 80083ae:	4810      	ldr	r0, [pc, #64]	; (80083f0 <_Z9APPE_Initv+0x7c>)
 80083b0:	f7fa fa84 	bl	80028bc <shci_init>

	// Memory Manager channel initialization
	TL_MM_Config_t tl_mm_config;
	tl_mm_config.p_BleSpareEvtBuffer = BleSpareEvtBuffer;
 80083b4:	4b0f      	ldr	r3, [pc, #60]	; (80083f4 <_Z9APPE_Initv+0x80>)
 80083b6:	603b      	str	r3, [r7, #0]
	tl_mm_config.p_SystemSpareEvtBuffer = SystemSpareEvtBuffer;
 80083b8:	4b0f      	ldr	r3, [pc, #60]	; (80083f8 <_Z9APPE_Initv+0x84>)
 80083ba:	607b      	str	r3, [r7, #4]
	tl_mm_config.p_AsynchEvtPool = EvtPool;
 80083bc:	4b0f      	ldr	r3, [pc, #60]	; (80083fc <_Z9APPE_Initv+0x88>)
 80083be:	60bb      	str	r3, [r7, #8]
	tl_mm_config.AsynchEvtPoolSize = POOL_SIZE;
 80083c0:	f240 533c 	movw	r3, #1340	; 0x53c
 80083c4:	60fb      	str	r3, [r7, #12]
	TL_MM_Init(&tl_mm_config);
 80083c6:	463b      	mov	r3, r7
 80083c8:	4618      	mov	r0, r3
 80083ca:	f7fa fcf1 	bl	8002db0 <TL_MM_Init>

	HW_IPCC_Enable();
 80083ce:	f7fb f821 	bl	8003414 <HW_IPCC_Enable>

	// From now, the application is waiting for the ready event (VS_HCI_C2_Ready) received on the system channel before starting the Stack
	// This system event is received with APPE_SysUserEvtRx()
}
 80083d2:	bf00      	nop
 80083d4:	3720      	adds	r7, #32
 80083d6:	46bd      	mov	sp, r7
 80083d8:	bd80      	pop	{r7, pc}
 80083da:	bf00      	nop
 80083dc:	20000c84 	.word	0x20000c84
 80083e0:	40002800 	.word	0x40002800
 80083e4:	080028f5 	.word	0x080028f5
 80083e8:	20030730 	.word	0x20030730
 80083ec:	08008401 	.word	0x08008401
 80083f0:	08008419 	.word	0x08008419
 80083f4:	20030948 	.word	0x20030948
 80083f8:	2003083c 	.word	0x2003083c
 80083fc:	200301f4 	.word	0x200301f4

08008400 <_ZL20APPE_SysStatusNotify19SHCI_TL_CmdStatus_t>:
	return;
}


static void APPE_SysStatusNotify(SHCI_TL_CmdStatus_t status)
{
 8008400:	b480      	push	{r7}
 8008402:	b083      	sub	sp, #12
 8008404:	af00      	add	r7, sp, #0
 8008406:	4603      	mov	r3, r0
 8008408:	71fb      	strb	r3, [r7, #7]
	UNUSED(status);
	return;
 800840a:	bf00      	nop
}
 800840c:	370c      	adds	r7, #12
 800840e:	46bd      	mov	sp, r7
 8008410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008414:	4770      	bx	lr
	...

08008418 <_ZL17APPE_SysUserEvtRxPv>:
 * The buffer shall not be released
 * (eg ((tSHCI_UserEvtRxParam*)pPayload)->status shall be set to SHCI_TL_UserEventFlow_Disable)
 * When the status is not filled, the buffer is released by default
 */
static void APPE_SysUserEvtRx(void* pPayload)
{
 8008418:	b580      	push	{r7, lr}
 800841a:	b082      	sub	sp, #8
 800841c:	af00      	add	r7, sp, #0
 800841e:	6078      	str	r0, [r7, #4]
	bleApp.Init();
 8008420:	4803      	ldr	r0, [pc, #12]	; (8008430 <_ZL17APPE_SysUserEvtRxPv+0x18>)
 8008422:	f7ff fab9 	bl	8007998 <_ZN6BleApp4InitEv>
}
 8008426:	bf00      	nop
 8008428:	3708      	adds	r7, #8
 800842a:	46bd      	mov	sp, r7
 800842c:	bd80      	pop	{r7, pc}
 800842e:	bf00      	nop
 8008430:	20000c40 	.word	0x20000c40

08008434 <_Z15RunPendingTasksv>:


void RunPendingTasks(void)
{
 8008434:	b580      	push	{r7, lr}
 8008436:	af00      	add	r7, sp, #0
	UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 8008438:	f04f 30ff 	mov.w	r0, #4294967295
 800843c:	f7fc f902 	bl	8004644 <UTIL_SEQ_Run>
}
 8008440:	bf00      	nop
 8008442:	bd80      	pop	{r7, pc}

08008444 <UTIL_SEQ_Idle>:


void UTIL_SEQ_Idle()
{
 8008444:	b580      	push	{r7, lr}
 8008446:	af00      	add	r7, sp, #0
	extern bool sleep;
	if (sleep) {
 8008448:	4b06      	ldr	r3, [pc, #24]	; (8008464 <UTIL_SEQ_Idle+0x20>)
 800844a:	781b      	ldrb	r3, [r3, #0]
 800844c:	2b00      	cmp	r3, #0
 800844e:	d006      	beq.n	800845e <UTIL_SEQ_Idle+0x1a>
		sleep = false;
 8008450:	4b04      	ldr	r3, [pc, #16]	; (8008464 <UTIL_SEQ_Idle+0x20>)
 8008452:	2200      	movs	r2, #0
 8008454:	701a      	strb	r2, [r3, #0]
		UTIL_SEQ_SetTask(1 << CFG_TASK_GoToSleep, CFG_SCH_PRIO_0);
 8008456:	2100      	movs	r1, #0
 8008458:	2008      	movs	r0, #8
 800845a:	f7fc fa11 	bl	8004880 <UTIL_SEQ_SetTask>
	}
}
 800845e:	bf00      	nop
 8008460:	bd80      	pop	{r7, pc}
 8008462:	bf00      	nop
 8008464:	20000cd8 	.word	0x20000cd8

08008468 <UTIL_SEQ_EvtIdle>:


// This function is called by the scheduler each time an event is pending.
void UTIL_SEQ_EvtIdle(UTIL_SEQ_bm_t task_id_bm, UTIL_SEQ_bm_t evt_waited_bm)
{
 8008468:	b580      	push	{r7, lr}
 800846a:	b082      	sub	sp, #8
 800846c:	af00      	add	r7, sp, #0
 800846e:	6078      	str	r0, [r7, #4]
 8008470:	6039      	str	r1, [r7, #0]
	UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 8008472:	f04f 30ff 	mov.w	r0, #4294967295
 8008476:	f7fc f8e5 	bl	8004644 <UTIL_SEQ_Run>
}
 800847a:	bf00      	nop
 800847c:	3708      	adds	r7, #8
 800847e:	46bd      	mov	sp, r7
 8008480:	bd80      	pop	{r7, pc}

08008482 <shci_notify_asynch_evt>:


void shci_notify_asynch_evt(void* pdata)
{
 8008482:	b580      	push	{r7, lr}
 8008484:	b082      	sub	sp, #8
 8008486:	af00      	add	r7, sp, #0
 8008488:	6078      	str	r0, [r7, #4]
	UTIL_SEQ_SetTask(1 << CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 800848a:	2100      	movs	r1, #0
 800848c:	f44f 7080 	mov.w	r0, #256	; 0x100
 8008490:	f7fc f9f6 	bl	8004880 <UTIL_SEQ_SetTask>
}
 8008494:	bf00      	nop
 8008496:	3708      	adds	r7, #8
 8008498:	46bd      	mov	sp, r7
 800849a:	bd80      	pop	{r7, pc}

0800849c <shci_cmd_resp_release>:


void shci_cmd_resp_release(uint32_t flag)
{
 800849c:	b580      	push	{r7, lr}
 800849e:	b082      	sub	sp, #8
 80084a0:	af00      	add	r7, sp, #0
 80084a2:	6078      	str	r0, [r7, #4]
	UTIL_SEQ_SetEvt(1 << CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 80084a4:	2002      	movs	r0, #2
 80084a6:	f7fc fa57 	bl	8004958 <UTIL_SEQ_SetEvt>
}
 80084aa:	bf00      	nop
 80084ac:	3708      	adds	r7, #8
 80084ae:	46bd      	mov	sp, r7
 80084b0:	bd80      	pop	{r7, pc}

080084b2 <shci_cmd_resp_wait>:


void shci_cmd_resp_wait(uint32_t timeout)
{
 80084b2:	b580      	push	{r7, lr}
 80084b4:	b082      	sub	sp, #8
 80084b6:	af00      	add	r7, sp, #0
 80084b8:	6078      	str	r0, [r7, #4]
	UTIL_SEQ_WaitEvt(1 << CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 80084ba:	2002      	movs	r0, #2
 80084bc:	f7fc fa6c 	bl	8004998 <UTIL_SEQ_WaitEvt>
}
 80084c0:	bf00      	nop
 80084c2:	3708      	adds	r7, #8
 80084c4:	46bd      	mov	sp, r7
 80084c6:	bd80      	pop	{r7, pc}

080084c8 <_ZN10BasServiceC1Ev>:
#pragma once

#include "tl.h"

struct BasService {
 80084c8:	b480      	push	{r7}
 80084ca:	b083      	sub	sp, #12
 80084cc:	af00      	add	r7, sp, #0
 80084ce:	6078      	str	r0, [r7, #4]
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	2200      	movs	r2, #0
 80084d4:	609a      	str	r2, [r3, #8]
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	2200      	movs	r2, #0
 80084da:	60da      	str	r2, [r3, #12]
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	4618      	mov	r0, r3
 80084e0:	370c      	adds	r7, #12
 80084e2:	46bd      	mov	sp, r7
 80084e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084e8:	4770      	bx	lr
	...

080084ec <_ZN10BasService4InitEv>:
#include <algorithm>

BasService basService;

void BasService::Init()
{
 80084ec:	b580      	push	{r7, lr}
 80084ee:	b08a      	sub	sp, #40	; 0x28
 80084f0:	af06      	add	r7, sp, #24
 80084f2:	6078      	str	r0, [r7, #4]
	uint16_t uuid;
	tBleStatus hciCmdResult = BLE_STATUS_SUCCESS;
 80084f4:	2300      	movs	r3, #0
 80084f6:	73fb      	strb	r3, [r7, #15]

	uuid = BATTERY_SERVICE_UUID;
 80084f8:	f641 030f 	movw	r3, #6159	; 0x180f
 80084fc:	81bb      	strh	r3, [r7, #12]
	hciCmdResult = aci_gatt_add_service(UUID_TYPE_16,
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	3302      	adds	r3, #2
 8008502:	f107 010c 	add.w	r1, r7, #12
 8008506:	9300      	str	r3, [sp, #0]
 8008508:	2304      	movs	r3, #4
 800850a:	2201      	movs	r2, #1
 800850c:	2001      	movs	r0, #1
 800850e:	f7f9 f934 	bl	800177a <aci_gatt_add_service>
 8008512:	4603      	mov	r3, r0
 8008514:	73fb      	strb	r3, [r7, #15]
			(Service_UUID_t*)&uuid,
			PRIMARY_SERVICE,
			4,										// Max_Attribute_Records
			&(serviceHandle));
	APP_DBG_MSG("- BAS: Registered BAS Service handle: 0x%X\n", serviceHandle);
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	885b      	ldrh	r3, [r3, #2]
 800851a:	4619      	mov	r1, r3
 800851c:	4818      	ldr	r0, [pc, #96]	; (8008580 <_ZN10BasService4InitEv+0x94>)
 800851e:	f002 f8e5 	bl	800a6ec <iprintf>

	uuid = BATTERY_LEVEL_CHAR_UUID;
 8008522:	f642 2319 	movw	r3, #10777	; 0x2a19
 8008526:	81bb      	strh	r3, [r7, #12]
	hciCmdResult = aci_gatt_add_char(serviceHandle,
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	8858      	ldrh	r0, [r3, #2]
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	3304      	adds	r3, #4
 8008530:	f107 020c 	add.w	r2, r7, #12
 8008534:	9305      	str	r3, [sp, #20]
 8008536:	2300      	movs	r3, #0
 8008538:	9304      	str	r3, [sp, #16]
 800853a:	230a      	movs	r3, #10
 800853c:	9303      	str	r3, [sp, #12]
 800853e:	2304      	movs	r3, #4
 8008540:	9302      	str	r3, [sp, #8]
 8008542:	2300      	movs	r3, #0
 8008544:	9301      	str	r3, [sp, #4]
 8008546:	2312      	movs	r3, #18
 8008548:	9300      	str	r3, [sp, #0]
 800854a:	2304      	movs	r3, #4
 800854c:	2101      	movs	r1, #1
 800854e:	f7f9 f9ea 	bl	8001926 <aci_gatt_add_char>
 8008552:	4603      	mov	r3, r0
 8008554:	73fb      	strb	r3, [r7, #15]
			ATTR_PERMISSION_NONE,
			GATT_NOTIFY_READ_REQ_AND_WAIT_FOR_APPL_RESP,
			10, 									// encryKeySize
			CHAR_VALUE_LEN_CONSTANT,
			&(batteryLevelHandle));
	APP_DBG_MSG("- BAS: Registered Battery Level characteristic handle: 0x%X\n", batteryLevelHandle);
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	889b      	ldrh	r3, [r3, #4]
 800855a:	4619      	mov	r1, r3
 800855c:	4809      	ldr	r0, [pc, #36]	; (8008584 <_ZN10BasService4InitEv+0x98>)
 800855e:	f002 f8c5 	bl	800a6ec <iprintf>

	if (hciCmdResult != BLE_STATUS_SUCCESS) {
 8008562:	7bfb      	ldrb	r3, [r7, #15]
 8008564:	2b00      	cmp	r3, #0
 8008566:	d004      	beq.n	8008572 <_ZN10BasService4InitEv+0x86>
		APP_DBG_MSG("- BAS: Error registering characteristics: 0x%X\n", hciCmdResult);
 8008568:	7bfb      	ldrb	r3, [r7, #15]
 800856a:	4619      	mov	r1, r3
 800856c:	4806      	ldr	r0, [pc, #24]	; (8008588 <_ZN10BasService4InitEv+0x9c>)
 800856e:	f002 f8bd 	bl	800a6ec <iprintf>
	}
	AppInit();
 8008572:	6878      	ldr	r0, [r7, #4]
 8008574:	f000 f80a 	bl	800858c <_ZN10BasService7AppInitEv>
}
 8008578:	bf00      	nop
 800857a:	3710      	adds	r7, #16
 800857c:	46bd      	mov	sp, r7
 800857e:	bd80      	pop	{r7, pc}
 8008580:	0800d2f0 	.word	0x0800d2f0
 8008584:	0800d31c 	.word	0x0800d31c
 8008588:	0800d35c 	.word	0x0800d35c

0800858c <_ZN10BasService7AppInitEv>:


void BasService::AppInit()
{
 800858c:	b580      	push	{r7, lr}
 800858e:	b082      	sub	sp, #8
 8008590:	af00      	add	r7, sp, #0
 8008592:	6078      	str	r0, [r7, #4]
	batteryNotifications = false;
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	2200      	movs	r2, #0
 8008598:	719a      	strb	r2, [r3, #6]
	GetBatteryLevel();
 800859a:	6878      	ldr	r0, [r7, #4]
 800859c:	f000 f820 	bl	80085e0 <_ZN10BasService15GetBatteryLevelEv>

	// Use the sequencer to update the report char so that to avoid write conflicts
	UTIL_SEQ_RegTask(1 << CFG_TASK_BatteryNotification, 0, UpdateBatteryChar);
 80085a0:	4a05      	ldr	r2, [pc, #20]	; (80085b8 <_ZN10BasService7AppInitEv+0x2c>)
 80085a2:	2100      	movs	r1, #0
 80085a4:	2080      	movs	r0, #128	; 0x80
 80085a6:	f7fc f949 	bl	800483c <UTIL_SEQ_RegTask>
	UpdateBatteryChar();
 80085aa:	f000 f807 	bl	80085bc <_ZN10BasService17UpdateBatteryCharEv>
}
 80085ae:	bf00      	nop
 80085b0:	3708      	adds	r7, #8
 80085b2:	46bd      	mov	sp, r7
 80085b4:	bd80      	pop	{r7, pc}
 80085b6:	bf00      	nop
 80085b8:	080085bd 	.word	0x080085bd

080085bc <_ZN10BasService17UpdateBatteryCharEv>:


void BasService::UpdateBatteryChar()
{
 80085bc:	b580      	push	{r7, lr}
 80085be:	b082      	sub	sp, #8
 80085c0:	af02      	add	r7, sp, #8
	// Will trigger a notification to be sent if client is subscribed (called from sequencer)
	aci_gatt_update_char_value(
 80085c2:	4b06      	ldr	r3, [pc, #24]	; (80085dc <_ZN10BasService17UpdateBatteryCharEv+0x20>)
 80085c4:	8858      	ldrh	r0, [r3, #2]
 80085c6:	4b05      	ldr	r3, [pc, #20]	; (80085dc <_ZN10BasService17UpdateBatteryCharEv+0x20>)
 80085c8:	8899      	ldrh	r1, [r3, #4]
 80085ca:	4b04      	ldr	r3, [pc, #16]	; (80085dc <_ZN10BasService17UpdateBatteryCharEv+0x20>)
 80085cc:	9300      	str	r3, [sp, #0]
 80085ce:	2302      	movs	r3, #2
 80085d0:	2200      	movs	r2, #0
 80085d2:	f7f9 fbf8 	bl	8001dc6 <aci_gatt_update_char_value>
			basService.serviceHandle,
			basService.batteryLevelHandle,
			0,
			2,													// Size of battery report
			(uint8_t*)&basService.Level);
}
 80085d6:	bf00      	nop
 80085d8:	46bd      	mov	sp, r7
 80085da:	bd80      	pop	{r7, pc}
 80085dc:	20000ca8 	.word	0x20000ca8

080085e0 <_ZN10BasService15GetBatteryLevelEv>:


float BasService::GetBatteryLevel()
{
 80085e0:	b580      	push	{r7, lr}
 80085e2:	b086      	sub	sp, #24
 80085e4:	af00      	add	r7, sp, #0
 80085e6:	6078      	str	r0, [r7, #4]
	// Get Battery level as voltage
	// voltage divider scales 5V > 2.9V (charging); 4.3V > 2.46V (Fully charged); 3.2V > 1.85V (battery lowest usable level)
	// ADC 4096 / 2.8V = 1462; calculated to scale by 1.73 (values corrected by measurement)

	float voltage = (static_cast<float>(2000) / 1381.0f) * 1.73f;
 80085e8:	4b17      	ldr	r3, [pc, #92]	; (8008648 <_ZN10BasService15GetBatteryLevelEv+0x68>)
 80085ea:	617b      	str	r3, [r7, #20]
	Level = static_cast<uint8_t>(std::clamp((voltage - 3.2f) * 91.0f, 0.0f, 100.0f));		// convert voltage to 0 - 100 range for 1.8V - 4.3V
 80085ec:	edd7 7a05 	vldr	s15, [r7, #20]
 80085f0:	ed9f 7a16 	vldr	s14, [pc, #88]	; 800864c <_ZN10BasService15GetBatteryLevelEv+0x6c>
 80085f4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80085f8:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8008650 <_ZN10BasService15GetBatteryLevelEv+0x70>
 80085fc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008600:	edc7 7a02 	vstr	s15, [r7, #8]
 8008604:	f04f 0300 	mov.w	r3, #0
 8008608:	60fb      	str	r3, [r7, #12]
 800860a:	4b12      	ldr	r3, [pc, #72]	; (8008654 <_ZN10BasService15GetBatteryLevelEv+0x74>)
 800860c:	613b      	str	r3, [r7, #16]
 800860e:	f107 0210 	add.w	r2, r7, #16
 8008612:	f107 010c 	add.w	r1, r7, #12
 8008616:	f107 0308 	add.w	r3, r7, #8
 800861a:	4618      	mov	r0, r3
 800861c:	f000 f8a7 	bl	800876e <_ZSt5clampIfERKT_S2_S2_S2_>
 8008620:	4603      	mov	r3, r0
 8008622:	edd3 7a00 	vldr	s15, [r3]
 8008626:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800862a:	edc7 7a00 	vstr	s15, [r7]
 800862e:	783b      	ldrb	r3, [r7, #0]
 8008630:	b2db      	uxtb	r3, r3
 8008632:	b29a      	uxth	r2, r3
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	801a      	strh	r2, [r3, #0]
	return voltage;
 8008638:	697b      	ldr	r3, [r7, #20]
 800863a:	ee07 3a90 	vmov	s15, r3
}
 800863e:	eeb0 0a67 	vmov.f32	s0, s15
 8008642:	3718      	adds	r7, #24
 8008644:	46bd      	mov	sp, r7
 8008646:	bd80      	pop	{r7, pc}
 8008648:	402058fb 	.word	0x402058fb
 800864c:	404ccccd 	.word	0x404ccccd
 8008650:	42b60000 	.word	0x42b60000
 8008654:	42c80000 	.word	0x42c80000

08008658 <_ZN10BasService9TimedReadEv>:


void BasService::TimedRead()
{
 8008658:	b580      	push	{r7, lr}
 800865a:	b084      	sub	sp, #16
 800865c:	af00      	add	r7, sp, #0
 800865e:	6078      	str	r0, [r7, #4]
	// Called in main loop - checks battery level every 5 seconds and updates characteristic if required
	if (lastRead + 5000 < SysTickVal) {
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	689b      	ldr	r3, [r3, #8]
 8008664:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 8008668:	3308      	adds	r3, #8
 800866a:	4a19      	ldr	r2, [pc, #100]	; (80086d0 <_ZN10BasService9TimedReadEv+0x78>)
 800866c:	6812      	ldr	r2, [r2, #0]
 800866e:	4293      	cmp	r3, r2
 8008670:	bf34      	ite	cc
 8008672:	2301      	movcc	r3, #1
 8008674:	2300      	movcs	r3, #0
 8008676:	b2db      	uxtb	r3, r3
 8008678:	2b00      	cmp	r3, #0
 800867a:	d025      	beq.n	80086c8 <_ZN10BasService9TimedReadEv+0x70>
		lastRead = SysTickVal;
 800867c:	4b14      	ldr	r3, [pc, #80]	; (80086d0 <_ZN10BasService9TimedReadEv+0x78>)
 800867e:	681a      	ldr	r2, [r3, #0]
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	609a      	str	r2, [r3, #8]

		uint8_t oldLevel = Level;
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	881b      	ldrh	r3, [r3, #0]
 8008688:	73fb      	strb	r3, [r7, #15]
		GetBatteryLevel();
 800868a:	6878      	ldr	r0, [r7, #4]
 800868c:	f7ff ffa8 	bl	80085e0 <_ZN10BasService15GetBatteryLevelEv>

		if (Level != oldLevel || lastSent + 10000 < SysTickVal) {				// FIXME - force a resend of battery every 10 seconds (make longer in production)
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	881a      	ldrh	r2, [r3, #0]
 8008694:	7bfb      	ldrb	r3, [r7, #15]
 8008696:	b29b      	uxth	r3, r3
 8008698:	429a      	cmp	r2, r3
 800869a:	d108      	bne.n	80086ae <_ZN10BasService9TimedReadEv+0x56>
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	68db      	ldr	r3, [r3, #12]
 80086a0:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 80086a4:	3310      	adds	r3, #16
 80086a6:	4a0a      	ldr	r2, [pc, #40]	; (80086d0 <_ZN10BasService9TimedReadEv+0x78>)
 80086a8:	6812      	ldr	r2, [r2, #0]
 80086aa:	4293      	cmp	r3, r2
 80086ac:	d201      	bcs.n	80086b2 <_ZN10BasService9TimedReadEv+0x5a>
 80086ae:	2301      	movs	r3, #1
 80086b0:	e000      	b.n	80086b4 <_ZN10BasService9TimedReadEv+0x5c>
 80086b2:	2300      	movs	r3, #0
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d007      	beq.n	80086c8 <_ZN10BasService9TimedReadEv+0x70>
			UTIL_SEQ_SetTask(1 << CFG_TASK_BatteryNotification, CFG_SCH_PRIO_0);
 80086b8:	2100      	movs	r1, #0
 80086ba:	2080      	movs	r0, #128	; 0x80
 80086bc:	f7fc f8e0 	bl	8004880 <UTIL_SEQ_SetTask>
			lastSent = SysTickVal;
 80086c0:	4b03      	ldr	r3, [pc, #12]	; (80086d0 <_ZN10BasService9TimedReadEv+0x78>)
 80086c2:	681a      	ldr	r2, [r3, #0]
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	60da      	str	r2, [r3, #12]
		}

		//ADC1->CR |= ADC_CR_ADSTART;			// Trigger next ADC read
	}
}
 80086c8:	bf00      	nop
 80086ca:	3710      	adds	r7, #16
 80086cc:	46bd      	mov	sp, r7
 80086ce:	bd80      	pop	{r7, pc}
 80086d0:	20000cdc 	.word	0x20000cdc

080086d4 <_ZN10BasService12EventHandlerEP14hci_event_pckt>:


bool BasService::EventHandler(hci_event_pckt* event_pckt)
{
 80086d4:	b580      	push	{r7, lr}
 80086d6:	b086      	sub	sp, #24
 80086d8:	af00      	add	r7, sp, #0
 80086da:	6078      	str	r0, [r7, #4]
 80086dc:	6039      	str	r1, [r7, #0]
	bool handled = false;
 80086de:	2300      	movs	r3, #0
 80086e0:	75fb      	strb	r3, [r7, #23]

	evt_blecore_aci* blecore_evt = (evt_blecore_aci*)event_pckt->data;
 80086e2:	683b      	ldr	r3, [r7, #0]
 80086e4:	3302      	adds	r3, #2
 80086e6:	613b      	str	r3, [r7, #16]

	switch (blecore_evt->ecode) {
 80086e8:	693b      	ldr	r3, [r7, #16]
 80086ea:	881b      	ldrh	r3, [r3, #0]
 80086ec:	b29b      	uxth	r3, r3
 80086ee:	f640 4201 	movw	r2, #3073	; 0xc01
 80086f2:	4293      	cmp	r3, r2
 80086f4:	d004      	beq.n	8008700 <_ZN10BasService12EventHandlerEP14hci_event_pckt+0x2c>
 80086f6:	f640 4214 	movw	r2, #3092	; 0xc14
 80086fa:	4293      	cmp	r3, r2
 80086fc:	d01a      	beq.n	8008734 <_ZN10BasService12EventHandlerEP14hci_event_pckt+0x60>
		}
		break;
	}

	default:
		break;
 80086fe:	e031      	b.n	8008764 <_ZN10BasService12EventHandlerEP14hci_event_pckt+0x90>
		auto attribute_modified = (aci_gatt_attribute_modified_event_rp0*)blecore_evt->data;
 8008700:	693b      	ldr	r3, [r7, #16]
 8008702:	3302      	adds	r3, #2
 8008704:	60bb      	str	r3, [r7, #8]
		if (attribute_modified->Attr_Handle == (batteryLevelHandle + 2)) {		// 2 = Offset of descriptor from characteristic handle
 8008706:	68bb      	ldr	r3, [r7, #8]
 8008708:	885b      	ldrh	r3, [r3, #2]
 800870a:	b29b      	uxth	r3, r3
 800870c:	461a      	mov	r2, r3
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	889b      	ldrh	r3, [r3, #4]
 8008712:	3302      	adds	r3, #2
 8008714:	429a      	cmp	r2, r3
 8008716:	d122      	bne.n	800875e <_ZN10BasService12EventHandlerEP14hci_event_pckt+0x8a>
			handled = true;
 8008718:	2301      	movs	r3, #1
 800871a:	75fb      	strb	r3, [r7, #23]
			if (attribute_modified->Attr_Data[0] == 1) {
 800871c:	68bb      	ldr	r3, [r7, #8]
 800871e:	7a1b      	ldrb	r3, [r3, #8]
 8008720:	2b01      	cmp	r3, #1
 8008722:	d103      	bne.n	800872c <_ZN10BasService12EventHandlerEP14hci_event_pckt+0x58>
				batteryNotifications = true;
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	2201      	movs	r2, #1
 8008728:	719a      	strb	r2, [r3, #6]
		break;
 800872a:	e018      	b.n	800875e <_ZN10BasService12EventHandlerEP14hci_event_pckt+0x8a>
				batteryNotifications = false;
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	2200      	movs	r2, #0
 8008730:	719a      	strb	r2, [r3, #6]
		break;
 8008732:	e014      	b.n	800875e <_ZN10BasService12EventHandlerEP14hci_event_pckt+0x8a>
		auto read_req = (aci_gatt_read_permit_req_event_rp0*)blecore_evt->data;
 8008734:	693b      	ldr	r3, [r7, #16]
 8008736:	3302      	adds	r3, #2
 8008738:	60fb      	str	r3, [r7, #12]
		if (read_req->Attribute_Handle == (batteryLevelHandle + 1)) {		// 1 = Offset of value from characteristic handle
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	885b      	ldrh	r3, [r3, #2]
 800873e:	b29b      	uxth	r3, r3
 8008740:	461a      	mov	r2, r3
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	889b      	ldrh	r3, [r3, #4]
 8008746:	3301      	adds	r3, #1
 8008748:	429a      	cmp	r2, r3
 800874a:	d10a      	bne.n	8008762 <_ZN10BasService12EventHandlerEP14hci_event_pckt+0x8e>
			handled = true;
 800874c:	2301      	movs	r3, #1
 800874e:	75fb      	strb	r3, [r7, #23]
			aci_gatt_allow_read(read_req->Connection_Handle);
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	881b      	ldrh	r3, [r3, #0]
 8008754:	b29b      	uxth	r3, r3
 8008756:	4618      	mov	r0, r3
 8008758:	f7f9 fbde 	bl	8001f18 <aci_gatt_allow_read>
		break;
 800875c:	e001      	b.n	8008762 <_ZN10BasService12EventHandlerEP14hci_event_pckt+0x8e>
		break;
 800875e:	bf00      	nop
 8008760:	e000      	b.n	8008764 <_ZN10BasService12EventHandlerEP14hci_event_pckt+0x90>
		break;
 8008762:	bf00      	nop
	}

	return handled;
 8008764:	7dfb      	ldrb	r3, [r7, #23]
}
 8008766:	4618      	mov	r0, r3
 8008768:	3718      	adds	r7, #24
 800876a:	46bd      	mov	sp, r7
 800876c:	bd80      	pop	{r7, pc}

0800876e <_ZSt5clampIfERKT_S2_S2_S2_>:
   *  @param  __hi   An upper limit of arbitrary type.
   *  @return max(__val, __lo) if __val < __hi or min(__val, __hi) otherwise.
   */
  template<typename _Tp>
    constexpr const _Tp&
    clamp(const _Tp& __val, const _Tp& __lo, const _Tp& __hi)
 800876e:	b480      	push	{r7}
 8008770:	b085      	sub	sp, #20
 8008772:	af00      	add	r7, sp, #0
 8008774:	60f8      	str	r0, [r7, #12]
 8008776:	60b9      	str	r1, [r7, #8]
 8008778:	607a      	str	r2, [r7, #4]
    {
      __glibcxx_assert(!(__hi < __lo));
      return (__val < __lo) ? __lo : (__hi < __val) ? __hi : __val;
 800877a:	68fb      	ldr	r3, [r7, #12]
 800877c:	ed93 7a00 	vldr	s14, [r3]
 8008780:	68bb      	ldr	r3, [r7, #8]
 8008782:	edd3 7a00 	vldr	s15, [r3]
 8008786:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800878a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800878e:	d501      	bpl.n	8008794 <_ZSt5clampIfERKT_S2_S2_S2_+0x26>
 8008790:	68bb      	ldr	r3, [r7, #8]
 8008792:	e00d      	b.n	80087b0 <_ZSt5clampIfERKT_S2_S2_S2_+0x42>
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	ed93 7a00 	vldr	s14, [r3]
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	edd3 7a00 	vldr	s15, [r3]
 80087a0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80087a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80087a8:	d501      	bpl.n	80087ae <_ZSt5clampIfERKT_S2_S2_S2_+0x40>
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	e000      	b.n	80087b0 <_ZSt5clampIfERKT_S2_S2_S2_+0x42>
 80087ae:	68fb      	ldr	r3, [r7, #12]
    }
 80087b0:	4618      	mov	r0, r3
 80087b2:	3714      	adds	r7, #20
 80087b4:	46bd      	mov	sp, r7
 80087b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ba:	4770      	bx	lr

080087bc <_Z41__static_initialization_and_destruction_0ii>:
 80087bc:	b580      	push	{r7, lr}
 80087be:	b082      	sub	sp, #8
 80087c0:	af00      	add	r7, sp, #0
 80087c2:	6078      	str	r0, [r7, #4]
 80087c4:	6039      	str	r1, [r7, #0]
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	2b01      	cmp	r3, #1
 80087ca:	d107      	bne.n	80087dc <_Z41__static_initialization_and_destruction_0ii+0x20>
 80087cc:	683b      	ldr	r3, [r7, #0]
 80087ce:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80087d2:	4293      	cmp	r3, r2
 80087d4:	d102      	bne.n	80087dc <_Z41__static_initialization_and_destruction_0ii+0x20>
BasService basService;
 80087d6:	4803      	ldr	r0, [pc, #12]	; (80087e4 <_Z41__static_initialization_and_destruction_0ii+0x28>)
 80087d8:	f7ff fe76 	bl	80084c8 <_ZN10BasServiceC1Ev>
}
 80087dc:	bf00      	nop
 80087de:	3708      	adds	r7, #8
 80087e0:	46bd      	mov	sp, r7
 80087e2:	bd80      	pop	{r7, pc}
 80087e4:	20000ca8 	.word	0x20000ca8

080087e8 <_GLOBAL__sub_I_basService>:
 80087e8:	b580      	push	{r7, lr}
 80087ea:	af00      	add	r7, sp, #0
 80087ec:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80087f0:	2001      	movs	r0, #1
 80087f2:	f7ff ffe3 	bl	80087bc <_Z41__static_initialization_and_destruction_0ii>
 80087f6:	bd80      	pop	{r7, pc}

080087f8 <_ZN10DisService4InitEv>:
#include "dis_app.h"

DisService disService;

void DisService::Init()
{
 80087f8:	b580      	push	{r7, lr}
 80087fa:	b08a      	sub	sp, #40	; 0x28
 80087fc:	af06      	add	r7, sp, #24
 80087fe:	6078      	str	r0, [r7, #4]
	uint16_t uuid = DEVICE_INFORMATION_SERVICE_UUID;
 8008800:	f641 030a 	movw	r3, #6154	; 0x180a
 8008804:	81bb      	strh	r3, [r7, #12]
	tBleStatus hciCmdResult = aci_gatt_add_service(UUID_TYPE_16,
 8008806:	f107 010c 	add.w	r1, r7, #12
 800880a:	4b14      	ldr	r3, [pc, #80]	; (800885c <_ZN10DisService4InitEv+0x64>)
 800880c:	9300      	str	r3, [sp, #0]
 800880e:	2303      	movs	r3, #3
 8008810:	2201      	movs	r2, #1
 8008812:	2001      	movs	r0, #1
 8008814:	f7f8 ffb1 	bl	800177a <aci_gatt_add_service>
 8008818:	4603      	mov	r3, r0
 800881a:	73fb      	strb	r3, [r7, #15]
	} else {
		BLE_DBG_DIS_MSG ("FAILED to add Device Information Service (DIS), Error: %02X\n", hciCmdResult);
	}

	// Add Manufacturer Name String Characteristic
	uuid = MANUFACTURER_NAME_UUID;
 800881c:	f642 2329 	movw	r3, #10793	; 0x2a29
 8008820:	81bb      	strh	r3, [r7, #12]
	hciCmdResult = aci_gatt_add_char(disService.DevInfoSvcHdle,
 8008822:	4b0e      	ldr	r3, [pc, #56]	; (800885c <_ZN10DisService4InitEv+0x64>)
 8008824:	8818      	ldrh	r0, [r3, #0]
 8008826:	f107 020c 	add.w	r2, r7, #12
 800882a:	4b0d      	ldr	r3, [pc, #52]	; (8008860 <_ZN10DisService4InitEv+0x68>)
 800882c:	9305      	str	r3, [sp, #20]
 800882e:	2301      	movs	r3, #1
 8008830:	9304      	str	r3, [sp, #16]
 8008832:	230a      	movs	r3, #10
 8008834:	9303      	str	r3, [sp, #12]
 8008836:	2300      	movs	r3, #0
 8008838:	9302      	str	r3, [sp, #8]
 800883a:	2300      	movs	r3, #0
 800883c:	9301      	str	r3, [sp, #4]
 800883e:	2302      	movs	r3, #2
 8008840:	9300      	str	r3, [sp, #0]
 8008842:	2320      	movs	r3, #32
 8008844:	2101      	movs	r1, #1
 8008846:	f7f9 f86e 	bl	8001926 <aci_gatt_add_char>
 800884a:	4603      	mov	r3, r0
 800884c:	73fb      	strb	r3, [r7, #15]
		BLE_DBG_DIS_MSG ("- DIS: Registered Manufacturer Name Characteristic handle: 0x%X \n", disService.ManufacturerNameStringCharHdle);
	} else {
		BLE_DBG_DIS_MSG ("FAILED to add Manufacturer Name Characteristic, Error: %02X !!\n", hciCmdResult);
	}

	AppInit();
 800884e:	6878      	ldr	r0, [r7, #4]
 8008850:	f000 f808 	bl	8008864 <_ZN10DisService7AppInitEv>
}
 8008854:	bf00      	nop
 8008856:	3710      	adds	r7, #16
 8008858:	46bd      	mov	sp, r7
 800885a:	bd80      	pop	{r7, pc}
 800885c:	20000cb8 	.word	0x20000cb8
 8008860:	20000cba 	.word	0x20000cba

08008864 <_ZN10DisService7AppInitEv>:

void DisService::AppInit()
{
 8008864:	b580      	push	{r7, lr}
 8008866:	b084      	sub	sp, #16
 8008868:	af02      	add	r7, sp, #8
 800886a:	6078      	str	r0, [r7, #4]
	aci_gatt_update_char_value(disService.DevInfoSvcHdle, disService.ManufacturerNameStringCharHdle, 0, 8, DIS_Name);
 800886c:	4b06      	ldr	r3, [pc, #24]	; (8008888 <_ZN10DisService7AppInitEv+0x24>)
 800886e:	8818      	ldrh	r0, [r3, #0]
 8008870:	4b05      	ldr	r3, [pc, #20]	; (8008888 <_ZN10DisService7AppInitEv+0x24>)
 8008872:	8859      	ldrh	r1, [r3, #2]
 8008874:	4b05      	ldr	r3, [pc, #20]	; (800888c <_ZN10DisService7AppInitEv+0x28>)
 8008876:	9300      	str	r3, [sp, #0]
 8008878:	2308      	movs	r3, #8
 800887a:	2200      	movs	r2, #0
 800887c:	f7f9 faa3 	bl	8001dc6 <aci_gatt_update_char_value>
}
 8008880:	bf00      	nop
 8008882:	3708      	adds	r7, #8
 8008884:	46bd      	mov	sp, r7
 8008886:	bd80      	pop	{r7, pc}
 8008888:	20000cb8 	.word	0x20000cb8
 800888c:	0800d6b0 	.word	0x0800d6b0

08008890 <_ZN10HidService14HIDInformationC1Ev>:
	enum Characteristic {ReportMap, HidInformation, ReportJoystick};
	enum CharOffset {ValueOffset = 1, DescriptorOffset = 2};

	static constexpr uint16_t JoystickReportID {0x0101};	// First Byte: Input Report (0x01) | Second Byte: Report ID (0x1 ... 0x03)

	const struct HIDInformation {
 8008890:	b480      	push	{r7}
 8008892:	b083      	sub	sp, #12
 8008894:	af00      	add	r7, sp, #0
 8008896:	6078      	str	r0, [r7, #4]
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	f240 1201 	movw	r2, #257	; 0x101
 800889e:	801a      	strh	r2, [r3, #0]
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	2200      	movs	r2, #0
 80088a4:	709a      	strb	r2, [r3, #2]
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	2203      	movs	r2, #3
 80088aa:	70da      	strb	r2, [r3, #3]
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	4618      	mov	r0, r3
 80088b0:	370c      	adds	r7, #12
 80088b2:	46bd      	mov	sp, r7
 80088b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088b8:	4770      	bx	lr

080088ba <_ZN10HidServiceC1Ev>:
struct HidService
 80088ba:	b580      	push	{r7, lr}
 80088bc:	b082      	sub	sp, #8
 80088be:	af00      	add	r7, sp, #0
 80088c0:	6078      	str	r0, [r7, #4]
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	2200      	movs	r2, #0
 80088c6:	705a      	strb	r2, [r3, #1]
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	3302      	adds	r3, #2
 80088cc:	4618      	mov	r0, r3
 80088ce:	f7ff ffdf 	bl	8008890 <_ZN10HidService14HIDInformationC1Ev>
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	4618      	mov	r0, r3
 80088d6:	3708      	adds	r7, #8
 80088d8:	46bd      	mov	sp, r7
 80088da:	bd80      	pop	{r7, pc}

080088dc <_ZN10HidService4InitEv>:
#include "stm32_seq.h"

HidService hidService;

void HidService::Init()
{
 80088dc:	b580      	push	{r7, lr}
 80088de:	b08e      	sub	sp, #56	; 0x38
 80088e0:	af0a      	add	r7, sp, #40	; 0x28
 80088e2:	6078      	str	r0, [r7, #4]
	uint16_t uuid;
	tBleStatus hciCmdResult = BLE_STATUS_SUCCESS;
 80088e4:	2300      	movs	r3, #0
 80088e6:	73fb      	strb	r3, [r7, #15]

	uuid = HUMAN_INTERFACE_DEVICE_SERVICE_UUID;
 80088e8:	f641 0312 	movw	r3, #6162	; 0x1812
 80088ec:	81bb      	strh	r3, [r7, #12]
	hciCmdResult = aci_gatt_add_service(UUID_TYPE_16,
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	330c      	adds	r3, #12
 80088f2:	f107 010c 	add.w	r1, r7, #12
 80088f6:	9300      	str	r3, [sp, #0]
 80088f8:	230c      	movs	r3, #12
 80088fa:	2201      	movs	r2, #1
 80088fc:	2001      	movs	r0, #1
 80088fe:	f7f8 ff3c 	bl	800177a <aci_gatt_add_service>
 8008902:	4603      	mov	r3, r0
 8008904:	73fb      	strb	r3, [r7, #15]
			(Service_UUID_t*) &uuid,
			PRIMARY_SERVICE,
			12,							// Max_Attribute_Records
			&(ServiceHandle));
	APP_DBG_MSG("- HIDS: Registered HID Service handle: 0x%X\n", ServiceHandle);
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	899b      	ldrh	r3, [r3, #12]
 800890a:	4619      	mov	r1, r3
 800890c:	485c      	ldr	r0, [pc, #368]	; (8008a80 <_ZN10HidService4InitEv+0x1a4>)
 800890e:	f001 feed 	bl	800a6ec <iprintf>

	// To inform the device that the host is entering or leaving suspend state
	uuid = HID_CONTROL_POINT_CHAR_UUID;
 8008912:	f642 234c 	movw	r3, #10828	; 0x2a4c
 8008916:	81bb      	strh	r3, [r7, #12]
	hciCmdResult = aci_gatt_add_char(ServiceHandle,
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	8998      	ldrh	r0, [r3, #12]
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	3314      	adds	r3, #20
 8008920:	f107 020c 	add.w	r2, r7, #12
 8008924:	9305      	str	r3, [sp, #20]
 8008926:	2300      	movs	r3, #0
 8008928:	9304      	str	r3, [sp, #16]
 800892a:	230a      	movs	r3, #10
 800892c:	9303      	str	r3, [sp, #12]
 800892e:	2303      	movs	r3, #3
 8008930:	9302      	str	r3, [sp, #8]
 8008932:	2300      	movs	r3, #0
 8008934:	9301      	str	r3, [sp, #4]
 8008936:	2304      	movs	r3, #4
 8008938:	9300      	str	r3, [sp, #0]
 800893a:	2302      	movs	r3, #2
 800893c:	2101      	movs	r1, #1
 800893e:	f7f8 fff2 	bl	8001926 <aci_gatt_add_char>
 8008942:	4603      	mov	r3, r0
 8008944:	73fb      	strb	r3, [r7, #15]
			ATTR_PERMISSION_NONE,
			GATT_NOTIFY_ATTRIBUTE_WRITE | GATT_NOTIFY_WRITE_REQ_AND_WAIT_FOR_APPL_RESP, // gattEvtMask
			10, 						// encryKeySize
			CHAR_VALUE_LEN_CONSTANT, 	// isVariable
			&(HidControlPointHdle));
	APP_DBG_MSG("- HIDS: Registered Control Point handle: 0x%X\n", HidControlPointHdle);
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	8a9b      	ldrh	r3, [r3, #20]
 800894a:	4619      	mov	r1, r3
 800894c:	484d      	ldr	r0, [pc, #308]	; (8008a84 <_ZN10HidService4InitEv+0x1a8>)
 800894e:	f001 fecd 	bl	800a6ec <iprintf>

	uuid = HID_INFORMATION_CHAR_UUID;
 8008952:	f642 234a 	movw	r3, #10826	; 0x2a4a
 8008956:	81bb      	strh	r3, [r7, #12]
	hciCmdResult = aci_gatt_add_char(ServiceHandle,
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	8998      	ldrh	r0, [r3, #12]
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	3312      	adds	r3, #18
 8008960:	f107 020c 	add.w	r2, r7, #12
 8008964:	9305      	str	r3, [sp, #20]
 8008966:	2300      	movs	r3, #0
 8008968:	9304      	str	r3, [sp, #16]
 800896a:	230a      	movs	r3, #10
 800896c:	9303      	str	r3, [sp, #12]
 800896e:	2304      	movs	r3, #4
 8008970:	9302      	str	r3, [sp, #8]
 8008972:	2300      	movs	r3, #0
 8008974:	9301      	str	r3, [sp, #4]
 8008976:	2302      	movs	r3, #2
 8008978:	9300      	str	r3, [sp, #0]
 800897a:	2304      	movs	r3, #4
 800897c:	2101      	movs	r1, #1
 800897e:	f7f8 ffd2 	bl	8001926 <aci_gatt_add_char>
 8008982:	4603      	mov	r3, r0
 8008984:	73fb      	strb	r3, [r7, #15]
			ATTR_PERMISSION_NONE,
			GATT_NOTIFY_READ_REQ_AND_WAIT_FOR_APPL_RESP,
			10, 						// encryKeySize
			CHAR_VALUE_LEN_CONSTANT, 	// isVariable
			&(HidInformationHandle));
	APP_DBG_MSG("- HIDS: Registered HID Information characteristic handle: 0x%X\n", HidInformationHandle);
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	8a5b      	ldrh	r3, [r3, #18]
 800898a:	4619      	mov	r1, r3
 800898c:	483e      	ldr	r0, [pc, #248]	; (8008a88 <_ZN10HidService4InitEv+0x1ac>)
 800898e:	f001 fead 	bl	800a6ec <iprintf>


	uuid = REPORT_MAP_CHAR_UUID;
 8008992:	f642 234b 	movw	r3, #10827	; 0x2a4b
 8008996:	81bb      	strh	r3, [r7, #12]
	hciCmdResult = aci_gatt_add_char(ServiceHandle,
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	8998      	ldrh	r0, [r3, #12]
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	3316      	adds	r3, #22
 80089a0:	f107 020c 	add.w	r2, r7, #12
 80089a4:	9305      	str	r3, [sp, #20]
 80089a6:	2301      	movs	r3, #1
 80089a8:	9304      	str	r3, [sp, #16]
 80089aa:	230a      	movs	r3, #10
 80089ac:	9303      	str	r3, [sp, #12]
 80089ae:	2304      	movs	r3, #4
 80089b0:	9302      	str	r3, [sp, #8]
 80089b2:	2300      	movs	r3, #0
 80089b4:	9301      	str	r3, [sp, #4]
 80089b6:	2302      	movs	r3, #2
 80089b8:	9300      	str	r3, [sp, #0]
 80089ba:	2320      	movs	r3, #32
 80089bc:	2101      	movs	r1, #1
 80089be:	f7f8 ffb2 	bl	8001926 <aci_gatt_add_char>
 80089c2:	4603      	mov	r3, r0
 80089c4:	73fb      	strb	r3, [r7, #15]
			ATTR_PERMISSION_NONE,
			GATT_NOTIFY_READ_REQ_AND_WAIT_FOR_APPL_RESP,
			10, 							// encryKeySize
			CHAR_VALUE_LEN_VARIABLE,
			&(ReportMapHandle));
	APP_DBG_MSG("- HIDS: Registered Report Map characteristic handle: 0x%X\n", ReportMapHandle);
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	8adb      	ldrh	r3, [r3, #22]
 80089ca:	4619      	mov	r1, r3
 80089cc:	482f      	ldr	r0, [pc, #188]	; (8008a8c <_ZN10HidService4InitEv+0x1b0>)
 80089ce:	f001 fe8d 	bl	800a6ec <iprintf>

	uuid = REPORT_CHAR_UUID;
 80089d2:	f642 234d 	movw	r3, #10829	; 0x2a4d
 80089d6:	81bb      	strh	r3, [r7, #12]
	hciCmdResult = aci_gatt_add_char(ServiceHandle,
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	8998      	ldrh	r0, [r3, #12]
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	330e      	adds	r3, #14
 80089e0:	f107 020c 	add.w	r2, r7, #12
 80089e4:	9305      	str	r3, [sp, #20]
 80089e6:	2300      	movs	r3, #0
 80089e8:	9304      	str	r3, [sp, #16]
 80089ea:	230a      	movs	r3, #10
 80089ec:	9303      	str	r3, [sp, #12]
 80089ee:	2307      	movs	r3, #7
 80089f0:	9302      	str	r3, [sp, #8]
 80089f2:	2300      	movs	r3, #0
 80089f4:	9301      	str	r3, [sp, #4]
 80089f6:	231a      	movs	r3, #26
 80089f8:	9300      	str	r3, [sp, #0]
 80089fa:	2306      	movs	r3, #6
 80089fc:	2101      	movs	r1, #1
 80089fe:	f7f8 ff92 	bl	8001926 <aci_gatt_add_char>
 8008a02:	4603      	mov	r3, r0
 8008a04:	73fb      	strb	r3, [r7, #15]
			ATTR_PERMISSION_NONE,
			GATT_NOTIFY_ATTRIBUTE_WRITE | GATT_NOTIFY_WRITE_REQ_AND_WAIT_FOR_APPL_RESP | GATT_NOTIFY_READ_REQ_AND_WAIT_FOR_APPL_RESP,
			10, 							// encryKeySize
			CHAR_VALUE_LEN_CONSTANT,
			&(ReportJoystickHandle));
	APP_DBG_MSG("- HIDS: Registered Report characteristic handle: 0x%X\n", ReportJoystickHandle);
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	89db      	ldrh	r3, [r3, #14]
 8008a0a:	4619      	mov	r1, r3
 8008a0c:	4820      	ldr	r0, [pc, #128]	; (8008a90 <_ZN10HidService4InitEv+0x1b4>)
 8008a0e:	f001 fe6d 	bl	800a6ec <iprintf>

	// Add char descriptor for each report
	uuid = REPORT_REFERENCE_DESCRIPTOR_UUID;
 8008a12:	f642 1308 	movw	r3, #10504	; 0x2908
 8008a16:	81bb      	strh	r3, [r7, #12]
	hciCmdResult = aci_gatt_add_char_desc(ServiceHandle,
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	8998      	ldrh	r0, [r3, #12]
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	89d9      	ldrh	r1, [r3, #14]
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	3310      	adds	r3, #16
 8008a24:	f107 020c 	add.w	r2, r7, #12
 8008a28:	9308      	str	r3, [sp, #32]
 8008a2a:	2300      	movs	r3, #0
 8008a2c:	9307      	str	r3, [sp, #28]
 8008a2e:	230a      	movs	r3, #10
 8008a30:	9306      	str	r3, [sp, #24]
 8008a32:	2300      	movs	r3, #0
 8008a34:	9305      	str	r3, [sp, #20]
 8008a36:	2301      	movs	r3, #1
 8008a38:	9304      	str	r3, [sp, #16]
 8008a3a:	2300      	movs	r3, #0
 8008a3c:	9303      	str	r3, [sp, #12]
 8008a3e:	4b15      	ldr	r3, [pc, #84]	; (8008a94 <_ZN10HidService4InitEv+0x1b8>)
 8008a40:	9302      	str	r3, [sp, #8]
 8008a42:	2302      	movs	r3, #2
 8008a44:	9301      	str	r3, [sp, #4]
 8008a46:	2302      	movs	r3, #2
 8008a48:	9300      	str	r3, [sp, #0]
 8008a4a:	4613      	mov	r3, r2
 8008a4c:	2201      	movs	r2, #1
 8008a4e:	f7f9 f872 	bl	8001b36 <aci_gatt_add_char_desc>
 8008a52:	4603      	mov	r3, r0
 8008a54:	73fb      	strb	r3, [r7, #15]
			ATTR_ACCESS_READ_ONLY,
			GATT_DONT_NOTIFY_EVENTS,
			10,
			CHAR_VALUE_LEN_CONSTANT,
			&ReportJoystickRefDescHandle);
	APP_DBG_MSG("- HIDS: Registered Report Reference Descriptor handle: 0x%X\n", ReportJoystickRefDescHandle);
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	8a1b      	ldrh	r3, [r3, #16]
 8008a5a:	4619      	mov	r1, r3
 8008a5c:	480e      	ldr	r0, [pc, #56]	; (8008a98 <_ZN10HidService4InitEv+0x1bc>)
 8008a5e:	f001 fe45 	bl	800a6ec <iprintf>

	if (hciCmdResult != BLE_STATUS_SUCCESS) {
 8008a62:	7bfb      	ldrb	r3, [r7, #15]
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	d004      	beq.n	8008a72 <_ZN10HidService4InitEv+0x196>
		APP_DBG_MSG("-- HIDS APPLICATION : Error registering characteristics: 0x%X\n", hciCmdResult);
 8008a68:	7bfb      	ldrb	r3, [r7, #15]
 8008a6a:	4619      	mov	r1, r3
 8008a6c:	480b      	ldr	r0, [pc, #44]	; (8008a9c <_ZN10HidService4InitEv+0x1c0>)
 8008a6e:	f001 fe3d 	bl	800a6ec <iprintf>
	}

	AppInit();
 8008a72:	6878      	ldr	r0, [r7, #4]
 8008a74:	f000 f814 	bl	8008aa0 <_ZN10HidService7AppInitEv>
}
 8008a78:	bf00      	nop
 8008a7a:	3710      	adds	r7, #16
 8008a7c:	46bd      	mov	sp, r7
 8008a7e:	bd80      	pop	{r7, pc}
 8008a80:	0800d38c 	.word	0x0800d38c
 8008a84:	0800d3bc 	.word	0x0800d3bc
 8008a88:	0800d3ec 	.word	0x0800d3ec
 8008a8c:	0800d42c 	.word	0x0800d42c
 8008a90:	0800d468 	.word	0x0800d468
 8008a94:	0800d6ba 	.word	0x0800d6ba
 8008a98:	0800d4a0 	.word	0x0800d4a0
 8008a9c:	0800d4e0 	.word	0x0800d4e0

08008aa0 <_ZN10HidService7AppInitEv>:


void HidService::AppInit()
{
 8008aa0:	b580      	push	{r7, lr}
 8008aa2:	b082      	sub	sp, #8
 8008aa4:	af00      	add	r7, sp, #0
 8008aa6:	6078      	str	r0, [r7, #4]
	JoystickNotifications = false;
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	2200      	movs	r2, #0
 8008aac:	701a      	strb	r2, [r3, #0]

	UpdateReportMapChar();
 8008aae:	6878      	ldr	r0, [r7, #4]
 8008ab0:	f000 f82e 	bl	8008b10 <_ZN10HidService19UpdateReportMapCharEv>
	UpdateHidInformationChar();
 8008ab4:	6878      	ldr	r0, [r7, #4]
 8008ab6:	f000 f83f 	bl	8008b38 <_ZN10HidService24UpdateHidInformationCharEv>

	// Initialise the joystick report
	joystickReport.x = 0;
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	2200      	movs	r2, #0
 8008abe:	80da      	strh	r2, [r3, #6]
	joystickReport.y = 0;
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	2200      	movs	r2, #0
 8008ac4:	811a      	strh	r2, [r3, #8]
	joystickReport.z = 0;
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	2200      	movs	r2, #0
 8008aca:	815a      	strh	r2, [r3, #10]

	// Use the sequencer to update the report char so that to avoid write conflicts
	UTIL_SEQ_RegTask(1 << CFG_TASK_JoystickNotification, 0, UpdateJoystickReportChar);
 8008acc:	4a05      	ldr	r2, [pc, #20]	; (8008ae4 <_ZN10HidService7AppInitEv+0x44>)
 8008ace:	2100      	movs	r1, #0
 8008ad0:	2040      	movs	r0, #64	; 0x40
 8008ad2:	f7fb feb3 	bl	800483c <UTIL_SEQ_RegTask>
	UpdateJoystickReportChar();
 8008ad6:	f000 f807 	bl	8008ae8 <_ZN10HidService24UpdateJoystickReportCharEv>
}
 8008ada:	bf00      	nop
 8008adc:	3708      	adds	r7, #8
 8008ade:	46bd      	mov	sp, r7
 8008ae0:	bd80      	pop	{r7, pc}
 8008ae2:	bf00      	nop
 8008ae4:	08008ae9 	.word	0x08008ae9

08008ae8 <_ZN10HidService24UpdateJoystickReportCharEv>:


void HidService::UpdateJoystickReportChar()
{
 8008ae8:	b580      	push	{r7, lr}
 8008aea:	b082      	sub	sp, #8
 8008aec:	af02      	add	r7, sp, #8
	// Will trigger a notification to be sent if client is subscribed (called from sequencer)
	aci_gatt_update_char_value(
 8008aee:	4b06      	ldr	r3, [pc, #24]	; (8008b08 <_ZN10HidService24UpdateJoystickReportCharEv+0x20>)
 8008af0:	8998      	ldrh	r0, [r3, #12]
 8008af2:	4b05      	ldr	r3, [pc, #20]	; (8008b08 <_ZN10HidService24UpdateJoystickReportCharEv+0x20>)
 8008af4:	89d9      	ldrh	r1, [r3, #14]
 8008af6:	4b05      	ldr	r3, [pc, #20]	; (8008b0c <_ZN10HidService24UpdateJoystickReportCharEv+0x24>)
 8008af8:	9300      	str	r3, [sp, #0]
 8008afa:	2306      	movs	r3, #6
 8008afc:	2200      	movs	r2, #0
 8008afe:	f7f9 f962 	bl	8001dc6 <aci_gatt_update_char_value>
			hidService.ServiceHandle,
			hidService.ReportJoystickHandle, 0,
			sizeof(hidService.joystickReport),
			(uint8_t*)&hidService.joystickReport
			);
}
 8008b02:	bf00      	nop
 8008b04:	46bd      	mov	sp, r7
 8008b06:	bd80      	pop	{r7, pc}
 8008b08:	20000cbc 	.word	0x20000cbc
 8008b0c:	20000cc2 	.word	0x20000cc2

08008b10 <_ZN10HidService19UpdateReportMapCharEv>:


void HidService::UpdateReportMapChar()
{
 8008b10:	b580      	push	{r7, lr}
 8008b12:	b084      	sub	sp, #16
 8008b14:	af02      	add	r7, sp, #8
 8008b16:	6078      	str	r0, [r7, #4]
	aci_gatt_update_char_value(ServiceHandle, ReportMapHandle,	0, sizeof(reportMap), reportMap);
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	8998      	ldrh	r0, [r3, #12]
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	8ad9      	ldrh	r1, [r3, #22]
 8008b20:	4b04      	ldr	r3, [pc, #16]	; (8008b34 <_ZN10HidService19UpdateReportMapCharEv+0x24>)
 8008b22:	9300      	str	r3, [sp, #0]
 8008b24:	2320      	movs	r3, #32
 8008b26:	2200      	movs	r2, #0
 8008b28:	f7f9 f94d 	bl	8001dc6 <aci_gatt_update_char_value>
}
 8008b2c:	bf00      	nop
 8008b2e:	3708      	adds	r7, #8
 8008b30:	46bd      	mov	sp, r7
 8008b32:	bd80      	pop	{r7, pc}
 8008b34:	0800d6bc 	.word	0x0800d6bc

08008b38 <_ZN10HidService24UpdateHidInformationCharEv>:


void HidService::UpdateHidInformationChar()
{
 8008b38:	b580      	push	{r7, lr}
 8008b3a:	b084      	sub	sp, #16
 8008b3c:	af02      	add	r7, sp, #8
 8008b3e:	6078      	str	r0, [r7, #4]
	aci_gatt_update_char_value(ServiceHandle, ReportJoystickHandle, 0,	sizeof(joystickReport),	(uint8_t*)&joystickReport);
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	8998      	ldrh	r0, [r3, #12]
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	89d9      	ldrh	r1, [r3, #14]
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	3306      	adds	r3, #6
 8008b4c:	9300      	str	r3, [sp, #0]
 8008b4e:	2306      	movs	r3, #6
 8008b50:	2200      	movs	r2, #0
 8008b52:	f7f9 f938 	bl	8001dc6 <aci_gatt_update_char_value>
}
 8008b56:	bf00      	nop
 8008b58:	3708      	adds	r7, #8
 8008b5a:	46bd      	mov	sp, r7
 8008b5c:	bd80      	pop	{r7, pc}
	...

08008b60 <_ZN10HidService20JoystickNotificationEsss>:


void HidService::JoystickNotification(int16_t x, int16_t y, int16_t z)
{
 8008b60:	b580      	push	{r7, lr}
 8008b62:	b084      	sub	sp, #16
 8008b64:	af00      	add	r7, sp, #0
 8008b66:	60f8      	str	r0, [r7, #12]
 8008b68:	4608      	mov	r0, r1
 8008b6a:	4611      	mov	r1, r2
 8008b6c:	461a      	mov	r2, r3
 8008b6e:	4603      	mov	r3, r0
 8008b70:	817b      	strh	r3, [r7, #10]
 8008b72:	460b      	mov	r3, r1
 8008b74:	813b      	strh	r3, [r7, #8]
 8008b76:	4613      	mov	r3, r2
 8008b78:	80fb      	strh	r3, [r7, #6]
	joystickReport.x = x;
 8008b7a:	897a      	ldrh	r2, [r7, #10]
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	80da      	strh	r2, [r3, #6]
	joystickReport.y = y;
 8008b80:	893a      	ldrh	r2, [r7, #8]
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	811a      	strh	r2, [r3, #8]
	joystickReport.z = z;
 8008b86:	88fa      	ldrh	r2, [r7, #6]
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	815a      	strh	r2, [r3, #10]

	static uint32_t lastPrint = 0;

	if (outputGyro && SysTickVal - lastPrint > 300) {
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	785b      	ldrb	r3, [r3, #1]
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	d009      	beq.n	8008ba8 <_ZN10HidService20JoystickNotificationEsss+0x48>
 8008b94:	4b10      	ldr	r3, [pc, #64]	; (8008bd8 <_ZN10HidService20JoystickNotificationEsss+0x78>)
 8008b96:	681a      	ldr	r2, [r3, #0]
 8008b98:	4b10      	ldr	r3, [pc, #64]	; (8008bdc <_ZN10HidService20JoystickNotificationEsss+0x7c>)
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	1ad3      	subs	r3, r2, r3
 8008b9e:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8008ba2:	d901      	bls.n	8008ba8 <_ZN10HidService20JoystickNotificationEsss+0x48>
 8008ba4:	2301      	movs	r3, #1
 8008ba6:	e000      	b.n	8008baa <_ZN10HidService20JoystickNotificationEsss+0x4a>
 8008ba8:	2300      	movs	r3, #0
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	d00c      	beq.n	8008bc8 <_ZN10HidService20JoystickNotificationEsss+0x68>
		printf("x: %d y: %d z: %d\r\n", x, y, z);
 8008bae:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8008bb2:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8008bb6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008bba:	4809      	ldr	r0, [pc, #36]	; (8008be0 <_ZN10HidService20JoystickNotificationEsss+0x80>)
 8008bbc:	f001 fd96 	bl	800a6ec <iprintf>
		lastPrint = SysTickVal;
 8008bc0:	4b05      	ldr	r3, [pc, #20]	; (8008bd8 <_ZN10HidService20JoystickNotificationEsss+0x78>)
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	4a05      	ldr	r2, [pc, #20]	; (8008bdc <_ZN10HidService20JoystickNotificationEsss+0x7c>)
 8008bc6:	6013      	str	r3, [r2, #0]
	}

	UTIL_SEQ_SetTask(1 << CFG_TASK_JoystickNotification, CFG_SCH_PRIO_0);
 8008bc8:	2100      	movs	r1, #0
 8008bca:	2040      	movs	r0, #64	; 0x40
 8008bcc:	f7fb fe58 	bl	8004880 <UTIL_SEQ_SetTask>
}
 8008bd0:	bf00      	nop
 8008bd2:	3710      	adds	r7, #16
 8008bd4:	46bd      	mov	sp, r7
 8008bd6:	bd80      	pop	{r7, pc}
 8008bd8:	20000cdc 	.word	0x20000cdc
 8008bdc:	20000cd4 	.word	0x20000cd4
 8008be0:	0800d520 	.word	0x0800d520

08008be4 <_ZN10HidService17ControlPointWriteEt>:


void HidService::ControlPointWrite(uint16_t data) {
 8008be4:	b480      	push	{r7}
 8008be6:	b083      	sub	sp, #12
 8008be8:	af00      	add	r7, sp, #0
 8008bea:	6078      	str	r0, [r7, #4]
 8008bec:	460b      	mov	r3, r1
 8008bee:	807b      	strh	r3, [r7, #2]
	// To inform the device that the host is entering or leaving suspend state
	return;
 8008bf0:	bf00      	nop
}
 8008bf2:	370c      	adds	r7, #12
 8008bf4:	46bd      	mov	sp, r7
 8008bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bfa:	4770      	bx	lr

08008bfc <_ZN10HidService10DisconnectEv>:


void HidService::Disconnect() {
 8008bfc:	b580      	push	{r7, lr}
 8008bfe:	b082      	sub	sp, #8
 8008c00:	af00      	add	r7, sp, #0
 8008c02:	6078      	str	r0, [r7, #4]
	JoystickNotifications = false;
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	2200      	movs	r2, #0
 8008c08:	701a      	strb	r2, [r3, #0]
	gyro.ContinualRead(false);
 8008c0a:	2100      	movs	r1, #0
 8008c0c:	4803      	ldr	r0, [pc, #12]	; (8008c1c <_ZN10HidService10DisconnectEv+0x20>)
 8008c0e:	f7fd fa15 	bl	800603c <_ZN7GyroSPI13ContinualReadEb>
}
 8008c12:	bf00      	nop
 8008c14:	3708      	adds	r7, #8
 8008c16:	46bd      	mov	sp, r7
 8008c18:	bd80      	pop	{r7, pc}
 8008c1a:	bf00      	nop
 8008c1c:	200003d8 	.word	0x200003d8

08008c20 <_ZN10HidService12EventHandlerEP14hci_event_pckt>:


bool HidService::EventHandler(hci_event_pckt* event_pckt)
{
 8008c20:	b580      	push	{r7, lr}
 8008c22:	b088      	sub	sp, #32
 8008c24:	af00      	add	r7, sp, #0
 8008c26:	6078      	str	r0, [r7, #4]
 8008c28:	6039      	str	r1, [r7, #0]
	aci_gatt_attribute_modified_event_rp0* attribute_modified;
	aci_gatt_write_permit_req_event_rp0*   write_perm_req;
	aci_gatt_read_permit_req_event_rp0*    read_req;

	bool handled = false;
 8008c2a:	2300      	movs	r3, #0
 8008c2c:	77fb      	strb	r3, [r7, #31]

	evt_blecore_aci* blecore_evt = (evt_blecore_aci*)event_pckt->data;
 8008c2e:	683b      	ldr	r3, [r7, #0]
 8008c30:	3302      	adds	r3, #2
 8008c32:	61bb      	str	r3, [r7, #24]

	switch (blecore_evt->ecode) {
 8008c34:	69bb      	ldr	r3, [r7, #24]
 8008c36:	881b      	ldrh	r3, [r3, #0]
 8008c38:	b29b      	uxth	r3, r3
 8008c3a:	f6a3 4301 	subw	r3, r3, #3073	; 0xc01
 8008c3e:	2b13      	cmp	r3, #19
 8008c40:	f200 80c1 	bhi.w	8008dc6 <_ZN10HidService12EventHandlerEP14hci_event_pckt+0x1a6>
 8008c44:	a201      	add	r2, pc, #4	; (adr r2, 8008c4c <_ZN10HidService12EventHandlerEP14hci_event_pckt+0x2c>)
 8008c46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c4a:	bf00      	nop
 8008c4c:	08008c9d 	.word	0x08008c9d
 8008c50:	08008dc7 	.word	0x08008dc7
 8008c54:	08008dc7 	.word	0x08008dc7
 8008c58:	08008dc7 	.word	0x08008dc7
 8008c5c:	08008dc7 	.word	0x08008dc7
 8008c60:	08008dc7 	.word	0x08008dc7
 8008c64:	08008dc7 	.word	0x08008dc7
 8008c68:	08008dc7 	.word	0x08008dc7
 8008c6c:	08008dc7 	.word	0x08008dc7
 8008c70:	08008dc7 	.word	0x08008dc7
 8008c74:	08008dc7 	.word	0x08008dc7
 8008c78:	08008dc7 	.word	0x08008dc7
 8008c7c:	08008da1 	.word	0x08008da1
 8008c80:	08008dc7 	.word	0x08008dc7
 8008c84:	08008dc7 	.word	0x08008dc7
 8008c88:	08008dc7 	.word	0x08008dc7
 8008c8c:	08008dc7 	.word	0x08008dc7
 8008c90:	08008dc7 	.word	0x08008dc7
 8008c94:	08008da9 	.word	0x08008da9
 8008c98:	08008d15 	.word	0x08008d15

	case ACI_GATT_ATTRIBUTE_MODIFIED_VSEVT_CODE:
		attribute_modified = (aci_gatt_attribute_modified_event_rp0*)blecore_evt->data;
 8008c9c:	69bb      	ldr	r3, [r7, #24]
 8008c9e:	3302      	adds	r3, #2
 8008ca0:	60fb      	str	r3, [r7, #12]

		if (attribute_modified->Attr_Handle == (hidService.ReportJoystickHandle + DescriptorOffset)) {
 8008ca2:	68fb      	ldr	r3, [r7, #12]
 8008ca4:	885b      	ldrh	r3, [r3, #2]
 8008ca6:	b29b      	uxth	r3, r3
 8008ca8:	461a      	mov	r2, r3
 8008caa:	4b4d      	ldr	r3, [pc, #308]	; (8008de0 <_ZN10HidService12EventHandlerEP14hci_event_pckt+0x1c0>)
 8008cac:	89db      	ldrh	r3, [r3, #14]
 8008cae:	3302      	adds	r3, #2
 8008cb0:	429a      	cmp	r2, r3
 8008cb2:	d114      	bne.n	8008cde <_ZN10HidService12EventHandlerEP14hci_event_pckt+0xbe>
			handled = true;
 8008cb4:	2301      	movs	r3, #1
 8008cb6:	77fb      	strb	r3, [r7, #31]

			if (attribute_modified->Attr_Data[0] == 1) {
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	7a1b      	ldrb	r3, [r3, #8]
 8008cbc:	2b01      	cmp	r3, #1
 8008cbe:	d107      	bne.n	8008cd0 <_ZN10HidService12EventHandlerEP14hci_event_pckt+0xb0>
				hidService.JoystickNotifications = true;
 8008cc0:	4b47      	ldr	r3, [pc, #284]	; (8008de0 <_ZN10HidService12EventHandlerEP14hci_event_pckt+0x1c0>)
 8008cc2:	2201      	movs	r2, #1
 8008cc4:	701a      	strb	r2, [r3, #0]
				gyro.ContinualRead(true);
 8008cc6:	2101      	movs	r1, #1
 8008cc8:	4846      	ldr	r0, [pc, #280]	; (8008de4 <_ZN10HidService12EventHandlerEP14hci_event_pckt+0x1c4>)
 8008cca:	f7fd f9b7 	bl	800603c <_ZN7GyroSPI13ContinualReadEb>
 8008cce:	e006      	b.n	8008cde <_ZN10HidService12EventHandlerEP14hci_event_pckt+0xbe>
			} else {
				hidService.JoystickNotifications = false;
 8008cd0:	4b43      	ldr	r3, [pc, #268]	; (8008de0 <_ZN10HidService12EventHandlerEP14hci_event_pckt+0x1c0>)
 8008cd2:	2200      	movs	r2, #0
 8008cd4:	701a      	strb	r2, [r3, #0]
				gyro.ContinualRead(false);
 8008cd6:	2100      	movs	r1, #0
 8008cd8:	4842      	ldr	r0, [pc, #264]	; (8008de4 <_ZN10HidService12EventHandlerEP14hci_event_pckt+0x1c4>)
 8008cda:	f7fd f9af 	bl	800603c <_ZN7GyroSPI13ContinualReadEb>
			}
		}

		if (attribute_modified->Attr_Handle == (hidService.HidControlPointHdle + ValueOffset)) {
 8008cde:	68fb      	ldr	r3, [r7, #12]
 8008ce0:	885b      	ldrh	r3, [r3, #2]
 8008ce2:	b29b      	uxth	r3, r3
 8008ce4:	461a      	mov	r2, r3
 8008ce6:	4b3e      	ldr	r3, [pc, #248]	; (8008de0 <_ZN10HidService12EventHandlerEP14hci_event_pckt+0x1c0>)
 8008ce8:	8a9b      	ldrh	r3, [r3, #20]
 8008cea:	3301      	adds	r3, #1
 8008cec:	429a      	cmp	r2, r3
 8008cee:	d16c      	bne.n	8008dca <_ZN10HidService12EventHandlerEP14hci_event_pckt+0x1aa>
			handled = true;
 8008cf0:	2301      	movs	r3, #1
 8008cf2:	77fb      	strb	r3, [r7, #31]
			uint16_t write_data = (attribute_modified->Attr_Data[1] << 8) | attribute_modified->Attr_Data[0];
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	7a5b      	ldrb	r3, [r3, #9]
 8008cf8:	021b      	lsls	r3, r3, #8
 8008cfa:	b21a      	sxth	r2, r3
 8008cfc:	68fb      	ldr	r3, [r7, #12]
 8008cfe:	7a1b      	ldrb	r3, [r3, #8]
 8008d00:	b21b      	sxth	r3, r3
 8008d02:	4313      	orrs	r3, r2
 8008d04:	b21b      	sxth	r3, r3
 8008d06:	817b      	strh	r3, [r7, #10]
			hidService.ControlPointWrite(write_data);
 8008d08:	897b      	ldrh	r3, [r7, #10]
 8008d0a:	4619      	mov	r1, r3
 8008d0c:	4834      	ldr	r0, [pc, #208]	; (8008de0 <_ZN10HidService12EventHandlerEP14hci_event_pckt+0x1c0>)
 8008d0e:	f7ff ff69 	bl	8008be4 <_ZN10HidService17ControlPointWriteEt>
		}

		break;
 8008d12:	e05a      	b.n	8008dca <_ZN10HidService12EventHandlerEP14hci_event_pckt+0x1aa>

	case ACI_GATT_READ_PERMIT_REQ_VSEVT_CODE:
		read_req = (aci_gatt_read_permit_req_event_rp0*)blecore_evt->data;
 8008d14:	69bb      	ldr	r3, [r7, #24]
 8008d16:	3302      	adds	r3, #2
 8008d18:	617b      	str	r3, [r7, #20]

		if (read_req->Attribute_Handle == (hidService.ReportMapHandle + ValueOffset)) {
 8008d1a:	697b      	ldr	r3, [r7, #20]
 8008d1c:	885b      	ldrh	r3, [r3, #2]
 8008d1e:	b29b      	uxth	r3, r3
 8008d20:	461a      	mov	r2, r3
 8008d22:	4b2f      	ldr	r3, [pc, #188]	; (8008de0 <_ZN10HidService12EventHandlerEP14hci_event_pckt+0x1c0>)
 8008d24:	8adb      	ldrh	r3, [r3, #22]
 8008d26:	3301      	adds	r3, #1
 8008d28:	429a      	cmp	r2, r3
 8008d2a:	d107      	bne.n	8008d3c <_ZN10HidService12EventHandlerEP14hci_event_pckt+0x11c>
			handled = true;
 8008d2c:	2301      	movs	r3, #1
 8008d2e:	77fb      	strb	r3, [r7, #31]
			aci_gatt_allow_read(read_req->Connection_Handle);
 8008d30:	697b      	ldr	r3, [r7, #20]
 8008d32:	881b      	ldrh	r3, [r3, #0]
 8008d34:	b29b      	uxth	r3, r3
 8008d36:	4618      	mov	r0, r3
 8008d38:	f7f9 f8ee 	bl	8001f18 <aci_gatt_allow_read>
		}
		if (read_req->Attribute_Handle == (hidService.ReportJoystickHandle + ValueOffset)) {
 8008d3c:	697b      	ldr	r3, [r7, #20]
 8008d3e:	885b      	ldrh	r3, [r3, #2]
 8008d40:	b29b      	uxth	r3, r3
 8008d42:	461a      	mov	r2, r3
 8008d44:	4b26      	ldr	r3, [pc, #152]	; (8008de0 <_ZN10HidService12EventHandlerEP14hci_event_pckt+0x1c0>)
 8008d46:	89db      	ldrh	r3, [r3, #14]
 8008d48:	3301      	adds	r3, #1
 8008d4a:	429a      	cmp	r2, r3
 8008d4c:	d116      	bne.n	8008d7c <_ZN10HidService12EventHandlerEP14hci_event_pckt+0x15c>
			aci_gatt_allow_read(read_req->Connection_Handle);
 8008d4e:	697b      	ldr	r3, [r7, #20]
 8008d50:	881b      	ldrh	r3, [r3, #0]
 8008d52:	b29b      	uxth	r3, r3
 8008d54:	4618      	mov	r0, r3
 8008d56:	f7f9 f8df 	bl	8001f18 <aci_gatt_allow_read>
			handled = true;
 8008d5a:	2301      	movs	r3, #1
 8008d5c:	77fb      	strb	r3, [r7, #31]
			gyro.GyroRead();
 8008d5e:	4821      	ldr	r0, [pc, #132]	; (8008de4 <_ZN10HidService12EventHandlerEP14hci_event_pckt+0x1c4>)
 8008d60:	f7fd f93c 	bl	8005fdc <_ZN7GyroSPI8GyroReadEv>
			JoystickNotification(gyro.gyroData.x, gyro.gyroData.y, gyro.gyroData.z);
 8008d64:	4b1f      	ldr	r3, [pc, #124]	; (8008de4 <_ZN10HidService12EventHandlerEP14hci_event_pckt+0x1c4>)
 8008d66:	f9b3 1000 	ldrsh.w	r1, [r3]
 8008d6a:	4b1e      	ldr	r3, [pc, #120]	; (8008de4 <_ZN10HidService12EventHandlerEP14hci_event_pckt+0x1c4>)
 8008d6c:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8008d70:	4b1c      	ldr	r3, [pc, #112]	; (8008de4 <_ZN10HidService12EventHandlerEP14hci_event_pckt+0x1c4>)
 8008d72:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8008d76:	6878      	ldr	r0, [r7, #4]
 8008d78:	f7ff fef2 	bl	8008b60 <_ZN10HidService20JoystickNotificationEsss>
		}
		if (read_req->Attribute_Handle == (hidService.HidInformationHandle + ValueOffset)) {
 8008d7c:	697b      	ldr	r3, [r7, #20]
 8008d7e:	885b      	ldrh	r3, [r3, #2]
 8008d80:	b29b      	uxth	r3, r3
 8008d82:	461a      	mov	r2, r3
 8008d84:	4b16      	ldr	r3, [pc, #88]	; (8008de0 <_ZN10HidService12EventHandlerEP14hci_event_pckt+0x1c0>)
 8008d86:	8a5b      	ldrh	r3, [r3, #18]
 8008d88:	3301      	adds	r3, #1
 8008d8a:	429a      	cmp	r2, r3
 8008d8c:	d11f      	bne.n	8008dce <_ZN10HidService12EventHandlerEP14hci_event_pckt+0x1ae>
			handled = true;
 8008d8e:	2301      	movs	r3, #1
 8008d90:	77fb      	strb	r3, [r7, #31]
			aci_gatt_allow_read(read_req->Connection_Handle);
 8008d92:	697b      	ldr	r3, [r7, #20]
 8008d94:	881b      	ldrh	r3, [r3, #0]
 8008d96:	b29b      	uxth	r3, r3
 8008d98:	4618      	mov	r0, r3
 8008d9a:	f7f9 f8bd 	bl	8001f18 <aci_gatt_allow_read>
		}
		break;
 8008d9e:	e016      	b.n	8008dce <_ZN10HidService12EventHandlerEP14hci_event_pckt+0x1ae>

	case ACI_ATT_EXEC_WRITE_RESP_VSEVT_CODE:
		write_perm_req = (aci_gatt_write_permit_req_event_rp0*)blecore_evt->data;
 8008da0:	69bb      	ldr	r3, [r7, #24]
 8008da2:	3302      	adds	r3, #2
 8008da4:	613b      	str	r3, [r7, #16]
		break;
 8008da6:	e015      	b.n	8008dd4 <_ZN10HidService12EventHandlerEP14hci_event_pckt+0x1b4>

	case ACI_GATT_WRITE_PERMIT_REQ_VSEVT_CODE:
		write_perm_req = (aci_gatt_write_permit_req_event_rp0*)blecore_evt->data;
 8008da8:	69bb      	ldr	r3, [r7, #24]
 8008daa:	3302      	adds	r3, #2
 8008dac:	613b      	str	r3, [r7, #16]
		if (write_perm_req->Attribute_Handle == (hidService.HidControlPointHdle + ValueOffset)) {
 8008dae:	693b      	ldr	r3, [r7, #16]
 8008db0:	885b      	ldrh	r3, [r3, #2]
 8008db2:	b29b      	uxth	r3, r3
 8008db4:	461a      	mov	r2, r3
 8008db6:	4b0a      	ldr	r3, [pc, #40]	; (8008de0 <_ZN10HidService12EventHandlerEP14hci_event_pckt+0x1c0>)
 8008db8:	8a9b      	ldrh	r3, [r3, #20]
 8008dba:	3301      	adds	r3, #1
 8008dbc:	429a      	cmp	r2, r3
 8008dbe:	d108      	bne.n	8008dd2 <_ZN10HidService12EventHandlerEP14hci_event_pckt+0x1b2>
			handled = true;
 8008dc0:	2301      	movs	r3, #1
 8008dc2:	77fb      	strb	r3, [r7, #31]
//				                                uint8_t Error_Code,
//				                                uint8_t Attribute_Val_Length,
//				                                const uint8_t* Attribute_Val )
//				aci_gatt_write_resp(read_req->Connection_Handle);
		}
		break;
 8008dc4:	e005      	b.n	8008dd2 <_ZN10HidService12EventHandlerEP14hci_event_pckt+0x1b2>

	default:
		break;
 8008dc6:	bf00      	nop
 8008dc8:	e004      	b.n	8008dd4 <_ZN10HidService12EventHandlerEP14hci_event_pckt+0x1b4>
		break;
 8008dca:	bf00      	nop
 8008dcc:	e002      	b.n	8008dd4 <_ZN10HidService12EventHandlerEP14hci_event_pckt+0x1b4>
		break;
 8008dce:	bf00      	nop
 8008dd0:	e000      	b.n	8008dd4 <_ZN10HidService12EventHandlerEP14hci_event_pckt+0x1b4>
		break;
 8008dd2:	bf00      	nop
	}


	return handled;
 8008dd4:	7ffb      	ldrb	r3, [r7, #31]
}
 8008dd6:	4618      	mov	r0, r3
 8008dd8:	3720      	adds	r7, #32
 8008dda:	46bd      	mov	sp, r7
 8008ddc:	bd80      	pop	{r7, pc}
 8008dde:	bf00      	nop
 8008de0:	20000cbc 	.word	0x20000cbc
 8008de4:	200003d8 	.word	0x200003d8

08008de8 <_Z41__static_initialization_and_destruction_0ii>:
 8008de8:	b580      	push	{r7, lr}
 8008dea:	b082      	sub	sp, #8
 8008dec:	af00      	add	r7, sp, #0
 8008dee:	6078      	str	r0, [r7, #4]
 8008df0:	6039      	str	r1, [r7, #0]
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	2b01      	cmp	r3, #1
 8008df6:	d107      	bne.n	8008e08 <_Z41__static_initialization_and_destruction_0ii+0x20>
 8008df8:	683b      	ldr	r3, [r7, #0]
 8008dfa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008dfe:	4293      	cmp	r3, r2
 8008e00:	d102      	bne.n	8008e08 <_Z41__static_initialization_and_destruction_0ii+0x20>
HidService hidService;
 8008e02:	4803      	ldr	r0, [pc, #12]	; (8008e10 <_Z41__static_initialization_and_destruction_0ii+0x28>)
 8008e04:	f7ff fd59 	bl	80088ba <_ZN10HidServiceC1Ev>
}
 8008e08:	bf00      	nop
 8008e0a:	3708      	adds	r7, #8
 8008e0c:	46bd      	mov	sp, r7
 8008e0e:	bd80      	pop	{r7, pc}
 8008e10:	20000cbc 	.word	0x20000cbc

08008e14 <_GLOBAL__sub_I_hidService>:
 8008e14:	b580      	push	{r7, lr}
 8008e16:	af00      	add	r7, sp, #0
 8008e18:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8008e1c:	2001      	movs	r0, #1
 8008e1e:	f7ff ffe3 	bl	8008de8 <_Z41__static_initialization_and_destruction_0ii>
 8008e22:	bd80      	pop	{r7, pc}

08008e24 <__NVIC_SetPriorityGrouping>:
{
 8008e24:	b480      	push	{r7}
 8008e26:	b085      	sub	sp, #20
 8008e28:	af00      	add	r7, sp, #0
 8008e2a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	f003 0307 	and.w	r3, r3, #7
 8008e32:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8008e34:	4b0c      	ldr	r3, [pc, #48]	; (8008e68 <__NVIC_SetPriorityGrouping+0x44>)
 8008e36:	68db      	ldr	r3, [r3, #12]
 8008e38:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8008e3a:	68ba      	ldr	r2, [r7, #8]
 8008e3c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8008e40:	4013      	ands	r3, r2
 8008e42:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8008e44:	68fb      	ldr	r3, [r7, #12]
 8008e46:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8008e48:	68bb      	ldr	r3, [r7, #8]
 8008e4a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8008e4c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8008e50:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008e54:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8008e56:	4a04      	ldr	r2, [pc, #16]	; (8008e68 <__NVIC_SetPriorityGrouping+0x44>)
 8008e58:	68bb      	ldr	r3, [r7, #8]
 8008e5a:	60d3      	str	r3, [r2, #12]
}
 8008e5c:	bf00      	nop
 8008e5e:	3714      	adds	r7, #20
 8008e60:	46bd      	mov	sp, r7
 8008e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e66:	4770      	bx	lr
 8008e68:	e000ed00 	.word	0xe000ed00

08008e6c <__NVIC_EnableIRQ>:
{
 8008e6c:	b480      	push	{r7}
 8008e6e:	b083      	sub	sp, #12
 8008e70:	af00      	add	r7, sp, #0
 8008e72:	4603      	mov	r3, r0
 8008e74:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008e76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	db0b      	blt.n	8008e96 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8008e7e:	79fb      	ldrb	r3, [r7, #7]
 8008e80:	f003 021f 	and.w	r2, r3, #31
 8008e84:	4907      	ldr	r1, [pc, #28]	; (8008ea4 <__NVIC_EnableIRQ+0x38>)
 8008e86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008e8a:	095b      	lsrs	r3, r3, #5
 8008e8c:	2001      	movs	r0, #1
 8008e8e:	fa00 f202 	lsl.w	r2, r0, r2
 8008e92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8008e96:	bf00      	nop
 8008e98:	370c      	adds	r7, #12
 8008e9a:	46bd      	mov	sp, r7
 8008e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ea0:	4770      	bx	lr
 8008ea2:	bf00      	nop
 8008ea4:	e000e100 	.word	0xe000e100

08008ea8 <__NVIC_SetPriority>:
{
 8008ea8:	b480      	push	{r7}
 8008eaa:	b083      	sub	sp, #12
 8008eac:	af00      	add	r7, sp, #0
 8008eae:	4603      	mov	r3, r0
 8008eb0:	6039      	str	r1, [r7, #0]
 8008eb2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008eb4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	db0a      	blt.n	8008ed2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008ebc:	683b      	ldr	r3, [r7, #0]
 8008ebe:	b2da      	uxtb	r2, r3
 8008ec0:	490c      	ldr	r1, [pc, #48]	; (8008ef4 <__NVIC_SetPriority+0x4c>)
 8008ec2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008ec6:	0112      	lsls	r2, r2, #4
 8008ec8:	b2d2      	uxtb	r2, r2
 8008eca:	440b      	add	r3, r1
 8008ecc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8008ed0:	e00a      	b.n	8008ee8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008ed2:	683b      	ldr	r3, [r7, #0]
 8008ed4:	b2da      	uxtb	r2, r3
 8008ed6:	4908      	ldr	r1, [pc, #32]	; (8008ef8 <__NVIC_SetPriority+0x50>)
 8008ed8:	79fb      	ldrb	r3, [r7, #7]
 8008eda:	f003 030f 	and.w	r3, r3, #15
 8008ede:	3b04      	subs	r3, #4
 8008ee0:	0112      	lsls	r2, r2, #4
 8008ee2:	b2d2      	uxtb	r2, r2
 8008ee4:	440b      	add	r3, r1
 8008ee6:	761a      	strb	r2, [r3, #24]
}
 8008ee8:	bf00      	nop
 8008eea:	370c      	adds	r7, #12
 8008eec:	46bd      	mov	sp, r7
 8008eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ef2:	4770      	bx	lr
 8008ef4:	e000e100 	.word	0xe000e100
 8008ef8:	e000ed00 	.word	0xe000ed00

08008efc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8008efc:	b580      	push	{r7, lr}
 8008efe:	b082      	sub	sp, #8
 8008f00:	af00      	add	r7, sp, #0
 8008f02:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	3b01      	subs	r3, #1
 8008f08:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008f0c:	d301      	bcc.n	8008f12 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8008f0e:	2301      	movs	r3, #1
 8008f10:	e00f      	b.n	8008f32 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8008f12:	4a0a      	ldr	r2, [pc, #40]	; (8008f3c <SysTick_Config+0x40>)
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	3b01      	subs	r3, #1
 8008f18:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8008f1a:	210f      	movs	r1, #15
 8008f1c:	f04f 30ff 	mov.w	r0, #4294967295
 8008f20:	f7ff ffc2 	bl	8008ea8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8008f24:	4b05      	ldr	r3, [pc, #20]	; (8008f3c <SysTick_Config+0x40>)
 8008f26:	2200      	movs	r2, #0
 8008f28:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8008f2a:	4b04      	ldr	r3, [pc, #16]	; (8008f3c <SysTick_Config+0x40>)
 8008f2c:	2207      	movs	r2, #7
 8008f2e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8008f30:	2300      	movs	r3, #0
}
 8008f32:	4618      	mov	r0, r3
 8008f34:	3708      	adds	r7, #8
 8008f36:	46bd      	mov	sp, r7
 8008f38:	bd80      	pop	{r7, pc}
 8008f3a:	bf00      	nop
 8008f3c:	e000e010 	.word	0xe000e010

08008f40 <LL_EXTI_DisableIT_0_31>:
{
 8008f40:	b480      	push	{r7}
 8008f42:	b083      	sub	sp, #12
 8008f44:	af00      	add	r7, sp, #0
 8008f46:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 8008f48:	4b07      	ldr	r3, [pc, #28]	; (8008f68 <LL_EXTI_DisableIT_0_31+0x28>)
 8008f4a:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	43db      	mvns	r3, r3
 8008f52:	4905      	ldr	r1, [pc, #20]	; (8008f68 <LL_EXTI_DisableIT_0_31+0x28>)
 8008f54:	4013      	ands	r3, r2
 8008f56:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8008f5a:	bf00      	nop
 8008f5c:	370c      	adds	r7, #12
 8008f5e:	46bd      	mov	sp, r7
 8008f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f64:	4770      	bx	lr
 8008f66:	bf00      	nop
 8008f68:	58000800 	.word	0x58000800

08008f6c <LL_EXTI_DisableIT_32_63>:
{
 8008f6c:	b480      	push	{r7}
 8008f6e:	b083      	sub	sp, #12
 8008f70:	af00      	add	r7, sp, #0
 8008f72:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR2, ExtiLine);
 8008f74:	4b07      	ldr	r3, [pc, #28]	; (8008f94 <LL_EXTI_DisableIT_32_63+0x28>)
 8008f76:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	43db      	mvns	r3, r3
 8008f7e:	4905      	ldr	r1, [pc, #20]	; (8008f94 <LL_EXTI_DisableIT_32_63+0x28>)
 8008f80:	4013      	ands	r3, r2
 8008f82:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8008f86:	bf00      	nop
 8008f88:	370c      	adds	r7, #12
 8008f8a:	46bd      	mov	sp, r7
 8008f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f90:	4770      	bx	lr
 8008f92:	bf00      	nop
 8008f94:	58000800 	.word	0x58000800

08008f98 <_Z18SystemClock_Configv>:


uint8_t hse_tuning = 19;		// Random guess based on Nucleo setting - doesn't seem to make much difference

void SystemClock_Config()
{
 8008f98:	b480      	push	{r7}
 8008f9a:	af00      	add	r7, sp, #0
	FLASH->ACR |= FLASH_ACR_PRFTEN;					// Flash prefetch enable
 8008f9c:	4b6a      	ldr	r3, [pc, #424]	; (8009148 <_Z18SystemClock_Configv+0x1b0>)
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	4a69      	ldr	r2, [pc, #420]	; (8009148 <_Z18SystemClock_Configv+0x1b0>)
 8008fa2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008fa6:	6013      	str	r3, [r2, #0]
	FLASH->SR &= ~FLASH_SR_OPERR;					// Clear Flash Option Validity flag
 8008fa8:	4b67      	ldr	r3, [pc, #412]	; (8009148 <_Z18SystemClock_Configv+0x1b0>)
 8008faa:	691b      	ldr	r3, [r3, #16]
 8008fac:	4a66      	ldr	r2, [pc, #408]	; (8009148 <_Z18SystemClock_Configv+0x1b0>)
 8008fae:	f023 0302 	bic.w	r3, r3, #2
 8008fb2:	6113      	str	r3, [r2, #16]
	}
	RCC->HSECR = 0xCAFECAFE;						// HSE control unlock key
	MODIFY_REG(RCC->HSECR, RCC_HSECR_HSETUNE, hse_tuning << RCC_HSECR_HSETUNE_Pos);
*/

	PWR->CR1 |= PWR_CR1_DBP; 						// Disable backup domain write protection: Enable access to the RTC registers
 8008fb4:	4b65      	ldr	r3, [pc, #404]	; (800914c <_Z18SystemClock_Configv+0x1b4>)
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	4a64      	ldr	r2, [pc, #400]	; (800914c <_Z18SystemClock_Configv+0x1b4>)
 8008fba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008fbe:	6013      	str	r3, [r2, #0]

	RCC->CR |= RCC_CR_HSEON;						// Turn on external oscillator
 8008fc0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008fca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008fce:	6013      	str	r3, [r2, #0]
	while ((RCC->CR & RCC_CR_HSERDY) == 0);			// Wait till HSE is ready
 8008fd0:	bf00      	nop
 8008fd2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	bf0c      	ite	eq
 8008fe0:	2301      	moveq	r3, #1
 8008fe2:	2300      	movne	r3, #0
 8008fe4:	b2db      	uxtb	r3, r3
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	d1f3      	bne.n	8008fd2 <_Z18SystemClock_Configv+0x3a>

	RCC->CR |= RCC_CR_HSION;						// Turn on high speed internal oscillator
 8008fea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008ff4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008ff8:	6013      	str	r3, [r2, #0]
	while ((RCC->CR & RCC_CR_HSIRDY) == 0);			// Wait till HSI is ready
 8008ffa:	bf00      	nop
 8008ffc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009006:	2b00      	cmp	r3, #0
 8009008:	bf0c      	ite	eq
 800900a:	2301      	moveq	r3, #1
 800900c:	2300      	movne	r3, #0
 800900e:	b2db      	uxtb	r3, r3
 8009010:	2b00      	cmp	r3, #0
 8009012:	d1f3      	bne.n	8008ffc <_Z18SystemClock_Configv+0x64>

	RCC->CSR |= RCC_CSR_LSI1ON;						// Turn on low speed external oscillator
 8009014:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009018:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800901c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009020:	f043 0301 	orr.w	r3, r3, #1
 8009024:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
	while ((RCC->CSR & RCC_CSR_LSI1RDY) == 0);		// Wait till LSE is ready
 8009028:	bf00      	nop
 800902a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800902e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009032:	f003 0302 	and.w	r3, r3, #2
 8009036:	2b00      	cmp	r3, #0
 8009038:	bf0c      	ite	eq
 800903a:	2301      	moveq	r3, #1
 800903c:	2300      	movne	r3, #0
 800903e:	b2db      	uxtb	r3, r3
 8009040:	2b00      	cmp	r3, #0
 8009042:	d1f2      	bne.n	800902a <_Z18SystemClock_Configv+0x92>

	// Activate PLL: HSE = 32MHz / 4(M) * 32(N) / 4(R) = 64MHz
	RCC->PLLCFGR |= LL_RCC_PLLSOURCE_HSE;			// Set PLL source to HSE
 8009044:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009048:	68db      	ldr	r3, [r3, #12]
 800904a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800904e:	f043 0303 	orr.w	r3, r3, #3
 8009052:	60d3      	str	r3, [r2, #12]
	RCC->PLLCFGR |= LL_RCC_PLLM_DIV_4;				// Set PLL M divider to 4
 8009054:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009058:	68db      	ldr	r3, [r3, #12]
 800905a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800905e:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8009062:	60d3      	str	r3, [r2, #12]
	MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLN, 32 << RCC_PLLCFGR_PLLN_Pos);		// Set PLL N multiplier to 32
 8009064:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009068:	68db      	ldr	r3, [r3, #12]
 800906a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800906e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009072:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8009076:	60d3      	str	r3, [r2, #12]
	RCC->PLLCFGR |= LL_RCC_PLLR_DIV_4;				// Set PLL R divider to 4
 8009078:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800907c:	68db      	ldr	r3, [r3, #12]
 800907e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009082:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8009086:	60d3      	str	r3, [r2, #12]
	RCC->PLLCFGR |= RCC_PLLCFGR_PLLREN;				// Enable PLL R Clock
 8009088:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800908c:	68db      	ldr	r3, [r3, #12]
 800908e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009092:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009096:	60d3      	str	r3, [r2, #12]

	RCC->CR |= RCC_CR_PLLON;						// Turn on PLL
 8009098:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80090a2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80090a6:	6013      	str	r3, [r2, #0]
	while ((RCC->CR & RCC_CR_PLLRDY) == 0);			// Wait till PLL is ready
 80090a8:	bf00      	nop
 80090aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	bf0c      	ite	eq
 80090b8:	2301      	moveq	r3, #1
 80090ba:	2300      	movne	r3, #0
 80090bc:	b2db      	uxtb	r3, r3
 80090be:	2b00      	cmp	r3, #0
 80090c0:	d1f3      	bne.n	80090aa <_Z18SystemClock_Configv+0x112>

	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, 3);	// Increase Flash latency to 3 Wait States (see manual p.77)
 80090c2:	4b21      	ldr	r3, [pc, #132]	; (8009148 <_Z18SystemClock_Configv+0x1b0>)
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	f023 0307 	bic.w	r3, r3, #7
 80090ca:	4a1f      	ldr	r2, [pc, #124]	; (8009148 <_Z18SystemClock_Configv+0x1b0>)
 80090cc:	f043 0303 	orr.w	r3, r3, #3
 80090d0:	6013      	str	r3, [r2, #0]
	while ((FLASH->ACR & FLASH_ACR_LATENCY) != 3);
 80090d2:	bf00      	nop
 80090d4:	4b1c      	ldr	r3, [pc, #112]	; (8009148 <_Z18SystemClock_Configv+0x1b0>)
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	f003 0307 	and.w	r3, r3, #7
 80090dc:	2b03      	cmp	r3, #3
 80090de:	bf14      	ite	ne
 80090e0:	2301      	movne	r3, #1
 80090e2:	2300      	moveq	r3, #0
 80090e4:	b2db      	uxtb	r3, r3
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	d1f4      	bne.n	80090d4 <_Z18SystemClock_Configv+0x13c>

	MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, LL_RCC_SYS_CLKSOURCE_PLL);		// 11: PLL selected as system clock
 80090ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80090ee:	689b      	ldr	r3, [r3, #8]
 80090f0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80090f4:	f043 0303 	orr.w	r3, r3, #3
 80090f8:	6093      	str	r3, [r2, #8]
	while ((RCC->CFGR & RCC_CFGR_SWS) == 0);		// Wait until PLL is selected
 80090fa:	bf00      	nop
 80090fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009100:	689b      	ldr	r3, [r3, #8]
 8009102:	f003 030c 	and.w	r3, r3, #12
 8009106:	2b00      	cmp	r3, #0
 8009108:	bf0c      	ite	eq
 800910a:	2301      	moveq	r3, #1
 800910c:	2300      	movne	r3, #0
 800910e:	b2db      	uxtb	r3, r3
 8009110:	2b00      	cmp	r3, #0
 8009112:	d1f3      	bne.n	80090fc <_Z18SystemClock_Configv+0x164>

	RCC->EXTCFGR |= RCC_EXTCFGR_C2HPRE_3;			// 1000: CPU2 HPrescaler: SYSCLK divided by 2
 8009114:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009118:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800911c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009120:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009124:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108

	// Peripheral clocks already set to default: RTC, USART, LPUSART
	RCC->CSR |=  RCC_CSR_RFWKPSEL_0 | RCC_CSR_RFWKPSEL_1;				// RF system wakeup clock source selection: 11: HSE oscillator clock divided by 1024 used as RF system wakeup clock
 8009128:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800912c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009130:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009134:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009138:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800913c:	bf00      	nop
 800913e:	46bd      	mov	sp, r7
 8009140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009144:	4770      	bx	lr
 8009146:	bf00      	nop
 8009148:	58004000 	.word	0x58004000
 800914c:	58000400 	.word	0x58000400

08009150 <_ZL7InitRTCv>:



static void InitRTC()
{
 8009150:	b480      	push	{r7}
 8009152:	af00      	add	r7, sp, #0
	PWR->CR1 |= PWR_CR1_DBP; 						// Disable backup domain write protection: Enable access to the RTC registers
 8009154:	4b3c      	ldr	r3, [pc, #240]	; (8009248 <_ZL7InitRTCv+0xf8>)
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	4a3b      	ldr	r2, [pc, #236]	; (8009248 <_ZL7InitRTCv+0xf8>)
 800915a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800915e:	6013      	str	r3, [r2, #0]
	SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8009160:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009164:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009168:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800916c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009170:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
	CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8009174:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009178:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800917c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009180:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009184:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

	RCC->BDCR |= RCC_BDCR_RTCSEL_1;					// Set RTC Clock to source to LSI
 8009188:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800918c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009190:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009194:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8009198:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
	RCC->BDCR |= RCC_BDCR_RTCEN;					// Enable RTC
 800919c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80091a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80091a4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80091a8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80091ac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90


//	RCC->BDCR |= RCC_BDCR_RTCSEL_0;					// Set RTC Clock to source to LSE

	RTC->WPR = 0xCAU;								// Disable the write protection for RTC registers - see p.919
 80091b0:	4b26      	ldr	r3, [pc, #152]	; (800924c <_ZL7InitRTCv+0xfc>)
 80091b2:	22ca      	movs	r2, #202	; 0xca
 80091b4:	625a      	str	r2, [r3, #36]	; 0x24
	RTC->WPR = 0x53U;
 80091b6:	4b25      	ldr	r3, [pc, #148]	; (800924c <_ZL7InitRTCv+0xfc>)
 80091b8:	2253      	movs	r2, #83	; 0x53
 80091ba:	625a      	str	r2, [r3, #36]	; 0x24

	RTC->ISR = 0xFFFFFFFF;							// Enter the Initialization mode (Just setting the Init Flag does not seem to work)
 80091bc:	4b23      	ldr	r3, [pc, #140]	; (800924c <_ZL7InitRTCv+0xfc>)
 80091be:	f04f 32ff 	mov.w	r2, #4294967295
 80091c2:	60da      	str	r2, [r3, #12]
	while ((RTC->ISR & RTC_ISR_INITF) == 0);
 80091c4:	bf00      	nop
 80091c6:	4b21      	ldr	r3, [pc, #132]	; (800924c <_ZL7InitRTCv+0xfc>)
 80091c8:	68db      	ldr	r3, [r3, #12]
 80091ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	bf0c      	ite	eq
 80091d2:	2301      	moveq	r3, #1
 80091d4:	2300      	movne	r3, #0
 80091d6:	b2db      	uxtb	r3, r3
 80091d8:	2b00      	cmp	r3, #0
 80091da:	d1f4      	bne.n	80091c6 <_ZL7InitRTCv+0x76>

	RCC->BDCR |= RCC_BDCR_RTCSEL_1;					// Set RTC Clock to source to LSI
 80091dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80091e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80091e4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80091e8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80091ec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
	RTC->PRER = (255 << RTC_PRER_PREDIV_S_Pos) | (124 << RTC_PRER_PREDIV_A_Pos);		// Set prescaler for 32kHz input clock (1Hz = 32k / (124[PREDIV_A] + 1) * (255[PREDIV_S] + 1)
 80091f0:	4b16      	ldr	r3, [pc, #88]	; (800924c <_ZL7InitRTCv+0xfc>)
 80091f2:	4a17      	ldr	r2, [pc, #92]	; (8009250 <_ZL7InitRTCv+0x100>)
 80091f4:	611a      	str	r2, [r3, #16]
	RCC->APB1ENR1 |= RCC_APB1ENR1_RTCAPBEN;			// CPU1 RTC APB clock enable
 80091f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80091fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80091fc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009200:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8009204:	6593      	str	r3, [r2, #88]	; 0x58
	while ((RCC->APB1ENR1 & RCC_APB1ENR1_RTCAPBEN) == 0);
 8009206:	bf00      	nop
 8009208:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800920c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800920e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009212:	2b00      	cmp	r3, #0
 8009214:	bf0c      	ite	eq
 8009216:	2301      	moveq	r3, #1
 8009218:	2300      	movne	r3, #0
 800921a:	b2db      	uxtb	r3, r3
 800921c:	2b00      	cmp	r3, #0
 800921e:	d1f3      	bne.n	8009208 <_ZL7InitRTCv+0xb8>

	RTC->CR |= RTC_CR_WUTE;							// Enable Wake up timer see p918
 8009220:	4b0a      	ldr	r3, [pc, #40]	; (800924c <_ZL7InitRTCv+0xfc>)
 8009222:	689b      	ldr	r3, [r3, #8]
 8009224:	4a09      	ldr	r2, [pc, #36]	; (800924c <_ZL7InitRTCv+0xfc>)
 8009226:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800922a:	6093      	str	r3, [r2, #8]
	RTC->ISR &= ~RTC_ISR_INIT;						// Exit Initialization mode
 800922c:	4b07      	ldr	r3, [pc, #28]	; (800924c <_ZL7InitRTCv+0xfc>)
 800922e:	68db      	ldr	r3, [r3, #12]
 8009230:	4a06      	ldr	r2, [pc, #24]	; (800924c <_ZL7InitRTCv+0xfc>)
 8009232:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009236:	60d3      	str	r3, [r2, #12]

	RTC->WPR = 0xFFU;								// Enable the write protection for RTC registers.
 8009238:	4b04      	ldr	r3, [pc, #16]	; (800924c <_ZL7InitRTCv+0xfc>)
 800923a:	22ff      	movs	r2, #255	; 0xff
 800923c:	625a      	str	r2, [r3, #36]	; 0x24
}
 800923e:	bf00      	nop
 8009240:	46bd      	mov	sp, r7
 8009242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009246:	4770      	bx	lr
 8009248:	58000400 	.word	0x58000400
 800924c:	40002800 	.word	0x40002800
 8009250:	007c00ff 	.word	0x007c00ff

08009254 <_Z12InitHardwarev>:


void InitHardware()
{
 8009254:	b580      	push	{r7, lr}
 8009256:	af00      	add	r7, sp, #0
	NVIC_SetPriorityGrouping(0x3);					// Set NVIC Priority grouping to 4
 8009258:	2003      	movs	r0, #3
 800925a:	f7ff fde3 	bl	8008e24 <__NVIC_SetPriorityGrouping>
	InitSysTick();									// Initialise SysTick to 1kHz??
 800925e:	f000 f8c7 	bl	80093f0 <_ZL11InitSysTickv>

	// Enable hardware semaphore clock
	RCC->AHB3ENR |= RCC_AHB3ENR_HSEMEN;
 8009262:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009266:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009268:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800926c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009270:	6513      	str	r3, [r2, #80]	; 0x50
	while ((RCC->AHB3ENR & RCC_AHB3ENR_HSEMEN) == 0);
 8009272:	bf00      	nop
 8009274:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009278:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800927a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800927e:	2b00      	cmp	r3, #0
 8009280:	bf0c      	ite	eq
 8009282:	2301      	moveq	r3, #1
 8009284:	2300      	movne	r3, #0
 8009286:	b2db      	uxtb	r3, r3
 8009288:	2b00      	cmp	r3, #0
 800928a:	d1f3      	bne.n	8009274 <_Z12InitHardwarev+0x20>
//	NVIC_SetPriority(HSEM_IRQn, 1);
//	NVIC_EnableIRQ(HSEM_IRQn);

	InitIPCC();										// Enable IPCC clock and reset all channels
 800928c:	f000 f870 	bl	8009370 <_ZL8InitIPCCv>
	InitRTC();										// Initialise RTC
 8009290:	f7ff ff5e 	bl	8009150 <_ZL7InitRTCv>

	// Disable all wakeup interrupt on CPU1  except IPCC(36), HSEM(38)
	// see 369 / 1532 for Interrupt list table
	LL_EXTI_DisableIT_0_31(~0);
 8009294:	f04f 30ff 	mov.w	r0, #4294967295
 8009298:	f7ff fe52 	bl	8008f40 <LL_EXTI_DisableIT_0_31>
	LL_EXTI_DisableIT_32_63( (~0) & (~(LL_EXTI_LINE_36 | LL_EXTI_LINE_38)) );
 800929c:	f06f 0050 	mvn.w	r0, #80	; 0x50
 80092a0:	f7ff fe64 	bl	8008f6c <LL_EXTI_DisableIT_32_63>

	InitGPIO();
 80092a4:	f000 f804 	bl	80092b0 <_ZL8InitGPIOv>
//	InitADC();
//	InitSPI();
	InitGyroTimer();
 80092a8:	f000 f8b8 	bl	800941c <_ZL13InitGyroTimerv>
}
 80092ac:	bf00      	nop
 80092ae:	bd80      	pop	{r7, pc}

080092b0 <_ZL8InitGPIOv>:

}


static void InitGPIO()
{
 80092b0:	b580      	push	{r7, lr}
 80092b2:	af00      	add	r7, sp, #0
	// GPIO Ports Clock Enable
	RCC->AHB2ENR |= RCC_AHB2ENR_GPIOAEN;
 80092b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80092b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80092ba:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80092be:	f043 0301 	orr.w	r3, r3, #1
 80092c2:	64d3      	str	r3, [r2, #76]	; 0x4c
	RCC->AHB2ENR |= RCC_AHB2ENR_GPIOBEN;
 80092c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80092c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80092ca:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80092ce:	f043 0302 	orr.w	r3, r3, #2
 80092d2:	64d3      	str	r3, [r2, #76]	; 0x4c

	// Configure GPIO pin : PA4 Connect Button
	GPIOA->MODER &= ~GPIO_MODER_MODE4_Msk;			// 00: Input mode; 01: General purpose output mode; 10: Alternate function mode; 11: Analog mode (default)
 80092d4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80092de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80092e2:	6013      	str	r3, [r2, #0]
	GPIOA->PUPDR |= GPIO_PUPDR_PUPD4_0;				// Activate pull up
 80092e4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80092e8:	68db      	ldr	r3, [r3, #12]
 80092ea:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80092ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80092f2:	60d3      	str	r3, [r2, #12]
	SYSCFG->EXTICR[1] |= SYSCFG_EXTICR2_EXTI4_PA;	// Enable external interrupt
 80092f4:	4b1a      	ldr	r3, [pc, #104]	; (8009360 <_ZL8InitGPIOv+0xb0>)
 80092f6:	4a1a      	ldr	r2, [pc, #104]	; (8009360 <_ZL8InitGPIOv+0xb0>)
 80092f8:	68db      	ldr	r3, [r3, #12]
 80092fa:	60d3      	str	r3, [r2, #12]
	EXTI->IMR1 |= EXTI_IMR1_IM4;					// 1: Wakeup with interrupt request from Line x is unmasked
 80092fc:	4b19      	ldr	r3, [pc, #100]	; (8009364 <_ZL8InitGPIOv+0xb4>)
 80092fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009302:	4a18      	ldr	r2, [pc, #96]	; (8009364 <_ZL8InitGPIOv+0xb4>)
 8009304:	f043 0310 	orr.w	r3, r3, #16
 8009308:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
	EXTI->FTSR1 |= EXTI_FTSR1_FT4;					// Enable falling edge trigger
 800930c:	4b15      	ldr	r3, [pc, #84]	; (8009364 <_ZL8InitGPIOv+0xb4>)
 800930e:	685b      	ldr	r3, [r3, #4]
 8009310:	4a14      	ldr	r2, [pc, #80]	; (8009364 <_ZL8InitGPIOv+0xb4>)
 8009312:	f043 0310 	orr.w	r3, r3, #16
 8009316:	6053      	str	r3, [r2, #4]

	NVIC_SetPriority(EXTI4_IRQn, 3);				// EXTI interrupt init
 8009318:	2103      	movs	r1, #3
 800931a:	200a      	movs	r0, #10
 800931c:	f7ff fdc4 	bl	8008ea8 <__NVIC_SetPriority>
	NVIC_EnableIRQ(EXTI4_IRQn);
 8009320:	200a      	movs	r0, #10
 8009322:	f7ff fda3 	bl	8008e6c <__NVIC_EnableIRQ>


	GPIOA->MODER &= ~GPIO_MODER_MODE3_1;			// Configure LED pins : PA3 Connect LED
 8009326:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8009330:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009334:	6013      	str	r3, [r2, #0]

	// Enable EXTI WKUP4 on PA2 to wake up from shutdown
	//EXTI->EMR1 |= EXTI_EMR1_EM4;
	PWR->CR4 &= ~PWR_CR4_WP4;		// Wake-Up pin polarity (0=rising 1 = falling edge)
 8009336:	4b0c      	ldr	r3, [pc, #48]	; (8009368 <_ZL8InitGPIOv+0xb8>)
 8009338:	68db      	ldr	r3, [r3, #12]
 800933a:	4a0b      	ldr	r2, [pc, #44]	; (8009368 <_ZL8InitGPIOv+0xb8>)
 800933c:	f023 0308 	bic.w	r3, r3, #8
 8009340:	60d3      	str	r3, [r2, #12]
	PWR->CR3 |= PWR_CR3_EWUP4;		// Enable WKUP4 on PA2
 8009342:	4b09      	ldr	r3, [pc, #36]	; (8009368 <_ZL8InitGPIOv+0xb8>)
 8009344:	689b      	ldr	r3, [r3, #8]
 8009346:	4a08      	ldr	r2, [pc, #32]	; (8009368 <_ZL8InitGPIOv+0xb8>)
 8009348:	f043 0308 	orr.w	r3, r3, #8
 800934c:	6093      	str	r3, [r2, #8]

	// Configure pin PB8 for debug output
	GPIOB->MODER &= ~GPIO_MODER_MODE8_1;
 800934e:	4b07      	ldr	r3, [pc, #28]	; (800936c <_ZL8InitGPIOv+0xbc>)
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	4a06      	ldr	r2, [pc, #24]	; (800936c <_ZL8InitGPIOv+0xbc>)
 8009354:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8009358:	6013      	str	r3, [r2, #0]
}
 800935a:	bf00      	nop
 800935c:	bd80      	pop	{r7, pc}
 800935e:	bf00      	nop
 8009360:	40010000 	.word	0x40010000
 8009364:	58000800 	.word	0x58000800
 8009368:	58000400 	.word	0x58000400
 800936c:	48000400 	.word	0x48000400

08009370 <_ZL8InitIPCCv>:


static void InitIPCC()
{
 8009370:	b580      	push	{r7, lr}
 8009372:	af00      	add	r7, sp, #0
	// Inter-processor communication controller (IPCC) is used for communicating data between two processors
	RCC->AHB3ENR |= RCC_AHB3ENR_IPCCEN;				// Enable IPCC Clock
 8009374:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009378:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800937a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800937e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009382:	6513      	str	r3, [r2, #80]	; 0x50

	IPCC->C1SCR = 0x3F;								// Clear processor 1 all IPCC channels
 8009384:	4b19      	ldr	r3, [pc, #100]	; (80093ec <_ZL8InitIPCCv+0x7c>)
 8009386:	223f      	movs	r2, #63	; 0x3f
 8009388:	609a      	str	r2, [r3, #8]
	IPCC->C2SCR = 0x3F;								// Clear processor 2 all IPCC channels
 800938a:	4b18      	ldr	r3, [pc, #96]	; (80093ec <_ZL8InitIPCCv+0x7c>)
 800938c:	223f      	movs	r2, #63	; 0x3f
 800938e:	619a      	str	r2, [r3, #24]
	IPCC->C1MR |= 0x3F << IPCC_C1MR_CH1FM_Pos;		// Mask transmit channel free interrupt for processor 1
 8009390:	4b16      	ldr	r3, [pc, #88]	; (80093ec <_ZL8InitIPCCv+0x7c>)
 8009392:	685b      	ldr	r3, [r3, #4]
 8009394:	4a15      	ldr	r2, [pc, #84]	; (80093ec <_ZL8InitIPCCv+0x7c>)
 8009396:	f443 137c 	orr.w	r3, r3, #4128768	; 0x3f0000
 800939a:	6053      	str	r3, [r2, #4]
	IPCC->C2MR |= 0x3F << IPCC_C2MR_CH1FM_Pos;		// Mask transmit channel free interrupt for processor 2
 800939c:	4b13      	ldr	r3, [pc, #76]	; (80093ec <_ZL8InitIPCCv+0x7c>)
 800939e:	695b      	ldr	r3, [r3, #20]
 80093a0:	4a12      	ldr	r2, [pc, #72]	; (80093ec <_ZL8InitIPCCv+0x7c>)
 80093a2:	f443 137c 	orr.w	r3, r3, #4128768	; 0x3f0000
 80093a6:	6153      	str	r3, [r2, #20]
	IPCC->C1MR |= 0x3F;								// Mask receive channel occupied interrupt for processor 1
 80093a8:	4b10      	ldr	r3, [pc, #64]	; (80093ec <_ZL8InitIPCCv+0x7c>)
 80093aa:	685b      	ldr	r3, [r3, #4]
 80093ac:	4a0f      	ldr	r2, [pc, #60]	; (80093ec <_ZL8InitIPCCv+0x7c>)
 80093ae:	f043 033f 	orr.w	r3, r3, #63	; 0x3f
 80093b2:	6053      	str	r3, [r2, #4]
	IPCC->C2MR |= 0x3F;								// Mask receive channel occupied interrupt for processor 2
 80093b4:	4b0d      	ldr	r3, [pc, #52]	; (80093ec <_ZL8InitIPCCv+0x7c>)
 80093b6:	695b      	ldr	r3, [r3, #20]
 80093b8:	4a0c      	ldr	r2, [pc, #48]	; (80093ec <_ZL8InitIPCCv+0x7c>)
 80093ba:	f043 033f 	orr.w	r3, r3, #63	; 0x3f
 80093be:	6153      	str	r3, [r2, #20]

	NVIC_SetPriority(IPCC_C1_RX_IRQn, 1);
 80093c0:	2101      	movs	r1, #1
 80093c2:	202c      	movs	r0, #44	; 0x2c
 80093c4:	f7ff fd70 	bl	8008ea8 <__NVIC_SetPriority>
	NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 80093c8:	202c      	movs	r0, #44	; 0x2c
 80093ca:	f7ff fd4f 	bl	8008e6c <__NVIC_EnableIRQ>
	NVIC_SetPriority(IPCC_C1_TX_IRQn, 1);
 80093ce:	2101      	movs	r1, #1
 80093d0:	202d      	movs	r0, #45	; 0x2d
 80093d2:	f7ff fd69 	bl	8008ea8 <__NVIC_SetPriority>
	NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 80093d6:	202d      	movs	r0, #45	; 0x2d
 80093d8:	f7ff fd48 	bl	8008e6c <__NVIC_EnableIRQ>

	IPCC->C1CR |= (IPCC_CR_RXOIE | IPCC_CR_TXFIE);	// Activate the interrupts
 80093dc:	4b03      	ldr	r3, [pc, #12]	; (80093ec <_ZL8InitIPCCv+0x7c>)
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	4a02      	ldr	r2, [pc, #8]	; (80093ec <_ZL8InitIPCCv+0x7c>)
 80093e2:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80093e6:	6013      	str	r3, [r2, #0]
}
 80093e8:	bf00      	nop
 80093ea:	bd80      	pop	{r7, pc}
 80093ec:	58000c00 	.word	0x58000c00

080093f0 <_ZL11InitSysTickv>:



static void InitSysTick()
{
 80093f0:	b580      	push	{r7, lr}
 80093f2:	af00      	add	r7, sp, #0
	SysTick_Config(SystemCoreClock / SYSTICK);		// gives 1ms
 80093f4:	4b07      	ldr	r3, [pc, #28]	; (8009414 <_ZL11InitSysTickv+0x24>)
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	4a07      	ldr	r2, [pc, #28]	; (8009418 <_ZL11InitSysTickv+0x28>)
 80093fa:	fba2 2303 	umull	r2, r3, r2, r3
 80093fe:	099b      	lsrs	r3, r3, #6
 8009400:	4618      	mov	r0, r3
 8009402:	f7ff fd7b 	bl	8008efc <SysTick_Config>
	NVIC_SetPriority(SysTick_IRQn, 0);
 8009406:	2100      	movs	r1, #0
 8009408:	f04f 30ff 	mov.w	r0, #4294967295
 800940c:	f7ff fd4c 	bl	8008ea8 <__NVIC_SetPriority>
}
 8009410:	bf00      	nop
 8009412:	bd80      	pop	{r7, pc}
 8009414:	20000004 	.word	0x20000004
 8009418:	10624dd3 	.word	0x10624dd3

0800941c <_ZL13InitGyroTimerv>:


//	Setup Timer 2 on an interrupt to trigger gyro output
void InitGyroTimer()
{
 800941c:	b580      	push	{r7, lr}
 800941e:	af00      	add	r7, sp, #0
	RCC->APB1ENR1 |= RCC_APB1ENR1_TIM2EN;			// Enable Timer 3
 8009420:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009424:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009426:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800942a:	f043 0301 	orr.w	r3, r3, #1
 800942e:	6593      	str	r3, [r2, #88]	; 0x58
	TIM2->PSC = 31;									// Set prescaler
 8009430:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009434:	221f      	movs	r2, #31
 8009436:	629a      	str	r2, [r3, #40]	; 0x28
	TIM2->ARR = 1999; 								// Set auto reload register - Clk / PSC + 1 / ARR + 1 = 64Mhz / 32 / 2000 = 1kHz
 8009438:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800943c:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8009440:	62da      	str	r2, [r3, #44]	; 0x2c

	TIM2->DIER |= TIM_DIER_UIE;						// DMA/interrupt enable register
 8009442:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009446:	68db      	ldr	r3, [r3, #12]
 8009448:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800944c:	f043 0301 	orr.w	r3, r3, #1
 8009450:	60d3      	str	r3, [r2, #12]
	TIM2->EGR |= TIM_EGR_UG;						// Re-initializes counter and generates update of registers
 8009452:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009456:	695b      	ldr	r3, [r3, #20]
 8009458:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800945c:	f043 0301 	orr.w	r3, r3, #1
 8009460:	6153      	str	r3, [r2, #20]

	NVIC_SetPriority(TIM2_IRQn, 2);					// Lower is higher priority
 8009462:	2102      	movs	r1, #2
 8009464:	201c      	movs	r0, #28
 8009466:	f7ff fd1f 	bl	8008ea8 <__NVIC_SetPriority>
}
 800946a:	bf00      	nop
 800946c:	bd80      	pop	{r7, pc}
	...

08009470 <SysTick_Handler>:
#include "stm32_seq.h"
#include "gyroSPI.h"
#include "USB.h"

extern "C" {
void SysTick_Handler() {
 8009470:	b480      	push	{r7}
 8009472:	af00      	add	r7, sp, #0
	++SysTickVal;
 8009474:	4b04      	ldr	r3, [pc, #16]	; (8009488 <SysTick_Handler+0x18>)
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	3301      	adds	r3, #1
 800947a:	4a03      	ldr	r2, [pc, #12]	; (8009488 <SysTick_Handler+0x18>)
 800947c:	6013      	str	r3, [r2, #0]
}
 800947e:	bf00      	nop
 8009480:	46bd      	mov	sp, r7
 8009482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009486:	4770      	bx	lr
 8009488:	20000cdc 	.word	0x20000cdc

0800948c <USB_LP_IRQHandler>:

void USB_LP_IRQHandler() {
 800948c:	b580      	push	{r7, lr}
 800948e:	af00      	add	r7, sp, #0
	usb.USBInterruptHandler();
 8009490:	4802      	ldr	r0, [pc, #8]	; (800949c <USB_LP_IRQHandler+0x10>)
 8009492:	f7fd f9b1 	bl	80067f8 <_ZN7USBMain19USBInterruptHandlerEv>
}
 8009496:	bf00      	nop
 8009498:	bd80      	pop	{r7, pc}
 800949a:	bf00      	nop
 800949c:	200003e4 	.word	0x200003e4

080094a0 <EXTI4_IRQHandler>:

void EXTI4_IRQHandler() {
 80094a0:	b480      	push	{r7}
 80094a2:	af00      	add	r7, sp, #0
	EXTI->PR1 = EXTI_PR1_PIF4;
 80094a4:	4b03      	ldr	r3, [pc, #12]	; (80094b4 <EXTI4_IRQHandler+0x14>)
 80094a6:	2210      	movs	r2, #16
 80094a8:	60da      	str	r2, [r3, #12]
	// FIXME Button pressed
}
 80094aa:	bf00      	nop
 80094ac:	46bd      	mov	sp, r7
 80094ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094b2:	4770      	bx	lr
 80094b4:	58000800 	.word	0x58000800

080094b8 <TIM2_IRQHandler>:


void TIM2_IRQHandler() {
 80094b8:	b580      	push	{r7, lr}
 80094ba:	af00      	add	r7, sp, #0
	TIM2->SR &= ~TIM_SR_UIF;
 80094bc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80094c0:	691b      	ldr	r3, [r3, #16]
 80094c2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80094c6:	f023 0301 	bic.w	r3, r3, #1
 80094ca:	6113      	str	r3, [r2, #16]
	GPIOB->ODR |= GPIO_ODR_OD8;
 80094cc:	4b08      	ldr	r3, [pc, #32]	; (80094f0 <TIM2_IRQHandler+0x38>)
 80094ce:	695b      	ldr	r3, [r3, #20]
 80094d0:	4a07      	ldr	r2, [pc, #28]	; (80094f0 <TIM2_IRQHandler+0x38>)
 80094d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80094d6:	6153      	str	r3, [r2, #20]
	gyro.OutputGyro();
 80094d8:	4806      	ldr	r0, [pc, #24]	; (80094f4 <TIM2_IRQHandler+0x3c>)
 80094da:	f7fc fd95 	bl	8006008 <_ZN7GyroSPI10OutputGyroEv>
	GPIOB->ODR &= ~GPIO_ODR_OD8;
 80094de:	4b04      	ldr	r3, [pc, #16]	; (80094f0 <TIM2_IRQHandler+0x38>)
 80094e0:	695b      	ldr	r3, [r3, #20]
 80094e2:	4a03      	ldr	r2, [pc, #12]	; (80094f0 <TIM2_IRQHandler+0x38>)
 80094e4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80094e8:	6153      	str	r3, [r2, #20]
}
 80094ea:	bf00      	nop
 80094ec:	bd80      	pop	{r7, pc}
 80094ee:	bf00      	nop
 80094f0:	48000400 	.word	0x48000400
 80094f4:	200003d8 	.word	0x200003d8

080094f8 <HSEM_IRQHandler>:

void HSEM_IRQHandler() {		// This doesn't seem to be being used
 80094f8:	b480      	push	{r7}
 80094fa:	af00      	add	r7, sp, #0
//	HAL_HSEM_IRQHandler();
}
 80094fc:	bf00      	nop
 80094fe:	46bd      	mov	sp, r7
 8009500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009504:	4770      	bx	lr

08009506 <RTC_WKUP_IRQHandler>:

void RTC_WKUP_IRQHandler() {
 8009506:	b580      	push	{r7, lr}
 8009508:	af00      	add	r7, sp, #0
	HW_TS_RTC_Wakeup_Handler();
 800950a:	f7fa fb97 	bl	8003c3c <HW_TS_RTC_Wakeup_Handler>
}
 800950e:	bf00      	nop
 8009510:	bd80      	pop	{r7, pc}

08009512 <IPCC_C1_RX_IRQHandler>:

void IPCC_C1_RX_IRQHandler() {
 8009512:	b580      	push	{r7, lr}
 8009514:	af00      	add	r7, sp, #0
	HW_IPCC_Rx_Handler();
 8009516:	f7f9 ff01 	bl	800331c <HW_IPCC_Rx_Handler>
}
 800951a:	bf00      	nop
 800951c:	bd80      	pop	{r7, pc}

0800951e <IPCC_C1_TX_IRQHandler>:

void IPCC_C1_TX_IRQHandler() {
 800951e:	b580      	push	{r7, lr}
 8009520:	af00      	add	r7, sp, #0
	HW_IPCC_Tx_Handler();
 8009522:	f7f9 ff31 	bl	8003388 <HW_IPCC_Tx_Handler>
}
 8009526:	bf00      	nop
 8009528:	bd80      	pop	{r7, pc}

0800952a <NMI_Handler>:

void NMI_Handler() {
 800952a:	b480      	push	{r7}
 800952c:	af00      	add	r7, sp, #0
	while (1) {	}
 800952e:	e7fe      	b.n	800952e <NMI_Handler+0x4>

08009530 <HardFault_Handler>:
}

void HardFault_Handler() {
 8009530:	b480      	push	{r7}
 8009532:	af00      	add	r7, sp, #0
	while (1) { }
 8009534:	e7fe      	b.n	8009534 <HardFault_Handler+0x4>

08009536 <MemManage_Handler>:
}

void MemManage_Handler() {
 8009536:	b480      	push	{r7}
 8009538:	af00      	add	r7, sp, #0
	while (1) { }
 800953a:	e7fe      	b.n	800953a <MemManage_Handler+0x4>

0800953c <BusFault_Handler>:
}

void BusFault_Handler(){
 800953c:	b480      	push	{r7}
 800953e:	af00      	add	r7, sp, #0
	while (1) { }
 8009540:	e7fe      	b.n	8009540 <BusFault_Handler+0x4>

08009542 <UsageFault_Handler>:
}

void UsageFault_Handler() {
 8009542:	b480      	push	{r7}
 8009544:	af00      	add	r7, sp, #0
	while (1) { }
 8009546:	e7fe      	b.n	8009546 <UsageFault_Handler+0x4>

08009548 <SVC_Handler>:
}

void SVC_Handler() {}
 8009548:	b480      	push	{r7}
 800954a:	af00      	add	r7, sp, #0
 800954c:	bf00      	nop
 800954e:	46bd      	mov	sp, r7
 8009550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009554:	4770      	bx	lr

08009556 <DebugMon_Handler>:

void DebugMon_Handler() {}
 8009556:	b480      	push	{r7}
 8009558:	af00      	add	r7, sp, #0
 800955a:	bf00      	nop
 800955c:	46bd      	mov	sp, r7
 800955e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009562:	4770      	bx	lr

08009564 <PendSV_Handler>:

void PendSV_Handler() {}
 8009564:	b480      	push	{r7}
 8009566:	af00      	add	r7, sp, #0
 8009568:	bf00      	nop
 800956a:	46bd      	mov	sp, r7
 800956c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009570:	4770      	bx	lr
	...

08009574 <main>:

bool sleep = false;
volatile uint32_t SysTickVal;

int main(void)
{
 8009574:	b580      	push	{r7, lr}
 8009576:	af00      	add	r7, sp, #0
	SystemClock_Config();			// Set system clocks
 8009578:	f7ff fd0e 	bl	8008f98 <_Z18SystemClock_Configv>
	SystemCoreClockUpdate();		// Read configured clock speed into SystemCoreClock (system clock frequency)
 800957c:	f7fa ffc0 	bl	8004500 <SystemCoreClockUpdate>

	InitHardware();					// Initialise HSEM, IPCC, RTC, EXTI
 8009580:	f7ff fe68 	bl	8009254 <_Z12InitHardwarev>
	usb.InitUSB();
 8009584:	4806      	ldr	r0, [pc, #24]	; (80095a0 <main+0x2c>)
 8009586:	f7fd fbeb 	bl	8006d60 <_ZN7USBMain7InitUSBEv>
	APPE_Init();					// Initialise low level BLE functions and schedule start of BLE
 800958a:	f7fe fef3 	bl	8008374 <_Z9APPE_Initv>

//	gyro.Setup();					// Setup address and settings for gyroscope


	while (1) {
		RunPendingTasks();			// Run any tasks pending in the sequencer
 800958e:	f7fe ff51 	bl	8008434 <_Z15RunPendingTasksv>
		usb.cdc.ProcessCommand();	// Check for incoming CDC commands
 8009592:	4804      	ldr	r0, [pc, #16]	; (80095a4 <main+0x30>)
 8009594:	f7fb fcf2 	bl	8004f7c <_ZN10CDCHandler14ProcessCommandEv>
		basService.TimedRead();		// Updates battery level every few seconds if changed
 8009598:	4803      	ldr	r0, [pc, #12]	; (80095a8 <main+0x34>)
 800959a:	f7ff f85d 	bl	8008658 <_ZN10BasService9TimedReadEv>
		RunPendingTasks();			// Run any tasks pending in the sequencer
 800959e:	e7f6      	b.n	800958e <main+0x1a>
 80095a0:	200003e4 	.word	0x200003e4
 80095a4:	20000514 	.word	0x20000514
 80095a8:	20000ca8 	.word	0x20000ca8

080095ac <_ZNSaIcEC1Ev>:
 80095ac:	4770      	bx	lr

080095ae <_ZNSaIcED1Ev>:
 80095ae:	4770      	bx	lr

080095b0 <_ZSt17__throw_bad_allocv>:
 80095b0:	b508      	push	{r3, lr}
 80095b2:	f000 fac1 	bl	8009b38 <abort>

080095b6 <_ZSt19__throw_logic_errorPKc>:
 80095b6:	b508      	push	{r3, lr}
 80095b8:	f000 fabe 	bl	8009b38 <abort>

080095bc <_ZSt20__throw_length_errorPKc>:
 80095bc:	b508      	push	{r3, lr}
 80095be:	f000 fabb 	bl	8009b38 <abort>

080095c2 <_ZSt24__throw_out_of_range_fmtPKcz>:
 80095c2:	b40f      	push	{r0, r1, r2, r3}
 80095c4:	b580      	push	{r7, lr}
 80095c6:	b084      	sub	sp, #16
 80095c8:	af00      	add	r7, sp, #0
 80095ca:	f107 0418 	add.w	r4, r7, #24
 80095ce:	f854 2b04 	ldr.w	r2, [r4], #4
 80095d2:	607a      	str	r2, [r7, #4]
 80095d4:	4610      	mov	r0, r2
 80095d6:	f7f6 fe23 	bl	8000220 <strlen>
 80095da:	f200 2307 	addw	r3, r0, #519	; 0x207
 80095de:	f023 0307 	bic.w	r3, r3, #7
 80095e2:	ebad 0d03 	sub.w	sp, sp, r3
 80095e6:	f500 7100 	add.w	r1, r0, #512	; 0x200
 80095ea:	687a      	ldr	r2, [r7, #4]
 80095ec:	60fc      	str	r4, [r7, #12]
 80095ee:	4623      	mov	r3, r4
 80095f0:	4668      	mov	r0, sp
 80095f2:	f000 f855 	bl	80096a0 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list>
 80095f6:	f000 fa9f 	bl	8009b38 <abort>
	...

080095fc <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_>:
 80095fc:	b580      	push	{r7, lr}
 80095fe:	b09c      	sub	sp, #112	; 0x70
 8009600:	4606      	mov	r6, r0
 8009602:	af00      	add	r7, sp, #0
 8009604:	460c      	mov	r4, r1
 8009606:	1ba4      	subs	r4, r4, r6
 8009608:	490e      	ldr	r1, [pc, #56]	; (8009644 <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_+0x48>)
 800960a:	2269      	movs	r2, #105	; 0x69
 800960c:	1d38      	adds	r0, r7, #4
 800960e:	f001 fb17 	bl	800ac40 <memcpy>
 8009612:	f104 0370 	add.w	r3, r4, #112	; 0x70
 8009616:	f023 0307 	bic.w	r3, r3, #7
 800961a:	ebad 0d03 	sub.w	sp, sp, r3
 800961e:	466d      	mov	r5, sp
 8009620:	2268      	movs	r2, #104	; 0x68
 8009622:	1d39      	adds	r1, r7, #4
 8009624:	4628      	mov	r0, r5
 8009626:	f001 fb0b 	bl	800ac40 <memcpy>
 800962a:	4622      	mov	r2, r4
 800962c:	4631      	mov	r1, r6
 800962e:	f105 0068 	add.w	r0, r5, #104	; 0x68
 8009632:	442c      	add	r4, r5
 8009634:	f001 fb04 	bl	800ac40 <memcpy>
 8009638:	2300      	movs	r3, #0
 800963a:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
 800963e:	4628      	mov	r0, r5
 8009640:	f7ff ffb9 	bl	80095b6 <_ZSt19__throw_logic_errorPKc>
 8009644:	0800d6dc 	.word	0x0800d6dc

08009648 <_ZN9__gnu_cxx15__concat_size_tEPcjj>:
 8009648:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800964c:	af00      	add	r7, sp, #0
 800964e:	b084      	sub	sp, #16
 8009650:	466d      	mov	r5, sp
 8009652:	f105 040c 	add.w	r4, r5, #12
 8009656:	f8df 8044 	ldr.w	r8, [pc, #68]	; 800969c <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x54>
 800965a:	4623      	mov	r3, r4
 800965c:	f04f 0c0a 	mov.w	ip, #10
 8009660:	fbb2 f6fc 	udiv	r6, r2, ip
 8009664:	fb0c 2e16 	mls	lr, ip, r6, r2
 8009668:	f818 e00e 	ldrb.w	lr, [r8, lr]
 800966c:	f803 ed01 	strb.w	lr, [r3, #-1]!
 8009670:	4696      	mov	lr, r2
 8009672:	f1be 0f09 	cmp.w	lr, #9
 8009676:	4632      	mov	r2, r6
 8009678:	d8f2      	bhi.n	8009660 <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x18>
 800967a:	1ae4      	subs	r4, r4, r3
 800967c:	428c      	cmp	r4, r1
 800967e:	d809      	bhi.n	8009694 <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x4c>
 8009680:	f1c4 010c 	rsb	r1, r4, #12
 8009684:	4622      	mov	r2, r4
 8009686:	4429      	add	r1, r5
 8009688:	f001 fada 	bl	800ac40 <memcpy>
 800968c:	4620      	mov	r0, r4
 800968e:	46bd      	mov	sp, r7
 8009690:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009694:	f04f 34ff 	mov.w	r4, #4294967295
 8009698:	e7f8      	b.n	800968c <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x44>
 800969a:	bf00      	nop
 800969c:	0800d745 	.word	0x0800d745

080096a0 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list>:
 80096a0:	3901      	subs	r1, #1
 80096a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80096a6:	4607      	mov	r7, r0
 80096a8:	4615      	mov	r5, r2
 80096aa:	eb00 0801 	add.w	r8, r0, r1
 80096ae:	4604      	mov	r4, r0
 80096b0:	782a      	ldrb	r2, [r5, #0]
 80096b2:	b392      	cbz	r2, 800971a <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x7a>
 80096b4:	4544      	cmp	r4, r8
 80096b6:	d216      	bcs.n	80096e6 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x46>
 80096b8:	2a25      	cmp	r2, #37	; 0x25
 80096ba:	d107      	bne.n	80096cc <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2c>
 80096bc:	786a      	ldrb	r2, [r5, #1]
 80096be:	2a73      	cmp	r2, #115	; 0x73
 80096c0:	d009      	beq.n	80096d6 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x36>
 80096c2:	2a7a      	cmp	r2, #122	; 0x7a
 80096c4:	d016      	beq.n	80096f4 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x54>
 80096c6:	2a25      	cmp	r2, #37	; 0x25
 80096c8:	d100      	bne.n	80096cc <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2c>
 80096ca:	3501      	adds	r5, #1
 80096cc:	f815 2b01 	ldrb.w	r2, [r5], #1
 80096d0:	f804 2b01 	strb.w	r2, [r4], #1
 80096d4:	e7ec      	b.n	80096b0 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x10>
 80096d6:	f853 2b04 	ldr.w	r2, [r3], #4
 80096da:	3a01      	subs	r2, #1
 80096dc:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 80096e0:	b1c9      	cbz	r1, 8009716 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x76>
 80096e2:	4544      	cmp	r4, r8
 80096e4:	d103      	bne.n	80096ee <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x4e>
 80096e6:	4621      	mov	r1, r4
 80096e8:	4638      	mov	r0, r7
 80096ea:	f7ff ff87 	bl	80095fc <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_>
 80096ee:	f804 1b01 	strb.w	r1, [r4], #1
 80096f2:	e7f3      	b.n	80096dc <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x3c>
 80096f4:	78aa      	ldrb	r2, [r5, #2]
 80096f6:	2a75      	cmp	r2, #117	; 0x75
 80096f8:	d1e8      	bne.n	80096cc <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2c>
 80096fa:	461e      	mov	r6, r3
 80096fc:	eba8 0104 	sub.w	r1, r8, r4
 8009700:	f856 2b04 	ldr.w	r2, [r6], #4
 8009704:	4620      	mov	r0, r4
 8009706:	f7ff ff9f 	bl	8009648 <_ZN9__gnu_cxx15__concat_size_tEPcjj>
 800970a:	2800      	cmp	r0, #0
 800970c:	ddeb      	ble.n	80096e6 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x46>
 800970e:	4404      	add	r4, r0
 8009710:	3503      	adds	r5, #3
 8009712:	4633      	mov	r3, r6
 8009714:	e7cc      	b.n	80096b0 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x10>
 8009716:	3502      	adds	r5, #2
 8009718:	e7ca      	b.n	80096b0 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x10>
 800971a:	7022      	strb	r2, [r4, #0]
 800971c:	1be0      	subs	r0, r4, r7
 800971e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08009722 <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0>:
 8009722:	b10a      	cbz	r2, 8009728 <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0+0x6>
 8009724:	f001 ba8c 	b.w	800ac40 <memcpy>
 8009728:	4770      	bx	lr
	...

0800972c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>:
 800972c:	b508      	push	{r3, lr}
 800972e:	680b      	ldr	r3, [r1, #0]
 8009730:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009734:	d302      	bcc.n	800973c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x10>
 8009736:	480d      	ldr	r0, [pc, #52]	; (800976c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x40>)
 8009738:	f7ff ff40 	bl	80095bc <_ZSt20__throw_length_errorPKc>
 800973c:	4293      	cmp	r3, r2
 800973e:	d90b      	bls.n	8009758 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 8009740:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
 8009744:	ea4f 0042 	mov.w	r0, r2, lsl #1
 8009748:	d206      	bcs.n	8009758 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 800974a:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800974e:	bf2a      	itet	cs
 8009750:	f06f 4340 	mvncs.w	r3, #3221225472	; 0xc0000000
 8009754:	6008      	strcc	r0, [r1, #0]
 8009756:	600b      	strcs	r3, [r1, #0]
 8009758:	6808      	ldr	r0, [r1, #0]
 800975a:	3001      	adds	r0, #1
 800975c:	d501      	bpl.n	8009762 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x36>
 800975e:	f7ff ff27 	bl	80095b0 <_ZSt17__throw_bad_allocv>
 8009762:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8009766:	f000 b9cd 	b.w	8009b04 <_Znwj>
 800976a:	bf00      	nop
 800976c:	0800d750 	.word	0x0800d750

08009770 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>:
 8009770:	f850 3b08 	ldr.w	r3, [r0], #8
 8009774:	4283      	cmp	r3, r0
 8009776:	d002      	beq.n	800977e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv+0xe>
 8009778:	4618      	mov	r0, r3
 800977a:	f000 b9c1 	b.w	8009b00 <_ZdlPv>
 800977e:	4770      	bx	lr

08009780 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc>:
 8009780:	b508      	push	{r3, lr}
 8009782:	4603      	mov	r3, r0
 8009784:	4608      	mov	r0, r1
 8009786:	685b      	ldr	r3, [r3, #4]
 8009788:	4298      	cmp	r0, r3
 800978a:	4611      	mov	r1, r2
 800978c:	d903      	bls.n	8009796 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc+0x16>
 800978e:	4602      	mov	r2, r0
 8009790:	4801      	ldr	r0, [pc, #4]	; (8009798 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc+0x18>)
 8009792:	f7ff ff16 	bl	80095c2 <_ZSt24__throw_out_of_range_fmtPKcz>
 8009796:	bd08      	pop	{r3, pc}
 8009798:	0800d768 	.word	0x0800d768

0800979c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>:
 800979c:	6840      	ldr	r0, [r0, #4]
 800979e:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 80097a2:	3901      	subs	r1, #1
 80097a4:	1a09      	subs	r1, r1, r0
 80097a6:	4291      	cmp	r1, r2
 80097a8:	b508      	push	{r3, lr}
 80097aa:	d202      	bcs.n	80097b2 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc+0x16>
 80097ac:	4618      	mov	r0, r3
 80097ae:	f7ff ff05 	bl	80095bc <_ZSt20__throw_length_errorPKc>
 80097b2:	bd08      	pop	{r3, pc}

080097b4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_disjunctEPKc>:
 80097b4:	6803      	ldr	r3, [r0, #0]
 80097b6:	428b      	cmp	r3, r1
 80097b8:	d806      	bhi.n	80097c8 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_disjunctEPKc+0x14>
 80097ba:	6842      	ldr	r2, [r0, #4]
 80097bc:	4413      	add	r3, r2
 80097be:	4299      	cmp	r1, r3
 80097c0:	bf94      	ite	ls
 80097c2:	2000      	movls	r0, #0
 80097c4:	2001      	movhi	r0, #1
 80097c6:	4770      	bx	lr
 80097c8:	2001      	movs	r0, #1
 80097ca:	4770      	bx	lr

080097cc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>:
 80097cc:	2a01      	cmp	r2, #1
 80097ce:	b410      	push	{r4}
 80097d0:	d104      	bne.n	80097dc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0x10>
 80097d2:	780a      	ldrb	r2, [r1, #0]
 80097d4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80097d8:	7002      	strb	r2, [r0, #0]
 80097da:	4770      	bx	lr
 80097dc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80097e0:	f7ff bf9f 	b.w	8009722 <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0>

080097e4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>:
 80097e4:	2a01      	cmp	r2, #1
 80097e6:	b430      	push	{r4, r5}
 80097e8:	d103      	bne.n	80097f2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj+0xe>
 80097ea:	780b      	ldrb	r3, [r1, #0]
 80097ec:	7003      	strb	r3, [r0, #0]
 80097ee:	bc30      	pop	{r4, r5}
 80097f0:	4770      	bx	lr
 80097f2:	2a00      	cmp	r2, #0
 80097f4:	d0fb      	beq.n	80097ee <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj+0xa>
 80097f6:	bc30      	pop	{r4, r5}
 80097f8:	f001 b922 	b.w	800aa40 <memmove>

080097fc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>:
 80097fc:	b508      	push	{r3, lr}
 80097fe:	1a52      	subs	r2, r2, r1
 8009800:	f7ff ffe4 	bl	80097cc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8009804:	bd08      	pop	{r3, pc}

08009806 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>:
 8009806:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 800980a:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800980c:	461f      	mov	r7, r3
 800980e:	6843      	ldr	r3, [r0, #4]
 8009810:	eb01 0802 	add.w	r8, r1, r2
 8009814:	1ab2      	subs	r2, r6, r2
 8009816:	441a      	add	r2, r3
 8009818:	eba3 0908 	sub.w	r9, r3, r8
 800981c:	4603      	mov	r3, r0
 800981e:	9201      	str	r2, [sp, #4]
 8009820:	f853 2b08 	ldr.w	r2, [r3], #8
 8009824:	429a      	cmp	r2, r3
 8009826:	bf18      	it	ne
 8009828:	6882      	ldrne	r2, [r0, #8]
 800982a:	460d      	mov	r5, r1
 800982c:	bf08      	it	eq
 800982e:	220f      	moveq	r2, #15
 8009830:	a901      	add	r1, sp, #4
 8009832:	4604      	mov	r4, r0
 8009834:	f7ff ff7a 	bl	800972c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 8009838:	4682      	mov	sl, r0
 800983a:	b11d      	cbz	r5, 8009844 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x3e>
 800983c:	6821      	ldr	r1, [r4, #0]
 800983e:	462a      	mov	r2, r5
 8009840:	f7ff ffc4 	bl	80097cc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8009844:	b137      	cbz	r7, 8009854 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x4e>
 8009846:	b12e      	cbz	r6, 8009854 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x4e>
 8009848:	4632      	mov	r2, r6
 800984a:	4639      	mov	r1, r7
 800984c:	eb0a 0005 	add.w	r0, sl, r5
 8009850:	f7ff ffbc 	bl	80097cc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8009854:	f1b9 0f00 	cmp.w	r9, #0
 8009858:	d007      	beq.n	800986a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x64>
 800985a:	6821      	ldr	r1, [r4, #0]
 800985c:	4435      	add	r5, r6
 800985e:	464a      	mov	r2, r9
 8009860:	4441      	add	r1, r8
 8009862:	eb0a 0005 	add.w	r0, sl, r5
 8009866:	f7ff ffb1 	bl	80097cc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 800986a:	4620      	mov	r0, r4
 800986c:	f7ff ff80 	bl	8009770 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 8009870:	9b01      	ldr	r3, [sp, #4]
 8009872:	f8c4 a000 	str.w	sl, [r4]
 8009876:	60a3      	str	r3, [r4, #8]
 8009878:	b002      	add	sp, #8
 800987a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800987e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_>:
 800987e:	b570      	push	{r4, r5, r6, lr}
 8009880:	4604      	mov	r4, r0
 8009882:	460e      	mov	r6, r1
 8009884:	3008      	adds	r0, #8
 8009886:	6020      	str	r0, [r4, #0]
 8009888:	f856 3b08 	ldr.w	r3, [r6], #8
 800988c:	429e      	cmp	r6, r3
 800988e:	460d      	mov	r5, r1
 8009890:	d10b      	bne.n	80098aa <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_+0x2c>
 8009892:	2210      	movs	r2, #16
 8009894:	4631      	mov	r1, r6
 8009896:	f7ff ff44 	bl	8009722 <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0>
 800989a:	686b      	ldr	r3, [r5, #4]
 800989c:	6063      	str	r3, [r4, #4]
 800989e:	2300      	movs	r3, #0
 80098a0:	602e      	str	r6, [r5, #0]
 80098a2:	606b      	str	r3, [r5, #4]
 80098a4:	722b      	strb	r3, [r5, #8]
 80098a6:	4620      	mov	r0, r4
 80098a8:	bd70      	pop	{r4, r5, r6, pc}
 80098aa:	6023      	str	r3, [r4, #0]
 80098ac:	688b      	ldr	r3, [r1, #8]
 80098ae:	60a3      	str	r3, [r4, #8]
 80098b0:	e7f3      	b.n	800989a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_+0x1c>

080098b2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>:
 80098b2:	b510      	push	{r4, lr}
 80098b4:	4604      	mov	r4, r0
 80098b6:	f7ff ff5b 	bl	8009770 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 80098ba:	4620      	mov	r0, r4
 80098bc:	bd10      	pop	{r4, pc}
	...

080098c0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj>:
 80098c0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80098c4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80098c6:	4614      	mov	r4, r2
 80098c8:	4680      	mov	r8, r0
 80098ca:	462a      	mov	r2, r5
 80098cc:	4689      	mov	r9, r1
 80098ce:	461f      	mov	r7, r3
 80098d0:	4621      	mov	r1, r4
 80098d2:	4b39      	ldr	r3, [pc, #228]	; (80099b8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xf8>)
 80098d4:	f7ff ff62 	bl	800979c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>
 80098d8:	4642      	mov	r2, r8
 80098da:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80098de:	f852 6b08 	ldr.w	r6, [r2], #8
 80098e2:	4296      	cmp	r6, r2
 80098e4:	bf18      	it	ne
 80098e6:	f8d8 2008 	ldrne.w	r2, [r8, #8]
 80098ea:	eba5 0b04 	sub.w	fp, r5, r4
 80098ee:	eb03 0a0b 	add.w	sl, r3, fp
 80098f2:	bf08      	it	eq
 80098f4:	220f      	moveq	r2, #15
 80098f6:	4552      	cmp	r2, sl
 80098f8:	d351      	bcc.n	800999e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xde>
 80098fa:	444e      	add	r6, r9
 80098fc:	4639      	mov	r1, r7
 80098fe:	44a1      	add	r9, r4
 8009900:	4640      	mov	r0, r8
 8009902:	eba3 0909 	sub.w	r9, r3, r9
 8009906:	f7ff ff55 	bl	80097b4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_disjunctEPKc>
 800990a:	b180      	cbz	r0, 800992e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x6e>
 800990c:	f1b9 0f00 	cmp.w	r9, #0
 8009910:	d006      	beq.n	8009920 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x60>
 8009912:	42ac      	cmp	r4, r5
 8009914:	d004      	beq.n	8009920 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x60>
 8009916:	464a      	mov	r2, r9
 8009918:	1931      	adds	r1, r6, r4
 800991a:	1970      	adds	r0, r6, r5
 800991c:	f7ff ff62 	bl	80097e4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 8009920:	b315      	cbz	r5, 8009968 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa8>
 8009922:	462a      	mov	r2, r5
 8009924:	4639      	mov	r1, r7
 8009926:	4630      	mov	r0, r6
 8009928:	f7ff ff50 	bl	80097cc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 800992c:	e01c      	b.n	8009968 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa8>
 800992e:	b135      	cbz	r5, 800993e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x7e>
 8009930:	42ac      	cmp	r4, r5
 8009932:	d33c      	bcc.n	80099ae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xee>
 8009934:	462a      	mov	r2, r5
 8009936:	4639      	mov	r1, r7
 8009938:	4630      	mov	r0, r6
 800993a:	f7ff ff53 	bl	80097e4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 800993e:	f1b9 0f00 	cmp.w	r9, #0
 8009942:	d011      	beq.n	8009968 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa8>
 8009944:	42ac      	cmp	r4, r5
 8009946:	d00f      	beq.n	8009968 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa8>
 8009948:	464a      	mov	r2, r9
 800994a:	1931      	adds	r1, r6, r4
 800994c:	1970      	adds	r0, r6, r5
 800994e:	f7ff ff49 	bl	80097e4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 8009952:	42ac      	cmp	r4, r5
 8009954:	d208      	bcs.n	8009968 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa8>
 8009956:	4434      	add	r4, r6
 8009958:	197b      	adds	r3, r7, r5
 800995a:	429c      	cmp	r4, r3
 800995c:	d30f      	bcc.n	800997e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xbe>
 800995e:	462a      	mov	r2, r5
 8009960:	4639      	mov	r1, r7
 8009962:	4630      	mov	r0, r6
 8009964:	f7ff ff3e 	bl	80097e4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 8009968:	f8d8 3000 	ldr.w	r3, [r8]
 800996c:	f8c8 a004 	str.w	sl, [r8, #4]
 8009970:	2200      	movs	r2, #0
 8009972:	4640      	mov	r0, r8
 8009974:	f803 200a 	strb.w	r2, [r3, sl]
 8009978:	b003      	add	sp, #12
 800997a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800997e:	42bc      	cmp	r4, r7
 8009980:	d803      	bhi.n	800998a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xca>
 8009982:	462a      	mov	r2, r5
 8009984:	eb07 010b 	add.w	r1, r7, fp
 8009988:	e7cd      	b.n	8009926 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x66>
 800998a:	1be4      	subs	r4, r4, r7
 800998c:	4622      	mov	r2, r4
 800998e:	4639      	mov	r1, r7
 8009990:	4630      	mov	r0, r6
 8009992:	f7ff ff27 	bl	80097e4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 8009996:	1b2a      	subs	r2, r5, r4
 8009998:	1971      	adds	r1, r6, r5
 800999a:	1930      	adds	r0, r6, r4
 800999c:	e7c4      	b.n	8009928 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x68>
 800999e:	9500      	str	r5, [sp, #0]
 80099a0:	463b      	mov	r3, r7
 80099a2:	4622      	mov	r2, r4
 80099a4:	4649      	mov	r1, r9
 80099a6:	4640      	mov	r0, r8
 80099a8:	f7ff ff2d 	bl	8009806 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>
 80099ac:	e7dc      	b.n	8009968 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa8>
 80099ae:	f1b9 0f00 	cmp.w	r9, #0
 80099b2:	d0d0      	beq.n	8009956 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x96>
 80099b4:	e7c8      	b.n	8009948 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x88>
 80099b6:	bf00      	nop
 80099b8:	0800d7b5 	.word	0x0800d7b5

080099bc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7replaceEjjPKcj>:
 80099bc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80099be:	4604      	mov	r4, r0
 80099c0:	4615      	mov	r5, r2
 80099c2:	4a09      	ldr	r2, [pc, #36]	; (80099e8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7replaceEjjPKcj+0x2c>)
 80099c4:	9303      	str	r3, [sp, #12]
 80099c6:	460e      	mov	r6, r1
 80099c8:	f7ff feda 	bl	8009780 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc>
 80099cc:	6862      	ldr	r2, [r4, #4]
 80099ce:	9b03      	ldr	r3, [sp, #12]
 80099d0:	1b92      	subs	r2, r2, r6
 80099d2:	4601      	mov	r1, r0
 80099d4:	42aa      	cmp	r2, r5
 80099d6:	9808      	ldr	r0, [sp, #32]
 80099d8:	9000      	str	r0, [sp, #0]
 80099da:	bf28      	it	cs
 80099dc:	462a      	movcs	r2, r5
 80099de:	4620      	mov	r0, r4
 80099e0:	f7ff ff6e 	bl	80098c0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj>
 80099e4:	b004      	add	sp, #16
 80099e6:	bd70      	pop	{r4, r5, r6, pc}
 80099e8:	0800d79f 	.word	0x0800d79f

080099ec <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6insertEjPKc>:
 80099ec:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80099ee:	4604      	mov	r4, r0
 80099f0:	4610      	mov	r0, r2
 80099f2:	9103      	str	r1, [sp, #12]
 80099f4:	9202      	str	r2, [sp, #8]
 80099f6:	f7f6 fc13 	bl	8000220 <strlen>
 80099fa:	9b02      	ldr	r3, [sp, #8]
 80099fc:	9000      	str	r0, [sp, #0]
 80099fe:	9903      	ldr	r1, [sp, #12]
 8009a00:	2200      	movs	r2, #0
 8009a02:	4620      	mov	r0, r4
 8009a04:	f7ff ffda 	bl	80099bc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7replaceEjjPKcj>
 8009a08:	b004      	add	sp, #16
 8009a0a:	bd10      	pop	{r4, pc}

08009a0c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj>:
 8009a0c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009a0e:	4604      	mov	r4, r0
 8009a10:	4623      	mov	r3, r4
 8009a12:	6840      	ldr	r0, [r0, #4]
 8009a14:	f853 6b08 	ldr.w	r6, [r3], #8
 8009a18:	429e      	cmp	r6, r3
 8009a1a:	bf18      	it	ne
 8009a1c:	68a3      	ldrne	r3, [r4, #8]
 8009a1e:	eb00 0502 	add.w	r5, r0, r2
 8009a22:	bf08      	it	eq
 8009a24:	230f      	moveq	r3, #15
 8009a26:	429d      	cmp	r5, r3
 8009a28:	d80a      	bhi.n	8009a40 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj+0x34>
 8009a2a:	b112      	cbz	r2, 8009a32 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj+0x26>
 8009a2c:	4430      	add	r0, r6
 8009a2e:	f7ff fecd 	bl	80097cc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8009a32:	6823      	ldr	r3, [r4, #0]
 8009a34:	6065      	str	r5, [r4, #4]
 8009a36:	2200      	movs	r2, #0
 8009a38:	4620      	mov	r0, r4
 8009a3a:	555a      	strb	r2, [r3, r5]
 8009a3c:	b002      	add	sp, #8
 8009a3e:	bd70      	pop	{r4, r5, r6, pc}
 8009a40:	9200      	str	r2, [sp, #0]
 8009a42:	460b      	mov	r3, r1
 8009a44:	2200      	movs	r2, #0
 8009a46:	4601      	mov	r1, r0
 8009a48:	4620      	mov	r0, r4
 8009a4a:	f7ff fedc 	bl	8009806 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>
 8009a4e:	e7f0      	b.n	8009a32 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj+0x26>

08009a50 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKc>:
 8009a50:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009a52:	4604      	mov	r4, r0
 8009a54:	4608      	mov	r0, r1
 8009a56:	460d      	mov	r5, r1
 8009a58:	f7f6 fbe2 	bl	8000220 <strlen>
 8009a5c:	4b06      	ldr	r3, [pc, #24]	; (8009a78 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKc+0x28>)
 8009a5e:	9001      	str	r0, [sp, #4]
 8009a60:	4602      	mov	r2, r0
 8009a62:	2100      	movs	r1, #0
 8009a64:	4620      	mov	r0, r4
 8009a66:	f7ff fe99 	bl	800979c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>
 8009a6a:	9a01      	ldr	r2, [sp, #4]
 8009a6c:	4629      	mov	r1, r5
 8009a6e:	4620      	mov	r0, r4
 8009a70:	f7ff ffcc 	bl	8009a0c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj>
 8009a74:	b003      	add	sp, #12
 8009a76:	bd30      	pop	{r4, r5, pc}
 8009a78:	0800d7ce 	.word	0x0800d7ce

08009a7c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>:
 8009a7c:	6800      	ldr	r0, [r0, #0]
 8009a7e:	4770      	bx	lr

08009a80 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ENS4_12__sv_wrapperERKS3_>:
 8009a80:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8009a82:	466b      	mov	r3, sp
 8009a84:	e883 0006 	stmia.w	r3, {r1, r2}
 8009a88:	4615      	mov	r5, r2
 8009a8a:	f100 0208 	add.w	r2, r0, #8
 8009a8e:	4604      	mov	r4, r0
 8009a90:	460b      	mov	r3, r1
 8009a92:	6002      	str	r2, [r0, #0]
 8009a94:	186e      	adds	r6, r5, r1
 8009a96:	b91d      	cbnz	r5, 8009aa0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ENS4_12__sv_wrapperERKS3_+0x20>
 8009a98:	b116      	cbz	r6, 8009aa0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ENS4_12__sv_wrapperERKS3_+0x20>
 8009a9a:	480d      	ldr	r0, [pc, #52]	; (8009ad0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ENS4_12__sv_wrapperERKS3_+0x50>)
 8009a9c:	f7ff fd8b 	bl	80095b6 <_ZSt19__throw_logic_errorPKc>
 8009aa0:	2b0f      	cmp	r3, #15
 8009aa2:	9303      	str	r3, [sp, #12]
 8009aa4:	d907      	bls.n	8009ab6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ENS4_12__sv_wrapperERKS3_+0x36>
 8009aa6:	2200      	movs	r2, #0
 8009aa8:	a903      	add	r1, sp, #12
 8009aaa:	4620      	mov	r0, r4
 8009aac:	f7ff fe3e 	bl	800972c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 8009ab0:	9b03      	ldr	r3, [sp, #12]
 8009ab2:	6020      	str	r0, [r4, #0]
 8009ab4:	60a3      	str	r3, [r4, #8]
 8009ab6:	6820      	ldr	r0, [r4, #0]
 8009ab8:	4632      	mov	r2, r6
 8009aba:	4629      	mov	r1, r5
 8009abc:	f7ff fe9e 	bl	80097fc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>
 8009ac0:	9b03      	ldr	r3, [sp, #12]
 8009ac2:	6822      	ldr	r2, [r4, #0]
 8009ac4:	6063      	str	r3, [r4, #4]
 8009ac6:	2100      	movs	r1, #0
 8009ac8:	4620      	mov	r0, r4
 8009aca:	54d1      	strb	r1, [r2, r3]
 8009acc:	b004      	add	sp, #16
 8009ace:	bd70      	pop	{r4, r5, r6, pc}
 8009ad0:	0800d7e3 	.word	0x0800d7e3

08009ad4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12__sv_wrapperC1ESt17basic_string_viewIcS2_E>:
 8009ad4:	b082      	sub	sp, #8
 8009ad6:	4603      	mov	r3, r0
 8009ad8:	4668      	mov	r0, sp
 8009ada:	e880 0006 	stmia.w	r0, {r1, r2}
 8009ade:	c803      	ldmia	r0, {r0, r1}
 8009ae0:	e883 0005 	stmia.w	r3, {r0, r2}
 8009ae4:	4618      	mov	r0, r3
 8009ae6:	b002      	add	sp, #8
 8009ae8:	4770      	bx	lr

08009aea <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE17_S_to_string_viewESt17basic_string_viewIcS2_E>:
 8009aea:	b082      	sub	sp, #8
 8009aec:	4603      	mov	r3, r0
 8009aee:	4668      	mov	r0, sp
 8009af0:	e880 0006 	stmia.w	r0, {r1, r2}
 8009af4:	c803      	ldmia	r0, {r0, r1}
 8009af6:	e883 0005 	stmia.w	r3, {r0, r2}
 8009afa:	4618      	mov	r0, r3
 8009afc:	b002      	add	sp, #8
 8009afe:	4770      	bx	lr

08009b00 <_ZdlPv>:
 8009b00:	f000 b82a 	b.w	8009b58 <free>

08009b04 <_Znwj>:
 8009b04:	2801      	cmp	r0, #1
 8009b06:	bf38      	it	cc
 8009b08:	2001      	movcc	r0, #1
 8009b0a:	b510      	push	{r4, lr}
 8009b0c:	4604      	mov	r4, r0
 8009b0e:	4620      	mov	r0, r4
 8009b10:	f000 f81a 	bl	8009b48 <malloc>
 8009b14:	b100      	cbz	r0, 8009b18 <_Znwj+0x14>
 8009b16:	bd10      	pop	{r4, pc}
 8009b18:	f000 f806 	bl	8009b28 <_ZSt15get_new_handlerv>
 8009b1c:	b908      	cbnz	r0, 8009b22 <_Znwj+0x1e>
 8009b1e:	f000 f80b 	bl	8009b38 <abort>
 8009b22:	4780      	blx	r0
 8009b24:	e7f3      	b.n	8009b0e <_Znwj+0xa>
	...

08009b28 <_ZSt15get_new_handlerv>:
 8009b28:	4b02      	ldr	r3, [pc, #8]	; (8009b34 <_ZSt15get_new_handlerv+0xc>)
 8009b2a:	6818      	ldr	r0, [r3, #0]
 8009b2c:	f3bf 8f5b 	dmb	ish
 8009b30:	4770      	bx	lr
 8009b32:	bf00      	nop
 8009b34:	20000ce0 	.word	0x20000ce0

08009b38 <abort>:
 8009b38:	b508      	push	{r3, lr}
 8009b3a:	2006      	movs	r0, #6
 8009b3c:	f000 ffde 	bl	800aafc <raise>
 8009b40:	2001      	movs	r0, #1
 8009b42:	f7fa fbfe 	bl	8004342 <_exit>
	...

08009b48 <malloc>:
 8009b48:	4b02      	ldr	r3, [pc, #8]	; (8009b54 <malloc+0xc>)
 8009b4a:	4601      	mov	r1, r0
 8009b4c:	6818      	ldr	r0, [r3, #0]
 8009b4e:	f000 b82b 	b.w	8009ba8 <_malloc_r>
 8009b52:	bf00      	nop
 8009b54:	200001d4 	.word	0x200001d4

08009b58 <free>:
 8009b58:	4b02      	ldr	r3, [pc, #8]	; (8009b64 <free+0xc>)
 8009b5a:	4601      	mov	r1, r0
 8009b5c:	6818      	ldr	r0, [r3, #0]
 8009b5e:	f001 bef9 	b.w	800b954 <_free_r>
 8009b62:	bf00      	nop
 8009b64:	200001d4 	.word	0x200001d4

08009b68 <sbrk_aligned>:
 8009b68:	b570      	push	{r4, r5, r6, lr}
 8009b6a:	4e0e      	ldr	r6, [pc, #56]	; (8009ba4 <sbrk_aligned+0x3c>)
 8009b6c:	460c      	mov	r4, r1
 8009b6e:	6831      	ldr	r1, [r6, #0]
 8009b70:	4605      	mov	r5, r0
 8009b72:	b911      	cbnz	r1, 8009b7a <sbrk_aligned+0x12>
 8009b74:	f001 f816 	bl	800aba4 <_sbrk_r>
 8009b78:	6030      	str	r0, [r6, #0]
 8009b7a:	4621      	mov	r1, r4
 8009b7c:	4628      	mov	r0, r5
 8009b7e:	f001 f811 	bl	800aba4 <_sbrk_r>
 8009b82:	1c43      	adds	r3, r0, #1
 8009b84:	d00a      	beq.n	8009b9c <sbrk_aligned+0x34>
 8009b86:	1cc4      	adds	r4, r0, #3
 8009b88:	f024 0403 	bic.w	r4, r4, #3
 8009b8c:	42a0      	cmp	r0, r4
 8009b8e:	d007      	beq.n	8009ba0 <sbrk_aligned+0x38>
 8009b90:	1a21      	subs	r1, r4, r0
 8009b92:	4628      	mov	r0, r5
 8009b94:	f001 f806 	bl	800aba4 <_sbrk_r>
 8009b98:	3001      	adds	r0, #1
 8009b9a:	d101      	bne.n	8009ba0 <sbrk_aligned+0x38>
 8009b9c:	f04f 34ff 	mov.w	r4, #4294967295
 8009ba0:	4620      	mov	r0, r4
 8009ba2:	bd70      	pop	{r4, r5, r6, pc}
 8009ba4:	20000ce8 	.word	0x20000ce8

08009ba8 <_malloc_r>:
 8009ba8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009bac:	1ccd      	adds	r5, r1, #3
 8009bae:	f025 0503 	bic.w	r5, r5, #3
 8009bb2:	3508      	adds	r5, #8
 8009bb4:	2d0c      	cmp	r5, #12
 8009bb6:	bf38      	it	cc
 8009bb8:	250c      	movcc	r5, #12
 8009bba:	2d00      	cmp	r5, #0
 8009bbc:	4607      	mov	r7, r0
 8009bbe:	db01      	blt.n	8009bc4 <_malloc_r+0x1c>
 8009bc0:	42a9      	cmp	r1, r5
 8009bc2:	d905      	bls.n	8009bd0 <_malloc_r+0x28>
 8009bc4:	230c      	movs	r3, #12
 8009bc6:	603b      	str	r3, [r7, #0]
 8009bc8:	2600      	movs	r6, #0
 8009bca:	4630      	mov	r0, r6
 8009bcc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009bd0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8009ca4 <_malloc_r+0xfc>
 8009bd4:	f000 f868 	bl	8009ca8 <__malloc_lock>
 8009bd8:	f8d8 3000 	ldr.w	r3, [r8]
 8009bdc:	461c      	mov	r4, r3
 8009bde:	bb5c      	cbnz	r4, 8009c38 <_malloc_r+0x90>
 8009be0:	4629      	mov	r1, r5
 8009be2:	4638      	mov	r0, r7
 8009be4:	f7ff ffc0 	bl	8009b68 <sbrk_aligned>
 8009be8:	1c43      	adds	r3, r0, #1
 8009bea:	4604      	mov	r4, r0
 8009bec:	d155      	bne.n	8009c9a <_malloc_r+0xf2>
 8009bee:	f8d8 4000 	ldr.w	r4, [r8]
 8009bf2:	4626      	mov	r6, r4
 8009bf4:	2e00      	cmp	r6, #0
 8009bf6:	d145      	bne.n	8009c84 <_malloc_r+0xdc>
 8009bf8:	2c00      	cmp	r4, #0
 8009bfa:	d048      	beq.n	8009c8e <_malloc_r+0xe6>
 8009bfc:	6823      	ldr	r3, [r4, #0]
 8009bfe:	4631      	mov	r1, r6
 8009c00:	4638      	mov	r0, r7
 8009c02:	eb04 0903 	add.w	r9, r4, r3
 8009c06:	f000 ffcd 	bl	800aba4 <_sbrk_r>
 8009c0a:	4581      	cmp	r9, r0
 8009c0c:	d13f      	bne.n	8009c8e <_malloc_r+0xe6>
 8009c0e:	6821      	ldr	r1, [r4, #0]
 8009c10:	1a6d      	subs	r5, r5, r1
 8009c12:	4629      	mov	r1, r5
 8009c14:	4638      	mov	r0, r7
 8009c16:	f7ff ffa7 	bl	8009b68 <sbrk_aligned>
 8009c1a:	3001      	adds	r0, #1
 8009c1c:	d037      	beq.n	8009c8e <_malloc_r+0xe6>
 8009c1e:	6823      	ldr	r3, [r4, #0]
 8009c20:	442b      	add	r3, r5
 8009c22:	6023      	str	r3, [r4, #0]
 8009c24:	f8d8 3000 	ldr.w	r3, [r8]
 8009c28:	2b00      	cmp	r3, #0
 8009c2a:	d038      	beq.n	8009c9e <_malloc_r+0xf6>
 8009c2c:	685a      	ldr	r2, [r3, #4]
 8009c2e:	42a2      	cmp	r2, r4
 8009c30:	d12b      	bne.n	8009c8a <_malloc_r+0xe2>
 8009c32:	2200      	movs	r2, #0
 8009c34:	605a      	str	r2, [r3, #4]
 8009c36:	e00f      	b.n	8009c58 <_malloc_r+0xb0>
 8009c38:	6822      	ldr	r2, [r4, #0]
 8009c3a:	1b52      	subs	r2, r2, r5
 8009c3c:	d41f      	bmi.n	8009c7e <_malloc_r+0xd6>
 8009c3e:	2a0b      	cmp	r2, #11
 8009c40:	d917      	bls.n	8009c72 <_malloc_r+0xca>
 8009c42:	1961      	adds	r1, r4, r5
 8009c44:	42a3      	cmp	r3, r4
 8009c46:	6025      	str	r5, [r4, #0]
 8009c48:	bf18      	it	ne
 8009c4a:	6059      	strne	r1, [r3, #4]
 8009c4c:	6863      	ldr	r3, [r4, #4]
 8009c4e:	bf08      	it	eq
 8009c50:	f8c8 1000 	streq.w	r1, [r8]
 8009c54:	5162      	str	r2, [r4, r5]
 8009c56:	604b      	str	r3, [r1, #4]
 8009c58:	4638      	mov	r0, r7
 8009c5a:	f104 060b 	add.w	r6, r4, #11
 8009c5e:	f000 f829 	bl	8009cb4 <__malloc_unlock>
 8009c62:	f026 0607 	bic.w	r6, r6, #7
 8009c66:	1d23      	adds	r3, r4, #4
 8009c68:	1af2      	subs	r2, r6, r3
 8009c6a:	d0ae      	beq.n	8009bca <_malloc_r+0x22>
 8009c6c:	1b9b      	subs	r3, r3, r6
 8009c6e:	50a3      	str	r3, [r4, r2]
 8009c70:	e7ab      	b.n	8009bca <_malloc_r+0x22>
 8009c72:	42a3      	cmp	r3, r4
 8009c74:	6862      	ldr	r2, [r4, #4]
 8009c76:	d1dd      	bne.n	8009c34 <_malloc_r+0x8c>
 8009c78:	f8c8 2000 	str.w	r2, [r8]
 8009c7c:	e7ec      	b.n	8009c58 <_malloc_r+0xb0>
 8009c7e:	4623      	mov	r3, r4
 8009c80:	6864      	ldr	r4, [r4, #4]
 8009c82:	e7ac      	b.n	8009bde <_malloc_r+0x36>
 8009c84:	4634      	mov	r4, r6
 8009c86:	6876      	ldr	r6, [r6, #4]
 8009c88:	e7b4      	b.n	8009bf4 <_malloc_r+0x4c>
 8009c8a:	4613      	mov	r3, r2
 8009c8c:	e7cc      	b.n	8009c28 <_malloc_r+0x80>
 8009c8e:	230c      	movs	r3, #12
 8009c90:	603b      	str	r3, [r7, #0]
 8009c92:	4638      	mov	r0, r7
 8009c94:	f000 f80e 	bl	8009cb4 <__malloc_unlock>
 8009c98:	e797      	b.n	8009bca <_malloc_r+0x22>
 8009c9a:	6025      	str	r5, [r4, #0]
 8009c9c:	e7dc      	b.n	8009c58 <_malloc_r+0xb0>
 8009c9e:	605b      	str	r3, [r3, #4]
 8009ca0:	deff      	udf	#255	; 0xff
 8009ca2:	bf00      	nop
 8009ca4:	20000ce4 	.word	0x20000ce4

08009ca8 <__malloc_lock>:
 8009ca8:	4801      	ldr	r0, [pc, #4]	; (8009cb0 <__malloc_lock+0x8>)
 8009caa:	f000 bfc7 	b.w	800ac3c <__retarget_lock_acquire_recursive>
 8009cae:	bf00      	nop
 8009cb0:	20000e2c 	.word	0x20000e2c

08009cb4 <__malloc_unlock>:
 8009cb4:	4801      	ldr	r0, [pc, #4]	; (8009cbc <__malloc_unlock+0x8>)
 8009cb6:	f000 bfc2 	b.w	800ac3e <__retarget_lock_release_recursive>
 8009cba:	bf00      	nop
 8009cbc:	20000e2c 	.word	0x20000e2c

08009cc0 <__cvt>:
 8009cc0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009cc4:	ec55 4b10 	vmov	r4, r5, d0
 8009cc8:	2d00      	cmp	r5, #0
 8009cca:	460e      	mov	r6, r1
 8009ccc:	4619      	mov	r1, r3
 8009cce:	462b      	mov	r3, r5
 8009cd0:	bfbb      	ittet	lt
 8009cd2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8009cd6:	461d      	movlt	r5, r3
 8009cd8:	2300      	movge	r3, #0
 8009cda:	232d      	movlt	r3, #45	; 0x2d
 8009cdc:	700b      	strb	r3, [r1, #0]
 8009cde:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009ce0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8009ce4:	4691      	mov	r9, r2
 8009ce6:	f023 0820 	bic.w	r8, r3, #32
 8009cea:	bfbc      	itt	lt
 8009cec:	4622      	movlt	r2, r4
 8009cee:	4614      	movlt	r4, r2
 8009cf0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009cf4:	d005      	beq.n	8009d02 <__cvt+0x42>
 8009cf6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8009cfa:	d100      	bne.n	8009cfe <__cvt+0x3e>
 8009cfc:	3601      	adds	r6, #1
 8009cfe:	2102      	movs	r1, #2
 8009d00:	e000      	b.n	8009d04 <__cvt+0x44>
 8009d02:	2103      	movs	r1, #3
 8009d04:	ab03      	add	r3, sp, #12
 8009d06:	9301      	str	r3, [sp, #4]
 8009d08:	ab02      	add	r3, sp, #8
 8009d0a:	9300      	str	r3, [sp, #0]
 8009d0c:	ec45 4b10 	vmov	d0, r4, r5
 8009d10:	4653      	mov	r3, sl
 8009d12:	4632      	mov	r2, r6
 8009d14:	f001 f82c 	bl	800ad70 <_dtoa_r>
 8009d18:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8009d1c:	4607      	mov	r7, r0
 8009d1e:	d102      	bne.n	8009d26 <__cvt+0x66>
 8009d20:	f019 0f01 	tst.w	r9, #1
 8009d24:	d022      	beq.n	8009d6c <__cvt+0xac>
 8009d26:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009d2a:	eb07 0906 	add.w	r9, r7, r6
 8009d2e:	d110      	bne.n	8009d52 <__cvt+0x92>
 8009d30:	783b      	ldrb	r3, [r7, #0]
 8009d32:	2b30      	cmp	r3, #48	; 0x30
 8009d34:	d10a      	bne.n	8009d4c <__cvt+0x8c>
 8009d36:	2200      	movs	r2, #0
 8009d38:	2300      	movs	r3, #0
 8009d3a:	4620      	mov	r0, r4
 8009d3c:	4629      	mov	r1, r5
 8009d3e:	f7f6 fe9b 	bl	8000a78 <__aeabi_dcmpeq>
 8009d42:	b918      	cbnz	r0, 8009d4c <__cvt+0x8c>
 8009d44:	f1c6 0601 	rsb	r6, r6, #1
 8009d48:	f8ca 6000 	str.w	r6, [sl]
 8009d4c:	f8da 3000 	ldr.w	r3, [sl]
 8009d50:	4499      	add	r9, r3
 8009d52:	2200      	movs	r2, #0
 8009d54:	2300      	movs	r3, #0
 8009d56:	4620      	mov	r0, r4
 8009d58:	4629      	mov	r1, r5
 8009d5a:	f7f6 fe8d 	bl	8000a78 <__aeabi_dcmpeq>
 8009d5e:	b108      	cbz	r0, 8009d64 <__cvt+0xa4>
 8009d60:	f8cd 900c 	str.w	r9, [sp, #12]
 8009d64:	2230      	movs	r2, #48	; 0x30
 8009d66:	9b03      	ldr	r3, [sp, #12]
 8009d68:	454b      	cmp	r3, r9
 8009d6a:	d307      	bcc.n	8009d7c <__cvt+0xbc>
 8009d6c:	9b03      	ldr	r3, [sp, #12]
 8009d6e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009d70:	1bdb      	subs	r3, r3, r7
 8009d72:	4638      	mov	r0, r7
 8009d74:	6013      	str	r3, [r2, #0]
 8009d76:	b004      	add	sp, #16
 8009d78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009d7c:	1c59      	adds	r1, r3, #1
 8009d7e:	9103      	str	r1, [sp, #12]
 8009d80:	701a      	strb	r2, [r3, #0]
 8009d82:	e7f0      	b.n	8009d66 <__cvt+0xa6>

08009d84 <__exponent>:
 8009d84:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009d86:	4603      	mov	r3, r0
 8009d88:	2900      	cmp	r1, #0
 8009d8a:	bfb8      	it	lt
 8009d8c:	4249      	neglt	r1, r1
 8009d8e:	f803 2b02 	strb.w	r2, [r3], #2
 8009d92:	bfb4      	ite	lt
 8009d94:	222d      	movlt	r2, #45	; 0x2d
 8009d96:	222b      	movge	r2, #43	; 0x2b
 8009d98:	2909      	cmp	r1, #9
 8009d9a:	7042      	strb	r2, [r0, #1]
 8009d9c:	dd2a      	ble.n	8009df4 <__exponent+0x70>
 8009d9e:	f10d 0207 	add.w	r2, sp, #7
 8009da2:	4617      	mov	r7, r2
 8009da4:	260a      	movs	r6, #10
 8009da6:	4694      	mov	ip, r2
 8009da8:	fb91 f5f6 	sdiv	r5, r1, r6
 8009dac:	fb06 1415 	mls	r4, r6, r5, r1
 8009db0:	3430      	adds	r4, #48	; 0x30
 8009db2:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8009db6:	460c      	mov	r4, r1
 8009db8:	2c63      	cmp	r4, #99	; 0x63
 8009dba:	f102 32ff 	add.w	r2, r2, #4294967295
 8009dbe:	4629      	mov	r1, r5
 8009dc0:	dcf1      	bgt.n	8009da6 <__exponent+0x22>
 8009dc2:	3130      	adds	r1, #48	; 0x30
 8009dc4:	f1ac 0402 	sub.w	r4, ip, #2
 8009dc8:	f802 1c01 	strb.w	r1, [r2, #-1]
 8009dcc:	1c41      	adds	r1, r0, #1
 8009dce:	4622      	mov	r2, r4
 8009dd0:	42ba      	cmp	r2, r7
 8009dd2:	d30a      	bcc.n	8009dea <__exponent+0x66>
 8009dd4:	f10d 0209 	add.w	r2, sp, #9
 8009dd8:	eba2 020c 	sub.w	r2, r2, ip
 8009ddc:	42bc      	cmp	r4, r7
 8009dde:	bf88      	it	hi
 8009de0:	2200      	movhi	r2, #0
 8009de2:	4413      	add	r3, r2
 8009de4:	1a18      	subs	r0, r3, r0
 8009de6:	b003      	add	sp, #12
 8009de8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009dea:	f812 5b01 	ldrb.w	r5, [r2], #1
 8009dee:	f801 5f01 	strb.w	r5, [r1, #1]!
 8009df2:	e7ed      	b.n	8009dd0 <__exponent+0x4c>
 8009df4:	2330      	movs	r3, #48	; 0x30
 8009df6:	3130      	adds	r1, #48	; 0x30
 8009df8:	7083      	strb	r3, [r0, #2]
 8009dfa:	70c1      	strb	r1, [r0, #3]
 8009dfc:	1d03      	adds	r3, r0, #4
 8009dfe:	e7f1      	b.n	8009de4 <__exponent+0x60>

08009e00 <_printf_float>:
 8009e00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e04:	ed2d 8b02 	vpush	{d8}
 8009e08:	b08d      	sub	sp, #52	; 0x34
 8009e0a:	460c      	mov	r4, r1
 8009e0c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8009e10:	4616      	mov	r6, r2
 8009e12:	461f      	mov	r7, r3
 8009e14:	4605      	mov	r5, r0
 8009e16:	f000 fe79 	bl	800ab0c <_localeconv_r>
 8009e1a:	f8d0 a000 	ldr.w	sl, [r0]
 8009e1e:	4650      	mov	r0, sl
 8009e20:	f7f6 f9fe 	bl	8000220 <strlen>
 8009e24:	2300      	movs	r3, #0
 8009e26:	930a      	str	r3, [sp, #40]	; 0x28
 8009e28:	6823      	ldr	r3, [r4, #0]
 8009e2a:	9305      	str	r3, [sp, #20]
 8009e2c:	f8d8 3000 	ldr.w	r3, [r8]
 8009e30:	f894 b018 	ldrb.w	fp, [r4, #24]
 8009e34:	3307      	adds	r3, #7
 8009e36:	f023 0307 	bic.w	r3, r3, #7
 8009e3a:	f103 0208 	add.w	r2, r3, #8
 8009e3e:	f8c8 2000 	str.w	r2, [r8]
 8009e42:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009e46:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009e4a:	9307      	str	r3, [sp, #28]
 8009e4c:	f8cd 8018 	str.w	r8, [sp, #24]
 8009e50:	ee08 0a10 	vmov	s16, r0
 8009e54:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8009e58:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009e5c:	4b9e      	ldr	r3, [pc, #632]	; (800a0d8 <_printf_float+0x2d8>)
 8009e5e:	f04f 32ff 	mov.w	r2, #4294967295
 8009e62:	f7f6 fe3b 	bl	8000adc <__aeabi_dcmpun>
 8009e66:	bb88      	cbnz	r0, 8009ecc <_printf_float+0xcc>
 8009e68:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009e6c:	4b9a      	ldr	r3, [pc, #616]	; (800a0d8 <_printf_float+0x2d8>)
 8009e6e:	f04f 32ff 	mov.w	r2, #4294967295
 8009e72:	f7f6 fe15 	bl	8000aa0 <__aeabi_dcmple>
 8009e76:	bb48      	cbnz	r0, 8009ecc <_printf_float+0xcc>
 8009e78:	2200      	movs	r2, #0
 8009e7a:	2300      	movs	r3, #0
 8009e7c:	4640      	mov	r0, r8
 8009e7e:	4649      	mov	r1, r9
 8009e80:	f7f6 fe04 	bl	8000a8c <__aeabi_dcmplt>
 8009e84:	b110      	cbz	r0, 8009e8c <_printf_float+0x8c>
 8009e86:	232d      	movs	r3, #45	; 0x2d
 8009e88:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009e8c:	4a93      	ldr	r2, [pc, #588]	; (800a0dc <_printf_float+0x2dc>)
 8009e8e:	4b94      	ldr	r3, [pc, #592]	; (800a0e0 <_printf_float+0x2e0>)
 8009e90:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8009e94:	bf94      	ite	ls
 8009e96:	4690      	movls	r8, r2
 8009e98:	4698      	movhi	r8, r3
 8009e9a:	2303      	movs	r3, #3
 8009e9c:	6123      	str	r3, [r4, #16]
 8009e9e:	9b05      	ldr	r3, [sp, #20]
 8009ea0:	f023 0304 	bic.w	r3, r3, #4
 8009ea4:	6023      	str	r3, [r4, #0]
 8009ea6:	f04f 0900 	mov.w	r9, #0
 8009eaa:	9700      	str	r7, [sp, #0]
 8009eac:	4633      	mov	r3, r6
 8009eae:	aa0b      	add	r2, sp, #44	; 0x2c
 8009eb0:	4621      	mov	r1, r4
 8009eb2:	4628      	mov	r0, r5
 8009eb4:	f000 f9da 	bl	800a26c <_printf_common>
 8009eb8:	3001      	adds	r0, #1
 8009eba:	f040 8090 	bne.w	8009fde <_printf_float+0x1de>
 8009ebe:	f04f 30ff 	mov.w	r0, #4294967295
 8009ec2:	b00d      	add	sp, #52	; 0x34
 8009ec4:	ecbd 8b02 	vpop	{d8}
 8009ec8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ecc:	4642      	mov	r2, r8
 8009ece:	464b      	mov	r3, r9
 8009ed0:	4640      	mov	r0, r8
 8009ed2:	4649      	mov	r1, r9
 8009ed4:	f7f6 fe02 	bl	8000adc <__aeabi_dcmpun>
 8009ed8:	b140      	cbz	r0, 8009eec <_printf_float+0xec>
 8009eda:	464b      	mov	r3, r9
 8009edc:	2b00      	cmp	r3, #0
 8009ede:	bfbc      	itt	lt
 8009ee0:	232d      	movlt	r3, #45	; 0x2d
 8009ee2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8009ee6:	4a7f      	ldr	r2, [pc, #508]	; (800a0e4 <_printf_float+0x2e4>)
 8009ee8:	4b7f      	ldr	r3, [pc, #508]	; (800a0e8 <_printf_float+0x2e8>)
 8009eea:	e7d1      	b.n	8009e90 <_printf_float+0x90>
 8009eec:	6863      	ldr	r3, [r4, #4]
 8009eee:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8009ef2:	9206      	str	r2, [sp, #24]
 8009ef4:	1c5a      	adds	r2, r3, #1
 8009ef6:	d13f      	bne.n	8009f78 <_printf_float+0x178>
 8009ef8:	2306      	movs	r3, #6
 8009efa:	6063      	str	r3, [r4, #4]
 8009efc:	9b05      	ldr	r3, [sp, #20]
 8009efe:	6861      	ldr	r1, [r4, #4]
 8009f00:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8009f04:	2300      	movs	r3, #0
 8009f06:	9303      	str	r3, [sp, #12]
 8009f08:	ab0a      	add	r3, sp, #40	; 0x28
 8009f0a:	e9cd b301 	strd	fp, r3, [sp, #4]
 8009f0e:	ab09      	add	r3, sp, #36	; 0x24
 8009f10:	ec49 8b10 	vmov	d0, r8, r9
 8009f14:	9300      	str	r3, [sp, #0]
 8009f16:	6022      	str	r2, [r4, #0]
 8009f18:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8009f1c:	4628      	mov	r0, r5
 8009f1e:	f7ff fecf 	bl	8009cc0 <__cvt>
 8009f22:	9b06      	ldr	r3, [sp, #24]
 8009f24:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009f26:	2b47      	cmp	r3, #71	; 0x47
 8009f28:	4680      	mov	r8, r0
 8009f2a:	d108      	bne.n	8009f3e <_printf_float+0x13e>
 8009f2c:	1cc8      	adds	r0, r1, #3
 8009f2e:	db02      	blt.n	8009f36 <_printf_float+0x136>
 8009f30:	6863      	ldr	r3, [r4, #4]
 8009f32:	4299      	cmp	r1, r3
 8009f34:	dd41      	ble.n	8009fba <_printf_float+0x1ba>
 8009f36:	f1ab 0302 	sub.w	r3, fp, #2
 8009f3a:	fa5f fb83 	uxtb.w	fp, r3
 8009f3e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009f42:	d820      	bhi.n	8009f86 <_printf_float+0x186>
 8009f44:	3901      	subs	r1, #1
 8009f46:	465a      	mov	r2, fp
 8009f48:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8009f4c:	9109      	str	r1, [sp, #36]	; 0x24
 8009f4e:	f7ff ff19 	bl	8009d84 <__exponent>
 8009f52:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009f54:	1813      	adds	r3, r2, r0
 8009f56:	2a01      	cmp	r2, #1
 8009f58:	4681      	mov	r9, r0
 8009f5a:	6123      	str	r3, [r4, #16]
 8009f5c:	dc02      	bgt.n	8009f64 <_printf_float+0x164>
 8009f5e:	6822      	ldr	r2, [r4, #0]
 8009f60:	07d2      	lsls	r2, r2, #31
 8009f62:	d501      	bpl.n	8009f68 <_printf_float+0x168>
 8009f64:	3301      	adds	r3, #1
 8009f66:	6123      	str	r3, [r4, #16]
 8009f68:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8009f6c:	2b00      	cmp	r3, #0
 8009f6e:	d09c      	beq.n	8009eaa <_printf_float+0xaa>
 8009f70:	232d      	movs	r3, #45	; 0x2d
 8009f72:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009f76:	e798      	b.n	8009eaa <_printf_float+0xaa>
 8009f78:	9a06      	ldr	r2, [sp, #24]
 8009f7a:	2a47      	cmp	r2, #71	; 0x47
 8009f7c:	d1be      	bne.n	8009efc <_printf_float+0xfc>
 8009f7e:	2b00      	cmp	r3, #0
 8009f80:	d1bc      	bne.n	8009efc <_printf_float+0xfc>
 8009f82:	2301      	movs	r3, #1
 8009f84:	e7b9      	b.n	8009efa <_printf_float+0xfa>
 8009f86:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8009f8a:	d118      	bne.n	8009fbe <_printf_float+0x1be>
 8009f8c:	2900      	cmp	r1, #0
 8009f8e:	6863      	ldr	r3, [r4, #4]
 8009f90:	dd0b      	ble.n	8009faa <_printf_float+0x1aa>
 8009f92:	6121      	str	r1, [r4, #16]
 8009f94:	b913      	cbnz	r3, 8009f9c <_printf_float+0x19c>
 8009f96:	6822      	ldr	r2, [r4, #0]
 8009f98:	07d0      	lsls	r0, r2, #31
 8009f9a:	d502      	bpl.n	8009fa2 <_printf_float+0x1a2>
 8009f9c:	3301      	adds	r3, #1
 8009f9e:	440b      	add	r3, r1
 8009fa0:	6123      	str	r3, [r4, #16]
 8009fa2:	65a1      	str	r1, [r4, #88]	; 0x58
 8009fa4:	f04f 0900 	mov.w	r9, #0
 8009fa8:	e7de      	b.n	8009f68 <_printf_float+0x168>
 8009faa:	b913      	cbnz	r3, 8009fb2 <_printf_float+0x1b2>
 8009fac:	6822      	ldr	r2, [r4, #0]
 8009fae:	07d2      	lsls	r2, r2, #31
 8009fb0:	d501      	bpl.n	8009fb6 <_printf_float+0x1b6>
 8009fb2:	3302      	adds	r3, #2
 8009fb4:	e7f4      	b.n	8009fa0 <_printf_float+0x1a0>
 8009fb6:	2301      	movs	r3, #1
 8009fb8:	e7f2      	b.n	8009fa0 <_printf_float+0x1a0>
 8009fba:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8009fbe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009fc0:	4299      	cmp	r1, r3
 8009fc2:	db05      	blt.n	8009fd0 <_printf_float+0x1d0>
 8009fc4:	6823      	ldr	r3, [r4, #0]
 8009fc6:	6121      	str	r1, [r4, #16]
 8009fc8:	07d8      	lsls	r0, r3, #31
 8009fca:	d5ea      	bpl.n	8009fa2 <_printf_float+0x1a2>
 8009fcc:	1c4b      	adds	r3, r1, #1
 8009fce:	e7e7      	b.n	8009fa0 <_printf_float+0x1a0>
 8009fd0:	2900      	cmp	r1, #0
 8009fd2:	bfd4      	ite	le
 8009fd4:	f1c1 0202 	rsble	r2, r1, #2
 8009fd8:	2201      	movgt	r2, #1
 8009fda:	4413      	add	r3, r2
 8009fdc:	e7e0      	b.n	8009fa0 <_printf_float+0x1a0>
 8009fde:	6823      	ldr	r3, [r4, #0]
 8009fe0:	055a      	lsls	r2, r3, #21
 8009fe2:	d407      	bmi.n	8009ff4 <_printf_float+0x1f4>
 8009fe4:	6923      	ldr	r3, [r4, #16]
 8009fe6:	4642      	mov	r2, r8
 8009fe8:	4631      	mov	r1, r6
 8009fea:	4628      	mov	r0, r5
 8009fec:	47b8      	blx	r7
 8009fee:	3001      	adds	r0, #1
 8009ff0:	d12c      	bne.n	800a04c <_printf_float+0x24c>
 8009ff2:	e764      	b.n	8009ebe <_printf_float+0xbe>
 8009ff4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009ff8:	f240 80e0 	bls.w	800a1bc <_printf_float+0x3bc>
 8009ffc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a000:	2200      	movs	r2, #0
 800a002:	2300      	movs	r3, #0
 800a004:	f7f6 fd38 	bl	8000a78 <__aeabi_dcmpeq>
 800a008:	2800      	cmp	r0, #0
 800a00a:	d034      	beq.n	800a076 <_printf_float+0x276>
 800a00c:	4a37      	ldr	r2, [pc, #220]	; (800a0ec <_printf_float+0x2ec>)
 800a00e:	2301      	movs	r3, #1
 800a010:	4631      	mov	r1, r6
 800a012:	4628      	mov	r0, r5
 800a014:	47b8      	blx	r7
 800a016:	3001      	adds	r0, #1
 800a018:	f43f af51 	beq.w	8009ebe <_printf_float+0xbe>
 800a01c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a020:	429a      	cmp	r2, r3
 800a022:	db02      	blt.n	800a02a <_printf_float+0x22a>
 800a024:	6823      	ldr	r3, [r4, #0]
 800a026:	07d8      	lsls	r0, r3, #31
 800a028:	d510      	bpl.n	800a04c <_printf_float+0x24c>
 800a02a:	ee18 3a10 	vmov	r3, s16
 800a02e:	4652      	mov	r2, sl
 800a030:	4631      	mov	r1, r6
 800a032:	4628      	mov	r0, r5
 800a034:	47b8      	blx	r7
 800a036:	3001      	adds	r0, #1
 800a038:	f43f af41 	beq.w	8009ebe <_printf_float+0xbe>
 800a03c:	f04f 0800 	mov.w	r8, #0
 800a040:	f104 091a 	add.w	r9, r4, #26
 800a044:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a046:	3b01      	subs	r3, #1
 800a048:	4543      	cmp	r3, r8
 800a04a:	dc09      	bgt.n	800a060 <_printf_float+0x260>
 800a04c:	6823      	ldr	r3, [r4, #0]
 800a04e:	079b      	lsls	r3, r3, #30
 800a050:	f100 8107 	bmi.w	800a262 <_printf_float+0x462>
 800a054:	68e0      	ldr	r0, [r4, #12]
 800a056:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a058:	4298      	cmp	r0, r3
 800a05a:	bfb8      	it	lt
 800a05c:	4618      	movlt	r0, r3
 800a05e:	e730      	b.n	8009ec2 <_printf_float+0xc2>
 800a060:	2301      	movs	r3, #1
 800a062:	464a      	mov	r2, r9
 800a064:	4631      	mov	r1, r6
 800a066:	4628      	mov	r0, r5
 800a068:	47b8      	blx	r7
 800a06a:	3001      	adds	r0, #1
 800a06c:	f43f af27 	beq.w	8009ebe <_printf_float+0xbe>
 800a070:	f108 0801 	add.w	r8, r8, #1
 800a074:	e7e6      	b.n	800a044 <_printf_float+0x244>
 800a076:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a078:	2b00      	cmp	r3, #0
 800a07a:	dc39      	bgt.n	800a0f0 <_printf_float+0x2f0>
 800a07c:	4a1b      	ldr	r2, [pc, #108]	; (800a0ec <_printf_float+0x2ec>)
 800a07e:	2301      	movs	r3, #1
 800a080:	4631      	mov	r1, r6
 800a082:	4628      	mov	r0, r5
 800a084:	47b8      	blx	r7
 800a086:	3001      	adds	r0, #1
 800a088:	f43f af19 	beq.w	8009ebe <_printf_float+0xbe>
 800a08c:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800a090:	4313      	orrs	r3, r2
 800a092:	d102      	bne.n	800a09a <_printf_float+0x29a>
 800a094:	6823      	ldr	r3, [r4, #0]
 800a096:	07d9      	lsls	r1, r3, #31
 800a098:	d5d8      	bpl.n	800a04c <_printf_float+0x24c>
 800a09a:	ee18 3a10 	vmov	r3, s16
 800a09e:	4652      	mov	r2, sl
 800a0a0:	4631      	mov	r1, r6
 800a0a2:	4628      	mov	r0, r5
 800a0a4:	47b8      	blx	r7
 800a0a6:	3001      	adds	r0, #1
 800a0a8:	f43f af09 	beq.w	8009ebe <_printf_float+0xbe>
 800a0ac:	f04f 0900 	mov.w	r9, #0
 800a0b0:	f104 0a1a 	add.w	sl, r4, #26
 800a0b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a0b6:	425b      	negs	r3, r3
 800a0b8:	454b      	cmp	r3, r9
 800a0ba:	dc01      	bgt.n	800a0c0 <_printf_float+0x2c0>
 800a0bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a0be:	e792      	b.n	8009fe6 <_printf_float+0x1e6>
 800a0c0:	2301      	movs	r3, #1
 800a0c2:	4652      	mov	r2, sl
 800a0c4:	4631      	mov	r1, r6
 800a0c6:	4628      	mov	r0, r5
 800a0c8:	47b8      	blx	r7
 800a0ca:	3001      	adds	r0, #1
 800a0cc:	f43f aef7 	beq.w	8009ebe <_printf_float+0xbe>
 800a0d0:	f109 0901 	add.w	r9, r9, #1
 800a0d4:	e7ee      	b.n	800a0b4 <_printf_float+0x2b4>
 800a0d6:	bf00      	nop
 800a0d8:	7fefffff 	.word	0x7fefffff
 800a0dc:	0800d90e 	.word	0x0800d90e
 800a0e0:	0800d912 	.word	0x0800d912
 800a0e4:	0800d916 	.word	0x0800d916
 800a0e8:	0800d91a 	.word	0x0800d91a
 800a0ec:	0800d91e 	.word	0x0800d91e
 800a0f0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a0f2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a0f4:	429a      	cmp	r2, r3
 800a0f6:	bfa8      	it	ge
 800a0f8:	461a      	movge	r2, r3
 800a0fa:	2a00      	cmp	r2, #0
 800a0fc:	4691      	mov	r9, r2
 800a0fe:	dc37      	bgt.n	800a170 <_printf_float+0x370>
 800a100:	f04f 0b00 	mov.w	fp, #0
 800a104:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a108:	f104 021a 	add.w	r2, r4, #26
 800a10c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a10e:	9305      	str	r3, [sp, #20]
 800a110:	eba3 0309 	sub.w	r3, r3, r9
 800a114:	455b      	cmp	r3, fp
 800a116:	dc33      	bgt.n	800a180 <_printf_float+0x380>
 800a118:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a11c:	429a      	cmp	r2, r3
 800a11e:	db3b      	blt.n	800a198 <_printf_float+0x398>
 800a120:	6823      	ldr	r3, [r4, #0]
 800a122:	07da      	lsls	r2, r3, #31
 800a124:	d438      	bmi.n	800a198 <_printf_float+0x398>
 800a126:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800a12a:	eba2 0903 	sub.w	r9, r2, r3
 800a12e:	9b05      	ldr	r3, [sp, #20]
 800a130:	1ad2      	subs	r2, r2, r3
 800a132:	4591      	cmp	r9, r2
 800a134:	bfa8      	it	ge
 800a136:	4691      	movge	r9, r2
 800a138:	f1b9 0f00 	cmp.w	r9, #0
 800a13c:	dc35      	bgt.n	800a1aa <_printf_float+0x3aa>
 800a13e:	f04f 0800 	mov.w	r8, #0
 800a142:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a146:	f104 0a1a 	add.w	sl, r4, #26
 800a14a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a14e:	1a9b      	subs	r3, r3, r2
 800a150:	eba3 0309 	sub.w	r3, r3, r9
 800a154:	4543      	cmp	r3, r8
 800a156:	f77f af79 	ble.w	800a04c <_printf_float+0x24c>
 800a15a:	2301      	movs	r3, #1
 800a15c:	4652      	mov	r2, sl
 800a15e:	4631      	mov	r1, r6
 800a160:	4628      	mov	r0, r5
 800a162:	47b8      	blx	r7
 800a164:	3001      	adds	r0, #1
 800a166:	f43f aeaa 	beq.w	8009ebe <_printf_float+0xbe>
 800a16a:	f108 0801 	add.w	r8, r8, #1
 800a16e:	e7ec      	b.n	800a14a <_printf_float+0x34a>
 800a170:	4613      	mov	r3, r2
 800a172:	4631      	mov	r1, r6
 800a174:	4642      	mov	r2, r8
 800a176:	4628      	mov	r0, r5
 800a178:	47b8      	blx	r7
 800a17a:	3001      	adds	r0, #1
 800a17c:	d1c0      	bne.n	800a100 <_printf_float+0x300>
 800a17e:	e69e      	b.n	8009ebe <_printf_float+0xbe>
 800a180:	2301      	movs	r3, #1
 800a182:	4631      	mov	r1, r6
 800a184:	4628      	mov	r0, r5
 800a186:	9205      	str	r2, [sp, #20]
 800a188:	47b8      	blx	r7
 800a18a:	3001      	adds	r0, #1
 800a18c:	f43f ae97 	beq.w	8009ebe <_printf_float+0xbe>
 800a190:	9a05      	ldr	r2, [sp, #20]
 800a192:	f10b 0b01 	add.w	fp, fp, #1
 800a196:	e7b9      	b.n	800a10c <_printf_float+0x30c>
 800a198:	ee18 3a10 	vmov	r3, s16
 800a19c:	4652      	mov	r2, sl
 800a19e:	4631      	mov	r1, r6
 800a1a0:	4628      	mov	r0, r5
 800a1a2:	47b8      	blx	r7
 800a1a4:	3001      	adds	r0, #1
 800a1a6:	d1be      	bne.n	800a126 <_printf_float+0x326>
 800a1a8:	e689      	b.n	8009ebe <_printf_float+0xbe>
 800a1aa:	9a05      	ldr	r2, [sp, #20]
 800a1ac:	464b      	mov	r3, r9
 800a1ae:	4442      	add	r2, r8
 800a1b0:	4631      	mov	r1, r6
 800a1b2:	4628      	mov	r0, r5
 800a1b4:	47b8      	blx	r7
 800a1b6:	3001      	adds	r0, #1
 800a1b8:	d1c1      	bne.n	800a13e <_printf_float+0x33e>
 800a1ba:	e680      	b.n	8009ebe <_printf_float+0xbe>
 800a1bc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a1be:	2a01      	cmp	r2, #1
 800a1c0:	dc01      	bgt.n	800a1c6 <_printf_float+0x3c6>
 800a1c2:	07db      	lsls	r3, r3, #31
 800a1c4:	d53a      	bpl.n	800a23c <_printf_float+0x43c>
 800a1c6:	2301      	movs	r3, #1
 800a1c8:	4642      	mov	r2, r8
 800a1ca:	4631      	mov	r1, r6
 800a1cc:	4628      	mov	r0, r5
 800a1ce:	47b8      	blx	r7
 800a1d0:	3001      	adds	r0, #1
 800a1d2:	f43f ae74 	beq.w	8009ebe <_printf_float+0xbe>
 800a1d6:	ee18 3a10 	vmov	r3, s16
 800a1da:	4652      	mov	r2, sl
 800a1dc:	4631      	mov	r1, r6
 800a1de:	4628      	mov	r0, r5
 800a1e0:	47b8      	blx	r7
 800a1e2:	3001      	adds	r0, #1
 800a1e4:	f43f ae6b 	beq.w	8009ebe <_printf_float+0xbe>
 800a1e8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a1ec:	2200      	movs	r2, #0
 800a1ee:	2300      	movs	r3, #0
 800a1f0:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800a1f4:	f7f6 fc40 	bl	8000a78 <__aeabi_dcmpeq>
 800a1f8:	b9d8      	cbnz	r0, 800a232 <_printf_float+0x432>
 800a1fa:	f10a 33ff 	add.w	r3, sl, #4294967295
 800a1fe:	f108 0201 	add.w	r2, r8, #1
 800a202:	4631      	mov	r1, r6
 800a204:	4628      	mov	r0, r5
 800a206:	47b8      	blx	r7
 800a208:	3001      	adds	r0, #1
 800a20a:	d10e      	bne.n	800a22a <_printf_float+0x42a>
 800a20c:	e657      	b.n	8009ebe <_printf_float+0xbe>
 800a20e:	2301      	movs	r3, #1
 800a210:	4652      	mov	r2, sl
 800a212:	4631      	mov	r1, r6
 800a214:	4628      	mov	r0, r5
 800a216:	47b8      	blx	r7
 800a218:	3001      	adds	r0, #1
 800a21a:	f43f ae50 	beq.w	8009ebe <_printf_float+0xbe>
 800a21e:	f108 0801 	add.w	r8, r8, #1
 800a222:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a224:	3b01      	subs	r3, #1
 800a226:	4543      	cmp	r3, r8
 800a228:	dcf1      	bgt.n	800a20e <_printf_float+0x40e>
 800a22a:	464b      	mov	r3, r9
 800a22c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800a230:	e6da      	b.n	8009fe8 <_printf_float+0x1e8>
 800a232:	f04f 0800 	mov.w	r8, #0
 800a236:	f104 0a1a 	add.w	sl, r4, #26
 800a23a:	e7f2      	b.n	800a222 <_printf_float+0x422>
 800a23c:	2301      	movs	r3, #1
 800a23e:	4642      	mov	r2, r8
 800a240:	e7df      	b.n	800a202 <_printf_float+0x402>
 800a242:	2301      	movs	r3, #1
 800a244:	464a      	mov	r2, r9
 800a246:	4631      	mov	r1, r6
 800a248:	4628      	mov	r0, r5
 800a24a:	47b8      	blx	r7
 800a24c:	3001      	adds	r0, #1
 800a24e:	f43f ae36 	beq.w	8009ebe <_printf_float+0xbe>
 800a252:	f108 0801 	add.w	r8, r8, #1
 800a256:	68e3      	ldr	r3, [r4, #12]
 800a258:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a25a:	1a5b      	subs	r3, r3, r1
 800a25c:	4543      	cmp	r3, r8
 800a25e:	dcf0      	bgt.n	800a242 <_printf_float+0x442>
 800a260:	e6f8      	b.n	800a054 <_printf_float+0x254>
 800a262:	f04f 0800 	mov.w	r8, #0
 800a266:	f104 0919 	add.w	r9, r4, #25
 800a26a:	e7f4      	b.n	800a256 <_printf_float+0x456>

0800a26c <_printf_common>:
 800a26c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a270:	4616      	mov	r6, r2
 800a272:	4699      	mov	r9, r3
 800a274:	688a      	ldr	r2, [r1, #8]
 800a276:	690b      	ldr	r3, [r1, #16]
 800a278:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a27c:	4293      	cmp	r3, r2
 800a27e:	bfb8      	it	lt
 800a280:	4613      	movlt	r3, r2
 800a282:	6033      	str	r3, [r6, #0]
 800a284:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a288:	4607      	mov	r7, r0
 800a28a:	460c      	mov	r4, r1
 800a28c:	b10a      	cbz	r2, 800a292 <_printf_common+0x26>
 800a28e:	3301      	adds	r3, #1
 800a290:	6033      	str	r3, [r6, #0]
 800a292:	6823      	ldr	r3, [r4, #0]
 800a294:	0699      	lsls	r1, r3, #26
 800a296:	bf42      	ittt	mi
 800a298:	6833      	ldrmi	r3, [r6, #0]
 800a29a:	3302      	addmi	r3, #2
 800a29c:	6033      	strmi	r3, [r6, #0]
 800a29e:	6825      	ldr	r5, [r4, #0]
 800a2a0:	f015 0506 	ands.w	r5, r5, #6
 800a2a4:	d106      	bne.n	800a2b4 <_printf_common+0x48>
 800a2a6:	f104 0a19 	add.w	sl, r4, #25
 800a2aa:	68e3      	ldr	r3, [r4, #12]
 800a2ac:	6832      	ldr	r2, [r6, #0]
 800a2ae:	1a9b      	subs	r3, r3, r2
 800a2b0:	42ab      	cmp	r3, r5
 800a2b2:	dc26      	bgt.n	800a302 <_printf_common+0x96>
 800a2b4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a2b8:	1e13      	subs	r3, r2, #0
 800a2ba:	6822      	ldr	r2, [r4, #0]
 800a2bc:	bf18      	it	ne
 800a2be:	2301      	movne	r3, #1
 800a2c0:	0692      	lsls	r2, r2, #26
 800a2c2:	d42b      	bmi.n	800a31c <_printf_common+0xb0>
 800a2c4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a2c8:	4649      	mov	r1, r9
 800a2ca:	4638      	mov	r0, r7
 800a2cc:	47c0      	blx	r8
 800a2ce:	3001      	adds	r0, #1
 800a2d0:	d01e      	beq.n	800a310 <_printf_common+0xa4>
 800a2d2:	6823      	ldr	r3, [r4, #0]
 800a2d4:	6922      	ldr	r2, [r4, #16]
 800a2d6:	f003 0306 	and.w	r3, r3, #6
 800a2da:	2b04      	cmp	r3, #4
 800a2dc:	bf02      	ittt	eq
 800a2de:	68e5      	ldreq	r5, [r4, #12]
 800a2e0:	6833      	ldreq	r3, [r6, #0]
 800a2e2:	1aed      	subeq	r5, r5, r3
 800a2e4:	68a3      	ldr	r3, [r4, #8]
 800a2e6:	bf0c      	ite	eq
 800a2e8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a2ec:	2500      	movne	r5, #0
 800a2ee:	4293      	cmp	r3, r2
 800a2f0:	bfc4      	itt	gt
 800a2f2:	1a9b      	subgt	r3, r3, r2
 800a2f4:	18ed      	addgt	r5, r5, r3
 800a2f6:	2600      	movs	r6, #0
 800a2f8:	341a      	adds	r4, #26
 800a2fa:	42b5      	cmp	r5, r6
 800a2fc:	d11a      	bne.n	800a334 <_printf_common+0xc8>
 800a2fe:	2000      	movs	r0, #0
 800a300:	e008      	b.n	800a314 <_printf_common+0xa8>
 800a302:	2301      	movs	r3, #1
 800a304:	4652      	mov	r2, sl
 800a306:	4649      	mov	r1, r9
 800a308:	4638      	mov	r0, r7
 800a30a:	47c0      	blx	r8
 800a30c:	3001      	adds	r0, #1
 800a30e:	d103      	bne.n	800a318 <_printf_common+0xac>
 800a310:	f04f 30ff 	mov.w	r0, #4294967295
 800a314:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a318:	3501      	adds	r5, #1
 800a31a:	e7c6      	b.n	800a2aa <_printf_common+0x3e>
 800a31c:	18e1      	adds	r1, r4, r3
 800a31e:	1c5a      	adds	r2, r3, #1
 800a320:	2030      	movs	r0, #48	; 0x30
 800a322:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a326:	4422      	add	r2, r4
 800a328:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a32c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a330:	3302      	adds	r3, #2
 800a332:	e7c7      	b.n	800a2c4 <_printf_common+0x58>
 800a334:	2301      	movs	r3, #1
 800a336:	4622      	mov	r2, r4
 800a338:	4649      	mov	r1, r9
 800a33a:	4638      	mov	r0, r7
 800a33c:	47c0      	blx	r8
 800a33e:	3001      	adds	r0, #1
 800a340:	d0e6      	beq.n	800a310 <_printf_common+0xa4>
 800a342:	3601      	adds	r6, #1
 800a344:	e7d9      	b.n	800a2fa <_printf_common+0x8e>
	...

0800a348 <_printf_i>:
 800a348:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a34c:	7e0f      	ldrb	r7, [r1, #24]
 800a34e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a350:	2f78      	cmp	r7, #120	; 0x78
 800a352:	4691      	mov	r9, r2
 800a354:	4680      	mov	r8, r0
 800a356:	460c      	mov	r4, r1
 800a358:	469a      	mov	sl, r3
 800a35a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a35e:	d807      	bhi.n	800a370 <_printf_i+0x28>
 800a360:	2f62      	cmp	r7, #98	; 0x62
 800a362:	d80a      	bhi.n	800a37a <_printf_i+0x32>
 800a364:	2f00      	cmp	r7, #0
 800a366:	f000 80d4 	beq.w	800a512 <_printf_i+0x1ca>
 800a36a:	2f58      	cmp	r7, #88	; 0x58
 800a36c:	f000 80c0 	beq.w	800a4f0 <_printf_i+0x1a8>
 800a370:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a374:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a378:	e03a      	b.n	800a3f0 <_printf_i+0xa8>
 800a37a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a37e:	2b15      	cmp	r3, #21
 800a380:	d8f6      	bhi.n	800a370 <_printf_i+0x28>
 800a382:	a101      	add	r1, pc, #4	; (adr r1, 800a388 <_printf_i+0x40>)
 800a384:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a388:	0800a3e1 	.word	0x0800a3e1
 800a38c:	0800a3f5 	.word	0x0800a3f5
 800a390:	0800a371 	.word	0x0800a371
 800a394:	0800a371 	.word	0x0800a371
 800a398:	0800a371 	.word	0x0800a371
 800a39c:	0800a371 	.word	0x0800a371
 800a3a0:	0800a3f5 	.word	0x0800a3f5
 800a3a4:	0800a371 	.word	0x0800a371
 800a3a8:	0800a371 	.word	0x0800a371
 800a3ac:	0800a371 	.word	0x0800a371
 800a3b0:	0800a371 	.word	0x0800a371
 800a3b4:	0800a4f9 	.word	0x0800a4f9
 800a3b8:	0800a421 	.word	0x0800a421
 800a3bc:	0800a4b3 	.word	0x0800a4b3
 800a3c0:	0800a371 	.word	0x0800a371
 800a3c4:	0800a371 	.word	0x0800a371
 800a3c8:	0800a51b 	.word	0x0800a51b
 800a3cc:	0800a371 	.word	0x0800a371
 800a3d0:	0800a421 	.word	0x0800a421
 800a3d4:	0800a371 	.word	0x0800a371
 800a3d8:	0800a371 	.word	0x0800a371
 800a3dc:	0800a4bb 	.word	0x0800a4bb
 800a3e0:	682b      	ldr	r3, [r5, #0]
 800a3e2:	1d1a      	adds	r2, r3, #4
 800a3e4:	681b      	ldr	r3, [r3, #0]
 800a3e6:	602a      	str	r2, [r5, #0]
 800a3e8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a3ec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a3f0:	2301      	movs	r3, #1
 800a3f2:	e09f      	b.n	800a534 <_printf_i+0x1ec>
 800a3f4:	6820      	ldr	r0, [r4, #0]
 800a3f6:	682b      	ldr	r3, [r5, #0]
 800a3f8:	0607      	lsls	r7, r0, #24
 800a3fa:	f103 0104 	add.w	r1, r3, #4
 800a3fe:	6029      	str	r1, [r5, #0]
 800a400:	d501      	bpl.n	800a406 <_printf_i+0xbe>
 800a402:	681e      	ldr	r6, [r3, #0]
 800a404:	e003      	b.n	800a40e <_printf_i+0xc6>
 800a406:	0646      	lsls	r6, r0, #25
 800a408:	d5fb      	bpl.n	800a402 <_printf_i+0xba>
 800a40a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800a40e:	2e00      	cmp	r6, #0
 800a410:	da03      	bge.n	800a41a <_printf_i+0xd2>
 800a412:	232d      	movs	r3, #45	; 0x2d
 800a414:	4276      	negs	r6, r6
 800a416:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a41a:	485a      	ldr	r0, [pc, #360]	; (800a584 <_printf_i+0x23c>)
 800a41c:	230a      	movs	r3, #10
 800a41e:	e012      	b.n	800a446 <_printf_i+0xfe>
 800a420:	682b      	ldr	r3, [r5, #0]
 800a422:	6820      	ldr	r0, [r4, #0]
 800a424:	1d19      	adds	r1, r3, #4
 800a426:	6029      	str	r1, [r5, #0]
 800a428:	0605      	lsls	r5, r0, #24
 800a42a:	d501      	bpl.n	800a430 <_printf_i+0xe8>
 800a42c:	681e      	ldr	r6, [r3, #0]
 800a42e:	e002      	b.n	800a436 <_printf_i+0xee>
 800a430:	0641      	lsls	r1, r0, #25
 800a432:	d5fb      	bpl.n	800a42c <_printf_i+0xe4>
 800a434:	881e      	ldrh	r6, [r3, #0]
 800a436:	4853      	ldr	r0, [pc, #332]	; (800a584 <_printf_i+0x23c>)
 800a438:	2f6f      	cmp	r7, #111	; 0x6f
 800a43a:	bf0c      	ite	eq
 800a43c:	2308      	moveq	r3, #8
 800a43e:	230a      	movne	r3, #10
 800a440:	2100      	movs	r1, #0
 800a442:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a446:	6865      	ldr	r5, [r4, #4]
 800a448:	60a5      	str	r5, [r4, #8]
 800a44a:	2d00      	cmp	r5, #0
 800a44c:	bfa2      	ittt	ge
 800a44e:	6821      	ldrge	r1, [r4, #0]
 800a450:	f021 0104 	bicge.w	r1, r1, #4
 800a454:	6021      	strge	r1, [r4, #0]
 800a456:	b90e      	cbnz	r6, 800a45c <_printf_i+0x114>
 800a458:	2d00      	cmp	r5, #0
 800a45a:	d04b      	beq.n	800a4f4 <_printf_i+0x1ac>
 800a45c:	4615      	mov	r5, r2
 800a45e:	fbb6 f1f3 	udiv	r1, r6, r3
 800a462:	fb03 6711 	mls	r7, r3, r1, r6
 800a466:	5dc7      	ldrb	r7, [r0, r7]
 800a468:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a46c:	4637      	mov	r7, r6
 800a46e:	42bb      	cmp	r3, r7
 800a470:	460e      	mov	r6, r1
 800a472:	d9f4      	bls.n	800a45e <_printf_i+0x116>
 800a474:	2b08      	cmp	r3, #8
 800a476:	d10b      	bne.n	800a490 <_printf_i+0x148>
 800a478:	6823      	ldr	r3, [r4, #0]
 800a47a:	07de      	lsls	r6, r3, #31
 800a47c:	d508      	bpl.n	800a490 <_printf_i+0x148>
 800a47e:	6923      	ldr	r3, [r4, #16]
 800a480:	6861      	ldr	r1, [r4, #4]
 800a482:	4299      	cmp	r1, r3
 800a484:	bfde      	ittt	le
 800a486:	2330      	movle	r3, #48	; 0x30
 800a488:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a48c:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a490:	1b52      	subs	r2, r2, r5
 800a492:	6122      	str	r2, [r4, #16]
 800a494:	f8cd a000 	str.w	sl, [sp]
 800a498:	464b      	mov	r3, r9
 800a49a:	aa03      	add	r2, sp, #12
 800a49c:	4621      	mov	r1, r4
 800a49e:	4640      	mov	r0, r8
 800a4a0:	f7ff fee4 	bl	800a26c <_printf_common>
 800a4a4:	3001      	adds	r0, #1
 800a4a6:	d14a      	bne.n	800a53e <_printf_i+0x1f6>
 800a4a8:	f04f 30ff 	mov.w	r0, #4294967295
 800a4ac:	b004      	add	sp, #16
 800a4ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a4b2:	6823      	ldr	r3, [r4, #0]
 800a4b4:	f043 0320 	orr.w	r3, r3, #32
 800a4b8:	6023      	str	r3, [r4, #0]
 800a4ba:	4833      	ldr	r0, [pc, #204]	; (800a588 <_printf_i+0x240>)
 800a4bc:	2778      	movs	r7, #120	; 0x78
 800a4be:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800a4c2:	6823      	ldr	r3, [r4, #0]
 800a4c4:	6829      	ldr	r1, [r5, #0]
 800a4c6:	061f      	lsls	r7, r3, #24
 800a4c8:	f851 6b04 	ldr.w	r6, [r1], #4
 800a4cc:	d402      	bmi.n	800a4d4 <_printf_i+0x18c>
 800a4ce:	065f      	lsls	r7, r3, #25
 800a4d0:	bf48      	it	mi
 800a4d2:	b2b6      	uxthmi	r6, r6
 800a4d4:	07df      	lsls	r7, r3, #31
 800a4d6:	bf48      	it	mi
 800a4d8:	f043 0320 	orrmi.w	r3, r3, #32
 800a4dc:	6029      	str	r1, [r5, #0]
 800a4de:	bf48      	it	mi
 800a4e0:	6023      	strmi	r3, [r4, #0]
 800a4e2:	b91e      	cbnz	r6, 800a4ec <_printf_i+0x1a4>
 800a4e4:	6823      	ldr	r3, [r4, #0]
 800a4e6:	f023 0320 	bic.w	r3, r3, #32
 800a4ea:	6023      	str	r3, [r4, #0]
 800a4ec:	2310      	movs	r3, #16
 800a4ee:	e7a7      	b.n	800a440 <_printf_i+0xf8>
 800a4f0:	4824      	ldr	r0, [pc, #144]	; (800a584 <_printf_i+0x23c>)
 800a4f2:	e7e4      	b.n	800a4be <_printf_i+0x176>
 800a4f4:	4615      	mov	r5, r2
 800a4f6:	e7bd      	b.n	800a474 <_printf_i+0x12c>
 800a4f8:	682b      	ldr	r3, [r5, #0]
 800a4fa:	6826      	ldr	r6, [r4, #0]
 800a4fc:	6961      	ldr	r1, [r4, #20]
 800a4fe:	1d18      	adds	r0, r3, #4
 800a500:	6028      	str	r0, [r5, #0]
 800a502:	0635      	lsls	r5, r6, #24
 800a504:	681b      	ldr	r3, [r3, #0]
 800a506:	d501      	bpl.n	800a50c <_printf_i+0x1c4>
 800a508:	6019      	str	r1, [r3, #0]
 800a50a:	e002      	b.n	800a512 <_printf_i+0x1ca>
 800a50c:	0670      	lsls	r0, r6, #25
 800a50e:	d5fb      	bpl.n	800a508 <_printf_i+0x1c0>
 800a510:	8019      	strh	r1, [r3, #0]
 800a512:	2300      	movs	r3, #0
 800a514:	6123      	str	r3, [r4, #16]
 800a516:	4615      	mov	r5, r2
 800a518:	e7bc      	b.n	800a494 <_printf_i+0x14c>
 800a51a:	682b      	ldr	r3, [r5, #0]
 800a51c:	1d1a      	adds	r2, r3, #4
 800a51e:	602a      	str	r2, [r5, #0]
 800a520:	681d      	ldr	r5, [r3, #0]
 800a522:	6862      	ldr	r2, [r4, #4]
 800a524:	2100      	movs	r1, #0
 800a526:	4628      	mov	r0, r5
 800a528:	f7f5 fe2a 	bl	8000180 <memchr>
 800a52c:	b108      	cbz	r0, 800a532 <_printf_i+0x1ea>
 800a52e:	1b40      	subs	r0, r0, r5
 800a530:	6060      	str	r0, [r4, #4]
 800a532:	6863      	ldr	r3, [r4, #4]
 800a534:	6123      	str	r3, [r4, #16]
 800a536:	2300      	movs	r3, #0
 800a538:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a53c:	e7aa      	b.n	800a494 <_printf_i+0x14c>
 800a53e:	6923      	ldr	r3, [r4, #16]
 800a540:	462a      	mov	r2, r5
 800a542:	4649      	mov	r1, r9
 800a544:	4640      	mov	r0, r8
 800a546:	47d0      	blx	sl
 800a548:	3001      	adds	r0, #1
 800a54a:	d0ad      	beq.n	800a4a8 <_printf_i+0x160>
 800a54c:	6823      	ldr	r3, [r4, #0]
 800a54e:	079b      	lsls	r3, r3, #30
 800a550:	d413      	bmi.n	800a57a <_printf_i+0x232>
 800a552:	68e0      	ldr	r0, [r4, #12]
 800a554:	9b03      	ldr	r3, [sp, #12]
 800a556:	4298      	cmp	r0, r3
 800a558:	bfb8      	it	lt
 800a55a:	4618      	movlt	r0, r3
 800a55c:	e7a6      	b.n	800a4ac <_printf_i+0x164>
 800a55e:	2301      	movs	r3, #1
 800a560:	4632      	mov	r2, r6
 800a562:	4649      	mov	r1, r9
 800a564:	4640      	mov	r0, r8
 800a566:	47d0      	blx	sl
 800a568:	3001      	adds	r0, #1
 800a56a:	d09d      	beq.n	800a4a8 <_printf_i+0x160>
 800a56c:	3501      	adds	r5, #1
 800a56e:	68e3      	ldr	r3, [r4, #12]
 800a570:	9903      	ldr	r1, [sp, #12]
 800a572:	1a5b      	subs	r3, r3, r1
 800a574:	42ab      	cmp	r3, r5
 800a576:	dcf2      	bgt.n	800a55e <_printf_i+0x216>
 800a578:	e7eb      	b.n	800a552 <_printf_i+0x20a>
 800a57a:	2500      	movs	r5, #0
 800a57c:	f104 0619 	add.w	r6, r4, #25
 800a580:	e7f5      	b.n	800a56e <_printf_i+0x226>
 800a582:	bf00      	nop
 800a584:	0800d920 	.word	0x0800d920
 800a588:	0800d931 	.word	0x0800d931

0800a58c <std>:
 800a58c:	2300      	movs	r3, #0
 800a58e:	b510      	push	{r4, lr}
 800a590:	4604      	mov	r4, r0
 800a592:	e9c0 3300 	strd	r3, r3, [r0]
 800a596:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a59a:	6083      	str	r3, [r0, #8]
 800a59c:	8181      	strh	r1, [r0, #12]
 800a59e:	6643      	str	r3, [r0, #100]	; 0x64
 800a5a0:	81c2      	strh	r2, [r0, #14]
 800a5a2:	6183      	str	r3, [r0, #24]
 800a5a4:	4619      	mov	r1, r3
 800a5a6:	2208      	movs	r2, #8
 800a5a8:	305c      	adds	r0, #92	; 0x5c
 800a5aa:	f000 fa63 	bl	800aa74 <memset>
 800a5ae:	4b05      	ldr	r3, [pc, #20]	; (800a5c4 <std+0x38>)
 800a5b0:	6263      	str	r3, [r4, #36]	; 0x24
 800a5b2:	4b05      	ldr	r3, [pc, #20]	; (800a5c8 <std+0x3c>)
 800a5b4:	62a3      	str	r3, [r4, #40]	; 0x28
 800a5b6:	4b05      	ldr	r3, [pc, #20]	; (800a5cc <std+0x40>)
 800a5b8:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a5ba:	4b05      	ldr	r3, [pc, #20]	; (800a5d0 <std+0x44>)
 800a5bc:	6224      	str	r4, [r4, #32]
 800a5be:	6323      	str	r3, [r4, #48]	; 0x30
 800a5c0:	bd10      	pop	{r4, pc}
 800a5c2:	bf00      	nop
 800a5c4:	0800a871 	.word	0x0800a871
 800a5c8:	0800a893 	.word	0x0800a893
 800a5cc:	0800a8cb 	.word	0x0800a8cb
 800a5d0:	0800a8ef 	.word	0x0800a8ef

0800a5d4 <stdio_exit_handler>:
 800a5d4:	4a02      	ldr	r2, [pc, #8]	; (800a5e0 <stdio_exit_handler+0xc>)
 800a5d6:	4903      	ldr	r1, [pc, #12]	; (800a5e4 <stdio_exit_handler+0x10>)
 800a5d8:	4803      	ldr	r0, [pc, #12]	; (800a5e8 <stdio_exit_handler+0x14>)
 800a5da:	f000 b869 	b.w	800a6b0 <_fwalk_sglue>
 800a5de:	bf00      	nop
 800a5e0:	20000010 	.word	0x20000010
 800a5e4:	0800c769 	.word	0x0800c769
 800a5e8:	20000188 	.word	0x20000188

0800a5ec <cleanup_stdio>:
 800a5ec:	6841      	ldr	r1, [r0, #4]
 800a5ee:	4b0c      	ldr	r3, [pc, #48]	; (800a620 <cleanup_stdio+0x34>)
 800a5f0:	4299      	cmp	r1, r3
 800a5f2:	b510      	push	{r4, lr}
 800a5f4:	4604      	mov	r4, r0
 800a5f6:	d001      	beq.n	800a5fc <cleanup_stdio+0x10>
 800a5f8:	f002 f8b6 	bl	800c768 <_fflush_r>
 800a5fc:	68a1      	ldr	r1, [r4, #8]
 800a5fe:	4b09      	ldr	r3, [pc, #36]	; (800a624 <cleanup_stdio+0x38>)
 800a600:	4299      	cmp	r1, r3
 800a602:	d002      	beq.n	800a60a <cleanup_stdio+0x1e>
 800a604:	4620      	mov	r0, r4
 800a606:	f002 f8af 	bl	800c768 <_fflush_r>
 800a60a:	68e1      	ldr	r1, [r4, #12]
 800a60c:	4b06      	ldr	r3, [pc, #24]	; (800a628 <cleanup_stdio+0x3c>)
 800a60e:	4299      	cmp	r1, r3
 800a610:	d004      	beq.n	800a61c <cleanup_stdio+0x30>
 800a612:	4620      	mov	r0, r4
 800a614:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a618:	f002 b8a6 	b.w	800c768 <_fflush_r>
 800a61c:	bd10      	pop	{r4, pc}
 800a61e:	bf00      	nop
 800a620:	20000cec 	.word	0x20000cec
 800a624:	20000d54 	.word	0x20000d54
 800a628:	20000dbc 	.word	0x20000dbc

0800a62c <global_stdio_init.part.0>:
 800a62c:	b510      	push	{r4, lr}
 800a62e:	4b0b      	ldr	r3, [pc, #44]	; (800a65c <global_stdio_init.part.0+0x30>)
 800a630:	4c0b      	ldr	r4, [pc, #44]	; (800a660 <global_stdio_init.part.0+0x34>)
 800a632:	4a0c      	ldr	r2, [pc, #48]	; (800a664 <global_stdio_init.part.0+0x38>)
 800a634:	601a      	str	r2, [r3, #0]
 800a636:	4620      	mov	r0, r4
 800a638:	2200      	movs	r2, #0
 800a63a:	2104      	movs	r1, #4
 800a63c:	f7ff ffa6 	bl	800a58c <std>
 800a640:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800a644:	2201      	movs	r2, #1
 800a646:	2109      	movs	r1, #9
 800a648:	f7ff ffa0 	bl	800a58c <std>
 800a64c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800a650:	2202      	movs	r2, #2
 800a652:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a656:	2112      	movs	r1, #18
 800a658:	f7ff bf98 	b.w	800a58c <std>
 800a65c:	20000e24 	.word	0x20000e24
 800a660:	20000cec 	.word	0x20000cec
 800a664:	0800a5d5 	.word	0x0800a5d5

0800a668 <__sfp_lock_acquire>:
 800a668:	4801      	ldr	r0, [pc, #4]	; (800a670 <__sfp_lock_acquire+0x8>)
 800a66a:	f000 bae7 	b.w	800ac3c <__retarget_lock_acquire_recursive>
 800a66e:	bf00      	nop
 800a670:	20000e2d 	.word	0x20000e2d

0800a674 <__sfp_lock_release>:
 800a674:	4801      	ldr	r0, [pc, #4]	; (800a67c <__sfp_lock_release+0x8>)
 800a676:	f000 bae2 	b.w	800ac3e <__retarget_lock_release_recursive>
 800a67a:	bf00      	nop
 800a67c:	20000e2d 	.word	0x20000e2d

0800a680 <__sinit>:
 800a680:	b510      	push	{r4, lr}
 800a682:	4604      	mov	r4, r0
 800a684:	f7ff fff0 	bl	800a668 <__sfp_lock_acquire>
 800a688:	6a23      	ldr	r3, [r4, #32]
 800a68a:	b11b      	cbz	r3, 800a694 <__sinit+0x14>
 800a68c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a690:	f7ff bff0 	b.w	800a674 <__sfp_lock_release>
 800a694:	4b04      	ldr	r3, [pc, #16]	; (800a6a8 <__sinit+0x28>)
 800a696:	6223      	str	r3, [r4, #32]
 800a698:	4b04      	ldr	r3, [pc, #16]	; (800a6ac <__sinit+0x2c>)
 800a69a:	681b      	ldr	r3, [r3, #0]
 800a69c:	2b00      	cmp	r3, #0
 800a69e:	d1f5      	bne.n	800a68c <__sinit+0xc>
 800a6a0:	f7ff ffc4 	bl	800a62c <global_stdio_init.part.0>
 800a6a4:	e7f2      	b.n	800a68c <__sinit+0xc>
 800a6a6:	bf00      	nop
 800a6a8:	0800a5ed 	.word	0x0800a5ed
 800a6ac:	20000e24 	.word	0x20000e24

0800a6b0 <_fwalk_sglue>:
 800a6b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a6b4:	4607      	mov	r7, r0
 800a6b6:	4688      	mov	r8, r1
 800a6b8:	4614      	mov	r4, r2
 800a6ba:	2600      	movs	r6, #0
 800a6bc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a6c0:	f1b9 0901 	subs.w	r9, r9, #1
 800a6c4:	d505      	bpl.n	800a6d2 <_fwalk_sglue+0x22>
 800a6c6:	6824      	ldr	r4, [r4, #0]
 800a6c8:	2c00      	cmp	r4, #0
 800a6ca:	d1f7      	bne.n	800a6bc <_fwalk_sglue+0xc>
 800a6cc:	4630      	mov	r0, r6
 800a6ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a6d2:	89ab      	ldrh	r3, [r5, #12]
 800a6d4:	2b01      	cmp	r3, #1
 800a6d6:	d907      	bls.n	800a6e8 <_fwalk_sglue+0x38>
 800a6d8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a6dc:	3301      	adds	r3, #1
 800a6de:	d003      	beq.n	800a6e8 <_fwalk_sglue+0x38>
 800a6e0:	4629      	mov	r1, r5
 800a6e2:	4638      	mov	r0, r7
 800a6e4:	47c0      	blx	r8
 800a6e6:	4306      	orrs	r6, r0
 800a6e8:	3568      	adds	r5, #104	; 0x68
 800a6ea:	e7e9      	b.n	800a6c0 <_fwalk_sglue+0x10>

0800a6ec <iprintf>:
 800a6ec:	b40f      	push	{r0, r1, r2, r3}
 800a6ee:	b507      	push	{r0, r1, r2, lr}
 800a6f0:	4906      	ldr	r1, [pc, #24]	; (800a70c <iprintf+0x20>)
 800a6f2:	ab04      	add	r3, sp, #16
 800a6f4:	6808      	ldr	r0, [r1, #0]
 800a6f6:	f853 2b04 	ldr.w	r2, [r3], #4
 800a6fa:	6881      	ldr	r1, [r0, #8]
 800a6fc:	9301      	str	r3, [sp, #4]
 800a6fe:	f001 fe93 	bl	800c428 <_vfiprintf_r>
 800a702:	b003      	add	sp, #12
 800a704:	f85d eb04 	ldr.w	lr, [sp], #4
 800a708:	b004      	add	sp, #16
 800a70a:	4770      	bx	lr
 800a70c:	200001d4 	.word	0x200001d4

0800a710 <_puts_r>:
 800a710:	6a03      	ldr	r3, [r0, #32]
 800a712:	b570      	push	{r4, r5, r6, lr}
 800a714:	6884      	ldr	r4, [r0, #8]
 800a716:	4605      	mov	r5, r0
 800a718:	460e      	mov	r6, r1
 800a71a:	b90b      	cbnz	r3, 800a720 <_puts_r+0x10>
 800a71c:	f7ff ffb0 	bl	800a680 <__sinit>
 800a720:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a722:	07db      	lsls	r3, r3, #31
 800a724:	d405      	bmi.n	800a732 <_puts_r+0x22>
 800a726:	89a3      	ldrh	r3, [r4, #12]
 800a728:	0598      	lsls	r0, r3, #22
 800a72a:	d402      	bmi.n	800a732 <_puts_r+0x22>
 800a72c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a72e:	f000 fa85 	bl	800ac3c <__retarget_lock_acquire_recursive>
 800a732:	89a3      	ldrh	r3, [r4, #12]
 800a734:	0719      	lsls	r1, r3, #28
 800a736:	d513      	bpl.n	800a760 <_puts_r+0x50>
 800a738:	6923      	ldr	r3, [r4, #16]
 800a73a:	b18b      	cbz	r3, 800a760 <_puts_r+0x50>
 800a73c:	3e01      	subs	r6, #1
 800a73e:	68a3      	ldr	r3, [r4, #8]
 800a740:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800a744:	3b01      	subs	r3, #1
 800a746:	60a3      	str	r3, [r4, #8]
 800a748:	b9e9      	cbnz	r1, 800a786 <_puts_r+0x76>
 800a74a:	2b00      	cmp	r3, #0
 800a74c:	da2e      	bge.n	800a7ac <_puts_r+0x9c>
 800a74e:	4622      	mov	r2, r4
 800a750:	210a      	movs	r1, #10
 800a752:	4628      	mov	r0, r5
 800a754:	f000 f8cf 	bl	800a8f6 <__swbuf_r>
 800a758:	3001      	adds	r0, #1
 800a75a:	d007      	beq.n	800a76c <_puts_r+0x5c>
 800a75c:	250a      	movs	r5, #10
 800a75e:	e007      	b.n	800a770 <_puts_r+0x60>
 800a760:	4621      	mov	r1, r4
 800a762:	4628      	mov	r0, r5
 800a764:	f000 f904 	bl	800a970 <__swsetup_r>
 800a768:	2800      	cmp	r0, #0
 800a76a:	d0e7      	beq.n	800a73c <_puts_r+0x2c>
 800a76c:	f04f 35ff 	mov.w	r5, #4294967295
 800a770:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a772:	07da      	lsls	r2, r3, #31
 800a774:	d405      	bmi.n	800a782 <_puts_r+0x72>
 800a776:	89a3      	ldrh	r3, [r4, #12]
 800a778:	059b      	lsls	r3, r3, #22
 800a77a:	d402      	bmi.n	800a782 <_puts_r+0x72>
 800a77c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a77e:	f000 fa5e 	bl	800ac3e <__retarget_lock_release_recursive>
 800a782:	4628      	mov	r0, r5
 800a784:	bd70      	pop	{r4, r5, r6, pc}
 800a786:	2b00      	cmp	r3, #0
 800a788:	da04      	bge.n	800a794 <_puts_r+0x84>
 800a78a:	69a2      	ldr	r2, [r4, #24]
 800a78c:	429a      	cmp	r2, r3
 800a78e:	dc06      	bgt.n	800a79e <_puts_r+0x8e>
 800a790:	290a      	cmp	r1, #10
 800a792:	d004      	beq.n	800a79e <_puts_r+0x8e>
 800a794:	6823      	ldr	r3, [r4, #0]
 800a796:	1c5a      	adds	r2, r3, #1
 800a798:	6022      	str	r2, [r4, #0]
 800a79a:	7019      	strb	r1, [r3, #0]
 800a79c:	e7cf      	b.n	800a73e <_puts_r+0x2e>
 800a79e:	4622      	mov	r2, r4
 800a7a0:	4628      	mov	r0, r5
 800a7a2:	f000 f8a8 	bl	800a8f6 <__swbuf_r>
 800a7a6:	3001      	adds	r0, #1
 800a7a8:	d1c9      	bne.n	800a73e <_puts_r+0x2e>
 800a7aa:	e7df      	b.n	800a76c <_puts_r+0x5c>
 800a7ac:	6823      	ldr	r3, [r4, #0]
 800a7ae:	250a      	movs	r5, #10
 800a7b0:	1c5a      	adds	r2, r3, #1
 800a7b2:	6022      	str	r2, [r4, #0]
 800a7b4:	701d      	strb	r5, [r3, #0]
 800a7b6:	e7db      	b.n	800a770 <_puts_r+0x60>

0800a7b8 <puts>:
 800a7b8:	4b02      	ldr	r3, [pc, #8]	; (800a7c4 <puts+0xc>)
 800a7ba:	4601      	mov	r1, r0
 800a7bc:	6818      	ldr	r0, [r3, #0]
 800a7be:	f7ff bfa7 	b.w	800a710 <_puts_r>
 800a7c2:	bf00      	nop
 800a7c4:	200001d4 	.word	0x200001d4

0800a7c8 <sniprintf>:
 800a7c8:	b40c      	push	{r2, r3}
 800a7ca:	b530      	push	{r4, r5, lr}
 800a7cc:	4b17      	ldr	r3, [pc, #92]	; (800a82c <sniprintf+0x64>)
 800a7ce:	1e0c      	subs	r4, r1, #0
 800a7d0:	681d      	ldr	r5, [r3, #0]
 800a7d2:	b09d      	sub	sp, #116	; 0x74
 800a7d4:	da08      	bge.n	800a7e8 <sniprintf+0x20>
 800a7d6:	238b      	movs	r3, #139	; 0x8b
 800a7d8:	602b      	str	r3, [r5, #0]
 800a7da:	f04f 30ff 	mov.w	r0, #4294967295
 800a7de:	b01d      	add	sp, #116	; 0x74
 800a7e0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a7e4:	b002      	add	sp, #8
 800a7e6:	4770      	bx	lr
 800a7e8:	f44f 7302 	mov.w	r3, #520	; 0x208
 800a7ec:	f8ad 3014 	strh.w	r3, [sp, #20]
 800a7f0:	bf14      	ite	ne
 800a7f2:	f104 33ff 	addne.w	r3, r4, #4294967295
 800a7f6:	4623      	moveq	r3, r4
 800a7f8:	9304      	str	r3, [sp, #16]
 800a7fa:	9307      	str	r3, [sp, #28]
 800a7fc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a800:	9002      	str	r0, [sp, #8]
 800a802:	9006      	str	r0, [sp, #24]
 800a804:	f8ad 3016 	strh.w	r3, [sp, #22]
 800a808:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800a80a:	ab21      	add	r3, sp, #132	; 0x84
 800a80c:	a902      	add	r1, sp, #8
 800a80e:	4628      	mov	r0, r5
 800a810:	9301      	str	r3, [sp, #4]
 800a812:	f001 fce1 	bl	800c1d8 <_svfiprintf_r>
 800a816:	1c43      	adds	r3, r0, #1
 800a818:	bfbc      	itt	lt
 800a81a:	238b      	movlt	r3, #139	; 0x8b
 800a81c:	602b      	strlt	r3, [r5, #0]
 800a81e:	2c00      	cmp	r4, #0
 800a820:	d0dd      	beq.n	800a7de <sniprintf+0x16>
 800a822:	9b02      	ldr	r3, [sp, #8]
 800a824:	2200      	movs	r2, #0
 800a826:	701a      	strb	r2, [r3, #0]
 800a828:	e7d9      	b.n	800a7de <sniprintf+0x16>
 800a82a:	bf00      	nop
 800a82c:	200001d4 	.word	0x200001d4

0800a830 <siprintf>:
 800a830:	b40e      	push	{r1, r2, r3}
 800a832:	b500      	push	{lr}
 800a834:	b09c      	sub	sp, #112	; 0x70
 800a836:	ab1d      	add	r3, sp, #116	; 0x74
 800a838:	9002      	str	r0, [sp, #8]
 800a83a:	9006      	str	r0, [sp, #24]
 800a83c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a840:	4809      	ldr	r0, [pc, #36]	; (800a868 <siprintf+0x38>)
 800a842:	9107      	str	r1, [sp, #28]
 800a844:	9104      	str	r1, [sp, #16]
 800a846:	4909      	ldr	r1, [pc, #36]	; (800a86c <siprintf+0x3c>)
 800a848:	f853 2b04 	ldr.w	r2, [r3], #4
 800a84c:	9105      	str	r1, [sp, #20]
 800a84e:	6800      	ldr	r0, [r0, #0]
 800a850:	9301      	str	r3, [sp, #4]
 800a852:	a902      	add	r1, sp, #8
 800a854:	f001 fcc0 	bl	800c1d8 <_svfiprintf_r>
 800a858:	9b02      	ldr	r3, [sp, #8]
 800a85a:	2200      	movs	r2, #0
 800a85c:	701a      	strb	r2, [r3, #0]
 800a85e:	b01c      	add	sp, #112	; 0x70
 800a860:	f85d eb04 	ldr.w	lr, [sp], #4
 800a864:	b003      	add	sp, #12
 800a866:	4770      	bx	lr
 800a868:	200001d4 	.word	0x200001d4
 800a86c:	ffff0208 	.word	0xffff0208

0800a870 <__sread>:
 800a870:	b510      	push	{r4, lr}
 800a872:	460c      	mov	r4, r1
 800a874:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a878:	f000 f96e 	bl	800ab58 <_read_r>
 800a87c:	2800      	cmp	r0, #0
 800a87e:	bfab      	itete	ge
 800a880:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a882:	89a3      	ldrhlt	r3, [r4, #12]
 800a884:	181b      	addge	r3, r3, r0
 800a886:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a88a:	bfac      	ite	ge
 800a88c:	6563      	strge	r3, [r4, #84]	; 0x54
 800a88e:	81a3      	strhlt	r3, [r4, #12]
 800a890:	bd10      	pop	{r4, pc}

0800a892 <__swrite>:
 800a892:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a896:	461f      	mov	r7, r3
 800a898:	898b      	ldrh	r3, [r1, #12]
 800a89a:	05db      	lsls	r3, r3, #23
 800a89c:	4605      	mov	r5, r0
 800a89e:	460c      	mov	r4, r1
 800a8a0:	4616      	mov	r6, r2
 800a8a2:	d505      	bpl.n	800a8b0 <__swrite+0x1e>
 800a8a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a8a8:	2302      	movs	r3, #2
 800a8aa:	2200      	movs	r2, #0
 800a8ac:	f000 f942 	bl	800ab34 <_lseek_r>
 800a8b0:	89a3      	ldrh	r3, [r4, #12]
 800a8b2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a8b6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a8ba:	81a3      	strh	r3, [r4, #12]
 800a8bc:	4632      	mov	r2, r6
 800a8be:	463b      	mov	r3, r7
 800a8c0:	4628      	mov	r0, r5
 800a8c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a8c6:	f000 b97d 	b.w	800abc4 <_write_r>

0800a8ca <__sseek>:
 800a8ca:	b510      	push	{r4, lr}
 800a8cc:	460c      	mov	r4, r1
 800a8ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a8d2:	f000 f92f 	bl	800ab34 <_lseek_r>
 800a8d6:	1c43      	adds	r3, r0, #1
 800a8d8:	89a3      	ldrh	r3, [r4, #12]
 800a8da:	bf15      	itete	ne
 800a8dc:	6560      	strne	r0, [r4, #84]	; 0x54
 800a8de:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a8e2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a8e6:	81a3      	strheq	r3, [r4, #12]
 800a8e8:	bf18      	it	ne
 800a8ea:	81a3      	strhne	r3, [r4, #12]
 800a8ec:	bd10      	pop	{r4, pc}

0800a8ee <__sclose>:
 800a8ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a8f2:	f000 b90f 	b.w	800ab14 <_close_r>

0800a8f6 <__swbuf_r>:
 800a8f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a8f8:	460e      	mov	r6, r1
 800a8fa:	4614      	mov	r4, r2
 800a8fc:	4605      	mov	r5, r0
 800a8fe:	b118      	cbz	r0, 800a908 <__swbuf_r+0x12>
 800a900:	6a03      	ldr	r3, [r0, #32]
 800a902:	b90b      	cbnz	r3, 800a908 <__swbuf_r+0x12>
 800a904:	f7ff febc 	bl	800a680 <__sinit>
 800a908:	69a3      	ldr	r3, [r4, #24]
 800a90a:	60a3      	str	r3, [r4, #8]
 800a90c:	89a3      	ldrh	r3, [r4, #12]
 800a90e:	071a      	lsls	r2, r3, #28
 800a910:	d525      	bpl.n	800a95e <__swbuf_r+0x68>
 800a912:	6923      	ldr	r3, [r4, #16]
 800a914:	b31b      	cbz	r3, 800a95e <__swbuf_r+0x68>
 800a916:	6823      	ldr	r3, [r4, #0]
 800a918:	6922      	ldr	r2, [r4, #16]
 800a91a:	1a98      	subs	r0, r3, r2
 800a91c:	6963      	ldr	r3, [r4, #20]
 800a91e:	b2f6      	uxtb	r6, r6
 800a920:	4283      	cmp	r3, r0
 800a922:	4637      	mov	r7, r6
 800a924:	dc04      	bgt.n	800a930 <__swbuf_r+0x3a>
 800a926:	4621      	mov	r1, r4
 800a928:	4628      	mov	r0, r5
 800a92a:	f001 ff1d 	bl	800c768 <_fflush_r>
 800a92e:	b9e0      	cbnz	r0, 800a96a <__swbuf_r+0x74>
 800a930:	68a3      	ldr	r3, [r4, #8]
 800a932:	3b01      	subs	r3, #1
 800a934:	60a3      	str	r3, [r4, #8]
 800a936:	6823      	ldr	r3, [r4, #0]
 800a938:	1c5a      	adds	r2, r3, #1
 800a93a:	6022      	str	r2, [r4, #0]
 800a93c:	701e      	strb	r6, [r3, #0]
 800a93e:	6962      	ldr	r2, [r4, #20]
 800a940:	1c43      	adds	r3, r0, #1
 800a942:	429a      	cmp	r2, r3
 800a944:	d004      	beq.n	800a950 <__swbuf_r+0x5a>
 800a946:	89a3      	ldrh	r3, [r4, #12]
 800a948:	07db      	lsls	r3, r3, #31
 800a94a:	d506      	bpl.n	800a95a <__swbuf_r+0x64>
 800a94c:	2e0a      	cmp	r6, #10
 800a94e:	d104      	bne.n	800a95a <__swbuf_r+0x64>
 800a950:	4621      	mov	r1, r4
 800a952:	4628      	mov	r0, r5
 800a954:	f001 ff08 	bl	800c768 <_fflush_r>
 800a958:	b938      	cbnz	r0, 800a96a <__swbuf_r+0x74>
 800a95a:	4638      	mov	r0, r7
 800a95c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a95e:	4621      	mov	r1, r4
 800a960:	4628      	mov	r0, r5
 800a962:	f000 f805 	bl	800a970 <__swsetup_r>
 800a966:	2800      	cmp	r0, #0
 800a968:	d0d5      	beq.n	800a916 <__swbuf_r+0x20>
 800a96a:	f04f 37ff 	mov.w	r7, #4294967295
 800a96e:	e7f4      	b.n	800a95a <__swbuf_r+0x64>

0800a970 <__swsetup_r>:
 800a970:	b538      	push	{r3, r4, r5, lr}
 800a972:	4b2a      	ldr	r3, [pc, #168]	; (800aa1c <__swsetup_r+0xac>)
 800a974:	4605      	mov	r5, r0
 800a976:	6818      	ldr	r0, [r3, #0]
 800a978:	460c      	mov	r4, r1
 800a97a:	b118      	cbz	r0, 800a984 <__swsetup_r+0x14>
 800a97c:	6a03      	ldr	r3, [r0, #32]
 800a97e:	b90b      	cbnz	r3, 800a984 <__swsetup_r+0x14>
 800a980:	f7ff fe7e 	bl	800a680 <__sinit>
 800a984:	89a3      	ldrh	r3, [r4, #12]
 800a986:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a98a:	0718      	lsls	r0, r3, #28
 800a98c:	d422      	bmi.n	800a9d4 <__swsetup_r+0x64>
 800a98e:	06d9      	lsls	r1, r3, #27
 800a990:	d407      	bmi.n	800a9a2 <__swsetup_r+0x32>
 800a992:	2309      	movs	r3, #9
 800a994:	602b      	str	r3, [r5, #0]
 800a996:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a99a:	81a3      	strh	r3, [r4, #12]
 800a99c:	f04f 30ff 	mov.w	r0, #4294967295
 800a9a0:	e034      	b.n	800aa0c <__swsetup_r+0x9c>
 800a9a2:	0758      	lsls	r0, r3, #29
 800a9a4:	d512      	bpl.n	800a9cc <__swsetup_r+0x5c>
 800a9a6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a9a8:	b141      	cbz	r1, 800a9bc <__swsetup_r+0x4c>
 800a9aa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a9ae:	4299      	cmp	r1, r3
 800a9b0:	d002      	beq.n	800a9b8 <__swsetup_r+0x48>
 800a9b2:	4628      	mov	r0, r5
 800a9b4:	f000 ffce 	bl	800b954 <_free_r>
 800a9b8:	2300      	movs	r3, #0
 800a9ba:	6363      	str	r3, [r4, #52]	; 0x34
 800a9bc:	89a3      	ldrh	r3, [r4, #12]
 800a9be:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a9c2:	81a3      	strh	r3, [r4, #12]
 800a9c4:	2300      	movs	r3, #0
 800a9c6:	6063      	str	r3, [r4, #4]
 800a9c8:	6923      	ldr	r3, [r4, #16]
 800a9ca:	6023      	str	r3, [r4, #0]
 800a9cc:	89a3      	ldrh	r3, [r4, #12]
 800a9ce:	f043 0308 	orr.w	r3, r3, #8
 800a9d2:	81a3      	strh	r3, [r4, #12]
 800a9d4:	6923      	ldr	r3, [r4, #16]
 800a9d6:	b94b      	cbnz	r3, 800a9ec <__swsetup_r+0x7c>
 800a9d8:	89a3      	ldrh	r3, [r4, #12]
 800a9da:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a9de:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a9e2:	d003      	beq.n	800a9ec <__swsetup_r+0x7c>
 800a9e4:	4621      	mov	r1, r4
 800a9e6:	4628      	mov	r0, r5
 800a9e8:	f001 ff0c 	bl	800c804 <__smakebuf_r>
 800a9ec:	89a0      	ldrh	r0, [r4, #12]
 800a9ee:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a9f2:	f010 0301 	ands.w	r3, r0, #1
 800a9f6:	d00a      	beq.n	800aa0e <__swsetup_r+0x9e>
 800a9f8:	2300      	movs	r3, #0
 800a9fa:	60a3      	str	r3, [r4, #8]
 800a9fc:	6963      	ldr	r3, [r4, #20]
 800a9fe:	425b      	negs	r3, r3
 800aa00:	61a3      	str	r3, [r4, #24]
 800aa02:	6923      	ldr	r3, [r4, #16]
 800aa04:	b943      	cbnz	r3, 800aa18 <__swsetup_r+0xa8>
 800aa06:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800aa0a:	d1c4      	bne.n	800a996 <__swsetup_r+0x26>
 800aa0c:	bd38      	pop	{r3, r4, r5, pc}
 800aa0e:	0781      	lsls	r1, r0, #30
 800aa10:	bf58      	it	pl
 800aa12:	6963      	ldrpl	r3, [r4, #20]
 800aa14:	60a3      	str	r3, [r4, #8]
 800aa16:	e7f4      	b.n	800aa02 <__swsetup_r+0x92>
 800aa18:	2000      	movs	r0, #0
 800aa1a:	e7f7      	b.n	800aa0c <__swsetup_r+0x9c>
 800aa1c:	200001d4 	.word	0x200001d4

0800aa20 <memcmp>:
 800aa20:	b510      	push	{r4, lr}
 800aa22:	3901      	subs	r1, #1
 800aa24:	4402      	add	r2, r0
 800aa26:	4290      	cmp	r0, r2
 800aa28:	d101      	bne.n	800aa2e <memcmp+0xe>
 800aa2a:	2000      	movs	r0, #0
 800aa2c:	e005      	b.n	800aa3a <memcmp+0x1a>
 800aa2e:	7803      	ldrb	r3, [r0, #0]
 800aa30:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800aa34:	42a3      	cmp	r3, r4
 800aa36:	d001      	beq.n	800aa3c <memcmp+0x1c>
 800aa38:	1b18      	subs	r0, r3, r4
 800aa3a:	bd10      	pop	{r4, pc}
 800aa3c:	3001      	adds	r0, #1
 800aa3e:	e7f2      	b.n	800aa26 <memcmp+0x6>

0800aa40 <memmove>:
 800aa40:	4288      	cmp	r0, r1
 800aa42:	b510      	push	{r4, lr}
 800aa44:	eb01 0402 	add.w	r4, r1, r2
 800aa48:	d902      	bls.n	800aa50 <memmove+0x10>
 800aa4a:	4284      	cmp	r4, r0
 800aa4c:	4623      	mov	r3, r4
 800aa4e:	d807      	bhi.n	800aa60 <memmove+0x20>
 800aa50:	1e43      	subs	r3, r0, #1
 800aa52:	42a1      	cmp	r1, r4
 800aa54:	d008      	beq.n	800aa68 <memmove+0x28>
 800aa56:	f811 2b01 	ldrb.w	r2, [r1], #1
 800aa5a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800aa5e:	e7f8      	b.n	800aa52 <memmove+0x12>
 800aa60:	4402      	add	r2, r0
 800aa62:	4601      	mov	r1, r0
 800aa64:	428a      	cmp	r2, r1
 800aa66:	d100      	bne.n	800aa6a <memmove+0x2a>
 800aa68:	bd10      	pop	{r4, pc}
 800aa6a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800aa6e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800aa72:	e7f7      	b.n	800aa64 <memmove+0x24>

0800aa74 <memset>:
 800aa74:	4402      	add	r2, r0
 800aa76:	4603      	mov	r3, r0
 800aa78:	4293      	cmp	r3, r2
 800aa7a:	d100      	bne.n	800aa7e <memset+0xa>
 800aa7c:	4770      	bx	lr
 800aa7e:	f803 1b01 	strb.w	r1, [r3], #1
 800aa82:	e7f9      	b.n	800aa78 <memset+0x4>

0800aa84 <strncpy>:
 800aa84:	b510      	push	{r4, lr}
 800aa86:	3901      	subs	r1, #1
 800aa88:	4603      	mov	r3, r0
 800aa8a:	b132      	cbz	r2, 800aa9a <strncpy+0x16>
 800aa8c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800aa90:	f803 4b01 	strb.w	r4, [r3], #1
 800aa94:	3a01      	subs	r2, #1
 800aa96:	2c00      	cmp	r4, #0
 800aa98:	d1f7      	bne.n	800aa8a <strncpy+0x6>
 800aa9a:	441a      	add	r2, r3
 800aa9c:	2100      	movs	r1, #0
 800aa9e:	4293      	cmp	r3, r2
 800aaa0:	d100      	bne.n	800aaa4 <strncpy+0x20>
 800aaa2:	bd10      	pop	{r4, pc}
 800aaa4:	f803 1b01 	strb.w	r1, [r3], #1
 800aaa8:	e7f9      	b.n	800aa9e <strncpy+0x1a>

0800aaaa <_raise_r>:
 800aaaa:	291f      	cmp	r1, #31
 800aaac:	b538      	push	{r3, r4, r5, lr}
 800aaae:	4604      	mov	r4, r0
 800aab0:	460d      	mov	r5, r1
 800aab2:	d904      	bls.n	800aabe <_raise_r+0x14>
 800aab4:	2316      	movs	r3, #22
 800aab6:	6003      	str	r3, [r0, #0]
 800aab8:	f04f 30ff 	mov.w	r0, #4294967295
 800aabc:	bd38      	pop	{r3, r4, r5, pc}
 800aabe:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800aac0:	b112      	cbz	r2, 800aac8 <_raise_r+0x1e>
 800aac2:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800aac6:	b94b      	cbnz	r3, 800aadc <_raise_r+0x32>
 800aac8:	4620      	mov	r0, r4
 800aaca:	f000 f869 	bl	800aba0 <_getpid_r>
 800aace:	462a      	mov	r2, r5
 800aad0:	4601      	mov	r1, r0
 800aad2:	4620      	mov	r0, r4
 800aad4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800aad8:	f000 b850 	b.w	800ab7c <_kill_r>
 800aadc:	2b01      	cmp	r3, #1
 800aade:	d00a      	beq.n	800aaf6 <_raise_r+0x4c>
 800aae0:	1c59      	adds	r1, r3, #1
 800aae2:	d103      	bne.n	800aaec <_raise_r+0x42>
 800aae4:	2316      	movs	r3, #22
 800aae6:	6003      	str	r3, [r0, #0]
 800aae8:	2001      	movs	r0, #1
 800aaea:	e7e7      	b.n	800aabc <_raise_r+0x12>
 800aaec:	2400      	movs	r4, #0
 800aaee:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800aaf2:	4628      	mov	r0, r5
 800aaf4:	4798      	blx	r3
 800aaf6:	2000      	movs	r0, #0
 800aaf8:	e7e0      	b.n	800aabc <_raise_r+0x12>
	...

0800aafc <raise>:
 800aafc:	4b02      	ldr	r3, [pc, #8]	; (800ab08 <raise+0xc>)
 800aafe:	4601      	mov	r1, r0
 800ab00:	6818      	ldr	r0, [r3, #0]
 800ab02:	f7ff bfd2 	b.w	800aaaa <_raise_r>
 800ab06:	bf00      	nop
 800ab08:	200001d4 	.word	0x200001d4

0800ab0c <_localeconv_r>:
 800ab0c:	4800      	ldr	r0, [pc, #0]	; (800ab10 <_localeconv_r+0x4>)
 800ab0e:	4770      	bx	lr
 800ab10:	2000010c 	.word	0x2000010c

0800ab14 <_close_r>:
 800ab14:	b538      	push	{r3, r4, r5, lr}
 800ab16:	4d06      	ldr	r5, [pc, #24]	; (800ab30 <_close_r+0x1c>)
 800ab18:	2300      	movs	r3, #0
 800ab1a:	4604      	mov	r4, r0
 800ab1c:	4608      	mov	r0, r1
 800ab1e:	602b      	str	r3, [r5, #0]
 800ab20:	f7f9 fc36 	bl	8004390 <_close>
 800ab24:	1c43      	adds	r3, r0, #1
 800ab26:	d102      	bne.n	800ab2e <_close_r+0x1a>
 800ab28:	682b      	ldr	r3, [r5, #0]
 800ab2a:	b103      	cbz	r3, 800ab2e <_close_r+0x1a>
 800ab2c:	6023      	str	r3, [r4, #0]
 800ab2e:	bd38      	pop	{r3, r4, r5, pc}
 800ab30:	20000e28 	.word	0x20000e28

0800ab34 <_lseek_r>:
 800ab34:	b538      	push	{r3, r4, r5, lr}
 800ab36:	4d07      	ldr	r5, [pc, #28]	; (800ab54 <_lseek_r+0x20>)
 800ab38:	4604      	mov	r4, r0
 800ab3a:	4608      	mov	r0, r1
 800ab3c:	4611      	mov	r1, r2
 800ab3e:	2200      	movs	r2, #0
 800ab40:	602a      	str	r2, [r5, #0]
 800ab42:	461a      	mov	r2, r3
 800ab44:	f7f9 fc4b 	bl	80043de <_lseek>
 800ab48:	1c43      	adds	r3, r0, #1
 800ab4a:	d102      	bne.n	800ab52 <_lseek_r+0x1e>
 800ab4c:	682b      	ldr	r3, [r5, #0]
 800ab4e:	b103      	cbz	r3, 800ab52 <_lseek_r+0x1e>
 800ab50:	6023      	str	r3, [r4, #0]
 800ab52:	bd38      	pop	{r3, r4, r5, pc}
 800ab54:	20000e28 	.word	0x20000e28

0800ab58 <_read_r>:
 800ab58:	b538      	push	{r3, r4, r5, lr}
 800ab5a:	4d07      	ldr	r5, [pc, #28]	; (800ab78 <_read_r+0x20>)
 800ab5c:	4604      	mov	r4, r0
 800ab5e:	4608      	mov	r0, r1
 800ab60:	4611      	mov	r1, r2
 800ab62:	2200      	movs	r2, #0
 800ab64:	602a      	str	r2, [r5, #0]
 800ab66:	461a      	mov	r2, r3
 800ab68:	f7f9 fbf5 	bl	8004356 <_read>
 800ab6c:	1c43      	adds	r3, r0, #1
 800ab6e:	d102      	bne.n	800ab76 <_read_r+0x1e>
 800ab70:	682b      	ldr	r3, [r5, #0]
 800ab72:	b103      	cbz	r3, 800ab76 <_read_r+0x1e>
 800ab74:	6023      	str	r3, [r4, #0]
 800ab76:	bd38      	pop	{r3, r4, r5, pc}
 800ab78:	20000e28 	.word	0x20000e28

0800ab7c <_kill_r>:
 800ab7c:	b538      	push	{r3, r4, r5, lr}
 800ab7e:	4d07      	ldr	r5, [pc, #28]	; (800ab9c <_kill_r+0x20>)
 800ab80:	2300      	movs	r3, #0
 800ab82:	4604      	mov	r4, r0
 800ab84:	4608      	mov	r0, r1
 800ab86:	4611      	mov	r1, r2
 800ab88:	602b      	str	r3, [r5, #0]
 800ab8a:	f7f9 fbca 	bl	8004322 <_kill>
 800ab8e:	1c43      	adds	r3, r0, #1
 800ab90:	d102      	bne.n	800ab98 <_kill_r+0x1c>
 800ab92:	682b      	ldr	r3, [r5, #0]
 800ab94:	b103      	cbz	r3, 800ab98 <_kill_r+0x1c>
 800ab96:	6023      	str	r3, [r4, #0]
 800ab98:	bd38      	pop	{r3, r4, r5, pc}
 800ab9a:	bf00      	nop
 800ab9c:	20000e28 	.word	0x20000e28

0800aba0 <_getpid_r>:
 800aba0:	f7f9 bbb7 	b.w	8004312 <_getpid>

0800aba4 <_sbrk_r>:
 800aba4:	b538      	push	{r3, r4, r5, lr}
 800aba6:	4d06      	ldr	r5, [pc, #24]	; (800abc0 <_sbrk_r+0x1c>)
 800aba8:	2300      	movs	r3, #0
 800abaa:	4604      	mov	r4, r0
 800abac:	4608      	mov	r0, r1
 800abae:	602b      	str	r3, [r5, #0]
 800abb0:	f7f9 fc22 	bl	80043f8 <_sbrk>
 800abb4:	1c43      	adds	r3, r0, #1
 800abb6:	d102      	bne.n	800abbe <_sbrk_r+0x1a>
 800abb8:	682b      	ldr	r3, [r5, #0]
 800abba:	b103      	cbz	r3, 800abbe <_sbrk_r+0x1a>
 800abbc:	6023      	str	r3, [r4, #0]
 800abbe:	bd38      	pop	{r3, r4, r5, pc}
 800abc0:	20000e28 	.word	0x20000e28

0800abc4 <_write_r>:
 800abc4:	b538      	push	{r3, r4, r5, lr}
 800abc6:	4d07      	ldr	r5, [pc, #28]	; (800abe4 <_write_r+0x20>)
 800abc8:	4604      	mov	r4, r0
 800abca:	4608      	mov	r0, r1
 800abcc:	4611      	mov	r1, r2
 800abce:	2200      	movs	r2, #0
 800abd0:	602a      	str	r2, [r5, #0]
 800abd2:	461a      	mov	r2, r3
 800abd4:	f7fb fbf8 	bl	80063c8 <_write>
 800abd8:	1c43      	adds	r3, r0, #1
 800abda:	d102      	bne.n	800abe2 <_write_r+0x1e>
 800abdc:	682b      	ldr	r3, [r5, #0]
 800abde:	b103      	cbz	r3, 800abe2 <_write_r+0x1e>
 800abe0:	6023      	str	r3, [r4, #0]
 800abe2:	bd38      	pop	{r3, r4, r5, pc}
 800abe4:	20000e28 	.word	0x20000e28

0800abe8 <__errno>:
 800abe8:	4b01      	ldr	r3, [pc, #4]	; (800abf0 <__errno+0x8>)
 800abea:	6818      	ldr	r0, [r3, #0]
 800abec:	4770      	bx	lr
 800abee:	bf00      	nop
 800abf0:	200001d4 	.word	0x200001d4

0800abf4 <__libc_init_array>:
 800abf4:	b570      	push	{r4, r5, r6, lr}
 800abf6:	4d0d      	ldr	r5, [pc, #52]	; (800ac2c <__libc_init_array+0x38>)
 800abf8:	4c0d      	ldr	r4, [pc, #52]	; (800ac30 <__libc_init_array+0x3c>)
 800abfa:	1b64      	subs	r4, r4, r5
 800abfc:	10a4      	asrs	r4, r4, #2
 800abfe:	2600      	movs	r6, #0
 800ac00:	42a6      	cmp	r6, r4
 800ac02:	d109      	bne.n	800ac18 <__libc_init_array+0x24>
 800ac04:	4d0b      	ldr	r5, [pc, #44]	; (800ac34 <__libc_init_array+0x40>)
 800ac06:	4c0c      	ldr	r4, [pc, #48]	; (800ac38 <__libc_init_array+0x44>)
 800ac08:	f001 fed8 	bl	800c9bc <_init>
 800ac0c:	1b64      	subs	r4, r4, r5
 800ac0e:	10a4      	asrs	r4, r4, #2
 800ac10:	2600      	movs	r6, #0
 800ac12:	42a6      	cmp	r6, r4
 800ac14:	d105      	bne.n	800ac22 <__libc_init_array+0x2e>
 800ac16:	bd70      	pop	{r4, r5, r6, pc}
 800ac18:	f855 3b04 	ldr.w	r3, [r5], #4
 800ac1c:	4798      	blx	r3
 800ac1e:	3601      	adds	r6, #1
 800ac20:	e7ee      	b.n	800ac00 <__libc_init_array+0xc>
 800ac22:	f855 3b04 	ldr.w	r3, [r5], #4
 800ac26:	4798      	blx	r3
 800ac28:	3601      	adds	r6, #1
 800ac2a:	e7f2      	b.n	800ac12 <__libc_init_array+0x1e>
 800ac2c:	0800db84 	.word	0x0800db84
 800ac30:	0800db84 	.word	0x0800db84
 800ac34:	0800db84 	.word	0x0800db84
 800ac38:	0800db9c 	.word	0x0800db9c

0800ac3c <__retarget_lock_acquire_recursive>:
 800ac3c:	4770      	bx	lr

0800ac3e <__retarget_lock_release_recursive>:
 800ac3e:	4770      	bx	lr

0800ac40 <memcpy>:
 800ac40:	440a      	add	r2, r1
 800ac42:	4291      	cmp	r1, r2
 800ac44:	f100 33ff 	add.w	r3, r0, #4294967295
 800ac48:	d100      	bne.n	800ac4c <memcpy+0xc>
 800ac4a:	4770      	bx	lr
 800ac4c:	b510      	push	{r4, lr}
 800ac4e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ac52:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ac56:	4291      	cmp	r1, r2
 800ac58:	d1f9      	bne.n	800ac4e <memcpy+0xe>
 800ac5a:	bd10      	pop	{r4, pc}

0800ac5c <quorem>:
 800ac5c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac60:	6903      	ldr	r3, [r0, #16]
 800ac62:	690c      	ldr	r4, [r1, #16]
 800ac64:	42a3      	cmp	r3, r4
 800ac66:	4607      	mov	r7, r0
 800ac68:	db7e      	blt.n	800ad68 <quorem+0x10c>
 800ac6a:	3c01      	subs	r4, #1
 800ac6c:	f101 0814 	add.w	r8, r1, #20
 800ac70:	f100 0514 	add.w	r5, r0, #20
 800ac74:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ac78:	9301      	str	r3, [sp, #4]
 800ac7a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800ac7e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ac82:	3301      	adds	r3, #1
 800ac84:	429a      	cmp	r2, r3
 800ac86:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800ac8a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800ac8e:	fbb2 f6f3 	udiv	r6, r2, r3
 800ac92:	d331      	bcc.n	800acf8 <quorem+0x9c>
 800ac94:	f04f 0e00 	mov.w	lr, #0
 800ac98:	4640      	mov	r0, r8
 800ac9a:	46ac      	mov	ip, r5
 800ac9c:	46f2      	mov	sl, lr
 800ac9e:	f850 2b04 	ldr.w	r2, [r0], #4
 800aca2:	b293      	uxth	r3, r2
 800aca4:	fb06 e303 	mla	r3, r6, r3, lr
 800aca8:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800acac:	0c1a      	lsrs	r2, r3, #16
 800acae:	b29b      	uxth	r3, r3
 800acb0:	ebaa 0303 	sub.w	r3, sl, r3
 800acb4:	f8dc a000 	ldr.w	sl, [ip]
 800acb8:	fa13 f38a 	uxtah	r3, r3, sl
 800acbc:	fb06 220e 	mla	r2, r6, lr, r2
 800acc0:	9300      	str	r3, [sp, #0]
 800acc2:	9b00      	ldr	r3, [sp, #0]
 800acc4:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800acc8:	b292      	uxth	r2, r2
 800acca:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800acce:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800acd2:	f8bd 3000 	ldrh.w	r3, [sp]
 800acd6:	4581      	cmp	r9, r0
 800acd8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800acdc:	f84c 3b04 	str.w	r3, [ip], #4
 800ace0:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800ace4:	d2db      	bcs.n	800ac9e <quorem+0x42>
 800ace6:	f855 300b 	ldr.w	r3, [r5, fp]
 800acea:	b92b      	cbnz	r3, 800acf8 <quorem+0x9c>
 800acec:	9b01      	ldr	r3, [sp, #4]
 800acee:	3b04      	subs	r3, #4
 800acf0:	429d      	cmp	r5, r3
 800acf2:	461a      	mov	r2, r3
 800acf4:	d32c      	bcc.n	800ad50 <quorem+0xf4>
 800acf6:	613c      	str	r4, [r7, #16]
 800acf8:	4638      	mov	r0, r7
 800acfa:	f001 f905 	bl	800bf08 <__mcmp>
 800acfe:	2800      	cmp	r0, #0
 800ad00:	db22      	blt.n	800ad48 <quorem+0xec>
 800ad02:	3601      	adds	r6, #1
 800ad04:	4629      	mov	r1, r5
 800ad06:	2000      	movs	r0, #0
 800ad08:	f858 2b04 	ldr.w	r2, [r8], #4
 800ad0c:	f8d1 c000 	ldr.w	ip, [r1]
 800ad10:	b293      	uxth	r3, r2
 800ad12:	1ac3      	subs	r3, r0, r3
 800ad14:	0c12      	lsrs	r2, r2, #16
 800ad16:	fa13 f38c 	uxtah	r3, r3, ip
 800ad1a:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800ad1e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800ad22:	b29b      	uxth	r3, r3
 800ad24:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ad28:	45c1      	cmp	r9, r8
 800ad2a:	f841 3b04 	str.w	r3, [r1], #4
 800ad2e:	ea4f 4022 	mov.w	r0, r2, asr #16
 800ad32:	d2e9      	bcs.n	800ad08 <quorem+0xac>
 800ad34:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ad38:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ad3c:	b922      	cbnz	r2, 800ad48 <quorem+0xec>
 800ad3e:	3b04      	subs	r3, #4
 800ad40:	429d      	cmp	r5, r3
 800ad42:	461a      	mov	r2, r3
 800ad44:	d30a      	bcc.n	800ad5c <quorem+0x100>
 800ad46:	613c      	str	r4, [r7, #16]
 800ad48:	4630      	mov	r0, r6
 800ad4a:	b003      	add	sp, #12
 800ad4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad50:	6812      	ldr	r2, [r2, #0]
 800ad52:	3b04      	subs	r3, #4
 800ad54:	2a00      	cmp	r2, #0
 800ad56:	d1ce      	bne.n	800acf6 <quorem+0x9a>
 800ad58:	3c01      	subs	r4, #1
 800ad5a:	e7c9      	b.n	800acf0 <quorem+0x94>
 800ad5c:	6812      	ldr	r2, [r2, #0]
 800ad5e:	3b04      	subs	r3, #4
 800ad60:	2a00      	cmp	r2, #0
 800ad62:	d1f0      	bne.n	800ad46 <quorem+0xea>
 800ad64:	3c01      	subs	r4, #1
 800ad66:	e7eb      	b.n	800ad40 <quorem+0xe4>
 800ad68:	2000      	movs	r0, #0
 800ad6a:	e7ee      	b.n	800ad4a <quorem+0xee>
 800ad6c:	0000      	movs	r0, r0
	...

0800ad70 <_dtoa_r>:
 800ad70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad74:	ed2d 8b04 	vpush	{d8-d9}
 800ad78:	69c5      	ldr	r5, [r0, #28]
 800ad7a:	b093      	sub	sp, #76	; 0x4c
 800ad7c:	ed8d 0b02 	vstr	d0, [sp, #8]
 800ad80:	ec57 6b10 	vmov	r6, r7, d0
 800ad84:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800ad88:	9107      	str	r1, [sp, #28]
 800ad8a:	4604      	mov	r4, r0
 800ad8c:	920a      	str	r2, [sp, #40]	; 0x28
 800ad8e:	930d      	str	r3, [sp, #52]	; 0x34
 800ad90:	b975      	cbnz	r5, 800adb0 <_dtoa_r+0x40>
 800ad92:	2010      	movs	r0, #16
 800ad94:	f7fe fed8 	bl	8009b48 <malloc>
 800ad98:	4602      	mov	r2, r0
 800ad9a:	61e0      	str	r0, [r4, #28]
 800ad9c:	b920      	cbnz	r0, 800ada8 <_dtoa_r+0x38>
 800ad9e:	4bae      	ldr	r3, [pc, #696]	; (800b058 <_dtoa_r+0x2e8>)
 800ada0:	21ef      	movs	r1, #239	; 0xef
 800ada2:	48ae      	ldr	r0, [pc, #696]	; (800b05c <_dtoa_r+0x2ec>)
 800ada4:	f001 fd8c 	bl	800c8c0 <__assert_func>
 800ada8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800adac:	6005      	str	r5, [r0, #0]
 800adae:	60c5      	str	r5, [r0, #12]
 800adb0:	69e3      	ldr	r3, [r4, #28]
 800adb2:	6819      	ldr	r1, [r3, #0]
 800adb4:	b151      	cbz	r1, 800adcc <_dtoa_r+0x5c>
 800adb6:	685a      	ldr	r2, [r3, #4]
 800adb8:	604a      	str	r2, [r1, #4]
 800adba:	2301      	movs	r3, #1
 800adbc:	4093      	lsls	r3, r2
 800adbe:	608b      	str	r3, [r1, #8]
 800adc0:	4620      	mov	r0, r4
 800adc2:	f000 fe65 	bl	800ba90 <_Bfree>
 800adc6:	69e3      	ldr	r3, [r4, #28]
 800adc8:	2200      	movs	r2, #0
 800adca:	601a      	str	r2, [r3, #0]
 800adcc:	1e3b      	subs	r3, r7, #0
 800adce:	bfbb      	ittet	lt
 800add0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800add4:	9303      	strlt	r3, [sp, #12]
 800add6:	2300      	movge	r3, #0
 800add8:	2201      	movlt	r2, #1
 800adda:	bfac      	ite	ge
 800addc:	f8c8 3000 	strge.w	r3, [r8]
 800ade0:	f8c8 2000 	strlt.w	r2, [r8]
 800ade4:	4b9e      	ldr	r3, [pc, #632]	; (800b060 <_dtoa_r+0x2f0>)
 800ade6:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800adea:	ea33 0308 	bics.w	r3, r3, r8
 800adee:	d11b      	bne.n	800ae28 <_dtoa_r+0xb8>
 800adf0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800adf2:	f242 730f 	movw	r3, #9999	; 0x270f
 800adf6:	6013      	str	r3, [r2, #0]
 800adf8:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800adfc:	4333      	orrs	r3, r6
 800adfe:	f000 8593 	beq.w	800b928 <_dtoa_r+0xbb8>
 800ae02:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ae04:	b963      	cbnz	r3, 800ae20 <_dtoa_r+0xb0>
 800ae06:	4b97      	ldr	r3, [pc, #604]	; (800b064 <_dtoa_r+0x2f4>)
 800ae08:	e027      	b.n	800ae5a <_dtoa_r+0xea>
 800ae0a:	4b97      	ldr	r3, [pc, #604]	; (800b068 <_dtoa_r+0x2f8>)
 800ae0c:	9300      	str	r3, [sp, #0]
 800ae0e:	3308      	adds	r3, #8
 800ae10:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800ae12:	6013      	str	r3, [r2, #0]
 800ae14:	9800      	ldr	r0, [sp, #0]
 800ae16:	b013      	add	sp, #76	; 0x4c
 800ae18:	ecbd 8b04 	vpop	{d8-d9}
 800ae1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae20:	4b90      	ldr	r3, [pc, #576]	; (800b064 <_dtoa_r+0x2f4>)
 800ae22:	9300      	str	r3, [sp, #0]
 800ae24:	3303      	adds	r3, #3
 800ae26:	e7f3      	b.n	800ae10 <_dtoa_r+0xa0>
 800ae28:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ae2c:	2200      	movs	r2, #0
 800ae2e:	ec51 0b17 	vmov	r0, r1, d7
 800ae32:	eeb0 8a47 	vmov.f32	s16, s14
 800ae36:	eef0 8a67 	vmov.f32	s17, s15
 800ae3a:	2300      	movs	r3, #0
 800ae3c:	f7f5 fe1c 	bl	8000a78 <__aeabi_dcmpeq>
 800ae40:	4681      	mov	r9, r0
 800ae42:	b160      	cbz	r0, 800ae5e <_dtoa_r+0xee>
 800ae44:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ae46:	2301      	movs	r3, #1
 800ae48:	6013      	str	r3, [r2, #0]
 800ae4a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ae4c:	2b00      	cmp	r3, #0
 800ae4e:	f000 8568 	beq.w	800b922 <_dtoa_r+0xbb2>
 800ae52:	4b86      	ldr	r3, [pc, #536]	; (800b06c <_dtoa_r+0x2fc>)
 800ae54:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800ae56:	6013      	str	r3, [r2, #0]
 800ae58:	3b01      	subs	r3, #1
 800ae5a:	9300      	str	r3, [sp, #0]
 800ae5c:	e7da      	b.n	800ae14 <_dtoa_r+0xa4>
 800ae5e:	aa10      	add	r2, sp, #64	; 0x40
 800ae60:	a911      	add	r1, sp, #68	; 0x44
 800ae62:	4620      	mov	r0, r4
 800ae64:	eeb0 0a48 	vmov.f32	s0, s16
 800ae68:	eef0 0a68 	vmov.f32	s1, s17
 800ae6c:	f001 f8f2 	bl	800c054 <__d2b>
 800ae70:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800ae74:	4682      	mov	sl, r0
 800ae76:	2d00      	cmp	r5, #0
 800ae78:	d07f      	beq.n	800af7a <_dtoa_r+0x20a>
 800ae7a:	ee18 3a90 	vmov	r3, s17
 800ae7e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ae82:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800ae86:	ec51 0b18 	vmov	r0, r1, d8
 800ae8a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800ae8e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800ae92:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800ae96:	4619      	mov	r1, r3
 800ae98:	2200      	movs	r2, #0
 800ae9a:	4b75      	ldr	r3, [pc, #468]	; (800b070 <_dtoa_r+0x300>)
 800ae9c:	f7f5 f9cc 	bl	8000238 <__aeabi_dsub>
 800aea0:	a367      	add	r3, pc, #412	; (adr r3, 800b040 <_dtoa_r+0x2d0>)
 800aea2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aea6:	f7f5 fb7f 	bl	80005a8 <__aeabi_dmul>
 800aeaa:	a367      	add	r3, pc, #412	; (adr r3, 800b048 <_dtoa_r+0x2d8>)
 800aeac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aeb0:	f7f5 f9c4 	bl	800023c <__adddf3>
 800aeb4:	4606      	mov	r6, r0
 800aeb6:	4628      	mov	r0, r5
 800aeb8:	460f      	mov	r7, r1
 800aeba:	f7f5 fb0b 	bl	80004d4 <__aeabi_i2d>
 800aebe:	a364      	add	r3, pc, #400	; (adr r3, 800b050 <_dtoa_r+0x2e0>)
 800aec0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aec4:	f7f5 fb70 	bl	80005a8 <__aeabi_dmul>
 800aec8:	4602      	mov	r2, r0
 800aeca:	460b      	mov	r3, r1
 800aecc:	4630      	mov	r0, r6
 800aece:	4639      	mov	r1, r7
 800aed0:	f7f5 f9b4 	bl	800023c <__adddf3>
 800aed4:	4606      	mov	r6, r0
 800aed6:	460f      	mov	r7, r1
 800aed8:	f7f5 fe16 	bl	8000b08 <__aeabi_d2iz>
 800aedc:	2200      	movs	r2, #0
 800aede:	4683      	mov	fp, r0
 800aee0:	2300      	movs	r3, #0
 800aee2:	4630      	mov	r0, r6
 800aee4:	4639      	mov	r1, r7
 800aee6:	f7f5 fdd1 	bl	8000a8c <__aeabi_dcmplt>
 800aeea:	b148      	cbz	r0, 800af00 <_dtoa_r+0x190>
 800aeec:	4658      	mov	r0, fp
 800aeee:	f7f5 faf1 	bl	80004d4 <__aeabi_i2d>
 800aef2:	4632      	mov	r2, r6
 800aef4:	463b      	mov	r3, r7
 800aef6:	f7f5 fdbf 	bl	8000a78 <__aeabi_dcmpeq>
 800aefa:	b908      	cbnz	r0, 800af00 <_dtoa_r+0x190>
 800aefc:	f10b 3bff 	add.w	fp, fp, #4294967295
 800af00:	f1bb 0f16 	cmp.w	fp, #22
 800af04:	d857      	bhi.n	800afb6 <_dtoa_r+0x246>
 800af06:	4b5b      	ldr	r3, [pc, #364]	; (800b074 <_dtoa_r+0x304>)
 800af08:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800af0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af10:	ec51 0b18 	vmov	r0, r1, d8
 800af14:	f7f5 fdba 	bl	8000a8c <__aeabi_dcmplt>
 800af18:	2800      	cmp	r0, #0
 800af1a:	d04e      	beq.n	800afba <_dtoa_r+0x24a>
 800af1c:	f10b 3bff 	add.w	fp, fp, #4294967295
 800af20:	2300      	movs	r3, #0
 800af22:	930c      	str	r3, [sp, #48]	; 0x30
 800af24:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800af26:	1b5b      	subs	r3, r3, r5
 800af28:	1e5a      	subs	r2, r3, #1
 800af2a:	bf45      	ittet	mi
 800af2c:	f1c3 0301 	rsbmi	r3, r3, #1
 800af30:	9305      	strmi	r3, [sp, #20]
 800af32:	2300      	movpl	r3, #0
 800af34:	2300      	movmi	r3, #0
 800af36:	9206      	str	r2, [sp, #24]
 800af38:	bf54      	ite	pl
 800af3a:	9305      	strpl	r3, [sp, #20]
 800af3c:	9306      	strmi	r3, [sp, #24]
 800af3e:	f1bb 0f00 	cmp.w	fp, #0
 800af42:	db3c      	blt.n	800afbe <_dtoa_r+0x24e>
 800af44:	9b06      	ldr	r3, [sp, #24]
 800af46:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800af4a:	445b      	add	r3, fp
 800af4c:	9306      	str	r3, [sp, #24]
 800af4e:	2300      	movs	r3, #0
 800af50:	9308      	str	r3, [sp, #32]
 800af52:	9b07      	ldr	r3, [sp, #28]
 800af54:	2b09      	cmp	r3, #9
 800af56:	d868      	bhi.n	800b02a <_dtoa_r+0x2ba>
 800af58:	2b05      	cmp	r3, #5
 800af5a:	bfc4      	itt	gt
 800af5c:	3b04      	subgt	r3, #4
 800af5e:	9307      	strgt	r3, [sp, #28]
 800af60:	9b07      	ldr	r3, [sp, #28]
 800af62:	f1a3 0302 	sub.w	r3, r3, #2
 800af66:	bfcc      	ite	gt
 800af68:	2500      	movgt	r5, #0
 800af6a:	2501      	movle	r5, #1
 800af6c:	2b03      	cmp	r3, #3
 800af6e:	f200 8085 	bhi.w	800b07c <_dtoa_r+0x30c>
 800af72:	e8df f003 	tbb	[pc, r3]
 800af76:	3b2e      	.short	0x3b2e
 800af78:	5839      	.short	0x5839
 800af7a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800af7e:	441d      	add	r5, r3
 800af80:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800af84:	2b20      	cmp	r3, #32
 800af86:	bfc1      	itttt	gt
 800af88:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800af8c:	fa08 f803 	lslgt.w	r8, r8, r3
 800af90:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800af94:	fa26 f303 	lsrgt.w	r3, r6, r3
 800af98:	bfd6      	itet	le
 800af9a:	f1c3 0320 	rsble	r3, r3, #32
 800af9e:	ea48 0003 	orrgt.w	r0, r8, r3
 800afa2:	fa06 f003 	lslle.w	r0, r6, r3
 800afa6:	f7f5 fa85 	bl	80004b4 <__aeabi_ui2d>
 800afaa:	2201      	movs	r2, #1
 800afac:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800afb0:	3d01      	subs	r5, #1
 800afb2:	920e      	str	r2, [sp, #56]	; 0x38
 800afb4:	e76f      	b.n	800ae96 <_dtoa_r+0x126>
 800afb6:	2301      	movs	r3, #1
 800afb8:	e7b3      	b.n	800af22 <_dtoa_r+0x1b2>
 800afba:	900c      	str	r0, [sp, #48]	; 0x30
 800afbc:	e7b2      	b.n	800af24 <_dtoa_r+0x1b4>
 800afbe:	9b05      	ldr	r3, [sp, #20]
 800afc0:	eba3 030b 	sub.w	r3, r3, fp
 800afc4:	9305      	str	r3, [sp, #20]
 800afc6:	f1cb 0300 	rsb	r3, fp, #0
 800afca:	9308      	str	r3, [sp, #32]
 800afcc:	2300      	movs	r3, #0
 800afce:	930b      	str	r3, [sp, #44]	; 0x2c
 800afd0:	e7bf      	b.n	800af52 <_dtoa_r+0x1e2>
 800afd2:	2300      	movs	r3, #0
 800afd4:	9309      	str	r3, [sp, #36]	; 0x24
 800afd6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800afd8:	2b00      	cmp	r3, #0
 800afda:	dc52      	bgt.n	800b082 <_dtoa_r+0x312>
 800afdc:	2301      	movs	r3, #1
 800afde:	9301      	str	r3, [sp, #4]
 800afe0:	9304      	str	r3, [sp, #16]
 800afe2:	461a      	mov	r2, r3
 800afe4:	920a      	str	r2, [sp, #40]	; 0x28
 800afe6:	e00b      	b.n	800b000 <_dtoa_r+0x290>
 800afe8:	2301      	movs	r3, #1
 800afea:	e7f3      	b.n	800afd4 <_dtoa_r+0x264>
 800afec:	2300      	movs	r3, #0
 800afee:	9309      	str	r3, [sp, #36]	; 0x24
 800aff0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aff2:	445b      	add	r3, fp
 800aff4:	9301      	str	r3, [sp, #4]
 800aff6:	3301      	adds	r3, #1
 800aff8:	2b01      	cmp	r3, #1
 800affa:	9304      	str	r3, [sp, #16]
 800affc:	bfb8      	it	lt
 800affe:	2301      	movlt	r3, #1
 800b000:	69e0      	ldr	r0, [r4, #28]
 800b002:	2100      	movs	r1, #0
 800b004:	2204      	movs	r2, #4
 800b006:	f102 0614 	add.w	r6, r2, #20
 800b00a:	429e      	cmp	r6, r3
 800b00c:	d93d      	bls.n	800b08a <_dtoa_r+0x31a>
 800b00e:	6041      	str	r1, [r0, #4]
 800b010:	4620      	mov	r0, r4
 800b012:	f000 fcfd 	bl	800ba10 <_Balloc>
 800b016:	9000      	str	r0, [sp, #0]
 800b018:	2800      	cmp	r0, #0
 800b01a:	d139      	bne.n	800b090 <_dtoa_r+0x320>
 800b01c:	4b16      	ldr	r3, [pc, #88]	; (800b078 <_dtoa_r+0x308>)
 800b01e:	4602      	mov	r2, r0
 800b020:	f240 11af 	movw	r1, #431	; 0x1af
 800b024:	e6bd      	b.n	800ada2 <_dtoa_r+0x32>
 800b026:	2301      	movs	r3, #1
 800b028:	e7e1      	b.n	800afee <_dtoa_r+0x27e>
 800b02a:	2501      	movs	r5, #1
 800b02c:	2300      	movs	r3, #0
 800b02e:	9307      	str	r3, [sp, #28]
 800b030:	9509      	str	r5, [sp, #36]	; 0x24
 800b032:	f04f 33ff 	mov.w	r3, #4294967295
 800b036:	9301      	str	r3, [sp, #4]
 800b038:	9304      	str	r3, [sp, #16]
 800b03a:	2200      	movs	r2, #0
 800b03c:	2312      	movs	r3, #18
 800b03e:	e7d1      	b.n	800afe4 <_dtoa_r+0x274>
 800b040:	636f4361 	.word	0x636f4361
 800b044:	3fd287a7 	.word	0x3fd287a7
 800b048:	8b60c8b3 	.word	0x8b60c8b3
 800b04c:	3fc68a28 	.word	0x3fc68a28
 800b050:	509f79fb 	.word	0x509f79fb
 800b054:	3fd34413 	.word	0x3fd34413
 800b058:	0800d959 	.word	0x0800d959
 800b05c:	0800d970 	.word	0x0800d970
 800b060:	7ff00000 	.word	0x7ff00000
 800b064:	0800d955 	.word	0x0800d955
 800b068:	0800d94c 	.word	0x0800d94c
 800b06c:	0800d91f 	.word	0x0800d91f
 800b070:	3ff80000 	.word	0x3ff80000
 800b074:	0800da60 	.word	0x0800da60
 800b078:	0800d9c8 	.word	0x0800d9c8
 800b07c:	2301      	movs	r3, #1
 800b07e:	9309      	str	r3, [sp, #36]	; 0x24
 800b080:	e7d7      	b.n	800b032 <_dtoa_r+0x2c2>
 800b082:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b084:	9301      	str	r3, [sp, #4]
 800b086:	9304      	str	r3, [sp, #16]
 800b088:	e7ba      	b.n	800b000 <_dtoa_r+0x290>
 800b08a:	3101      	adds	r1, #1
 800b08c:	0052      	lsls	r2, r2, #1
 800b08e:	e7ba      	b.n	800b006 <_dtoa_r+0x296>
 800b090:	69e3      	ldr	r3, [r4, #28]
 800b092:	9a00      	ldr	r2, [sp, #0]
 800b094:	601a      	str	r2, [r3, #0]
 800b096:	9b04      	ldr	r3, [sp, #16]
 800b098:	2b0e      	cmp	r3, #14
 800b09a:	f200 80a8 	bhi.w	800b1ee <_dtoa_r+0x47e>
 800b09e:	2d00      	cmp	r5, #0
 800b0a0:	f000 80a5 	beq.w	800b1ee <_dtoa_r+0x47e>
 800b0a4:	f1bb 0f00 	cmp.w	fp, #0
 800b0a8:	dd38      	ble.n	800b11c <_dtoa_r+0x3ac>
 800b0aa:	4bc0      	ldr	r3, [pc, #768]	; (800b3ac <_dtoa_r+0x63c>)
 800b0ac:	f00b 020f 	and.w	r2, fp, #15
 800b0b0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b0b4:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800b0b8:	e9d3 6700 	ldrd	r6, r7, [r3]
 800b0bc:	ea4f 182b 	mov.w	r8, fp, asr #4
 800b0c0:	d019      	beq.n	800b0f6 <_dtoa_r+0x386>
 800b0c2:	4bbb      	ldr	r3, [pc, #748]	; (800b3b0 <_dtoa_r+0x640>)
 800b0c4:	ec51 0b18 	vmov	r0, r1, d8
 800b0c8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b0cc:	f7f5 fb96 	bl	80007fc <__aeabi_ddiv>
 800b0d0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b0d4:	f008 080f 	and.w	r8, r8, #15
 800b0d8:	2503      	movs	r5, #3
 800b0da:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800b3b0 <_dtoa_r+0x640>
 800b0de:	f1b8 0f00 	cmp.w	r8, #0
 800b0e2:	d10a      	bne.n	800b0fa <_dtoa_r+0x38a>
 800b0e4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b0e8:	4632      	mov	r2, r6
 800b0ea:	463b      	mov	r3, r7
 800b0ec:	f7f5 fb86 	bl	80007fc <__aeabi_ddiv>
 800b0f0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b0f4:	e02b      	b.n	800b14e <_dtoa_r+0x3de>
 800b0f6:	2502      	movs	r5, #2
 800b0f8:	e7ef      	b.n	800b0da <_dtoa_r+0x36a>
 800b0fa:	f018 0f01 	tst.w	r8, #1
 800b0fe:	d008      	beq.n	800b112 <_dtoa_r+0x3a2>
 800b100:	4630      	mov	r0, r6
 800b102:	4639      	mov	r1, r7
 800b104:	e9d9 2300 	ldrd	r2, r3, [r9]
 800b108:	f7f5 fa4e 	bl	80005a8 <__aeabi_dmul>
 800b10c:	3501      	adds	r5, #1
 800b10e:	4606      	mov	r6, r0
 800b110:	460f      	mov	r7, r1
 800b112:	ea4f 0868 	mov.w	r8, r8, asr #1
 800b116:	f109 0908 	add.w	r9, r9, #8
 800b11a:	e7e0      	b.n	800b0de <_dtoa_r+0x36e>
 800b11c:	f000 809f 	beq.w	800b25e <_dtoa_r+0x4ee>
 800b120:	f1cb 0600 	rsb	r6, fp, #0
 800b124:	4ba1      	ldr	r3, [pc, #644]	; (800b3ac <_dtoa_r+0x63c>)
 800b126:	4fa2      	ldr	r7, [pc, #648]	; (800b3b0 <_dtoa_r+0x640>)
 800b128:	f006 020f 	and.w	r2, r6, #15
 800b12c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b130:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b134:	ec51 0b18 	vmov	r0, r1, d8
 800b138:	f7f5 fa36 	bl	80005a8 <__aeabi_dmul>
 800b13c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b140:	1136      	asrs	r6, r6, #4
 800b142:	2300      	movs	r3, #0
 800b144:	2502      	movs	r5, #2
 800b146:	2e00      	cmp	r6, #0
 800b148:	d17e      	bne.n	800b248 <_dtoa_r+0x4d8>
 800b14a:	2b00      	cmp	r3, #0
 800b14c:	d1d0      	bne.n	800b0f0 <_dtoa_r+0x380>
 800b14e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b150:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800b154:	2b00      	cmp	r3, #0
 800b156:	f000 8084 	beq.w	800b262 <_dtoa_r+0x4f2>
 800b15a:	4b96      	ldr	r3, [pc, #600]	; (800b3b4 <_dtoa_r+0x644>)
 800b15c:	2200      	movs	r2, #0
 800b15e:	4640      	mov	r0, r8
 800b160:	4649      	mov	r1, r9
 800b162:	f7f5 fc93 	bl	8000a8c <__aeabi_dcmplt>
 800b166:	2800      	cmp	r0, #0
 800b168:	d07b      	beq.n	800b262 <_dtoa_r+0x4f2>
 800b16a:	9b04      	ldr	r3, [sp, #16]
 800b16c:	2b00      	cmp	r3, #0
 800b16e:	d078      	beq.n	800b262 <_dtoa_r+0x4f2>
 800b170:	9b01      	ldr	r3, [sp, #4]
 800b172:	2b00      	cmp	r3, #0
 800b174:	dd39      	ble.n	800b1ea <_dtoa_r+0x47a>
 800b176:	4b90      	ldr	r3, [pc, #576]	; (800b3b8 <_dtoa_r+0x648>)
 800b178:	2200      	movs	r2, #0
 800b17a:	4640      	mov	r0, r8
 800b17c:	4649      	mov	r1, r9
 800b17e:	f7f5 fa13 	bl	80005a8 <__aeabi_dmul>
 800b182:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b186:	9e01      	ldr	r6, [sp, #4]
 800b188:	f10b 37ff 	add.w	r7, fp, #4294967295
 800b18c:	3501      	adds	r5, #1
 800b18e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800b192:	4628      	mov	r0, r5
 800b194:	f7f5 f99e 	bl	80004d4 <__aeabi_i2d>
 800b198:	4642      	mov	r2, r8
 800b19a:	464b      	mov	r3, r9
 800b19c:	f7f5 fa04 	bl	80005a8 <__aeabi_dmul>
 800b1a0:	4b86      	ldr	r3, [pc, #536]	; (800b3bc <_dtoa_r+0x64c>)
 800b1a2:	2200      	movs	r2, #0
 800b1a4:	f7f5 f84a 	bl	800023c <__adddf3>
 800b1a8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800b1ac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b1b0:	9303      	str	r3, [sp, #12]
 800b1b2:	2e00      	cmp	r6, #0
 800b1b4:	d158      	bne.n	800b268 <_dtoa_r+0x4f8>
 800b1b6:	4b82      	ldr	r3, [pc, #520]	; (800b3c0 <_dtoa_r+0x650>)
 800b1b8:	2200      	movs	r2, #0
 800b1ba:	4640      	mov	r0, r8
 800b1bc:	4649      	mov	r1, r9
 800b1be:	f7f5 f83b 	bl	8000238 <__aeabi_dsub>
 800b1c2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b1c6:	4680      	mov	r8, r0
 800b1c8:	4689      	mov	r9, r1
 800b1ca:	f7f5 fc7d 	bl	8000ac8 <__aeabi_dcmpgt>
 800b1ce:	2800      	cmp	r0, #0
 800b1d0:	f040 8296 	bne.w	800b700 <_dtoa_r+0x990>
 800b1d4:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800b1d8:	4640      	mov	r0, r8
 800b1da:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b1de:	4649      	mov	r1, r9
 800b1e0:	f7f5 fc54 	bl	8000a8c <__aeabi_dcmplt>
 800b1e4:	2800      	cmp	r0, #0
 800b1e6:	f040 8289 	bne.w	800b6fc <_dtoa_r+0x98c>
 800b1ea:	ed8d 8b02 	vstr	d8, [sp, #8]
 800b1ee:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b1f0:	2b00      	cmp	r3, #0
 800b1f2:	f2c0 814e 	blt.w	800b492 <_dtoa_r+0x722>
 800b1f6:	f1bb 0f0e 	cmp.w	fp, #14
 800b1fa:	f300 814a 	bgt.w	800b492 <_dtoa_r+0x722>
 800b1fe:	4b6b      	ldr	r3, [pc, #428]	; (800b3ac <_dtoa_r+0x63c>)
 800b200:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800b204:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b208:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b20a:	2b00      	cmp	r3, #0
 800b20c:	f280 80dc 	bge.w	800b3c8 <_dtoa_r+0x658>
 800b210:	9b04      	ldr	r3, [sp, #16]
 800b212:	2b00      	cmp	r3, #0
 800b214:	f300 80d8 	bgt.w	800b3c8 <_dtoa_r+0x658>
 800b218:	f040 826f 	bne.w	800b6fa <_dtoa_r+0x98a>
 800b21c:	4b68      	ldr	r3, [pc, #416]	; (800b3c0 <_dtoa_r+0x650>)
 800b21e:	2200      	movs	r2, #0
 800b220:	4640      	mov	r0, r8
 800b222:	4649      	mov	r1, r9
 800b224:	f7f5 f9c0 	bl	80005a8 <__aeabi_dmul>
 800b228:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b22c:	f7f5 fc42 	bl	8000ab4 <__aeabi_dcmpge>
 800b230:	9e04      	ldr	r6, [sp, #16]
 800b232:	4637      	mov	r7, r6
 800b234:	2800      	cmp	r0, #0
 800b236:	f040 8245 	bne.w	800b6c4 <_dtoa_r+0x954>
 800b23a:	9d00      	ldr	r5, [sp, #0]
 800b23c:	2331      	movs	r3, #49	; 0x31
 800b23e:	f805 3b01 	strb.w	r3, [r5], #1
 800b242:	f10b 0b01 	add.w	fp, fp, #1
 800b246:	e241      	b.n	800b6cc <_dtoa_r+0x95c>
 800b248:	07f2      	lsls	r2, r6, #31
 800b24a:	d505      	bpl.n	800b258 <_dtoa_r+0x4e8>
 800b24c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b250:	f7f5 f9aa 	bl	80005a8 <__aeabi_dmul>
 800b254:	3501      	adds	r5, #1
 800b256:	2301      	movs	r3, #1
 800b258:	1076      	asrs	r6, r6, #1
 800b25a:	3708      	adds	r7, #8
 800b25c:	e773      	b.n	800b146 <_dtoa_r+0x3d6>
 800b25e:	2502      	movs	r5, #2
 800b260:	e775      	b.n	800b14e <_dtoa_r+0x3de>
 800b262:	9e04      	ldr	r6, [sp, #16]
 800b264:	465f      	mov	r7, fp
 800b266:	e792      	b.n	800b18e <_dtoa_r+0x41e>
 800b268:	9900      	ldr	r1, [sp, #0]
 800b26a:	4b50      	ldr	r3, [pc, #320]	; (800b3ac <_dtoa_r+0x63c>)
 800b26c:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b270:	4431      	add	r1, r6
 800b272:	9102      	str	r1, [sp, #8]
 800b274:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b276:	eeb0 9a47 	vmov.f32	s18, s14
 800b27a:	eef0 9a67 	vmov.f32	s19, s15
 800b27e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800b282:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800b286:	2900      	cmp	r1, #0
 800b288:	d044      	beq.n	800b314 <_dtoa_r+0x5a4>
 800b28a:	494e      	ldr	r1, [pc, #312]	; (800b3c4 <_dtoa_r+0x654>)
 800b28c:	2000      	movs	r0, #0
 800b28e:	f7f5 fab5 	bl	80007fc <__aeabi_ddiv>
 800b292:	ec53 2b19 	vmov	r2, r3, d9
 800b296:	f7f4 ffcf 	bl	8000238 <__aeabi_dsub>
 800b29a:	9d00      	ldr	r5, [sp, #0]
 800b29c:	ec41 0b19 	vmov	d9, r0, r1
 800b2a0:	4649      	mov	r1, r9
 800b2a2:	4640      	mov	r0, r8
 800b2a4:	f7f5 fc30 	bl	8000b08 <__aeabi_d2iz>
 800b2a8:	4606      	mov	r6, r0
 800b2aa:	f7f5 f913 	bl	80004d4 <__aeabi_i2d>
 800b2ae:	4602      	mov	r2, r0
 800b2b0:	460b      	mov	r3, r1
 800b2b2:	4640      	mov	r0, r8
 800b2b4:	4649      	mov	r1, r9
 800b2b6:	f7f4 ffbf 	bl	8000238 <__aeabi_dsub>
 800b2ba:	3630      	adds	r6, #48	; 0x30
 800b2bc:	f805 6b01 	strb.w	r6, [r5], #1
 800b2c0:	ec53 2b19 	vmov	r2, r3, d9
 800b2c4:	4680      	mov	r8, r0
 800b2c6:	4689      	mov	r9, r1
 800b2c8:	f7f5 fbe0 	bl	8000a8c <__aeabi_dcmplt>
 800b2cc:	2800      	cmp	r0, #0
 800b2ce:	d164      	bne.n	800b39a <_dtoa_r+0x62a>
 800b2d0:	4642      	mov	r2, r8
 800b2d2:	464b      	mov	r3, r9
 800b2d4:	4937      	ldr	r1, [pc, #220]	; (800b3b4 <_dtoa_r+0x644>)
 800b2d6:	2000      	movs	r0, #0
 800b2d8:	f7f4 ffae 	bl	8000238 <__aeabi_dsub>
 800b2dc:	ec53 2b19 	vmov	r2, r3, d9
 800b2e0:	f7f5 fbd4 	bl	8000a8c <__aeabi_dcmplt>
 800b2e4:	2800      	cmp	r0, #0
 800b2e6:	f040 80b6 	bne.w	800b456 <_dtoa_r+0x6e6>
 800b2ea:	9b02      	ldr	r3, [sp, #8]
 800b2ec:	429d      	cmp	r5, r3
 800b2ee:	f43f af7c 	beq.w	800b1ea <_dtoa_r+0x47a>
 800b2f2:	4b31      	ldr	r3, [pc, #196]	; (800b3b8 <_dtoa_r+0x648>)
 800b2f4:	ec51 0b19 	vmov	r0, r1, d9
 800b2f8:	2200      	movs	r2, #0
 800b2fa:	f7f5 f955 	bl	80005a8 <__aeabi_dmul>
 800b2fe:	4b2e      	ldr	r3, [pc, #184]	; (800b3b8 <_dtoa_r+0x648>)
 800b300:	ec41 0b19 	vmov	d9, r0, r1
 800b304:	2200      	movs	r2, #0
 800b306:	4640      	mov	r0, r8
 800b308:	4649      	mov	r1, r9
 800b30a:	f7f5 f94d 	bl	80005a8 <__aeabi_dmul>
 800b30e:	4680      	mov	r8, r0
 800b310:	4689      	mov	r9, r1
 800b312:	e7c5      	b.n	800b2a0 <_dtoa_r+0x530>
 800b314:	ec51 0b17 	vmov	r0, r1, d7
 800b318:	f7f5 f946 	bl	80005a8 <__aeabi_dmul>
 800b31c:	9b02      	ldr	r3, [sp, #8]
 800b31e:	9d00      	ldr	r5, [sp, #0]
 800b320:	930f      	str	r3, [sp, #60]	; 0x3c
 800b322:	ec41 0b19 	vmov	d9, r0, r1
 800b326:	4649      	mov	r1, r9
 800b328:	4640      	mov	r0, r8
 800b32a:	f7f5 fbed 	bl	8000b08 <__aeabi_d2iz>
 800b32e:	4606      	mov	r6, r0
 800b330:	f7f5 f8d0 	bl	80004d4 <__aeabi_i2d>
 800b334:	3630      	adds	r6, #48	; 0x30
 800b336:	4602      	mov	r2, r0
 800b338:	460b      	mov	r3, r1
 800b33a:	4640      	mov	r0, r8
 800b33c:	4649      	mov	r1, r9
 800b33e:	f7f4 ff7b 	bl	8000238 <__aeabi_dsub>
 800b342:	f805 6b01 	strb.w	r6, [r5], #1
 800b346:	9b02      	ldr	r3, [sp, #8]
 800b348:	429d      	cmp	r5, r3
 800b34a:	4680      	mov	r8, r0
 800b34c:	4689      	mov	r9, r1
 800b34e:	f04f 0200 	mov.w	r2, #0
 800b352:	d124      	bne.n	800b39e <_dtoa_r+0x62e>
 800b354:	4b1b      	ldr	r3, [pc, #108]	; (800b3c4 <_dtoa_r+0x654>)
 800b356:	ec51 0b19 	vmov	r0, r1, d9
 800b35a:	f7f4 ff6f 	bl	800023c <__adddf3>
 800b35e:	4602      	mov	r2, r0
 800b360:	460b      	mov	r3, r1
 800b362:	4640      	mov	r0, r8
 800b364:	4649      	mov	r1, r9
 800b366:	f7f5 fbaf 	bl	8000ac8 <__aeabi_dcmpgt>
 800b36a:	2800      	cmp	r0, #0
 800b36c:	d173      	bne.n	800b456 <_dtoa_r+0x6e6>
 800b36e:	ec53 2b19 	vmov	r2, r3, d9
 800b372:	4914      	ldr	r1, [pc, #80]	; (800b3c4 <_dtoa_r+0x654>)
 800b374:	2000      	movs	r0, #0
 800b376:	f7f4 ff5f 	bl	8000238 <__aeabi_dsub>
 800b37a:	4602      	mov	r2, r0
 800b37c:	460b      	mov	r3, r1
 800b37e:	4640      	mov	r0, r8
 800b380:	4649      	mov	r1, r9
 800b382:	f7f5 fb83 	bl	8000a8c <__aeabi_dcmplt>
 800b386:	2800      	cmp	r0, #0
 800b388:	f43f af2f 	beq.w	800b1ea <_dtoa_r+0x47a>
 800b38c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800b38e:	1e6b      	subs	r3, r5, #1
 800b390:	930f      	str	r3, [sp, #60]	; 0x3c
 800b392:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800b396:	2b30      	cmp	r3, #48	; 0x30
 800b398:	d0f8      	beq.n	800b38c <_dtoa_r+0x61c>
 800b39a:	46bb      	mov	fp, r7
 800b39c:	e04a      	b.n	800b434 <_dtoa_r+0x6c4>
 800b39e:	4b06      	ldr	r3, [pc, #24]	; (800b3b8 <_dtoa_r+0x648>)
 800b3a0:	f7f5 f902 	bl	80005a8 <__aeabi_dmul>
 800b3a4:	4680      	mov	r8, r0
 800b3a6:	4689      	mov	r9, r1
 800b3a8:	e7bd      	b.n	800b326 <_dtoa_r+0x5b6>
 800b3aa:	bf00      	nop
 800b3ac:	0800da60 	.word	0x0800da60
 800b3b0:	0800da38 	.word	0x0800da38
 800b3b4:	3ff00000 	.word	0x3ff00000
 800b3b8:	40240000 	.word	0x40240000
 800b3bc:	401c0000 	.word	0x401c0000
 800b3c0:	40140000 	.word	0x40140000
 800b3c4:	3fe00000 	.word	0x3fe00000
 800b3c8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800b3cc:	9d00      	ldr	r5, [sp, #0]
 800b3ce:	4642      	mov	r2, r8
 800b3d0:	464b      	mov	r3, r9
 800b3d2:	4630      	mov	r0, r6
 800b3d4:	4639      	mov	r1, r7
 800b3d6:	f7f5 fa11 	bl	80007fc <__aeabi_ddiv>
 800b3da:	f7f5 fb95 	bl	8000b08 <__aeabi_d2iz>
 800b3de:	9001      	str	r0, [sp, #4]
 800b3e0:	f7f5 f878 	bl	80004d4 <__aeabi_i2d>
 800b3e4:	4642      	mov	r2, r8
 800b3e6:	464b      	mov	r3, r9
 800b3e8:	f7f5 f8de 	bl	80005a8 <__aeabi_dmul>
 800b3ec:	4602      	mov	r2, r0
 800b3ee:	460b      	mov	r3, r1
 800b3f0:	4630      	mov	r0, r6
 800b3f2:	4639      	mov	r1, r7
 800b3f4:	f7f4 ff20 	bl	8000238 <__aeabi_dsub>
 800b3f8:	9e01      	ldr	r6, [sp, #4]
 800b3fa:	9f04      	ldr	r7, [sp, #16]
 800b3fc:	3630      	adds	r6, #48	; 0x30
 800b3fe:	f805 6b01 	strb.w	r6, [r5], #1
 800b402:	9e00      	ldr	r6, [sp, #0]
 800b404:	1bae      	subs	r6, r5, r6
 800b406:	42b7      	cmp	r7, r6
 800b408:	4602      	mov	r2, r0
 800b40a:	460b      	mov	r3, r1
 800b40c:	d134      	bne.n	800b478 <_dtoa_r+0x708>
 800b40e:	f7f4 ff15 	bl	800023c <__adddf3>
 800b412:	4642      	mov	r2, r8
 800b414:	464b      	mov	r3, r9
 800b416:	4606      	mov	r6, r0
 800b418:	460f      	mov	r7, r1
 800b41a:	f7f5 fb55 	bl	8000ac8 <__aeabi_dcmpgt>
 800b41e:	b9c8      	cbnz	r0, 800b454 <_dtoa_r+0x6e4>
 800b420:	4642      	mov	r2, r8
 800b422:	464b      	mov	r3, r9
 800b424:	4630      	mov	r0, r6
 800b426:	4639      	mov	r1, r7
 800b428:	f7f5 fb26 	bl	8000a78 <__aeabi_dcmpeq>
 800b42c:	b110      	cbz	r0, 800b434 <_dtoa_r+0x6c4>
 800b42e:	9b01      	ldr	r3, [sp, #4]
 800b430:	07db      	lsls	r3, r3, #31
 800b432:	d40f      	bmi.n	800b454 <_dtoa_r+0x6e4>
 800b434:	4651      	mov	r1, sl
 800b436:	4620      	mov	r0, r4
 800b438:	f000 fb2a 	bl	800ba90 <_Bfree>
 800b43c:	2300      	movs	r3, #0
 800b43e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b440:	702b      	strb	r3, [r5, #0]
 800b442:	f10b 0301 	add.w	r3, fp, #1
 800b446:	6013      	str	r3, [r2, #0]
 800b448:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b44a:	2b00      	cmp	r3, #0
 800b44c:	f43f ace2 	beq.w	800ae14 <_dtoa_r+0xa4>
 800b450:	601d      	str	r5, [r3, #0]
 800b452:	e4df      	b.n	800ae14 <_dtoa_r+0xa4>
 800b454:	465f      	mov	r7, fp
 800b456:	462b      	mov	r3, r5
 800b458:	461d      	mov	r5, r3
 800b45a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b45e:	2a39      	cmp	r2, #57	; 0x39
 800b460:	d106      	bne.n	800b470 <_dtoa_r+0x700>
 800b462:	9a00      	ldr	r2, [sp, #0]
 800b464:	429a      	cmp	r2, r3
 800b466:	d1f7      	bne.n	800b458 <_dtoa_r+0x6e8>
 800b468:	9900      	ldr	r1, [sp, #0]
 800b46a:	2230      	movs	r2, #48	; 0x30
 800b46c:	3701      	adds	r7, #1
 800b46e:	700a      	strb	r2, [r1, #0]
 800b470:	781a      	ldrb	r2, [r3, #0]
 800b472:	3201      	adds	r2, #1
 800b474:	701a      	strb	r2, [r3, #0]
 800b476:	e790      	b.n	800b39a <_dtoa_r+0x62a>
 800b478:	4ba3      	ldr	r3, [pc, #652]	; (800b708 <_dtoa_r+0x998>)
 800b47a:	2200      	movs	r2, #0
 800b47c:	f7f5 f894 	bl	80005a8 <__aeabi_dmul>
 800b480:	2200      	movs	r2, #0
 800b482:	2300      	movs	r3, #0
 800b484:	4606      	mov	r6, r0
 800b486:	460f      	mov	r7, r1
 800b488:	f7f5 faf6 	bl	8000a78 <__aeabi_dcmpeq>
 800b48c:	2800      	cmp	r0, #0
 800b48e:	d09e      	beq.n	800b3ce <_dtoa_r+0x65e>
 800b490:	e7d0      	b.n	800b434 <_dtoa_r+0x6c4>
 800b492:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b494:	2a00      	cmp	r2, #0
 800b496:	f000 80ca 	beq.w	800b62e <_dtoa_r+0x8be>
 800b49a:	9a07      	ldr	r2, [sp, #28]
 800b49c:	2a01      	cmp	r2, #1
 800b49e:	f300 80ad 	bgt.w	800b5fc <_dtoa_r+0x88c>
 800b4a2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b4a4:	2a00      	cmp	r2, #0
 800b4a6:	f000 80a5 	beq.w	800b5f4 <_dtoa_r+0x884>
 800b4aa:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800b4ae:	9e08      	ldr	r6, [sp, #32]
 800b4b0:	9d05      	ldr	r5, [sp, #20]
 800b4b2:	9a05      	ldr	r2, [sp, #20]
 800b4b4:	441a      	add	r2, r3
 800b4b6:	9205      	str	r2, [sp, #20]
 800b4b8:	9a06      	ldr	r2, [sp, #24]
 800b4ba:	2101      	movs	r1, #1
 800b4bc:	441a      	add	r2, r3
 800b4be:	4620      	mov	r0, r4
 800b4c0:	9206      	str	r2, [sp, #24]
 800b4c2:	f000 fb9b 	bl	800bbfc <__i2b>
 800b4c6:	4607      	mov	r7, r0
 800b4c8:	b165      	cbz	r5, 800b4e4 <_dtoa_r+0x774>
 800b4ca:	9b06      	ldr	r3, [sp, #24]
 800b4cc:	2b00      	cmp	r3, #0
 800b4ce:	dd09      	ble.n	800b4e4 <_dtoa_r+0x774>
 800b4d0:	42ab      	cmp	r3, r5
 800b4d2:	9a05      	ldr	r2, [sp, #20]
 800b4d4:	bfa8      	it	ge
 800b4d6:	462b      	movge	r3, r5
 800b4d8:	1ad2      	subs	r2, r2, r3
 800b4da:	9205      	str	r2, [sp, #20]
 800b4dc:	9a06      	ldr	r2, [sp, #24]
 800b4de:	1aed      	subs	r5, r5, r3
 800b4e0:	1ad3      	subs	r3, r2, r3
 800b4e2:	9306      	str	r3, [sp, #24]
 800b4e4:	9b08      	ldr	r3, [sp, #32]
 800b4e6:	b1f3      	cbz	r3, 800b526 <_dtoa_r+0x7b6>
 800b4e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b4ea:	2b00      	cmp	r3, #0
 800b4ec:	f000 80a3 	beq.w	800b636 <_dtoa_r+0x8c6>
 800b4f0:	2e00      	cmp	r6, #0
 800b4f2:	dd10      	ble.n	800b516 <_dtoa_r+0x7a6>
 800b4f4:	4639      	mov	r1, r7
 800b4f6:	4632      	mov	r2, r6
 800b4f8:	4620      	mov	r0, r4
 800b4fa:	f000 fc3f 	bl	800bd7c <__pow5mult>
 800b4fe:	4652      	mov	r2, sl
 800b500:	4601      	mov	r1, r0
 800b502:	4607      	mov	r7, r0
 800b504:	4620      	mov	r0, r4
 800b506:	f000 fb8f 	bl	800bc28 <__multiply>
 800b50a:	4651      	mov	r1, sl
 800b50c:	4680      	mov	r8, r0
 800b50e:	4620      	mov	r0, r4
 800b510:	f000 fabe 	bl	800ba90 <_Bfree>
 800b514:	46c2      	mov	sl, r8
 800b516:	9b08      	ldr	r3, [sp, #32]
 800b518:	1b9a      	subs	r2, r3, r6
 800b51a:	d004      	beq.n	800b526 <_dtoa_r+0x7b6>
 800b51c:	4651      	mov	r1, sl
 800b51e:	4620      	mov	r0, r4
 800b520:	f000 fc2c 	bl	800bd7c <__pow5mult>
 800b524:	4682      	mov	sl, r0
 800b526:	2101      	movs	r1, #1
 800b528:	4620      	mov	r0, r4
 800b52a:	f000 fb67 	bl	800bbfc <__i2b>
 800b52e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b530:	2b00      	cmp	r3, #0
 800b532:	4606      	mov	r6, r0
 800b534:	f340 8081 	ble.w	800b63a <_dtoa_r+0x8ca>
 800b538:	461a      	mov	r2, r3
 800b53a:	4601      	mov	r1, r0
 800b53c:	4620      	mov	r0, r4
 800b53e:	f000 fc1d 	bl	800bd7c <__pow5mult>
 800b542:	9b07      	ldr	r3, [sp, #28]
 800b544:	2b01      	cmp	r3, #1
 800b546:	4606      	mov	r6, r0
 800b548:	dd7a      	ble.n	800b640 <_dtoa_r+0x8d0>
 800b54a:	f04f 0800 	mov.w	r8, #0
 800b54e:	6933      	ldr	r3, [r6, #16]
 800b550:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800b554:	6918      	ldr	r0, [r3, #16]
 800b556:	f000 fb03 	bl	800bb60 <__hi0bits>
 800b55a:	f1c0 0020 	rsb	r0, r0, #32
 800b55e:	9b06      	ldr	r3, [sp, #24]
 800b560:	4418      	add	r0, r3
 800b562:	f010 001f 	ands.w	r0, r0, #31
 800b566:	f000 8094 	beq.w	800b692 <_dtoa_r+0x922>
 800b56a:	f1c0 0320 	rsb	r3, r0, #32
 800b56e:	2b04      	cmp	r3, #4
 800b570:	f340 8085 	ble.w	800b67e <_dtoa_r+0x90e>
 800b574:	9b05      	ldr	r3, [sp, #20]
 800b576:	f1c0 001c 	rsb	r0, r0, #28
 800b57a:	4403      	add	r3, r0
 800b57c:	9305      	str	r3, [sp, #20]
 800b57e:	9b06      	ldr	r3, [sp, #24]
 800b580:	4403      	add	r3, r0
 800b582:	4405      	add	r5, r0
 800b584:	9306      	str	r3, [sp, #24]
 800b586:	9b05      	ldr	r3, [sp, #20]
 800b588:	2b00      	cmp	r3, #0
 800b58a:	dd05      	ble.n	800b598 <_dtoa_r+0x828>
 800b58c:	4651      	mov	r1, sl
 800b58e:	461a      	mov	r2, r3
 800b590:	4620      	mov	r0, r4
 800b592:	f000 fc4d 	bl	800be30 <__lshift>
 800b596:	4682      	mov	sl, r0
 800b598:	9b06      	ldr	r3, [sp, #24]
 800b59a:	2b00      	cmp	r3, #0
 800b59c:	dd05      	ble.n	800b5aa <_dtoa_r+0x83a>
 800b59e:	4631      	mov	r1, r6
 800b5a0:	461a      	mov	r2, r3
 800b5a2:	4620      	mov	r0, r4
 800b5a4:	f000 fc44 	bl	800be30 <__lshift>
 800b5a8:	4606      	mov	r6, r0
 800b5aa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b5ac:	2b00      	cmp	r3, #0
 800b5ae:	d072      	beq.n	800b696 <_dtoa_r+0x926>
 800b5b0:	4631      	mov	r1, r6
 800b5b2:	4650      	mov	r0, sl
 800b5b4:	f000 fca8 	bl	800bf08 <__mcmp>
 800b5b8:	2800      	cmp	r0, #0
 800b5ba:	da6c      	bge.n	800b696 <_dtoa_r+0x926>
 800b5bc:	2300      	movs	r3, #0
 800b5be:	4651      	mov	r1, sl
 800b5c0:	220a      	movs	r2, #10
 800b5c2:	4620      	mov	r0, r4
 800b5c4:	f000 fa86 	bl	800bad4 <__multadd>
 800b5c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b5ca:	f10b 3bff 	add.w	fp, fp, #4294967295
 800b5ce:	4682      	mov	sl, r0
 800b5d0:	2b00      	cmp	r3, #0
 800b5d2:	f000 81b0 	beq.w	800b936 <_dtoa_r+0xbc6>
 800b5d6:	2300      	movs	r3, #0
 800b5d8:	4639      	mov	r1, r7
 800b5da:	220a      	movs	r2, #10
 800b5dc:	4620      	mov	r0, r4
 800b5de:	f000 fa79 	bl	800bad4 <__multadd>
 800b5e2:	9b01      	ldr	r3, [sp, #4]
 800b5e4:	2b00      	cmp	r3, #0
 800b5e6:	4607      	mov	r7, r0
 800b5e8:	f300 8096 	bgt.w	800b718 <_dtoa_r+0x9a8>
 800b5ec:	9b07      	ldr	r3, [sp, #28]
 800b5ee:	2b02      	cmp	r3, #2
 800b5f0:	dc59      	bgt.n	800b6a6 <_dtoa_r+0x936>
 800b5f2:	e091      	b.n	800b718 <_dtoa_r+0x9a8>
 800b5f4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b5f6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800b5fa:	e758      	b.n	800b4ae <_dtoa_r+0x73e>
 800b5fc:	9b04      	ldr	r3, [sp, #16]
 800b5fe:	1e5e      	subs	r6, r3, #1
 800b600:	9b08      	ldr	r3, [sp, #32]
 800b602:	42b3      	cmp	r3, r6
 800b604:	bfbf      	itttt	lt
 800b606:	9b08      	ldrlt	r3, [sp, #32]
 800b608:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800b60a:	9608      	strlt	r6, [sp, #32]
 800b60c:	1af3      	sublt	r3, r6, r3
 800b60e:	bfb4      	ite	lt
 800b610:	18d2      	addlt	r2, r2, r3
 800b612:	1b9e      	subge	r6, r3, r6
 800b614:	9b04      	ldr	r3, [sp, #16]
 800b616:	bfbc      	itt	lt
 800b618:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800b61a:	2600      	movlt	r6, #0
 800b61c:	2b00      	cmp	r3, #0
 800b61e:	bfb7      	itett	lt
 800b620:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800b624:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800b628:	1a9d      	sublt	r5, r3, r2
 800b62a:	2300      	movlt	r3, #0
 800b62c:	e741      	b.n	800b4b2 <_dtoa_r+0x742>
 800b62e:	9e08      	ldr	r6, [sp, #32]
 800b630:	9d05      	ldr	r5, [sp, #20]
 800b632:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800b634:	e748      	b.n	800b4c8 <_dtoa_r+0x758>
 800b636:	9a08      	ldr	r2, [sp, #32]
 800b638:	e770      	b.n	800b51c <_dtoa_r+0x7ac>
 800b63a:	9b07      	ldr	r3, [sp, #28]
 800b63c:	2b01      	cmp	r3, #1
 800b63e:	dc19      	bgt.n	800b674 <_dtoa_r+0x904>
 800b640:	9b02      	ldr	r3, [sp, #8]
 800b642:	b9bb      	cbnz	r3, 800b674 <_dtoa_r+0x904>
 800b644:	9b03      	ldr	r3, [sp, #12]
 800b646:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b64a:	b99b      	cbnz	r3, 800b674 <_dtoa_r+0x904>
 800b64c:	9b03      	ldr	r3, [sp, #12]
 800b64e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b652:	0d1b      	lsrs	r3, r3, #20
 800b654:	051b      	lsls	r3, r3, #20
 800b656:	b183      	cbz	r3, 800b67a <_dtoa_r+0x90a>
 800b658:	9b05      	ldr	r3, [sp, #20]
 800b65a:	3301      	adds	r3, #1
 800b65c:	9305      	str	r3, [sp, #20]
 800b65e:	9b06      	ldr	r3, [sp, #24]
 800b660:	3301      	adds	r3, #1
 800b662:	9306      	str	r3, [sp, #24]
 800b664:	f04f 0801 	mov.w	r8, #1
 800b668:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b66a:	2b00      	cmp	r3, #0
 800b66c:	f47f af6f 	bne.w	800b54e <_dtoa_r+0x7de>
 800b670:	2001      	movs	r0, #1
 800b672:	e774      	b.n	800b55e <_dtoa_r+0x7ee>
 800b674:	f04f 0800 	mov.w	r8, #0
 800b678:	e7f6      	b.n	800b668 <_dtoa_r+0x8f8>
 800b67a:	4698      	mov	r8, r3
 800b67c:	e7f4      	b.n	800b668 <_dtoa_r+0x8f8>
 800b67e:	d082      	beq.n	800b586 <_dtoa_r+0x816>
 800b680:	9a05      	ldr	r2, [sp, #20]
 800b682:	331c      	adds	r3, #28
 800b684:	441a      	add	r2, r3
 800b686:	9205      	str	r2, [sp, #20]
 800b688:	9a06      	ldr	r2, [sp, #24]
 800b68a:	441a      	add	r2, r3
 800b68c:	441d      	add	r5, r3
 800b68e:	9206      	str	r2, [sp, #24]
 800b690:	e779      	b.n	800b586 <_dtoa_r+0x816>
 800b692:	4603      	mov	r3, r0
 800b694:	e7f4      	b.n	800b680 <_dtoa_r+0x910>
 800b696:	9b04      	ldr	r3, [sp, #16]
 800b698:	2b00      	cmp	r3, #0
 800b69a:	dc37      	bgt.n	800b70c <_dtoa_r+0x99c>
 800b69c:	9b07      	ldr	r3, [sp, #28]
 800b69e:	2b02      	cmp	r3, #2
 800b6a0:	dd34      	ble.n	800b70c <_dtoa_r+0x99c>
 800b6a2:	9b04      	ldr	r3, [sp, #16]
 800b6a4:	9301      	str	r3, [sp, #4]
 800b6a6:	9b01      	ldr	r3, [sp, #4]
 800b6a8:	b963      	cbnz	r3, 800b6c4 <_dtoa_r+0x954>
 800b6aa:	4631      	mov	r1, r6
 800b6ac:	2205      	movs	r2, #5
 800b6ae:	4620      	mov	r0, r4
 800b6b0:	f000 fa10 	bl	800bad4 <__multadd>
 800b6b4:	4601      	mov	r1, r0
 800b6b6:	4606      	mov	r6, r0
 800b6b8:	4650      	mov	r0, sl
 800b6ba:	f000 fc25 	bl	800bf08 <__mcmp>
 800b6be:	2800      	cmp	r0, #0
 800b6c0:	f73f adbb 	bgt.w	800b23a <_dtoa_r+0x4ca>
 800b6c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b6c6:	9d00      	ldr	r5, [sp, #0]
 800b6c8:	ea6f 0b03 	mvn.w	fp, r3
 800b6cc:	f04f 0800 	mov.w	r8, #0
 800b6d0:	4631      	mov	r1, r6
 800b6d2:	4620      	mov	r0, r4
 800b6d4:	f000 f9dc 	bl	800ba90 <_Bfree>
 800b6d8:	2f00      	cmp	r7, #0
 800b6da:	f43f aeab 	beq.w	800b434 <_dtoa_r+0x6c4>
 800b6de:	f1b8 0f00 	cmp.w	r8, #0
 800b6e2:	d005      	beq.n	800b6f0 <_dtoa_r+0x980>
 800b6e4:	45b8      	cmp	r8, r7
 800b6e6:	d003      	beq.n	800b6f0 <_dtoa_r+0x980>
 800b6e8:	4641      	mov	r1, r8
 800b6ea:	4620      	mov	r0, r4
 800b6ec:	f000 f9d0 	bl	800ba90 <_Bfree>
 800b6f0:	4639      	mov	r1, r7
 800b6f2:	4620      	mov	r0, r4
 800b6f4:	f000 f9cc 	bl	800ba90 <_Bfree>
 800b6f8:	e69c      	b.n	800b434 <_dtoa_r+0x6c4>
 800b6fa:	2600      	movs	r6, #0
 800b6fc:	4637      	mov	r7, r6
 800b6fe:	e7e1      	b.n	800b6c4 <_dtoa_r+0x954>
 800b700:	46bb      	mov	fp, r7
 800b702:	4637      	mov	r7, r6
 800b704:	e599      	b.n	800b23a <_dtoa_r+0x4ca>
 800b706:	bf00      	nop
 800b708:	40240000 	.word	0x40240000
 800b70c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b70e:	2b00      	cmp	r3, #0
 800b710:	f000 80c8 	beq.w	800b8a4 <_dtoa_r+0xb34>
 800b714:	9b04      	ldr	r3, [sp, #16]
 800b716:	9301      	str	r3, [sp, #4]
 800b718:	2d00      	cmp	r5, #0
 800b71a:	dd05      	ble.n	800b728 <_dtoa_r+0x9b8>
 800b71c:	4639      	mov	r1, r7
 800b71e:	462a      	mov	r2, r5
 800b720:	4620      	mov	r0, r4
 800b722:	f000 fb85 	bl	800be30 <__lshift>
 800b726:	4607      	mov	r7, r0
 800b728:	f1b8 0f00 	cmp.w	r8, #0
 800b72c:	d05b      	beq.n	800b7e6 <_dtoa_r+0xa76>
 800b72e:	6879      	ldr	r1, [r7, #4]
 800b730:	4620      	mov	r0, r4
 800b732:	f000 f96d 	bl	800ba10 <_Balloc>
 800b736:	4605      	mov	r5, r0
 800b738:	b928      	cbnz	r0, 800b746 <_dtoa_r+0x9d6>
 800b73a:	4b83      	ldr	r3, [pc, #524]	; (800b948 <_dtoa_r+0xbd8>)
 800b73c:	4602      	mov	r2, r0
 800b73e:	f240 21ef 	movw	r1, #751	; 0x2ef
 800b742:	f7ff bb2e 	b.w	800ada2 <_dtoa_r+0x32>
 800b746:	693a      	ldr	r2, [r7, #16]
 800b748:	3202      	adds	r2, #2
 800b74a:	0092      	lsls	r2, r2, #2
 800b74c:	f107 010c 	add.w	r1, r7, #12
 800b750:	300c      	adds	r0, #12
 800b752:	f7ff fa75 	bl	800ac40 <memcpy>
 800b756:	2201      	movs	r2, #1
 800b758:	4629      	mov	r1, r5
 800b75a:	4620      	mov	r0, r4
 800b75c:	f000 fb68 	bl	800be30 <__lshift>
 800b760:	9b00      	ldr	r3, [sp, #0]
 800b762:	3301      	adds	r3, #1
 800b764:	9304      	str	r3, [sp, #16]
 800b766:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b76a:	4413      	add	r3, r2
 800b76c:	9308      	str	r3, [sp, #32]
 800b76e:	9b02      	ldr	r3, [sp, #8]
 800b770:	f003 0301 	and.w	r3, r3, #1
 800b774:	46b8      	mov	r8, r7
 800b776:	9306      	str	r3, [sp, #24]
 800b778:	4607      	mov	r7, r0
 800b77a:	9b04      	ldr	r3, [sp, #16]
 800b77c:	4631      	mov	r1, r6
 800b77e:	3b01      	subs	r3, #1
 800b780:	4650      	mov	r0, sl
 800b782:	9301      	str	r3, [sp, #4]
 800b784:	f7ff fa6a 	bl	800ac5c <quorem>
 800b788:	4641      	mov	r1, r8
 800b78a:	9002      	str	r0, [sp, #8]
 800b78c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800b790:	4650      	mov	r0, sl
 800b792:	f000 fbb9 	bl	800bf08 <__mcmp>
 800b796:	463a      	mov	r2, r7
 800b798:	9005      	str	r0, [sp, #20]
 800b79a:	4631      	mov	r1, r6
 800b79c:	4620      	mov	r0, r4
 800b79e:	f000 fbcf 	bl	800bf40 <__mdiff>
 800b7a2:	68c2      	ldr	r2, [r0, #12]
 800b7a4:	4605      	mov	r5, r0
 800b7a6:	bb02      	cbnz	r2, 800b7ea <_dtoa_r+0xa7a>
 800b7a8:	4601      	mov	r1, r0
 800b7aa:	4650      	mov	r0, sl
 800b7ac:	f000 fbac 	bl	800bf08 <__mcmp>
 800b7b0:	4602      	mov	r2, r0
 800b7b2:	4629      	mov	r1, r5
 800b7b4:	4620      	mov	r0, r4
 800b7b6:	9209      	str	r2, [sp, #36]	; 0x24
 800b7b8:	f000 f96a 	bl	800ba90 <_Bfree>
 800b7bc:	9b07      	ldr	r3, [sp, #28]
 800b7be:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b7c0:	9d04      	ldr	r5, [sp, #16]
 800b7c2:	ea43 0102 	orr.w	r1, r3, r2
 800b7c6:	9b06      	ldr	r3, [sp, #24]
 800b7c8:	4319      	orrs	r1, r3
 800b7ca:	d110      	bne.n	800b7ee <_dtoa_r+0xa7e>
 800b7cc:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800b7d0:	d029      	beq.n	800b826 <_dtoa_r+0xab6>
 800b7d2:	9b05      	ldr	r3, [sp, #20]
 800b7d4:	2b00      	cmp	r3, #0
 800b7d6:	dd02      	ble.n	800b7de <_dtoa_r+0xa6e>
 800b7d8:	9b02      	ldr	r3, [sp, #8]
 800b7da:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800b7de:	9b01      	ldr	r3, [sp, #4]
 800b7e0:	f883 9000 	strb.w	r9, [r3]
 800b7e4:	e774      	b.n	800b6d0 <_dtoa_r+0x960>
 800b7e6:	4638      	mov	r0, r7
 800b7e8:	e7ba      	b.n	800b760 <_dtoa_r+0x9f0>
 800b7ea:	2201      	movs	r2, #1
 800b7ec:	e7e1      	b.n	800b7b2 <_dtoa_r+0xa42>
 800b7ee:	9b05      	ldr	r3, [sp, #20]
 800b7f0:	2b00      	cmp	r3, #0
 800b7f2:	db04      	blt.n	800b7fe <_dtoa_r+0xa8e>
 800b7f4:	9907      	ldr	r1, [sp, #28]
 800b7f6:	430b      	orrs	r3, r1
 800b7f8:	9906      	ldr	r1, [sp, #24]
 800b7fa:	430b      	orrs	r3, r1
 800b7fc:	d120      	bne.n	800b840 <_dtoa_r+0xad0>
 800b7fe:	2a00      	cmp	r2, #0
 800b800:	dded      	ble.n	800b7de <_dtoa_r+0xa6e>
 800b802:	4651      	mov	r1, sl
 800b804:	2201      	movs	r2, #1
 800b806:	4620      	mov	r0, r4
 800b808:	f000 fb12 	bl	800be30 <__lshift>
 800b80c:	4631      	mov	r1, r6
 800b80e:	4682      	mov	sl, r0
 800b810:	f000 fb7a 	bl	800bf08 <__mcmp>
 800b814:	2800      	cmp	r0, #0
 800b816:	dc03      	bgt.n	800b820 <_dtoa_r+0xab0>
 800b818:	d1e1      	bne.n	800b7de <_dtoa_r+0xa6e>
 800b81a:	f019 0f01 	tst.w	r9, #1
 800b81e:	d0de      	beq.n	800b7de <_dtoa_r+0xa6e>
 800b820:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800b824:	d1d8      	bne.n	800b7d8 <_dtoa_r+0xa68>
 800b826:	9a01      	ldr	r2, [sp, #4]
 800b828:	2339      	movs	r3, #57	; 0x39
 800b82a:	7013      	strb	r3, [r2, #0]
 800b82c:	462b      	mov	r3, r5
 800b82e:	461d      	mov	r5, r3
 800b830:	3b01      	subs	r3, #1
 800b832:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800b836:	2a39      	cmp	r2, #57	; 0x39
 800b838:	d06c      	beq.n	800b914 <_dtoa_r+0xba4>
 800b83a:	3201      	adds	r2, #1
 800b83c:	701a      	strb	r2, [r3, #0]
 800b83e:	e747      	b.n	800b6d0 <_dtoa_r+0x960>
 800b840:	2a00      	cmp	r2, #0
 800b842:	dd07      	ble.n	800b854 <_dtoa_r+0xae4>
 800b844:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800b848:	d0ed      	beq.n	800b826 <_dtoa_r+0xab6>
 800b84a:	9a01      	ldr	r2, [sp, #4]
 800b84c:	f109 0301 	add.w	r3, r9, #1
 800b850:	7013      	strb	r3, [r2, #0]
 800b852:	e73d      	b.n	800b6d0 <_dtoa_r+0x960>
 800b854:	9b04      	ldr	r3, [sp, #16]
 800b856:	9a08      	ldr	r2, [sp, #32]
 800b858:	f803 9c01 	strb.w	r9, [r3, #-1]
 800b85c:	4293      	cmp	r3, r2
 800b85e:	d043      	beq.n	800b8e8 <_dtoa_r+0xb78>
 800b860:	4651      	mov	r1, sl
 800b862:	2300      	movs	r3, #0
 800b864:	220a      	movs	r2, #10
 800b866:	4620      	mov	r0, r4
 800b868:	f000 f934 	bl	800bad4 <__multadd>
 800b86c:	45b8      	cmp	r8, r7
 800b86e:	4682      	mov	sl, r0
 800b870:	f04f 0300 	mov.w	r3, #0
 800b874:	f04f 020a 	mov.w	r2, #10
 800b878:	4641      	mov	r1, r8
 800b87a:	4620      	mov	r0, r4
 800b87c:	d107      	bne.n	800b88e <_dtoa_r+0xb1e>
 800b87e:	f000 f929 	bl	800bad4 <__multadd>
 800b882:	4680      	mov	r8, r0
 800b884:	4607      	mov	r7, r0
 800b886:	9b04      	ldr	r3, [sp, #16]
 800b888:	3301      	adds	r3, #1
 800b88a:	9304      	str	r3, [sp, #16]
 800b88c:	e775      	b.n	800b77a <_dtoa_r+0xa0a>
 800b88e:	f000 f921 	bl	800bad4 <__multadd>
 800b892:	4639      	mov	r1, r7
 800b894:	4680      	mov	r8, r0
 800b896:	2300      	movs	r3, #0
 800b898:	220a      	movs	r2, #10
 800b89a:	4620      	mov	r0, r4
 800b89c:	f000 f91a 	bl	800bad4 <__multadd>
 800b8a0:	4607      	mov	r7, r0
 800b8a2:	e7f0      	b.n	800b886 <_dtoa_r+0xb16>
 800b8a4:	9b04      	ldr	r3, [sp, #16]
 800b8a6:	9301      	str	r3, [sp, #4]
 800b8a8:	9d00      	ldr	r5, [sp, #0]
 800b8aa:	4631      	mov	r1, r6
 800b8ac:	4650      	mov	r0, sl
 800b8ae:	f7ff f9d5 	bl	800ac5c <quorem>
 800b8b2:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800b8b6:	9b00      	ldr	r3, [sp, #0]
 800b8b8:	f805 9b01 	strb.w	r9, [r5], #1
 800b8bc:	1aea      	subs	r2, r5, r3
 800b8be:	9b01      	ldr	r3, [sp, #4]
 800b8c0:	4293      	cmp	r3, r2
 800b8c2:	dd07      	ble.n	800b8d4 <_dtoa_r+0xb64>
 800b8c4:	4651      	mov	r1, sl
 800b8c6:	2300      	movs	r3, #0
 800b8c8:	220a      	movs	r2, #10
 800b8ca:	4620      	mov	r0, r4
 800b8cc:	f000 f902 	bl	800bad4 <__multadd>
 800b8d0:	4682      	mov	sl, r0
 800b8d2:	e7ea      	b.n	800b8aa <_dtoa_r+0xb3a>
 800b8d4:	9b01      	ldr	r3, [sp, #4]
 800b8d6:	2b00      	cmp	r3, #0
 800b8d8:	bfc8      	it	gt
 800b8da:	461d      	movgt	r5, r3
 800b8dc:	9b00      	ldr	r3, [sp, #0]
 800b8de:	bfd8      	it	le
 800b8e0:	2501      	movle	r5, #1
 800b8e2:	441d      	add	r5, r3
 800b8e4:	f04f 0800 	mov.w	r8, #0
 800b8e8:	4651      	mov	r1, sl
 800b8ea:	2201      	movs	r2, #1
 800b8ec:	4620      	mov	r0, r4
 800b8ee:	f000 fa9f 	bl	800be30 <__lshift>
 800b8f2:	4631      	mov	r1, r6
 800b8f4:	4682      	mov	sl, r0
 800b8f6:	f000 fb07 	bl	800bf08 <__mcmp>
 800b8fa:	2800      	cmp	r0, #0
 800b8fc:	dc96      	bgt.n	800b82c <_dtoa_r+0xabc>
 800b8fe:	d102      	bne.n	800b906 <_dtoa_r+0xb96>
 800b900:	f019 0f01 	tst.w	r9, #1
 800b904:	d192      	bne.n	800b82c <_dtoa_r+0xabc>
 800b906:	462b      	mov	r3, r5
 800b908:	461d      	mov	r5, r3
 800b90a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b90e:	2a30      	cmp	r2, #48	; 0x30
 800b910:	d0fa      	beq.n	800b908 <_dtoa_r+0xb98>
 800b912:	e6dd      	b.n	800b6d0 <_dtoa_r+0x960>
 800b914:	9a00      	ldr	r2, [sp, #0]
 800b916:	429a      	cmp	r2, r3
 800b918:	d189      	bne.n	800b82e <_dtoa_r+0xabe>
 800b91a:	f10b 0b01 	add.w	fp, fp, #1
 800b91e:	2331      	movs	r3, #49	; 0x31
 800b920:	e796      	b.n	800b850 <_dtoa_r+0xae0>
 800b922:	4b0a      	ldr	r3, [pc, #40]	; (800b94c <_dtoa_r+0xbdc>)
 800b924:	f7ff ba99 	b.w	800ae5a <_dtoa_r+0xea>
 800b928:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b92a:	2b00      	cmp	r3, #0
 800b92c:	f47f aa6d 	bne.w	800ae0a <_dtoa_r+0x9a>
 800b930:	4b07      	ldr	r3, [pc, #28]	; (800b950 <_dtoa_r+0xbe0>)
 800b932:	f7ff ba92 	b.w	800ae5a <_dtoa_r+0xea>
 800b936:	9b01      	ldr	r3, [sp, #4]
 800b938:	2b00      	cmp	r3, #0
 800b93a:	dcb5      	bgt.n	800b8a8 <_dtoa_r+0xb38>
 800b93c:	9b07      	ldr	r3, [sp, #28]
 800b93e:	2b02      	cmp	r3, #2
 800b940:	f73f aeb1 	bgt.w	800b6a6 <_dtoa_r+0x936>
 800b944:	e7b0      	b.n	800b8a8 <_dtoa_r+0xb38>
 800b946:	bf00      	nop
 800b948:	0800d9c8 	.word	0x0800d9c8
 800b94c:	0800d91e 	.word	0x0800d91e
 800b950:	0800d94c 	.word	0x0800d94c

0800b954 <_free_r>:
 800b954:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b956:	2900      	cmp	r1, #0
 800b958:	d044      	beq.n	800b9e4 <_free_r+0x90>
 800b95a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b95e:	9001      	str	r0, [sp, #4]
 800b960:	2b00      	cmp	r3, #0
 800b962:	f1a1 0404 	sub.w	r4, r1, #4
 800b966:	bfb8      	it	lt
 800b968:	18e4      	addlt	r4, r4, r3
 800b96a:	f7fe f99d 	bl	8009ca8 <__malloc_lock>
 800b96e:	4a1e      	ldr	r2, [pc, #120]	; (800b9e8 <_free_r+0x94>)
 800b970:	9801      	ldr	r0, [sp, #4]
 800b972:	6813      	ldr	r3, [r2, #0]
 800b974:	b933      	cbnz	r3, 800b984 <_free_r+0x30>
 800b976:	6063      	str	r3, [r4, #4]
 800b978:	6014      	str	r4, [r2, #0]
 800b97a:	b003      	add	sp, #12
 800b97c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b980:	f7fe b998 	b.w	8009cb4 <__malloc_unlock>
 800b984:	42a3      	cmp	r3, r4
 800b986:	d908      	bls.n	800b99a <_free_r+0x46>
 800b988:	6825      	ldr	r5, [r4, #0]
 800b98a:	1961      	adds	r1, r4, r5
 800b98c:	428b      	cmp	r3, r1
 800b98e:	bf01      	itttt	eq
 800b990:	6819      	ldreq	r1, [r3, #0]
 800b992:	685b      	ldreq	r3, [r3, #4]
 800b994:	1949      	addeq	r1, r1, r5
 800b996:	6021      	streq	r1, [r4, #0]
 800b998:	e7ed      	b.n	800b976 <_free_r+0x22>
 800b99a:	461a      	mov	r2, r3
 800b99c:	685b      	ldr	r3, [r3, #4]
 800b99e:	b10b      	cbz	r3, 800b9a4 <_free_r+0x50>
 800b9a0:	42a3      	cmp	r3, r4
 800b9a2:	d9fa      	bls.n	800b99a <_free_r+0x46>
 800b9a4:	6811      	ldr	r1, [r2, #0]
 800b9a6:	1855      	adds	r5, r2, r1
 800b9a8:	42a5      	cmp	r5, r4
 800b9aa:	d10b      	bne.n	800b9c4 <_free_r+0x70>
 800b9ac:	6824      	ldr	r4, [r4, #0]
 800b9ae:	4421      	add	r1, r4
 800b9b0:	1854      	adds	r4, r2, r1
 800b9b2:	42a3      	cmp	r3, r4
 800b9b4:	6011      	str	r1, [r2, #0]
 800b9b6:	d1e0      	bne.n	800b97a <_free_r+0x26>
 800b9b8:	681c      	ldr	r4, [r3, #0]
 800b9ba:	685b      	ldr	r3, [r3, #4]
 800b9bc:	6053      	str	r3, [r2, #4]
 800b9be:	440c      	add	r4, r1
 800b9c0:	6014      	str	r4, [r2, #0]
 800b9c2:	e7da      	b.n	800b97a <_free_r+0x26>
 800b9c4:	d902      	bls.n	800b9cc <_free_r+0x78>
 800b9c6:	230c      	movs	r3, #12
 800b9c8:	6003      	str	r3, [r0, #0]
 800b9ca:	e7d6      	b.n	800b97a <_free_r+0x26>
 800b9cc:	6825      	ldr	r5, [r4, #0]
 800b9ce:	1961      	adds	r1, r4, r5
 800b9d0:	428b      	cmp	r3, r1
 800b9d2:	bf04      	itt	eq
 800b9d4:	6819      	ldreq	r1, [r3, #0]
 800b9d6:	685b      	ldreq	r3, [r3, #4]
 800b9d8:	6063      	str	r3, [r4, #4]
 800b9da:	bf04      	itt	eq
 800b9dc:	1949      	addeq	r1, r1, r5
 800b9de:	6021      	streq	r1, [r4, #0]
 800b9e0:	6054      	str	r4, [r2, #4]
 800b9e2:	e7ca      	b.n	800b97a <_free_r+0x26>
 800b9e4:	b003      	add	sp, #12
 800b9e6:	bd30      	pop	{r4, r5, pc}
 800b9e8:	20000ce4 	.word	0x20000ce4

0800b9ec <__ascii_mbtowc>:
 800b9ec:	b082      	sub	sp, #8
 800b9ee:	b901      	cbnz	r1, 800b9f2 <__ascii_mbtowc+0x6>
 800b9f0:	a901      	add	r1, sp, #4
 800b9f2:	b142      	cbz	r2, 800ba06 <__ascii_mbtowc+0x1a>
 800b9f4:	b14b      	cbz	r3, 800ba0a <__ascii_mbtowc+0x1e>
 800b9f6:	7813      	ldrb	r3, [r2, #0]
 800b9f8:	600b      	str	r3, [r1, #0]
 800b9fa:	7812      	ldrb	r2, [r2, #0]
 800b9fc:	1e10      	subs	r0, r2, #0
 800b9fe:	bf18      	it	ne
 800ba00:	2001      	movne	r0, #1
 800ba02:	b002      	add	sp, #8
 800ba04:	4770      	bx	lr
 800ba06:	4610      	mov	r0, r2
 800ba08:	e7fb      	b.n	800ba02 <__ascii_mbtowc+0x16>
 800ba0a:	f06f 0001 	mvn.w	r0, #1
 800ba0e:	e7f8      	b.n	800ba02 <__ascii_mbtowc+0x16>

0800ba10 <_Balloc>:
 800ba10:	b570      	push	{r4, r5, r6, lr}
 800ba12:	69c6      	ldr	r6, [r0, #28]
 800ba14:	4604      	mov	r4, r0
 800ba16:	460d      	mov	r5, r1
 800ba18:	b976      	cbnz	r6, 800ba38 <_Balloc+0x28>
 800ba1a:	2010      	movs	r0, #16
 800ba1c:	f7fe f894 	bl	8009b48 <malloc>
 800ba20:	4602      	mov	r2, r0
 800ba22:	61e0      	str	r0, [r4, #28]
 800ba24:	b920      	cbnz	r0, 800ba30 <_Balloc+0x20>
 800ba26:	4b18      	ldr	r3, [pc, #96]	; (800ba88 <_Balloc+0x78>)
 800ba28:	4818      	ldr	r0, [pc, #96]	; (800ba8c <_Balloc+0x7c>)
 800ba2a:	216b      	movs	r1, #107	; 0x6b
 800ba2c:	f000 ff48 	bl	800c8c0 <__assert_func>
 800ba30:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ba34:	6006      	str	r6, [r0, #0]
 800ba36:	60c6      	str	r6, [r0, #12]
 800ba38:	69e6      	ldr	r6, [r4, #28]
 800ba3a:	68f3      	ldr	r3, [r6, #12]
 800ba3c:	b183      	cbz	r3, 800ba60 <_Balloc+0x50>
 800ba3e:	69e3      	ldr	r3, [r4, #28]
 800ba40:	68db      	ldr	r3, [r3, #12]
 800ba42:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800ba46:	b9b8      	cbnz	r0, 800ba78 <_Balloc+0x68>
 800ba48:	2101      	movs	r1, #1
 800ba4a:	fa01 f605 	lsl.w	r6, r1, r5
 800ba4e:	1d72      	adds	r2, r6, #5
 800ba50:	0092      	lsls	r2, r2, #2
 800ba52:	4620      	mov	r0, r4
 800ba54:	f000 ff52 	bl	800c8fc <_calloc_r>
 800ba58:	b160      	cbz	r0, 800ba74 <_Balloc+0x64>
 800ba5a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800ba5e:	e00e      	b.n	800ba7e <_Balloc+0x6e>
 800ba60:	2221      	movs	r2, #33	; 0x21
 800ba62:	2104      	movs	r1, #4
 800ba64:	4620      	mov	r0, r4
 800ba66:	f000 ff49 	bl	800c8fc <_calloc_r>
 800ba6a:	69e3      	ldr	r3, [r4, #28]
 800ba6c:	60f0      	str	r0, [r6, #12]
 800ba6e:	68db      	ldr	r3, [r3, #12]
 800ba70:	2b00      	cmp	r3, #0
 800ba72:	d1e4      	bne.n	800ba3e <_Balloc+0x2e>
 800ba74:	2000      	movs	r0, #0
 800ba76:	bd70      	pop	{r4, r5, r6, pc}
 800ba78:	6802      	ldr	r2, [r0, #0]
 800ba7a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800ba7e:	2300      	movs	r3, #0
 800ba80:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ba84:	e7f7      	b.n	800ba76 <_Balloc+0x66>
 800ba86:	bf00      	nop
 800ba88:	0800d959 	.word	0x0800d959
 800ba8c:	0800d9d9 	.word	0x0800d9d9

0800ba90 <_Bfree>:
 800ba90:	b570      	push	{r4, r5, r6, lr}
 800ba92:	69c6      	ldr	r6, [r0, #28]
 800ba94:	4605      	mov	r5, r0
 800ba96:	460c      	mov	r4, r1
 800ba98:	b976      	cbnz	r6, 800bab8 <_Bfree+0x28>
 800ba9a:	2010      	movs	r0, #16
 800ba9c:	f7fe f854 	bl	8009b48 <malloc>
 800baa0:	4602      	mov	r2, r0
 800baa2:	61e8      	str	r0, [r5, #28]
 800baa4:	b920      	cbnz	r0, 800bab0 <_Bfree+0x20>
 800baa6:	4b09      	ldr	r3, [pc, #36]	; (800bacc <_Bfree+0x3c>)
 800baa8:	4809      	ldr	r0, [pc, #36]	; (800bad0 <_Bfree+0x40>)
 800baaa:	218f      	movs	r1, #143	; 0x8f
 800baac:	f000 ff08 	bl	800c8c0 <__assert_func>
 800bab0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bab4:	6006      	str	r6, [r0, #0]
 800bab6:	60c6      	str	r6, [r0, #12]
 800bab8:	b13c      	cbz	r4, 800baca <_Bfree+0x3a>
 800baba:	69eb      	ldr	r3, [r5, #28]
 800babc:	6862      	ldr	r2, [r4, #4]
 800babe:	68db      	ldr	r3, [r3, #12]
 800bac0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800bac4:	6021      	str	r1, [r4, #0]
 800bac6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800baca:	bd70      	pop	{r4, r5, r6, pc}
 800bacc:	0800d959 	.word	0x0800d959
 800bad0:	0800d9d9 	.word	0x0800d9d9

0800bad4 <__multadd>:
 800bad4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bad8:	690d      	ldr	r5, [r1, #16]
 800bada:	4607      	mov	r7, r0
 800badc:	460c      	mov	r4, r1
 800bade:	461e      	mov	r6, r3
 800bae0:	f101 0c14 	add.w	ip, r1, #20
 800bae4:	2000      	movs	r0, #0
 800bae6:	f8dc 3000 	ldr.w	r3, [ip]
 800baea:	b299      	uxth	r1, r3
 800baec:	fb02 6101 	mla	r1, r2, r1, r6
 800baf0:	0c1e      	lsrs	r6, r3, #16
 800baf2:	0c0b      	lsrs	r3, r1, #16
 800baf4:	fb02 3306 	mla	r3, r2, r6, r3
 800baf8:	b289      	uxth	r1, r1
 800bafa:	3001      	adds	r0, #1
 800bafc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800bb00:	4285      	cmp	r5, r0
 800bb02:	f84c 1b04 	str.w	r1, [ip], #4
 800bb06:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800bb0a:	dcec      	bgt.n	800bae6 <__multadd+0x12>
 800bb0c:	b30e      	cbz	r6, 800bb52 <__multadd+0x7e>
 800bb0e:	68a3      	ldr	r3, [r4, #8]
 800bb10:	42ab      	cmp	r3, r5
 800bb12:	dc19      	bgt.n	800bb48 <__multadd+0x74>
 800bb14:	6861      	ldr	r1, [r4, #4]
 800bb16:	4638      	mov	r0, r7
 800bb18:	3101      	adds	r1, #1
 800bb1a:	f7ff ff79 	bl	800ba10 <_Balloc>
 800bb1e:	4680      	mov	r8, r0
 800bb20:	b928      	cbnz	r0, 800bb2e <__multadd+0x5a>
 800bb22:	4602      	mov	r2, r0
 800bb24:	4b0c      	ldr	r3, [pc, #48]	; (800bb58 <__multadd+0x84>)
 800bb26:	480d      	ldr	r0, [pc, #52]	; (800bb5c <__multadd+0x88>)
 800bb28:	21ba      	movs	r1, #186	; 0xba
 800bb2a:	f000 fec9 	bl	800c8c0 <__assert_func>
 800bb2e:	6922      	ldr	r2, [r4, #16]
 800bb30:	3202      	adds	r2, #2
 800bb32:	f104 010c 	add.w	r1, r4, #12
 800bb36:	0092      	lsls	r2, r2, #2
 800bb38:	300c      	adds	r0, #12
 800bb3a:	f7ff f881 	bl	800ac40 <memcpy>
 800bb3e:	4621      	mov	r1, r4
 800bb40:	4638      	mov	r0, r7
 800bb42:	f7ff ffa5 	bl	800ba90 <_Bfree>
 800bb46:	4644      	mov	r4, r8
 800bb48:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800bb4c:	3501      	adds	r5, #1
 800bb4e:	615e      	str	r6, [r3, #20]
 800bb50:	6125      	str	r5, [r4, #16]
 800bb52:	4620      	mov	r0, r4
 800bb54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bb58:	0800d9c8 	.word	0x0800d9c8
 800bb5c:	0800d9d9 	.word	0x0800d9d9

0800bb60 <__hi0bits>:
 800bb60:	0c03      	lsrs	r3, r0, #16
 800bb62:	041b      	lsls	r3, r3, #16
 800bb64:	b9d3      	cbnz	r3, 800bb9c <__hi0bits+0x3c>
 800bb66:	0400      	lsls	r0, r0, #16
 800bb68:	2310      	movs	r3, #16
 800bb6a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800bb6e:	bf04      	itt	eq
 800bb70:	0200      	lsleq	r0, r0, #8
 800bb72:	3308      	addeq	r3, #8
 800bb74:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800bb78:	bf04      	itt	eq
 800bb7a:	0100      	lsleq	r0, r0, #4
 800bb7c:	3304      	addeq	r3, #4
 800bb7e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800bb82:	bf04      	itt	eq
 800bb84:	0080      	lsleq	r0, r0, #2
 800bb86:	3302      	addeq	r3, #2
 800bb88:	2800      	cmp	r0, #0
 800bb8a:	db05      	blt.n	800bb98 <__hi0bits+0x38>
 800bb8c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800bb90:	f103 0301 	add.w	r3, r3, #1
 800bb94:	bf08      	it	eq
 800bb96:	2320      	moveq	r3, #32
 800bb98:	4618      	mov	r0, r3
 800bb9a:	4770      	bx	lr
 800bb9c:	2300      	movs	r3, #0
 800bb9e:	e7e4      	b.n	800bb6a <__hi0bits+0xa>

0800bba0 <__lo0bits>:
 800bba0:	6803      	ldr	r3, [r0, #0]
 800bba2:	f013 0207 	ands.w	r2, r3, #7
 800bba6:	d00c      	beq.n	800bbc2 <__lo0bits+0x22>
 800bba8:	07d9      	lsls	r1, r3, #31
 800bbaa:	d422      	bmi.n	800bbf2 <__lo0bits+0x52>
 800bbac:	079a      	lsls	r2, r3, #30
 800bbae:	bf49      	itett	mi
 800bbb0:	085b      	lsrmi	r3, r3, #1
 800bbb2:	089b      	lsrpl	r3, r3, #2
 800bbb4:	6003      	strmi	r3, [r0, #0]
 800bbb6:	2201      	movmi	r2, #1
 800bbb8:	bf5c      	itt	pl
 800bbba:	6003      	strpl	r3, [r0, #0]
 800bbbc:	2202      	movpl	r2, #2
 800bbbe:	4610      	mov	r0, r2
 800bbc0:	4770      	bx	lr
 800bbc2:	b299      	uxth	r1, r3
 800bbc4:	b909      	cbnz	r1, 800bbca <__lo0bits+0x2a>
 800bbc6:	0c1b      	lsrs	r3, r3, #16
 800bbc8:	2210      	movs	r2, #16
 800bbca:	b2d9      	uxtb	r1, r3
 800bbcc:	b909      	cbnz	r1, 800bbd2 <__lo0bits+0x32>
 800bbce:	3208      	adds	r2, #8
 800bbd0:	0a1b      	lsrs	r3, r3, #8
 800bbd2:	0719      	lsls	r1, r3, #28
 800bbd4:	bf04      	itt	eq
 800bbd6:	091b      	lsreq	r3, r3, #4
 800bbd8:	3204      	addeq	r2, #4
 800bbda:	0799      	lsls	r1, r3, #30
 800bbdc:	bf04      	itt	eq
 800bbde:	089b      	lsreq	r3, r3, #2
 800bbe0:	3202      	addeq	r2, #2
 800bbe2:	07d9      	lsls	r1, r3, #31
 800bbe4:	d403      	bmi.n	800bbee <__lo0bits+0x4e>
 800bbe6:	085b      	lsrs	r3, r3, #1
 800bbe8:	f102 0201 	add.w	r2, r2, #1
 800bbec:	d003      	beq.n	800bbf6 <__lo0bits+0x56>
 800bbee:	6003      	str	r3, [r0, #0]
 800bbf0:	e7e5      	b.n	800bbbe <__lo0bits+0x1e>
 800bbf2:	2200      	movs	r2, #0
 800bbf4:	e7e3      	b.n	800bbbe <__lo0bits+0x1e>
 800bbf6:	2220      	movs	r2, #32
 800bbf8:	e7e1      	b.n	800bbbe <__lo0bits+0x1e>
	...

0800bbfc <__i2b>:
 800bbfc:	b510      	push	{r4, lr}
 800bbfe:	460c      	mov	r4, r1
 800bc00:	2101      	movs	r1, #1
 800bc02:	f7ff ff05 	bl	800ba10 <_Balloc>
 800bc06:	4602      	mov	r2, r0
 800bc08:	b928      	cbnz	r0, 800bc16 <__i2b+0x1a>
 800bc0a:	4b05      	ldr	r3, [pc, #20]	; (800bc20 <__i2b+0x24>)
 800bc0c:	4805      	ldr	r0, [pc, #20]	; (800bc24 <__i2b+0x28>)
 800bc0e:	f240 1145 	movw	r1, #325	; 0x145
 800bc12:	f000 fe55 	bl	800c8c0 <__assert_func>
 800bc16:	2301      	movs	r3, #1
 800bc18:	6144      	str	r4, [r0, #20]
 800bc1a:	6103      	str	r3, [r0, #16]
 800bc1c:	bd10      	pop	{r4, pc}
 800bc1e:	bf00      	nop
 800bc20:	0800d9c8 	.word	0x0800d9c8
 800bc24:	0800d9d9 	.word	0x0800d9d9

0800bc28 <__multiply>:
 800bc28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc2c:	4691      	mov	r9, r2
 800bc2e:	690a      	ldr	r2, [r1, #16]
 800bc30:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800bc34:	429a      	cmp	r2, r3
 800bc36:	bfb8      	it	lt
 800bc38:	460b      	movlt	r3, r1
 800bc3a:	460c      	mov	r4, r1
 800bc3c:	bfbc      	itt	lt
 800bc3e:	464c      	movlt	r4, r9
 800bc40:	4699      	movlt	r9, r3
 800bc42:	6927      	ldr	r7, [r4, #16]
 800bc44:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800bc48:	68a3      	ldr	r3, [r4, #8]
 800bc4a:	6861      	ldr	r1, [r4, #4]
 800bc4c:	eb07 060a 	add.w	r6, r7, sl
 800bc50:	42b3      	cmp	r3, r6
 800bc52:	b085      	sub	sp, #20
 800bc54:	bfb8      	it	lt
 800bc56:	3101      	addlt	r1, #1
 800bc58:	f7ff feda 	bl	800ba10 <_Balloc>
 800bc5c:	b930      	cbnz	r0, 800bc6c <__multiply+0x44>
 800bc5e:	4602      	mov	r2, r0
 800bc60:	4b44      	ldr	r3, [pc, #272]	; (800bd74 <__multiply+0x14c>)
 800bc62:	4845      	ldr	r0, [pc, #276]	; (800bd78 <__multiply+0x150>)
 800bc64:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800bc68:	f000 fe2a 	bl	800c8c0 <__assert_func>
 800bc6c:	f100 0514 	add.w	r5, r0, #20
 800bc70:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800bc74:	462b      	mov	r3, r5
 800bc76:	2200      	movs	r2, #0
 800bc78:	4543      	cmp	r3, r8
 800bc7a:	d321      	bcc.n	800bcc0 <__multiply+0x98>
 800bc7c:	f104 0314 	add.w	r3, r4, #20
 800bc80:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800bc84:	f109 0314 	add.w	r3, r9, #20
 800bc88:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800bc8c:	9202      	str	r2, [sp, #8]
 800bc8e:	1b3a      	subs	r2, r7, r4
 800bc90:	3a15      	subs	r2, #21
 800bc92:	f022 0203 	bic.w	r2, r2, #3
 800bc96:	3204      	adds	r2, #4
 800bc98:	f104 0115 	add.w	r1, r4, #21
 800bc9c:	428f      	cmp	r7, r1
 800bc9e:	bf38      	it	cc
 800bca0:	2204      	movcc	r2, #4
 800bca2:	9201      	str	r2, [sp, #4]
 800bca4:	9a02      	ldr	r2, [sp, #8]
 800bca6:	9303      	str	r3, [sp, #12]
 800bca8:	429a      	cmp	r2, r3
 800bcaa:	d80c      	bhi.n	800bcc6 <__multiply+0x9e>
 800bcac:	2e00      	cmp	r6, #0
 800bcae:	dd03      	ble.n	800bcb8 <__multiply+0x90>
 800bcb0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800bcb4:	2b00      	cmp	r3, #0
 800bcb6:	d05b      	beq.n	800bd70 <__multiply+0x148>
 800bcb8:	6106      	str	r6, [r0, #16]
 800bcba:	b005      	add	sp, #20
 800bcbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bcc0:	f843 2b04 	str.w	r2, [r3], #4
 800bcc4:	e7d8      	b.n	800bc78 <__multiply+0x50>
 800bcc6:	f8b3 a000 	ldrh.w	sl, [r3]
 800bcca:	f1ba 0f00 	cmp.w	sl, #0
 800bcce:	d024      	beq.n	800bd1a <__multiply+0xf2>
 800bcd0:	f104 0e14 	add.w	lr, r4, #20
 800bcd4:	46a9      	mov	r9, r5
 800bcd6:	f04f 0c00 	mov.w	ip, #0
 800bcda:	f85e 2b04 	ldr.w	r2, [lr], #4
 800bcde:	f8d9 1000 	ldr.w	r1, [r9]
 800bce2:	fa1f fb82 	uxth.w	fp, r2
 800bce6:	b289      	uxth	r1, r1
 800bce8:	fb0a 110b 	mla	r1, sl, fp, r1
 800bcec:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800bcf0:	f8d9 2000 	ldr.w	r2, [r9]
 800bcf4:	4461      	add	r1, ip
 800bcf6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800bcfa:	fb0a c20b 	mla	r2, sl, fp, ip
 800bcfe:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800bd02:	b289      	uxth	r1, r1
 800bd04:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800bd08:	4577      	cmp	r7, lr
 800bd0a:	f849 1b04 	str.w	r1, [r9], #4
 800bd0e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800bd12:	d8e2      	bhi.n	800bcda <__multiply+0xb2>
 800bd14:	9a01      	ldr	r2, [sp, #4]
 800bd16:	f845 c002 	str.w	ip, [r5, r2]
 800bd1a:	9a03      	ldr	r2, [sp, #12]
 800bd1c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800bd20:	3304      	adds	r3, #4
 800bd22:	f1b9 0f00 	cmp.w	r9, #0
 800bd26:	d021      	beq.n	800bd6c <__multiply+0x144>
 800bd28:	6829      	ldr	r1, [r5, #0]
 800bd2a:	f104 0c14 	add.w	ip, r4, #20
 800bd2e:	46ae      	mov	lr, r5
 800bd30:	f04f 0a00 	mov.w	sl, #0
 800bd34:	f8bc b000 	ldrh.w	fp, [ip]
 800bd38:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800bd3c:	fb09 220b 	mla	r2, r9, fp, r2
 800bd40:	4452      	add	r2, sl
 800bd42:	b289      	uxth	r1, r1
 800bd44:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800bd48:	f84e 1b04 	str.w	r1, [lr], #4
 800bd4c:	f85c 1b04 	ldr.w	r1, [ip], #4
 800bd50:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800bd54:	f8be 1000 	ldrh.w	r1, [lr]
 800bd58:	fb09 110a 	mla	r1, r9, sl, r1
 800bd5c:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800bd60:	4567      	cmp	r7, ip
 800bd62:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800bd66:	d8e5      	bhi.n	800bd34 <__multiply+0x10c>
 800bd68:	9a01      	ldr	r2, [sp, #4]
 800bd6a:	50a9      	str	r1, [r5, r2]
 800bd6c:	3504      	adds	r5, #4
 800bd6e:	e799      	b.n	800bca4 <__multiply+0x7c>
 800bd70:	3e01      	subs	r6, #1
 800bd72:	e79b      	b.n	800bcac <__multiply+0x84>
 800bd74:	0800d9c8 	.word	0x0800d9c8
 800bd78:	0800d9d9 	.word	0x0800d9d9

0800bd7c <__pow5mult>:
 800bd7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bd80:	4615      	mov	r5, r2
 800bd82:	f012 0203 	ands.w	r2, r2, #3
 800bd86:	4606      	mov	r6, r0
 800bd88:	460f      	mov	r7, r1
 800bd8a:	d007      	beq.n	800bd9c <__pow5mult+0x20>
 800bd8c:	4c25      	ldr	r4, [pc, #148]	; (800be24 <__pow5mult+0xa8>)
 800bd8e:	3a01      	subs	r2, #1
 800bd90:	2300      	movs	r3, #0
 800bd92:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800bd96:	f7ff fe9d 	bl	800bad4 <__multadd>
 800bd9a:	4607      	mov	r7, r0
 800bd9c:	10ad      	asrs	r5, r5, #2
 800bd9e:	d03d      	beq.n	800be1c <__pow5mult+0xa0>
 800bda0:	69f4      	ldr	r4, [r6, #28]
 800bda2:	b97c      	cbnz	r4, 800bdc4 <__pow5mult+0x48>
 800bda4:	2010      	movs	r0, #16
 800bda6:	f7fd fecf 	bl	8009b48 <malloc>
 800bdaa:	4602      	mov	r2, r0
 800bdac:	61f0      	str	r0, [r6, #28]
 800bdae:	b928      	cbnz	r0, 800bdbc <__pow5mult+0x40>
 800bdb0:	4b1d      	ldr	r3, [pc, #116]	; (800be28 <__pow5mult+0xac>)
 800bdb2:	481e      	ldr	r0, [pc, #120]	; (800be2c <__pow5mult+0xb0>)
 800bdb4:	f240 11b3 	movw	r1, #435	; 0x1b3
 800bdb8:	f000 fd82 	bl	800c8c0 <__assert_func>
 800bdbc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800bdc0:	6004      	str	r4, [r0, #0]
 800bdc2:	60c4      	str	r4, [r0, #12]
 800bdc4:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800bdc8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800bdcc:	b94c      	cbnz	r4, 800bde2 <__pow5mult+0x66>
 800bdce:	f240 2171 	movw	r1, #625	; 0x271
 800bdd2:	4630      	mov	r0, r6
 800bdd4:	f7ff ff12 	bl	800bbfc <__i2b>
 800bdd8:	2300      	movs	r3, #0
 800bdda:	f8c8 0008 	str.w	r0, [r8, #8]
 800bdde:	4604      	mov	r4, r0
 800bde0:	6003      	str	r3, [r0, #0]
 800bde2:	f04f 0900 	mov.w	r9, #0
 800bde6:	07eb      	lsls	r3, r5, #31
 800bde8:	d50a      	bpl.n	800be00 <__pow5mult+0x84>
 800bdea:	4639      	mov	r1, r7
 800bdec:	4622      	mov	r2, r4
 800bdee:	4630      	mov	r0, r6
 800bdf0:	f7ff ff1a 	bl	800bc28 <__multiply>
 800bdf4:	4639      	mov	r1, r7
 800bdf6:	4680      	mov	r8, r0
 800bdf8:	4630      	mov	r0, r6
 800bdfa:	f7ff fe49 	bl	800ba90 <_Bfree>
 800bdfe:	4647      	mov	r7, r8
 800be00:	106d      	asrs	r5, r5, #1
 800be02:	d00b      	beq.n	800be1c <__pow5mult+0xa0>
 800be04:	6820      	ldr	r0, [r4, #0]
 800be06:	b938      	cbnz	r0, 800be18 <__pow5mult+0x9c>
 800be08:	4622      	mov	r2, r4
 800be0a:	4621      	mov	r1, r4
 800be0c:	4630      	mov	r0, r6
 800be0e:	f7ff ff0b 	bl	800bc28 <__multiply>
 800be12:	6020      	str	r0, [r4, #0]
 800be14:	f8c0 9000 	str.w	r9, [r0]
 800be18:	4604      	mov	r4, r0
 800be1a:	e7e4      	b.n	800bde6 <__pow5mult+0x6a>
 800be1c:	4638      	mov	r0, r7
 800be1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800be22:	bf00      	nop
 800be24:	0800db28 	.word	0x0800db28
 800be28:	0800d959 	.word	0x0800d959
 800be2c:	0800d9d9 	.word	0x0800d9d9

0800be30 <__lshift>:
 800be30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800be34:	460c      	mov	r4, r1
 800be36:	6849      	ldr	r1, [r1, #4]
 800be38:	6923      	ldr	r3, [r4, #16]
 800be3a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800be3e:	68a3      	ldr	r3, [r4, #8]
 800be40:	4607      	mov	r7, r0
 800be42:	4691      	mov	r9, r2
 800be44:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800be48:	f108 0601 	add.w	r6, r8, #1
 800be4c:	42b3      	cmp	r3, r6
 800be4e:	db0b      	blt.n	800be68 <__lshift+0x38>
 800be50:	4638      	mov	r0, r7
 800be52:	f7ff fddd 	bl	800ba10 <_Balloc>
 800be56:	4605      	mov	r5, r0
 800be58:	b948      	cbnz	r0, 800be6e <__lshift+0x3e>
 800be5a:	4602      	mov	r2, r0
 800be5c:	4b28      	ldr	r3, [pc, #160]	; (800bf00 <__lshift+0xd0>)
 800be5e:	4829      	ldr	r0, [pc, #164]	; (800bf04 <__lshift+0xd4>)
 800be60:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800be64:	f000 fd2c 	bl	800c8c0 <__assert_func>
 800be68:	3101      	adds	r1, #1
 800be6a:	005b      	lsls	r3, r3, #1
 800be6c:	e7ee      	b.n	800be4c <__lshift+0x1c>
 800be6e:	2300      	movs	r3, #0
 800be70:	f100 0114 	add.w	r1, r0, #20
 800be74:	f100 0210 	add.w	r2, r0, #16
 800be78:	4618      	mov	r0, r3
 800be7a:	4553      	cmp	r3, sl
 800be7c:	db33      	blt.n	800bee6 <__lshift+0xb6>
 800be7e:	6920      	ldr	r0, [r4, #16]
 800be80:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800be84:	f104 0314 	add.w	r3, r4, #20
 800be88:	f019 091f 	ands.w	r9, r9, #31
 800be8c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800be90:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800be94:	d02b      	beq.n	800beee <__lshift+0xbe>
 800be96:	f1c9 0e20 	rsb	lr, r9, #32
 800be9a:	468a      	mov	sl, r1
 800be9c:	2200      	movs	r2, #0
 800be9e:	6818      	ldr	r0, [r3, #0]
 800bea0:	fa00 f009 	lsl.w	r0, r0, r9
 800bea4:	4310      	orrs	r0, r2
 800bea6:	f84a 0b04 	str.w	r0, [sl], #4
 800beaa:	f853 2b04 	ldr.w	r2, [r3], #4
 800beae:	459c      	cmp	ip, r3
 800beb0:	fa22 f20e 	lsr.w	r2, r2, lr
 800beb4:	d8f3      	bhi.n	800be9e <__lshift+0x6e>
 800beb6:	ebac 0304 	sub.w	r3, ip, r4
 800beba:	3b15      	subs	r3, #21
 800bebc:	f023 0303 	bic.w	r3, r3, #3
 800bec0:	3304      	adds	r3, #4
 800bec2:	f104 0015 	add.w	r0, r4, #21
 800bec6:	4584      	cmp	ip, r0
 800bec8:	bf38      	it	cc
 800beca:	2304      	movcc	r3, #4
 800becc:	50ca      	str	r2, [r1, r3]
 800bece:	b10a      	cbz	r2, 800bed4 <__lshift+0xa4>
 800bed0:	f108 0602 	add.w	r6, r8, #2
 800bed4:	3e01      	subs	r6, #1
 800bed6:	4638      	mov	r0, r7
 800bed8:	612e      	str	r6, [r5, #16]
 800beda:	4621      	mov	r1, r4
 800bedc:	f7ff fdd8 	bl	800ba90 <_Bfree>
 800bee0:	4628      	mov	r0, r5
 800bee2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bee6:	f842 0f04 	str.w	r0, [r2, #4]!
 800beea:	3301      	adds	r3, #1
 800beec:	e7c5      	b.n	800be7a <__lshift+0x4a>
 800beee:	3904      	subs	r1, #4
 800bef0:	f853 2b04 	ldr.w	r2, [r3], #4
 800bef4:	f841 2f04 	str.w	r2, [r1, #4]!
 800bef8:	459c      	cmp	ip, r3
 800befa:	d8f9      	bhi.n	800bef0 <__lshift+0xc0>
 800befc:	e7ea      	b.n	800bed4 <__lshift+0xa4>
 800befe:	bf00      	nop
 800bf00:	0800d9c8 	.word	0x0800d9c8
 800bf04:	0800d9d9 	.word	0x0800d9d9

0800bf08 <__mcmp>:
 800bf08:	b530      	push	{r4, r5, lr}
 800bf0a:	6902      	ldr	r2, [r0, #16]
 800bf0c:	690c      	ldr	r4, [r1, #16]
 800bf0e:	1b12      	subs	r2, r2, r4
 800bf10:	d10e      	bne.n	800bf30 <__mcmp+0x28>
 800bf12:	f100 0314 	add.w	r3, r0, #20
 800bf16:	3114      	adds	r1, #20
 800bf18:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800bf1c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800bf20:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800bf24:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800bf28:	42a5      	cmp	r5, r4
 800bf2a:	d003      	beq.n	800bf34 <__mcmp+0x2c>
 800bf2c:	d305      	bcc.n	800bf3a <__mcmp+0x32>
 800bf2e:	2201      	movs	r2, #1
 800bf30:	4610      	mov	r0, r2
 800bf32:	bd30      	pop	{r4, r5, pc}
 800bf34:	4283      	cmp	r3, r0
 800bf36:	d3f3      	bcc.n	800bf20 <__mcmp+0x18>
 800bf38:	e7fa      	b.n	800bf30 <__mcmp+0x28>
 800bf3a:	f04f 32ff 	mov.w	r2, #4294967295
 800bf3e:	e7f7      	b.n	800bf30 <__mcmp+0x28>

0800bf40 <__mdiff>:
 800bf40:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf44:	460c      	mov	r4, r1
 800bf46:	4606      	mov	r6, r0
 800bf48:	4611      	mov	r1, r2
 800bf4a:	4620      	mov	r0, r4
 800bf4c:	4690      	mov	r8, r2
 800bf4e:	f7ff ffdb 	bl	800bf08 <__mcmp>
 800bf52:	1e05      	subs	r5, r0, #0
 800bf54:	d110      	bne.n	800bf78 <__mdiff+0x38>
 800bf56:	4629      	mov	r1, r5
 800bf58:	4630      	mov	r0, r6
 800bf5a:	f7ff fd59 	bl	800ba10 <_Balloc>
 800bf5e:	b930      	cbnz	r0, 800bf6e <__mdiff+0x2e>
 800bf60:	4b3a      	ldr	r3, [pc, #232]	; (800c04c <__mdiff+0x10c>)
 800bf62:	4602      	mov	r2, r0
 800bf64:	f240 2137 	movw	r1, #567	; 0x237
 800bf68:	4839      	ldr	r0, [pc, #228]	; (800c050 <__mdiff+0x110>)
 800bf6a:	f000 fca9 	bl	800c8c0 <__assert_func>
 800bf6e:	2301      	movs	r3, #1
 800bf70:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800bf74:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bf78:	bfa4      	itt	ge
 800bf7a:	4643      	movge	r3, r8
 800bf7c:	46a0      	movge	r8, r4
 800bf7e:	4630      	mov	r0, r6
 800bf80:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800bf84:	bfa6      	itte	ge
 800bf86:	461c      	movge	r4, r3
 800bf88:	2500      	movge	r5, #0
 800bf8a:	2501      	movlt	r5, #1
 800bf8c:	f7ff fd40 	bl	800ba10 <_Balloc>
 800bf90:	b920      	cbnz	r0, 800bf9c <__mdiff+0x5c>
 800bf92:	4b2e      	ldr	r3, [pc, #184]	; (800c04c <__mdiff+0x10c>)
 800bf94:	4602      	mov	r2, r0
 800bf96:	f240 2145 	movw	r1, #581	; 0x245
 800bf9a:	e7e5      	b.n	800bf68 <__mdiff+0x28>
 800bf9c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800bfa0:	6926      	ldr	r6, [r4, #16]
 800bfa2:	60c5      	str	r5, [r0, #12]
 800bfa4:	f104 0914 	add.w	r9, r4, #20
 800bfa8:	f108 0514 	add.w	r5, r8, #20
 800bfac:	f100 0e14 	add.w	lr, r0, #20
 800bfb0:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800bfb4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800bfb8:	f108 0210 	add.w	r2, r8, #16
 800bfbc:	46f2      	mov	sl, lr
 800bfbe:	2100      	movs	r1, #0
 800bfc0:	f859 3b04 	ldr.w	r3, [r9], #4
 800bfc4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800bfc8:	fa11 f88b 	uxtah	r8, r1, fp
 800bfcc:	b299      	uxth	r1, r3
 800bfce:	0c1b      	lsrs	r3, r3, #16
 800bfd0:	eba8 0801 	sub.w	r8, r8, r1
 800bfd4:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800bfd8:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800bfdc:	fa1f f888 	uxth.w	r8, r8
 800bfe0:	1419      	asrs	r1, r3, #16
 800bfe2:	454e      	cmp	r6, r9
 800bfe4:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800bfe8:	f84a 3b04 	str.w	r3, [sl], #4
 800bfec:	d8e8      	bhi.n	800bfc0 <__mdiff+0x80>
 800bfee:	1b33      	subs	r3, r6, r4
 800bff0:	3b15      	subs	r3, #21
 800bff2:	f023 0303 	bic.w	r3, r3, #3
 800bff6:	3304      	adds	r3, #4
 800bff8:	3415      	adds	r4, #21
 800bffa:	42a6      	cmp	r6, r4
 800bffc:	bf38      	it	cc
 800bffe:	2304      	movcc	r3, #4
 800c000:	441d      	add	r5, r3
 800c002:	4473      	add	r3, lr
 800c004:	469e      	mov	lr, r3
 800c006:	462e      	mov	r6, r5
 800c008:	4566      	cmp	r6, ip
 800c00a:	d30e      	bcc.n	800c02a <__mdiff+0xea>
 800c00c:	f10c 0203 	add.w	r2, ip, #3
 800c010:	1b52      	subs	r2, r2, r5
 800c012:	f022 0203 	bic.w	r2, r2, #3
 800c016:	3d03      	subs	r5, #3
 800c018:	45ac      	cmp	ip, r5
 800c01a:	bf38      	it	cc
 800c01c:	2200      	movcc	r2, #0
 800c01e:	4413      	add	r3, r2
 800c020:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800c024:	b17a      	cbz	r2, 800c046 <__mdiff+0x106>
 800c026:	6107      	str	r7, [r0, #16]
 800c028:	e7a4      	b.n	800bf74 <__mdiff+0x34>
 800c02a:	f856 8b04 	ldr.w	r8, [r6], #4
 800c02e:	fa11 f288 	uxtah	r2, r1, r8
 800c032:	1414      	asrs	r4, r2, #16
 800c034:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800c038:	b292      	uxth	r2, r2
 800c03a:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800c03e:	f84e 2b04 	str.w	r2, [lr], #4
 800c042:	1421      	asrs	r1, r4, #16
 800c044:	e7e0      	b.n	800c008 <__mdiff+0xc8>
 800c046:	3f01      	subs	r7, #1
 800c048:	e7ea      	b.n	800c020 <__mdiff+0xe0>
 800c04a:	bf00      	nop
 800c04c:	0800d9c8 	.word	0x0800d9c8
 800c050:	0800d9d9 	.word	0x0800d9d9

0800c054 <__d2b>:
 800c054:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c058:	460f      	mov	r7, r1
 800c05a:	2101      	movs	r1, #1
 800c05c:	ec59 8b10 	vmov	r8, r9, d0
 800c060:	4616      	mov	r6, r2
 800c062:	f7ff fcd5 	bl	800ba10 <_Balloc>
 800c066:	4604      	mov	r4, r0
 800c068:	b930      	cbnz	r0, 800c078 <__d2b+0x24>
 800c06a:	4602      	mov	r2, r0
 800c06c:	4b24      	ldr	r3, [pc, #144]	; (800c100 <__d2b+0xac>)
 800c06e:	4825      	ldr	r0, [pc, #148]	; (800c104 <__d2b+0xb0>)
 800c070:	f240 310f 	movw	r1, #783	; 0x30f
 800c074:	f000 fc24 	bl	800c8c0 <__assert_func>
 800c078:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800c07c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c080:	bb2d      	cbnz	r5, 800c0ce <__d2b+0x7a>
 800c082:	9301      	str	r3, [sp, #4]
 800c084:	f1b8 0300 	subs.w	r3, r8, #0
 800c088:	d026      	beq.n	800c0d8 <__d2b+0x84>
 800c08a:	4668      	mov	r0, sp
 800c08c:	9300      	str	r3, [sp, #0]
 800c08e:	f7ff fd87 	bl	800bba0 <__lo0bits>
 800c092:	e9dd 1200 	ldrd	r1, r2, [sp]
 800c096:	b1e8      	cbz	r0, 800c0d4 <__d2b+0x80>
 800c098:	f1c0 0320 	rsb	r3, r0, #32
 800c09c:	fa02 f303 	lsl.w	r3, r2, r3
 800c0a0:	430b      	orrs	r3, r1
 800c0a2:	40c2      	lsrs	r2, r0
 800c0a4:	6163      	str	r3, [r4, #20]
 800c0a6:	9201      	str	r2, [sp, #4]
 800c0a8:	9b01      	ldr	r3, [sp, #4]
 800c0aa:	61a3      	str	r3, [r4, #24]
 800c0ac:	2b00      	cmp	r3, #0
 800c0ae:	bf14      	ite	ne
 800c0b0:	2202      	movne	r2, #2
 800c0b2:	2201      	moveq	r2, #1
 800c0b4:	6122      	str	r2, [r4, #16]
 800c0b6:	b1bd      	cbz	r5, 800c0e8 <__d2b+0x94>
 800c0b8:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800c0bc:	4405      	add	r5, r0
 800c0be:	603d      	str	r5, [r7, #0]
 800c0c0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800c0c4:	6030      	str	r0, [r6, #0]
 800c0c6:	4620      	mov	r0, r4
 800c0c8:	b003      	add	sp, #12
 800c0ca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c0ce:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c0d2:	e7d6      	b.n	800c082 <__d2b+0x2e>
 800c0d4:	6161      	str	r1, [r4, #20]
 800c0d6:	e7e7      	b.n	800c0a8 <__d2b+0x54>
 800c0d8:	a801      	add	r0, sp, #4
 800c0da:	f7ff fd61 	bl	800bba0 <__lo0bits>
 800c0de:	9b01      	ldr	r3, [sp, #4]
 800c0e0:	6163      	str	r3, [r4, #20]
 800c0e2:	3020      	adds	r0, #32
 800c0e4:	2201      	movs	r2, #1
 800c0e6:	e7e5      	b.n	800c0b4 <__d2b+0x60>
 800c0e8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c0ec:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800c0f0:	6038      	str	r0, [r7, #0]
 800c0f2:	6918      	ldr	r0, [r3, #16]
 800c0f4:	f7ff fd34 	bl	800bb60 <__hi0bits>
 800c0f8:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c0fc:	e7e2      	b.n	800c0c4 <__d2b+0x70>
 800c0fe:	bf00      	nop
 800c100:	0800d9c8 	.word	0x0800d9c8
 800c104:	0800d9d9 	.word	0x0800d9d9

0800c108 <__ascii_wctomb>:
 800c108:	b149      	cbz	r1, 800c11e <__ascii_wctomb+0x16>
 800c10a:	2aff      	cmp	r2, #255	; 0xff
 800c10c:	bf85      	ittet	hi
 800c10e:	238a      	movhi	r3, #138	; 0x8a
 800c110:	6003      	strhi	r3, [r0, #0]
 800c112:	700a      	strbls	r2, [r1, #0]
 800c114:	f04f 30ff 	movhi.w	r0, #4294967295
 800c118:	bf98      	it	ls
 800c11a:	2001      	movls	r0, #1
 800c11c:	4770      	bx	lr
 800c11e:	4608      	mov	r0, r1
 800c120:	4770      	bx	lr

0800c122 <__ssputs_r>:
 800c122:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c126:	688e      	ldr	r6, [r1, #8]
 800c128:	461f      	mov	r7, r3
 800c12a:	42be      	cmp	r6, r7
 800c12c:	680b      	ldr	r3, [r1, #0]
 800c12e:	4682      	mov	sl, r0
 800c130:	460c      	mov	r4, r1
 800c132:	4690      	mov	r8, r2
 800c134:	d82c      	bhi.n	800c190 <__ssputs_r+0x6e>
 800c136:	898a      	ldrh	r2, [r1, #12]
 800c138:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c13c:	d026      	beq.n	800c18c <__ssputs_r+0x6a>
 800c13e:	6965      	ldr	r5, [r4, #20]
 800c140:	6909      	ldr	r1, [r1, #16]
 800c142:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c146:	eba3 0901 	sub.w	r9, r3, r1
 800c14a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c14e:	1c7b      	adds	r3, r7, #1
 800c150:	444b      	add	r3, r9
 800c152:	106d      	asrs	r5, r5, #1
 800c154:	429d      	cmp	r5, r3
 800c156:	bf38      	it	cc
 800c158:	461d      	movcc	r5, r3
 800c15a:	0553      	lsls	r3, r2, #21
 800c15c:	d527      	bpl.n	800c1ae <__ssputs_r+0x8c>
 800c15e:	4629      	mov	r1, r5
 800c160:	f7fd fd22 	bl	8009ba8 <_malloc_r>
 800c164:	4606      	mov	r6, r0
 800c166:	b360      	cbz	r0, 800c1c2 <__ssputs_r+0xa0>
 800c168:	6921      	ldr	r1, [r4, #16]
 800c16a:	464a      	mov	r2, r9
 800c16c:	f7fe fd68 	bl	800ac40 <memcpy>
 800c170:	89a3      	ldrh	r3, [r4, #12]
 800c172:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c176:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c17a:	81a3      	strh	r3, [r4, #12]
 800c17c:	6126      	str	r6, [r4, #16]
 800c17e:	6165      	str	r5, [r4, #20]
 800c180:	444e      	add	r6, r9
 800c182:	eba5 0509 	sub.w	r5, r5, r9
 800c186:	6026      	str	r6, [r4, #0]
 800c188:	60a5      	str	r5, [r4, #8]
 800c18a:	463e      	mov	r6, r7
 800c18c:	42be      	cmp	r6, r7
 800c18e:	d900      	bls.n	800c192 <__ssputs_r+0x70>
 800c190:	463e      	mov	r6, r7
 800c192:	6820      	ldr	r0, [r4, #0]
 800c194:	4632      	mov	r2, r6
 800c196:	4641      	mov	r1, r8
 800c198:	f7fe fc52 	bl	800aa40 <memmove>
 800c19c:	68a3      	ldr	r3, [r4, #8]
 800c19e:	1b9b      	subs	r3, r3, r6
 800c1a0:	60a3      	str	r3, [r4, #8]
 800c1a2:	6823      	ldr	r3, [r4, #0]
 800c1a4:	4433      	add	r3, r6
 800c1a6:	6023      	str	r3, [r4, #0]
 800c1a8:	2000      	movs	r0, #0
 800c1aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c1ae:	462a      	mov	r2, r5
 800c1b0:	f000 fbba 	bl	800c928 <_realloc_r>
 800c1b4:	4606      	mov	r6, r0
 800c1b6:	2800      	cmp	r0, #0
 800c1b8:	d1e0      	bne.n	800c17c <__ssputs_r+0x5a>
 800c1ba:	6921      	ldr	r1, [r4, #16]
 800c1bc:	4650      	mov	r0, sl
 800c1be:	f7ff fbc9 	bl	800b954 <_free_r>
 800c1c2:	230c      	movs	r3, #12
 800c1c4:	f8ca 3000 	str.w	r3, [sl]
 800c1c8:	89a3      	ldrh	r3, [r4, #12]
 800c1ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c1ce:	81a3      	strh	r3, [r4, #12]
 800c1d0:	f04f 30ff 	mov.w	r0, #4294967295
 800c1d4:	e7e9      	b.n	800c1aa <__ssputs_r+0x88>
	...

0800c1d8 <_svfiprintf_r>:
 800c1d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c1dc:	4698      	mov	r8, r3
 800c1de:	898b      	ldrh	r3, [r1, #12]
 800c1e0:	061b      	lsls	r3, r3, #24
 800c1e2:	b09d      	sub	sp, #116	; 0x74
 800c1e4:	4607      	mov	r7, r0
 800c1e6:	460d      	mov	r5, r1
 800c1e8:	4614      	mov	r4, r2
 800c1ea:	d50e      	bpl.n	800c20a <_svfiprintf_r+0x32>
 800c1ec:	690b      	ldr	r3, [r1, #16]
 800c1ee:	b963      	cbnz	r3, 800c20a <_svfiprintf_r+0x32>
 800c1f0:	2140      	movs	r1, #64	; 0x40
 800c1f2:	f7fd fcd9 	bl	8009ba8 <_malloc_r>
 800c1f6:	6028      	str	r0, [r5, #0]
 800c1f8:	6128      	str	r0, [r5, #16]
 800c1fa:	b920      	cbnz	r0, 800c206 <_svfiprintf_r+0x2e>
 800c1fc:	230c      	movs	r3, #12
 800c1fe:	603b      	str	r3, [r7, #0]
 800c200:	f04f 30ff 	mov.w	r0, #4294967295
 800c204:	e0d0      	b.n	800c3a8 <_svfiprintf_r+0x1d0>
 800c206:	2340      	movs	r3, #64	; 0x40
 800c208:	616b      	str	r3, [r5, #20]
 800c20a:	2300      	movs	r3, #0
 800c20c:	9309      	str	r3, [sp, #36]	; 0x24
 800c20e:	2320      	movs	r3, #32
 800c210:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c214:	f8cd 800c 	str.w	r8, [sp, #12]
 800c218:	2330      	movs	r3, #48	; 0x30
 800c21a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800c3c0 <_svfiprintf_r+0x1e8>
 800c21e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c222:	f04f 0901 	mov.w	r9, #1
 800c226:	4623      	mov	r3, r4
 800c228:	469a      	mov	sl, r3
 800c22a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c22e:	b10a      	cbz	r2, 800c234 <_svfiprintf_r+0x5c>
 800c230:	2a25      	cmp	r2, #37	; 0x25
 800c232:	d1f9      	bne.n	800c228 <_svfiprintf_r+0x50>
 800c234:	ebba 0b04 	subs.w	fp, sl, r4
 800c238:	d00b      	beq.n	800c252 <_svfiprintf_r+0x7a>
 800c23a:	465b      	mov	r3, fp
 800c23c:	4622      	mov	r2, r4
 800c23e:	4629      	mov	r1, r5
 800c240:	4638      	mov	r0, r7
 800c242:	f7ff ff6e 	bl	800c122 <__ssputs_r>
 800c246:	3001      	adds	r0, #1
 800c248:	f000 80a9 	beq.w	800c39e <_svfiprintf_r+0x1c6>
 800c24c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c24e:	445a      	add	r2, fp
 800c250:	9209      	str	r2, [sp, #36]	; 0x24
 800c252:	f89a 3000 	ldrb.w	r3, [sl]
 800c256:	2b00      	cmp	r3, #0
 800c258:	f000 80a1 	beq.w	800c39e <_svfiprintf_r+0x1c6>
 800c25c:	2300      	movs	r3, #0
 800c25e:	f04f 32ff 	mov.w	r2, #4294967295
 800c262:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c266:	f10a 0a01 	add.w	sl, sl, #1
 800c26a:	9304      	str	r3, [sp, #16]
 800c26c:	9307      	str	r3, [sp, #28]
 800c26e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c272:	931a      	str	r3, [sp, #104]	; 0x68
 800c274:	4654      	mov	r4, sl
 800c276:	2205      	movs	r2, #5
 800c278:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c27c:	4850      	ldr	r0, [pc, #320]	; (800c3c0 <_svfiprintf_r+0x1e8>)
 800c27e:	f7f3 ff7f 	bl	8000180 <memchr>
 800c282:	9a04      	ldr	r2, [sp, #16]
 800c284:	b9d8      	cbnz	r0, 800c2be <_svfiprintf_r+0xe6>
 800c286:	06d0      	lsls	r0, r2, #27
 800c288:	bf44      	itt	mi
 800c28a:	2320      	movmi	r3, #32
 800c28c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c290:	0711      	lsls	r1, r2, #28
 800c292:	bf44      	itt	mi
 800c294:	232b      	movmi	r3, #43	; 0x2b
 800c296:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c29a:	f89a 3000 	ldrb.w	r3, [sl]
 800c29e:	2b2a      	cmp	r3, #42	; 0x2a
 800c2a0:	d015      	beq.n	800c2ce <_svfiprintf_r+0xf6>
 800c2a2:	9a07      	ldr	r2, [sp, #28]
 800c2a4:	4654      	mov	r4, sl
 800c2a6:	2000      	movs	r0, #0
 800c2a8:	f04f 0c0a 	mov.w	ip, #10
 800c2ac:	4621      	mov	r1, r4
 800c2ae:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c2b2:	3b30      	subs	r3, #48	; 0x30
 800c2b4:	2b09      	cmp	r3, #9
 800c2b6:	d94d      	bls.n	800c354 <_svfiprintf_r+0x17c>
 800c2b8:	b1b0      	cbz	r0, 800c2e8 <_svfiprintf_r+0x110>
 800c2ba:	9207      	str	r2, [sp, #28]
 800c2bc:	e014      	b.n	800c2e8 <_svfiprintf_r+0x110>
 800c2be:	eba0 0308 	sub.w	r3, r0, r8
 800c2c2:	fa09 f303 	lsl.w	r3, r9, r3
 800c2c6:	4313      	orrs	r3, r2
 800c2c8:	9304      	str	r3, [sp, #16]
 800c2ca:	46a2      	mov	sl, r4
 800c2cc:	e7d2      	b.n	800c274 <_svfiprintf_r+0x9c>
 800c2ce:	9b03      	ldr	r3, [sp, #12]
 800c2d0:	1d19      	adds	r1, r3, #4
 800c2d2:	681b      	ldr	r3, [r3, #0]
 800c2d4:	9103      	str	r1, [sp, #12]
 800c2d6:	2b00      	cmp	r3, #0
 800c2d8:	bfbb      	ittet	lt
 800c2da:	425b      	neglt	r3, r3
 800c2dc:	f042 0202 	orrlt.w	r2, r2, #2
 800c2e0:	9307      	strge	r3, [sp, #28]
 800c2e2:	9307      	strlt	r3, [sp, #28]
 800c2e4:	bfb8      	it	lt
 800c2e6:	9204      	strlt	r2, [sp, #16]
 800c2e8:	7823      	ldrb	r3, [r4, #0]
 800c2ea:	2b2e      	cmp	r3, #46	; 0x2e
 800c2ec:	d10c      	bne.n	800c308 <_svfiprintf_r+0x130>
 800c2ee:	7863      	ldrb	r3, [r4, #1]
 800c2f0:	2b2a      	cmp	r3, #42	; 0x2a
 800c2f2:	d134      	bne.n	800c35e <_svfiprintf_r+0x186>
 800c2f4:	9b03      	ldr	r3, [sp, #12]
 800c2f6:	1d1a      	adds	r2, r3, #4
 800c2f8:	681b      	ldr	r3, [r3, #0]
 800c2fa:	9203      	str	r2, [sp, #12]
 800c2fc:	2b00      	cmp	r3, #0
 800c2fe:	bfb8      	it	lt
 800c300:	f04f 33ff 	movlt.w	r3, #4294967295
 800c304:	3402      	adds	r4, #2
 800c306:	9305      	str	r3, [sp, #20]
 800c308:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800c3d0 <_svfiprintf_r+0x1f8>
 800c30c:	7821      	ldrb	r1, [r4, #0]
 800c30e:	2203      	movs	r2, #3
 800c310:	4650      	mov	r0, sl
 800c312:	f7f3 ff35 	bl	8000180 <memchr>
 800c316:	b138      	cbz	r0, 800c328 <_svfiprintf_r+0x150>
 800c318:	9b04      	ldr	r3, [sp, #16]
 800c31a:	eba0 000a 	sub.w	r0, r0, sl
 800c31e:	2240      	movs	r2, #64	; 0x40
 800c320:	4082      	lsls	r2, r0
 800c322:	4313      	orrs	r3, r2
 800c324:	3401      	adds	r4, #1
 800c326:	9304      	str	r3, [sp, #16]
 800c328:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c32c:	4825      	ldr	r0, [pc, #148]	; (800c3c4 <_svfiprintf_r+0x1ec>)
 800c32e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c332:	2206      	movs	r2, #6
 800c334:	f7f3 ff24 	bl	8000180 <memchr>
 800c338:	2800      	cmp	r0, #0
 800c33a:	d038      	beq.n	800c3ae <_svfiprintf_r+0x1d6>
 800c33c:	4b22      	ldr	r3, [pc, #136]	; (800c3c8 <_svfiprintf_r+0x1f0>)
 800c33e:	bb1b      	cbnz	r3, 800c388 <_svfiprintf_r+0x1b0>
 800c340:	9b03      	ldr	r3, [sp, #12]
 800c342:	3307      	adds	r3, #7
 800c344:	f023 0307 	bic.w	r3, r3, #7
 800c348:	3308      	adds	r3, #8
 800c34a:	9303      	str	r3, [sp, #12]
 800c34c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c34e:	4433      	add	r3, r6
 800c350:	9309      	str	r3, [sp, #36]	; 0x24
 800c352:	e768      	b.n	800c226 <_svfiprintf_r+0x4e>
 800c354:	fb0c 3202 	mla	r2, ip, r2, r3
 800c358:	460c      	mov	r4, r1
 800c35a:	2001      	movs	r0, #1
 800c35c:	e7a6      	b.n	800c2ac <_svfiprintf_r+0xd4>
 800c35e:	2300      	movs	r3, #0
 800c360:	3401      	adds	r4, #1
 800c362:	9305      	str	r3, [sp, #20]
 800c364:	4619      	mov	r1, r3
 800c366:	f04f 0c0a 	mov.w	ip, #10
 800c36a:	4620      	mov	r0, r4
 800c36c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c370:	3a30      	subs	r2, #48	; 0x30
 800c372:	2a09      	cmp	r2, #9
 800c374:	d903      	bls.n	800c37e <_svfiprintf_r+0x1a6>
 800c376:	2b00      	cmp	r3, #0
 800c378:	d0c6      	beq.n	800c308 <_svfiprintf_r+0x130>
 800c37a:	9105      	str	r1, [sp, #20]
 800c37c:	e7c4      	b.n	800c308 <_svfiprintf_r+0x130>
 800c37e:	fb0c 2101 	mla	r1, ip, r1, r2
 800c382:	4604      	mov	r4, r0
 800c384:	2301      	movs	r3, #1
 800c386:	e7f0      	b.n	800c36a <_svfiprintf_r+0x192>
 800c388:	ab03      	add	r3, sp, #12
 800c38a:	9300      	str	r3, [sp, #0]
 800c38c:	462a      	mov	r2, r5
 800c38e:	4b0f      	ldr	r3, [pc, #60]	; (800c3cc <_svfiprintf_r+0x1f4>)
 800c390:	a904      	add	r1, sp, #16
 800c392:	4638      	mov	r0, r7
 800c394:	f7fd fd34 	bl	8009e00 <_printf_float>
 800c398:	1c42      	adds	r2, r0, #1
 800c39a:	4606      	mov	r6, r0
 800c39c:	d1d6      	bne.n	800c34c <_svfiprintf_r+0x174>
 800c39e:	89ab      	ldrh	r3, [r5, #12]
 800c3a0:	065b      	lsls	r3, r3, #25
 800c3a2:	f53f af2d 	bmi.w	800c200 <_svfiprintf_r+0x28>
 800c3a6:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c3a8:	b01d      	add	sp, #116	; 0x74
 800c3aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c3ae:	ab03      	add	r3, sp, #12
 800c3b0:	9300      	str	r3, [sp, #0]
 800c3b2:	462a      	mov	r2, r5
 800c3b4:	4b05      	ldr	r3, [pc, #20]	; (800c3cc <_svfiprintf_r+0x1f4>)
 800c3b6:	a904      	add	r1, sp, #16
 800c3b8:	4638      	mov	r0, r7
 800c3ba:	f7fd ffc5 	bl	800a348 <_printf_i>
 800c3be:	e7eb      	b.n	800c398 <_svfiprintf_r+0x1c0>
 800c3c0:	0800db34 	.word	0x0800db34
 800c3c4:	0800db3e 	.word	0x0800db3e
 800c3c8:	08009e01 	.word	0x08009e01
 800c3cc:	0800c123 	.word	0x0800c123
 800c3d0:	0800db3a 	.word	0x0800db3a

0800c3d4 <__sfputc_r>:
 800c3d4:	6893      	ldr	r3, [r2, #8]
 800c3d6:	3b01      	subs	r3, #1
 800c3d8:	2b00      	cmp	r3, #0
 800c3da:	b410      	push	{r4}
 800c3dc:	6093      	str	r3, [r2, #8]
 800c3de:	da08      	bge.n	800c3f2 <__sfputc_r+0x1e>
 800c3e0:	6994      	ldr	r4, [r2, #24]
 800c3e2:	42a3      	cmp	r3, r4
 800c3e4:	db01      	blt.n	800c3ea <__sfputc_r+0x16>
 800c3e6:	290a      	cmp	r1, #10
 800c3e8:	d103      	bne.n	800c3f2 <__sfputc_r+0x1e>
 800c3ea:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c3ee:	f7fe ba82 	b.w	800a8f6 <__swbuf_r>
 800c3f2:	6813      	ldr	r3, [r2, #0]
 800c3f4:	1c58      	adds	r0, r3, #1
 800c3f6:	6010      	str	r0, [r2, #0]
 800c3f8:	7019      	strb	r1, [r3, #0]
 800c3fa:	4608      	mov	r0, r1
 800c3fc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c400:	4770      	bx	lr

0800c402 <__sfputs_r>:
 800c402:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c404:	4606      	mov	r6, r0
 800c406:	460f      	mov	r7, r1
 800c408:	4614      	mov	r4, r2
 800c40a:	18d5      	adds	r5, r2, r3
 800c40c:	42ac      	cmp	r4, r5
 800c40e:	d101      	bne.n	800c414 <__sfputs_r+0x12>
 800c410:	2000      	movs	r0, #0
 800c412:	e007      	b.n	800c424 <__sfputs_r+0x22>
 800c414:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c418:	463a      	mov	r2, r7
 800c41a:	4630      	mov	r0, r6
 800c41c:	f7ff ffda 	bl	800c3d4 <__sfputc_r>
 800c420:	1c43      	adds	r3, r0, #1
 800c422:	d1f3      	bne.n	800c40c <__sfputs_r+0xa>
 800c424:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c428 <_vfiprintf_r>:
 800c428:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c42c:	460d      	mov	r5, r1
 800c42e:	b09d      	sub	sp, #116	; 0x74
 800c430:	4614      	mov	r4, r2
 800c432:	4698      	mov	r8, r3
 800c434:	4606      	mov	r6, r0
 800c436:	b118      	cbz	r0, 800c440 <_vfiprintf_r+0x18>
 800c438:	6a03      	ldr	r3, [r0, #32]
 800c43a:	b90b      	cbnz	r3, 800c440 <_vfiprintf_r+0x18>
 800c43c:	f7fe f920 	bl	800a680 <__sinit>
 800c440:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c442:	07d9      	lsls	r1, r3, #31
 800c444:	d405      	bmi.n	800c452 <_vfiprintf_r+0x2a>
 800c446:	89ab      	ldrh	r3, [r5, #12]
 800c448:	059a      	lsls	r2, r3, #22
 800c44a:	d402      	bmi.n	800c452 <_vfiprintf_r+0x2a>
 800c44c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c44e:	f7fe fbf5 	bl	800ac3c <__retarget_lock_acquire_recursive>
 800c452:	89ab      	ldrh	r3, [r5, #12]
 800c454:	071b      	lsls	r3, r3, #28
 800c456:	d501      	bpl.n	800c45c <_vfiprintf_r+0x34>
 800c458:	692b      	ldr	r3, [r5, #16]
 800c45a:	b99b      	cbnz	r3, 800c484 <_vfiprintf_r+0x5c>
 800c45c:	4629      	mov	r1, r5
 800c45e:	4630      	mov	r0, r6
 800c460:	f7fe fa86 	bl	800a970 <__swsetup_r>
 800c464:	b170      	cbz	r0, 800c484 <_vfiprintf_r+0x5c>
 800c466:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c468:	07dc      	lsls	r4, r3, #31
 800c46a:	d504      	bpl.n	800c476 <_vfiprintf_r+0x4e>
 800c46c:	f04f 30ff 	mov.w	r0, #4294967295
 800c470:	b01d      	add	sp, #116	; 0x74
 800c472:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c476:	89ab      	ldrh	r3, [r5, #12]
 800c478:	0598      	lsls	r0, r3, #22
 800c47a:	d4f7      	bmi.n	800c46c <_vfiprintf_r+0x44>
 800c47c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c47e:	f7fe fbde 	bl	800ac3e <__retarget_lock_release_recursive>
 800c482:	e7f3      	b.n	800c46c <_vfiprintf_r+0x44>
 800c484:	2300      	movs	r3, #0
 800c486:	9309      	str	r3, [sp, #36]	; 0x24
 800c488:	2320      	movs	r3, #32
 800c48a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c48e:	f8cd 800c 	str.w	r8, [sp, #12]
 800c492:	2330      	movs	r3, #48	; 0x30
 800c494:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800c648 <_vfiprintf_r+0x220>
 800c498:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c49c:	f04f 0901 	mov.w	r9, #1
 800c4a0:	4623      	mov	r3, r4
 800c4a2:	469a      	mov	sl, r3
 800c4a4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c4a8:	b10a      	cbz	r2, 800c4ae <_vfiprintf_r+0x86>
 800c4aa:	2a25      	cmp	r2, #37	; 0x25
 800c4ac:	d1f9      	bne.n	800c4a2 <_vfiprintf_r+0x7a>
 800c4ae:	ebba 0b04 	subs.w	fp, sl, r4
 800c4b2:	d00b      	beq.n	800c4cc <_vfiprintf_r+0xa4>
 800c4b4:	465b      	mov	r3, fp
 800c4b6:	4622      	mov	r2, r4
 800c4b8:	4629      	mov	r1, r5
 800c4ba:	4630      	mov	r0, r6
 800c4bc:	f7ff ffa1 	bl	800c402 <__sfputs_r>
 800c4c0:	3001      	adds	r0, #1
 800c4c2:	f000 80a9 	beq.w	800c618 <_vfiprintf_r+0x1f0>
 800c4c6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c4c8:	445a      	add	r2, fp
 800c4ca:	9209      	str	r2, [sp, #36]	; 0x24
 800c4cc:	f89a 3000 	ldrb.w	r3, [sl]
 800c4d0:	2b00      	cmp	r3, #0
 800c4d2:	f000 80a1 	beq.w	800c618 <_vfiprintf_r+0x1f0>
 800c4d6:	2300      	movs	r3, #0
 800c4d8:	f04f 32ff 	mov.w	r2, #4294967295
 800c4dc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c4e0:	f10a 0a01 	add.w	sl, sl, #1
 800c4e4:	9304      	str	r3, [sp, #16]
 800c4e6:	9307      	str	r3, [sp, #28]
 800c4e8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c4ec:	931a      	str	r3, [sp, #104]	; 0x68
 800c4ee:	4654      	mov	r4, sl
 800c4f0:	2205      	movs	r2, #5
 800c4f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c4f6:	4854      	ldr	r0, [pc, #336]	; (800c648 <_vfiprintf_r+0x220>)
 800c4f8:	f7f3 fe42 	bl	8000180 <memchr>
 800c4fc:	9a04      	ldr	r2, [sp, #16]
 800c4fe:	b9d8      	cbnz	r0, 800c538 <_vfiprintf_r+0x110>
 800c500:	06d1      	lsls	r1, r2, #27
 800c502:	bf44      	itt	mi
 800c504:	2320      	movmi	r3, #32
 800c506:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c50a:	0713      	lsls	r3, r2, #28
 800c50c:	bf44      	itt	mi
 800c50e:	232b      	movmi	r3, #43	; 0x2b
 800c510:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c514:	f89a 3000 	ldrb.w	r3, [sl]
 800c518:	2b2a      	cmp	r3, #42	; 0x2a
 800c51a:	d015      	beq.n	800c548 <_vfiprintf_r+0x120>
 800c51c:	9a07      	ldr	r2, [sp, #28]
 800c51e:	4654      	mov	r4, sl
 800c520:	2000      	movs	r0, #0
 800c522:	f04f 0c0a 	mov.w	ip, #10
 800c526:	4621      	mov	r1, r4
 800c528:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c52c:	3b30      	subs	r3, #48	; 0x30
 800c52e:	2b09      	cmp	r3, #9
 800c530:	d94d      	bls.n	800c5ce <_vfiprintf_r+0x1a6>
 800c532:	b1b0      	cbz	r0, 800c562 <_vfiprintf_r+0x13a>
 800c534:	9207      	str	r2, [sp, #28]
 800c536:	e014      	b.n	800c562 <_vfiprintf_r+0x13a>
 800c538:	eba0 0308 	sub.w	r3, r0, r8
 800c53c:	fa09 f303 	lsl.w	r3, r9, r3
 800c540:	4313      	orrs	r3, r2
 800c542:	9304      	str	r3, [sp, #16]
 800c544:	46a2      	mov	sl, r4
 800c546:	e7d2      	b.n	800c4ee <_vfiprintf_r+0xc6>
 800c548:	9b03      	ldr	r3, [sp, #12]
 800c54a:	1d19      	adds	r1, r3, #4
 800c54c:	681b      	ldr	r3, [r3, #0]
 800c54e:	9103      	str	r1, [sp, #12]
 800c550:	2b00      	cmp	r3, #0
 800c552:	bfbb      	ittet	lt
 800c554:	425b      	neglt	r3, r3
 800c556:	f042 0202 	orrlt.w	r2, r2, #2
 800c55a:	9307      	strge	r3, [sp, #28]
 800c55c:	9307      	strlt	r3, [sp, #28]
 800c55e:	bfb8      	it	lt
 800c560:	9204      	strlt	r2, [sp, #16]
 800c562:	7823      	ldrb	r3, [r4, #0]
 800c564:	2b2e      	cmp	r3, #46	; 0x2e
 800c566:	d10c      	bne.n	800c582 <_vfiprintf_r+0x15a>
 800c568:	7863      	ldrb	r3, [r4, #1]
 800c56a:	2b2a      	cmp	r3, #42	; 0x2a
 800c56c:	d134      	bne.n	800c5d8 <_vfiprintf_r+0x1b0>
 800c56e:	9b03      	ldr	r3, [sp, #12]
 800c570:	1d1a      	adds	r2, r3, #4
 800c572:	681b      	ldr	r3, [r3, #0]
 800c574:	9203      	str	r2, [sp, #12]
 800c576:	2b00      	cmp	r3, #0
 800c578:	bfb8      	it	lt
 800c57a:	f04f 33ff 	movlt.w	r3, #4294967295
 800c57e:	3402      	adds	r4, #2
 800c580:	9305      	str	r3, [sp, #20]
 800c582:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800c658 <_vfiprintf_r+0x230>
 800c586:	7821      	ldrb	r1, [r4, #0]
 800c588:	2203      	movs	r2, #3
 800c58a:	4650      	mov	r0, sl
 800c58c:	f7f3 fdf8 	bl	8000180 <memchr>
 800c590:	b138      	cbz	r0, 800c5a2 <_vfiprintf_r+0x17a>
 800c592:	9b04      	ldr	r3, [sp, #16]
 800c594:	eba0 000a 	sub.w	r0, r0, sl
 800c598:	2240      	movs	r2, #64	; 0x40
 800c59a:	4082      	lsls	r2, r0
 800c59c:	4313      	orrs	r3, r2
 800c59e:	3401      	adds	r4, #1
 800c5a0:	9304      	str	r3, [sp, #16]
 800c5a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c5a6:	4829      	ldr	r0, [pc, #164]	; (800c64c <_vfiprintf_r+0x224>)
 800c5a8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c5ac:	2206      	movs	r2, #6
 800c5ae:	f7f3 fde7 	bl	8000180 <memchr>
 800c5b2:	2800      	cmp	r0, #0
 800c5b4:	d03f      	beq.n	800c636 <_vfiprintf_r+0x20e>
 800c5b6:	4b26      	ldr	r3, [pc, #152]	; (800c650 <_vfiprintf_r+0x228>)
 800c5b8:	bb1b      	cbnz	r3, 800c602 <_vfiprintf_r+0x1da>
 800c5ba:	9b03      	ldr	r3, [sp, #12]
 800c5bc:	3307      	adds	r3, #7
 800c5be:	f023 0307 	bic.w	r3, r3, #7
 800c5c2:	3308      	adds	r3, #8
 800c5c4:	9303      	str	r3, [sp, #12]
 800c5c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c5c8:	443b      	add	r3, r7
 800c5ca:	9309      	str	r3, [sp, #36]	; 0x24
 800c5cc:	e768      	b.n	800c4a0 <_vfiprintf_r+0x78>
 800c5ce:	fb0c 3202 	mla	r2, ip, r2, r3
 800c5d2:	460c      	mov	r4, r1
 800c5d4:	2001      	movs	r0, #1
 800c5d6:	e7a6      	b.n	800c526 <_vfiprintf_r+0xfe>
 800c5d8:	2300      	movs	r3, #0
 800c5da:	3401      	adds	r4, #1
 800c5dc:	9305      	str	r3, [sp, #20]
 800c5de:	4619      	mov	r1, r3
 800c5e0:	f04f 0c0a 	mov.w	ip, #10
 800c5e4:	4620      	mov	r0, r4
 800c5e6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c5ea:	3a30      	subs	r2, #48	; 0x30
 800c5ec:	2a09      	cmp	r2, #9
 800c5ee:	d903      	bls.n	800c5f8 <_vfiprintf_r+0x1d0>
 800c5f0:	2b00      	cmp	r3, #0
 800c5f2:	d0c6      	beq.n	800c582 <_vfiprintf_r+0x15a>
 800c5f4:	9105      	str	r1, [sp, #20]
 800c5f6:	e7c4      	b.n	800c582 <_vfiprintf_r+0x15a>
 800c5f8:	fb0c 2101 	mla	r1, ip, r1, r2
 800c5fc:	4604      	mov	r4, r0
 800c5fe:	2301      	movs	r3, #1
 800c600:	e7f0      	b.n	800c5e4 <_vfiprintf_r+0x1bc>
 800c602:	ab03      	add	r3, sp, #12
 800c604:	9300      	str	r3, [sp, #0]
 800c606:	462a      	mov	r2, r5
 800c608:	4b12      	ldr	r3, [pc, #72]	; (800c654 <_vfiprintf_r+0x22c>)
 800c60a:	a904      	add	r1, sp, #16
 800c60c:	4630      	mov	r0, r6
 800c60e:	f7fd fbf7 	bl	8009e00 <_printf_float>
 800c612:	4607      	mov	r7, r0
 800c614:	1c78      	adds	r0, r7, #1
 800c616:	d1d6      	bne.n	800c5c6 <_vfiprintf_r+0x19e>
 800c618:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c61a:	07d9      	lsls	r1, r3, #31
 800c61c:	d405      	bmi.n	800c62a <_vfiprintf_r+0x202>
 800c61e:	89ab      	ldrh	r3, [r5, #12]
 800c620:	059a      	lsls	r2, r3, #22
 800c622:	d402      	bmi.n	800c62a <_vfiprintf_r+0x202>
 800c624:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c626:	f7fe fb0a 	bl	800ac3e <__retarget_lock_release_recursive>
 800c62a:	89ab      	ldrh	r3, [r5, #12]
 800c62c:	065b      	lsls	r3, r3, #25
 800c62e:	f53f af1d 	bmi.w	800c46c <_vfiprintf_r+0x44>
 800c632:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c634:	e71c      	b.n	800c470 <_vfiprintf_r+0x48>
 800c636:	ab03      	add	r3, sp, #12
 800c638:	9300      	str	r3, [sp, #0]
 800c63a:	462a      	mov	r2, r5
 800c63c:	4b05      	ldr	r3, [pc, #20]	; (800c654 <_vfiprintf_r+0x22c>)
 800c63e:	a904      	add	r1, sp, #16
 800c640:	4630      	mov	r0, r6
 800c642:	f7fd fe81 	bl	800a348 <_printf_i>
 800c646:	e7e4      	b.n	800c612 <_vfiprintf_r+0x1ea>
 800c648:	0800db34 	.word	0x0800db34
 800c64c:	0800db3e 	.word	0x0800db3e
 800c650:	08009e01 	.word	0x08009e01
 800c654:	0800c403 	.word	0x0800c403
 800c658:	0800db3a 	.word	0x0800db3a

0800c65c <__sflush_r>:
 800c65c:	898a      	ldrh	r2, [r1, #12]
 800c65e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c662:	4605      	mov	r5, r0
 800c664:	0710      	lsls	r0, r2, #28
 800c666:	460c      	mov	r4, r1
 800c668:	d458      	bmi.n	800c71c <__sflush_r+0xc0>
 800c66a:	684b      	ldr	r3, [r1, #4]
 800c66c:	2b00      	cmp	r3, #0
 800c66e:	dc05      	bgt.n	800c67c <__sflush_r+0x20>
 800c670:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c672:	2b00      	cmp	r3, #0
 800c674:	dc02      	bgt.n	800c67c <__sflush_r+0x20>
 800c676:	2000      	movs	r0, #0
 800c678:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c67c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c67e:	2e00      	cmp	r6, #0
 800c680:	d0f9      	beq.n	800c676 <__sflush_r+0x1a>
 800c682:	2300      	movs	r3, #0
 800c684:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c688:	682f      	ldr	r7, [r5, #0]
 800c68a:	6a21      	ldr	r1, [r4, #32]
 800c68c:	602b      	str	r3, [r5, #0]
 800c68e:	d032      	beq.n	800c6f6 <__sflush_r+0x9a>
 800c690:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c692:	89a3      	ldrh	r3, [r4, #12]
 800c694:	075a      	lsls	r2, r3, #29
 800c696:	d505      	bpl.n	800c6a4 <__sflush_r+0x48>
 800c698:	6863      	ldr	r3, [r4, #4]
 800c69a:	1ac0      	subs	r0, r0, r3
 800c69c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c69e:	b10b      	cbz	r3, 800c6a4 <__sflush_r+0x48>
 800c6a0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c6a2:	1ac0      	subs	r0, r0, r3
 800c6a4:	2300      	movs	r3, #0
 800c6a6:	4602      	mov	r2, r0
 800c6a8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c6aa:	6a21      	ldr	r1, [r4, #32]
 800c6ac:	4628      	mov	r0, r5
 800c6ae:	47b0      	blx	r6
 800c6b0:	1c43      	adds	r3, r0, #1
 800c6b2:	89a3      	ldrh	r3, [r4, #12]
 800c6b4:	d106      	bne.n	800c6c4 <__sflush_r+0x68>
 800c6b6:	6829      	ldr	r1, [r5, #0]
 800c6b8:	291d      	cmp	r1, #29
 800c6ba:	d82b      	bhi.n	800c714 <__sflush_r+0xb8>
 800c6bc:	4a29      	ldr	r2, [pc, #164]	; (800c764 <__sflush_r+0x108>)
 800c6be:	410a      	asrs	r2, r1
 800c6c0:	07d6      	lsls	r6, r2, #31
 800c6c2:	d427      	bmi.n	800c714 <__sflush_r+0xb8>
 800c6c4:	2200      	movs	r2, #0
 800c6c6:	6062      	str	r2, [r4, #4]
 800c6c8:	04d9      	lsls	r1, r3, #19
 800c6ca:	6922      	ldr	r2, [r4, #16]
 800c6cc:	6022      	str	r2, [r4, #0]
 800c6ce:	d504      	bpl.n	800c6da <__sflush_r+0x7e>
 800c6d0:	1c42      	adds	r2, r0, #1
 800c6d2:	d101      	bne.n	800c6d8 <__sflush_r+0x7c>
 800c6d4:	682b      	ldr	r3, [r5, #0]
 800c6d6:	b903      	cbnz	r3, 800c6da <__sflush_r+0x7e>
 800c6d8:	6560      	str	r0, [r4, #84]	; 0x54
 800c6da:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c6dc:	602f      	str	r7, [r5, #0]
 800c6de:	2900      	cmp	r1, #0
 800c6e0:	d0c9      	beq.n	800c676 <__sflush_r+0x1a>
 800c6e2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c6e6:	4299      	cmp	r1, r3
 800c6e8:	d002      	beq.n	800c6f0 <__sflush_r+0x94>
 800c6ea:	4628      	mov	r0, r5
 800c6ec:	f7ff f932 	bl	800b954 <_free_r>
 800c6f0:	2000      	movs	r0, #0
 800c6f2:	6360      	str	r0, [r4, #52]	; 0x34
 800c6f4:	e7c0      	b.n	800c678 <__sflush_r+0x1c>
 800c6f6:	2301      	movs	r3, #1
 800c6f8:	4628      	mov	r0, r5
 800c6fa:	47b0      	blx	r6
 800c6fc:	1c41      	adds	r1, r0, #1
 800c6fe:	d1c8      	bne.n	800c692 <__sflush_r+0x36>
 800c700:	682b      	ldr	r3, [r5, #0]
 800c702:	2b00      	cmp	r3, #0
 800c704:	d0c5      	beq.n	800c692 <__sflush_r+0x36>
 800c706:	2b1d      	cmp	r3, #29
 800c708:	d001      	beq.n	800c70e <__sflush_r+0xb2>
 800c70a:	2b16      	cmp	r3, #22
 800c70c:	d101      	bne.n	800c712 <__sflush_r+0xb6>
 800c70e:	602f      	str	r7, [r5, #0]
 800c710:	e7b1      	b.n	800c676 <__sflush_r+0x1a>
 800c712:	89a3      	ldrh	r3, [r4, #12]
 800c714:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c718:	81a3      	strh	r3, [r4, #12]
 800c71a:	e7ad      	b.n	800c678 <__sflush_r+0x1c>
 800c71c:	690f      	ldr	r7, [r1, #16]
 800c71e:	2f00      	cmp	r7, #0
 800c720:	d0a9      	beq.n	800c676 <__sflush_r+0x1a>
 800c722:	0793      	lsls	r3, r2, #30
 800c724:	680e      	ldr	r6, [r1, #0]
 800c726:	bf08      	it	eq
 800c728:	694b      	ldreq	r3, [r1, #20]
 800c72a:	600f      	str	r7, [r1, #0]
 800c72c:	bf18      	it	ne
 800c72e:	2300      	movne	r3, #0
 800c730:	eba6 0807 	sub.w	r8, r6, r7
 800c734:	608b      	str	r3, [r1, #8]
 800c736:	f1b8 0f00 	cmp.w	r8, #0
 800c73a:	dd9c      	ble.n	800c676 <__sflush_r+0x1a>
 800c73c:	6a21      	ldr	r1, [r4, #32]
 800c73e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c740:	4643      	mov	r3, r8
 800c742:	463a      	mov	r2, r7
 800c744:	4628      	mov	r0, r5
 800c746:	47b0      	blx	r6
 800c748:	2800      	cmp	r0, #0
 800c74a:	dc06      	bgt.n	800c75a <__sflush_r+0xfe>
 800c74c:	89a3      	ldrh	r3, [r4, #12]
 800c74e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c752:	81a3      	strh	r3, [r4, #12]
 800c754:	f04f 30ff 	mov.w	r0, #4294967295
 800c758:	e78e      	b.n	800c678 <__sflush_r+0x1c>
 800c75a:	4407      	add	r7, r0
 800c75c:	eba8 0800 	sub.w	r8, r8, r0
 800c760:	e7e9      	b.n	800c736 <__sflush_r+0xda>
 800c762:	bf00      	nop
 800c764:	dfbffffe 	.word	0xdfbffffe

0800c768 <_fflush_r>:
 800c768:	b538      	push	{r3, r4, r5, lr}
 800c76a:	690b      	ldr	r3, [r1, #16]
 800c76c:	4605      	mov	r5, r0
 800c76e:	460c      	mov	r4, r1
 800c770:	b913      	cbnz	r3, 800c778 <_fflush_r+0x10>
 800c772:	2500      	movs	r5, #0
 800c774:	4628      	mov	r0, r5
 800c776:	bd38      	pop	{r3, r4, r5, pc}
 800c778:	b118      	cbz	r0, 800c782 <_fflush_r+0x1a>
 800c77a:	6a03      	ldr	r3, [r0, #32]
 800c77c:	b90b      	cbnz	r3, 800c782 <_fflush_r+0x1a>
 800c77e:	f7fd ff7f 	bl	800a680 <__sinit>
 800c782:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c786:	2b00      	cmp	r3, #0
 800c788:	d0f3      	beq.n	800c772 <_fflush_r+0xa>
 800c78a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c78c:	07d0      	lsls	r0, r2, #31
 800c78e:	d404      	bmi.n	800c79a <_fflush_r+0x32>
 800c790:	0599      	lsls	r1, r3, #22
 800c792:	d402      	bmi.n	800c79a <_fflush_r+0x32>
 800c794:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c796:	f7fe fa51 	bl	800ac3c <__retarget_lock_acquire_recursive>
 800c79a:	4628      	mov	r0, r5
 800c79c:	4621      	mov	r1, r4
 800c79e:	f7ff ff5d 	bl	800c65c <__sflush_r>
 800c7a2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c7a4:	07da      	lsls	r2, r3, #31
 800c7a6:	4605      	mov	r5, r0
 800c7a8:	d4e4      	bmi.n	800c774 <_fflush_r+0xc>
 800c7aa:	89a3      	ldrh	r3, [r4, #12]
 800c7ac:	059b      	lsls	r3, r3, #22
 800c7ae:	d4e1      	bmi.n	800c774 <_fflush_r+0xc>
 800c7b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c7b2:	f7fe fa44 	bl	800ac3e <__retarget_lock_release_recursive>
 800c7b6:	e7dd      	b.n	800c774 <_fflush_r+0xc>

0800c7b8 <__swhatbuf_r>:
 800c7b8:	b570      	push	{r4, r5, r6, lr}
 800c7ba:	460c      	mov	r4, r1
 800c7bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c7c0:	2900      	cmp	r1, #0
 800c7c2:	b096      	sub	sp, #88	; 0x58
 800c7c4:	4615      	mov	r5, r2
 800c7c6:	461e      	mov	r6, r3
 800c7c8:	da0d      	bge.n	800c7e6 <__swhatbuf_r+0x2e>
 800c7ca:	89a3      	ldrh	r3, [r4, #12]
 800c7cc:	f013 0f80 	tst.w	r3, #128	; 0x80
 800c7d0:	f04f 0100 	mov.w	r1, #0
 800c7d4:	bf0c      	ite	eq
 800c7d6:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800c7da:	2340      	movne	r3, #64	; 0x40
 800c7dc:	2000      	movs	r0, #0
 800c7de:	6031      	str	r1, [r6, #0]
 800c7e0:	602b      	str	r3, [r5, #0]
 800c7e2:	b016      	add	sp, #88	; 0x58
 800c7e4:	bd70      	pop	{r4, r5, r6, pc}
 800c7e6:	466a      	mov	r2, sp
 800c7e8:	f000 f848 	bl	800c87c <_fstat_r>
 800c7ec:	2800      	cmp	r0, #0
 800c7ee:	dbec      	blt.n	800c7ca <__swhatbuf_r+0x12>
 800c7f0:	9901      	ldr	r1, [sp, #4]
 800c7f2:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800c7f6:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800c7fa:	4259      	negs	r1, r3
 800c7fc:	4159      	adcs	r1, r3
 800c7fe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c802:	e7eb      	b.n	800c7dc <__swhatbuf_r+0x24>

0800c804 <__smakebuf_r>:
 800c804:	898b      	ldrh	r3, [r1, #12]
 800c806:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c808:	079d      	lsls	r5, r3, #30
 800c80a:	4606      	mov	r6, r0
 800c80c:	460c      	mov	r4, r1
 800c80e:	d507      	bpl.n	800c820 <__smakebuf_r+0x1c>
 800c810:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c814:	6023      	str	r3, [r4, #0]
 800c816:	6123      	str	r3, [r4, #16]
 800c818:	2301      	movs	r3, #1
 800c81a:	6163      	str	r3, [r4, #20]
 800c81c:	b002      	add	sp, #8
 800c81e:	bd70      	pop	{r4, r5, r6, pc}
 800c820:	ab01      	add	r3, sp, #4
 800c822:	466a      	mov	r2, sp
 800c824:	f7ff ffc8 	bl	800c7b8 <__swhatbuf_r>
 800c828:	9900      	ldr	r1, [sp, #0]
 800c82a:	4605      	mov	r5, r0
 800c82c:	4630      	mov	r0, r6
 800c82e:	f7fd f9bb 	bl	8009ba8 <_malloc_r>
 800c832:	b948      	cbnz	r0, 800c848 <__smakebuf_r+0x44>
 800c834:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c838:	059a      	lsls	r2, r3, #22
 800c83a:	d4ef      	bmi.n	800c81c <__smakebuf_r+0x18>
 800c83c:	f023 0303 	bic.w	r3, r3, #3
 800c840:	f043 0302 	orr.w	r3, r3, #2
 800c844:	81a3      	strh	r3, [r4, #12]
 800c846:	e7e3      	b.n	800c810 <__smakebuf_r+0xc>
 800c848:	89a3      	ldrh	r3, [r4, #12]
 800c84a:	6020      	str	r0, [r4, #0]
 800c84c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c850:	81a3      	strh	r3, [r4, #12]
 800c852:	9b00      	ldr	r3, [sp, #0]
 800c854:	6163      	str	r3, [r4, #20]
 800c856:	9b01      	ldr	r3, [sp, #4]
 800c858:	6120      	str	r0, [r4, #16]
 800c85a:	b15b      	cbz	r3, 800c874 <__smakebuf_r+0x70>
 800c85c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c860:	4630      	mov	r0, r6
 800c862:	f000 f81d 	bl	800c8a0 <_isatty_r>
 800c866:	b128      	cbz	r0, 800c874 <__smakebuf_r+0x70>
 800c868:	89a3      	ldrh	r3, [r4, #12]
 800c86a:	f023 0303 	bic.w	r3, r3, #3
 800c86e:	f043 0301 	orr.w	r3, r3, #1
 800c872:	81a3      	strh	r3, [r4, #12]
 800c874:	89a3      	ldrh	r3, [r4, #12]
 800c876:	431d      	orrs	r5, r3
 800c878:	81a5      	strh	r5, [r4, #12]
 800c87a:	e7cf      	b.n	800c81c <__smakebuf_r+0x18>

0800c87c <_fstat_r>:
 800c87c:	b538      	push	{r3, r4, r5, lr}
 800c87e:	4d07      	ldr	r5, [pc, #28]	; (800c89c <_fstat_r+0x20>)
 800c880:	2300      	movs	r3, #0
 800c882:	4604      	mov	r4, r0
 800c884:	4608      	mov	r0, r1
 800c886:	4611      	mov	r1, r2
 800c888:	602b      	str	r3, [r5, #0]
 800c88a:	f7f7 fd8d 	bl	80043a8 <_fstat>
 800c88e:	1c43      	adds	r3, r0, #1
 800c890:	d102      	bne.n	800c898 <_fstat_r+0x1c>
 800c892:	682b      	ldr	r3, [r5, #0]
 800c894:	b103      	cbz	r3, 800c898 <_fstat_r+0x1c>
 800c896:	6023      	str	r3, [r4, #0]
 800c898:	bd38      	pop	{r3, r4, r5, pc}
 800c89a:	bf00      	nop
 800c89c:	20000e28 	.word	0x20000e28

0800c8a0 <_isatty_r>:
 800c8a0:	b538      	push	{r3, r4, r5, lr}
 800c8a2:	4d06      	ldr	r5, [pc, #24]	; (800c8bc <_isatty_r+0x1c>)
 800c8a4:	2300      	movs	r3, #0
 800c8a6:	4604      	mov	r4, r0
 800c8a8:	4608      	mov	r0, r1
 800c8aa:	602b      	str	r3, [r5, #0]
 800c8ac:	f7f7 fd8c 	bl	80043c8 <_isatty>
 800c8b0:	1c43      	adds	r3, r0, #1
 800c8b2:	d102      	bne.n	800c8ba <_isatty_r+0x1a>
 800c8b4:	682b      	ldr	r3, [r5, #0]
 800c8b6:	b103      	cbz	r3, 800c8ba <_isatty_r+0x1a>
 800c8b8:	6023      	str	r3, [r4, #0]
 800c8ba:	bd38      	pop	{r3, r4, r5, pc}
 800c8bc:	20000e28 	.word	0x20000e28

0800c8c0 <__assert_func>:
 800c8c0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c8c2:	4614      	mov	r4, r2
 800c8c4:	461a      	mov	r2, r3
 800c8c6:	4b09      	ldr	r3, [pc, #36]	; (800c8ec <__assert_func+0x2c>)
 800c8c8:	681b      	ldr	r3, [r3, #0]
 800c8ca:	4605      	mov	r5, r0
 800c8cc:	68d8      	ldr	r0, [r3, #12]
 800c8ce:	b14c      	cbz	r4, 800c8e4 <__assert_func+0x24>
 800c8d0:	4b07      	ldr	r3, [pc, #28]	; (800c8f0 <__assert_func+0x30>)
 800c8d2:	9100      	str	r1, [sp, #0]
 800c8d4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c8d8:	4906      	ldr	r1, [pc, #24]	; (800c8f4 <__assert_func+0x34>)
 800c8da:	462b      	mov	r3, r5
 800c8dc:	f000 f854 	bl	800c988 <fiprintf>
 800c8e0:	f7fd f92a 	bl	8009b38 <abort>
 800c8e4:	4b04      	ldr	r3, [pc, #16]	; (800c8f8 <__assert_func+0x38>)
 800c8e6:	461c      	mov	r4, r3
 800c8e8:	e7f3      	b.n	800c8d2 <__assert_func+0x12>
 800c8ea:	bf00      	nop
 800c8ec:	200001d4 	.word	0x200001d4
 800c8f0:	0800db45 	.word	0x0800db45
 800c8f4:	0800db52 	.word	0x0800db52
 800c8f8:	0800db80 	.word	0x0800db80

0800c8fc <_calloc_r>:
 800c8fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c8fe:	fba1 2402 	umull	r2, r4, r1, r2
 800c902:	b94c      	cbnz	r4, 800c918 <_calloc_r+0x1c>
 800c904:	4611      	mov	r1, r2
 800c906:	9201      	str	r2, [sp, #4]
 800c908:	f7fd f94e 	bl	8009ba8 <_malloc_r>
 800c90c:	9a01      	ldr	r2, [sp, #4]
 800c90e:	4605      	mov	r5, r0
 800c910:	b930      	cbnz	r0, 800c920 <_calloc_r+0x24>
 800c912:	4628      	mov	r0, r5
 800c914:	b003      	add	sp, #12
 800c916:	bd30      	pop	{r4, r5, pc}
 800c918:	220c      	movs	r2, #12
 800c91a:	6002      	str	r2, [r0, #0]
 800c91c:	2500      	movs	r5, #0
 800c91e:	e7f8      	b.n	800c912 <_calloc_r+0x16>
 800c920:	4621      	mov	r1, r4
 800c922:	f7fe f8a7 	bl	800aa74 <memset>
 800c926:	e7f4      	b.n	800c912 <_calloc_r+0x16>

0800c928 <_realloc_r>:
 800c928:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c92c:	4680      	mov	r8, r0
 800c92e:	4614      	mov	r4, r2
 800c930:	460e      	mov	r6, r1
 800c932:	b921      	cbnz	r1, 800c93e <_realloc_r+0x16>
 800c934:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c938:	4611      	mov	r1, r2
 800c93a:	f7fd b935 	b.w	8009ba8 <_malloc_r>
 800c93e:	b92a      	cbnz	r2, 800c94c <_realloc_r+0x24>
 800c940:	f7ff f808 	bl	800b954 <_free_r>
 800c944:	4625      	mov	r5, r4
 800c946:	4628      	mov	r0, r5
 800c948:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c94c:	f000 f82e 	bl	800c9ac <_malloc_usable_size_r>
 800c950:	4284      	cmp	r4, r0
 800c952:	4607      	mov	r7, r0
 800c954:	d802      	bhi.n	800c95c <_realloc_r+0x34>
 800c956:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800c95a:	d812      	bhi.n	800c982 <_realloc_r+0x5a>
 800c95c:	4621      	mov	r1, r4
 800c95e:	4640      	mov	r0, r8
 800c960:	f7fd f922 	bl	8009ba8 <_malloc_r>
 800c964:	4605      	mov	r5, r0
 800c966:	2800      	cmp	r0, #0
 800c968:	d0ed      	beq.n	800c946 <_realloc_r+0x1e>
 800c96a:	42bc      	cmp	r4, r7
 800c96c:	4622      	mov	r2, r4
 800c96e:	4631      	mov	r1, r6
 800c970:	bf28      	it	cs
 800c972:	463a      	movcs	r2, r7
 800c974:	f7fe f964 	bl	800ac40 <memcpy>
 800c978:	4631      	mov	r1, r6
 800c97a:	4640      	mov	r0, r8
 800c97c:	f7fe ffea 	bl	800b954 <_free_r>
 800c980:	e7e1      	b.n	800c946 <_realloc_r+0x1e>
 800c982:	4635      	mov	r5, r6
 800c984:	e7df      	b.n	800c946 <_realloc_r+0x1e>
	...

0800c988 <fiprintf>:
 800c988:	b40e      	push	{r1, r2, r3}
 800c98a:	b503      	push	{r0, r1, lr}
 800c98c:	4601      	mov	r1, r0
 800c98e:	ab03      	add	r3, sp, #12
 800c990:	4805      	ldr	r0, [pc, #20]	; (800c9a8 <fiprintf+0x20>)
 800c992:	f853 2b04 	ldr.w	r2, [r3], #4
 800c996:	6800      	ldr	r0, [r0, #0]
 800c998:	9301      	str	r3, [sp, #4]
 800c99a:	f7ff fd45 	bl	800c428 <_vfiprintf_r>
 800c99e:	b002      	add	sp, #8
 800c9a0:	f85d eb04 	ldr.w	lr, [sp], #4
 800c9a4:	b003      	add	sp, #12
 800c9a6:	4770      	bx	lr
 800c9a8:	200001d4 	.word	0x200001d4

0800c9ac <_malloc_usable_size_r>:
 800c9ac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c9b0:	1f18      	subs	r0, r3, #4
 800c9b2:	2b00      	cmp	r3, #0
 800c9b4:	bfbc      	itt	lt
 800c9b6:	580b      	ldrlt	r3, [r1, r0]
 800c9b8:	18c0      	addlt	r0, r0, r3
 800c9ba:	4770      	bx	lr

0800c9bc <_init>:
 800c9bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c9be:	bf00      	nop
 800c9c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c9c2:	bc08      	pop	{r3}
 800c9c4:	469e      	mov	lr, r3
 800c9c6:	4770      	bx	lr

0800c9c8 <_fini>:
 800c9c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c9ca:	bf00      	nop
 800c9cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c9ce:	bc08      	pop	{r3}
 800c9d0:	469e      	mov	lr, r3
 800c9d2:	4770      	bx	lr
